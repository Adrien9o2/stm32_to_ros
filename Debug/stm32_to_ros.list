
stm32_to_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c3c  08016dd0  08016dd0  00026dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000156c  08018a0c  08018a0c  00028a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000fe0  08019f78  08019f78  00029f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801af58  0801af58  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801af58  0801af58  0002af58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801af64  0801af64  0002af64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801af6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200001dc  0801b148  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0801b148  0003056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00039391  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a83  00000000  00000000  000695e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a10  00000000  00000000  0006e068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000209f  00000000  00000000  00070a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c9f  00000000  00000000  00072b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e990  00000000  00000000  0009b7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f395e  00000000  00000000  000ba146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000fc14  00000000  00000000  001adaa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001bd6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016db8 	.word	0x08016db8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08016db8 	.word	0x08016db8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f001 b8de 	b.w	8001e7c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <selfrel_offset31>:
 8000fa0:	6803      	ldr	r3, [r0, #0]
 8000fa2:	005a      	lsls	r2, r3, #1
 8000fa4:	bf4c      	ite	mi
 8000fa6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000faa:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000fae:	4418      	add	r0, r3
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <search_EIT_table>:
 8000fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fb8:	b329      	cbz	r1, 8001006 <search_EIT_table+0x52>
 8000fba:	1e4f      	subs	r7, r1, #1
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	4615      	mov	r5, r2
 8000fc0:	463e      	mov	r6, r7
 8000fc2:	f04f 0800 	mov.w	r8, #0
 8000fc6:	eb08 0106 	add.w	r1, r8, r6
 8000fca:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fce:	1049      	asrs	r1, r1, #1
 8000fd0:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000fd4:	4648      	mov	r0, r9
 8000fd6:	f7ff ffe3 	bl	8000fa0 <selfrel_offset31>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	00c8      	lsls	r0, r1, #3
 8000fde:	3008      	adds	r0, #8
 8000fe0:	428f      	cmp	r7, r1
 8000fe2:	4420      	add	r0, r4
 8000fe4:	d009      	beq.n	8000ffa <search_EIT_table+0x46>
 8000fe6:	42ab      	cmp	r3, r5
 8000fe8:	d809      	bhi.n	8000ffe <search_EIT_table+0x4a>
 8000fea:	f7ff ffd9 	bl	8000fa0 <selfrel_offset31>
 8000fee:	3801      	subs	r0, #1
 8000ff0:	42a8      	cmp	r0, r5
 8000ff2:	d20a      	bcs.n	800100a <search_EIT_table+0x56>
 8000ff4:	f101 0801 	add.w	r8, r1, #1
 8000ff8:	e7e5      	b.n	8000fc6 <search_EIT_table+0x12>
 8000ffa:	42ab      	cmp	r3, r5
 8000ffc:	d905      	bls.n	800100a <search_EIT_table+0x56>
 8000ffe:	4588      	cmp	r8, r1
 8001000:	d001      	beq.n	8001006 <search_EIT_table+0x52>
 8001002:	1e4e      	subs	r6, r1, #1
 8001004:	e7df      	b.n	8000fc6 <search_EIT_table+0x12>
 8001006:	f04f 0900 	mov.w	r9, #0
 800100a:	4648      	mov	r0, r9
 800100c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001010 <__gnu_unwind_get_pr_addr>:
 8001010:	2801      	cmp	r0, #1
 8001012:	d007      	beq.n	8001024 <__gnu_unwind_get_pr_addr+0x14>
 8001014:	2802      	cmp	r0, #2
 8001016:	d007      	beq.n	8001028 <__gnu_unwind_get_pr_addr+0x18>
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__gnu_unwind_get_pr_addr+0x1c>)
 800101a:	2800      	cmp	r0, #0
 800101c:	bf0c      	ite	eq
 800101e:	4618      	moveq	r0, r3
 8001020:	2000      	movne	r0, #0
 8001022:	4770      	bx	lr
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <__gnu_unwind_get_pr_addr+0x20>)
 8001026:	4770      	bx	lr
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <__gnu_unwind_get_pr_addr+0x24>)
 800102a:	4770      	bx	lr
 800102c:	080016e5 	.word	0x080016e5
 8001030:	080016e9 	.word	0x080016e9
 8001034:	080016ed 	.word	0x080016ed

08001038 <get_eit_entry>:
 8001038:	b530      	push	{r4, r5, lr}
 800103a:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <get_eit_entry+0x8c>)
 800103c:	b083      	sub	sp, #12
 800103e:	4604      	mov	r4, r0
 8001040:	1e8d      	subs	r5, r1, #2
 8001042:	b343      	cbz	r3, 8001096 <get_eit_entry+0x5e>
 8001044:	a901      	add	r1, sp, #4
 8001046:	4628      	mov	r0, r5
 8001048:	f3af 8000 	nop.w
 800104c:	b1f0      	cbz	r0, 800108c <get_eit_entry+0x54>
 800104e:	9901      	ldr	r1, [sp, #4]
 8001050:	462a      	mov	r2, r5
 8001052:	f7ff ffaf 	bl	8000fb4 <search_EIT_table>
 8001056:	4601      	mov	r1, r0
 8001058:	b1c0      	cbz	r0, 800108c <get_eit_entry+0x54>
 800105a:	f7ff ffa1 	bl	8000fa0 <selfrel_offset31>
 800105e:	684b      	ldr	r3, [r1, #4]
 8001060:	64a0      	str	r0, [r4, #72]	; 0x48
 8001062:	2b01      	cmp	r3, #1
 8001064:	d02b      	beq.n	80010be <get_eit_entry+0x86>
 8001066:	2b00      	cmp	r3, #0
 8001068:	f101 0004 	add.w	r0, r1, #4
 800106c:	db25      	blt.n	80010ba <get_eit_entry+0x82>
 800106e:	f7ff ff97 	bl	8000fa0 <selfrel_offset31>
 8001072:	2300      	movs	r3, #0
 8001074:	6523      	str	r3, [r4, #80]	; 0x50
 8001076:	6803      	ldr	r3, [r0, #0]
 8001078:	64e0      	str	r0, [r4, #76]	; 0x4c
 800107a:	2b00      	cmp	r3, #0
 800107c:	db12      	blt.n	80010a4 <get_eit_entry+0x6c>
 800107e:	f7ff ff8f 	bl	8000fa0 <selfrel_offset31>
 8001082:	4603      	mov	r3, r0
 8001084:	2000      	movs	r0, #0
 8001086:	6123      	str	r3, [r4, #16]
 8001088:	b003      	add	sp, #12
 800108a:	bd30      	pop	{r4, r5, pc}
 800108c:	2300      	movs	r3, #0
 800108e:	2009      	movs	r0, #9
 8001090:	6123      	str	r3, [r4, #16]
 8001092:	b003      	add	sp, #12
 8001094:	bd30      	pop	{r4, r5, pc}
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <get_eit_entry+0x90>)
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <get_eit_entry+0x94>)
 800109a:	1ac9      	subs	r1, r1, r3
 800109c:	10c9      	asrs	r1, r1, #3
 800109e:	4618      	mov	r0, r3
 80010a0:	9101      	str	r1, [sp, #4]
 80010a2:	e7d5      	b.n	8001050 <get_eit_entry+0x18>
 80010a4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80010a8:	f7ff ffb2 	bl	8001010 <__gnu_unwind_get_pr_addr>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	bf0c      	ite	eq
 80010b0:	2009      	moveq	r0, #9
 80010b2:	2000      	movne	r0, #0
 80010b4:	6123      	str	r3, [r4, #16]
 80010b6:	b003      	add	sp, #12
 80010b8:	bd30      	pop	{r4, r5, pc}
 80010ba:	2301      	movs	r3, #1
 80010bc:	e7da      	b.n	8001074 <get_eit_entry+0x3c>
 80010be:	2300      	movs	r3, #0
 80010c0:	2005      	movs	r0, #5
 80010c2:	e7e0      	b.n	8001086 <get_eit_entry+0x4e>
 80010c4:	00000000 	.word	0x00000000
 80010c8:	08019f78 	.word	0x08019f78
 80010cc:	0801af58 	.word	0x0801af58

080010d0 <restore_non_core_regs>:
 80010d0:	6803      	ldr	r3, [r0, #0]
 80010d2:	07da      	lsls	r2, r3, #31
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4604      	mov	r4, r0
 80010d8:	d406      	bmi.n	80010e8 <restore_non_core_regs+0x18>
 80010da:	079b      	lsls	r3, r3, #30
 80010dc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80010e0:	d509      	bpl.n	80010f6 <restore_non_core_regs+0x26>
 80010e2:	f000 fc71 	bl	80019c8 <__gnu_Unwind_Restore_VFP_D>
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	0759      	lsls	r1, r3, #29
 80010ea:	d509      	bpl.n	8001100 <restore_non_core_regs+0x30>
 80010ec:	071a      	lsls	r2, r3, #28
 80010ee:	d50e      	bpl.n	800110e <restore_non_core_regs+0x3e>
 80010f0:	06db      	lsls	r3, r3, #27
 80010f2:	d513      	bpl.n	800111c <restore_non_core_regs+0x4c>
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	f000 fc5f 	bl	80019b8 <__gnu_Unwind_Restore_VFP>
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	0759      	lsls	r1, r3, #29
 80010fe:	d4f5      	bmi.n	80010ec <restore_non_core_regs+0x1c>
 8001100:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001104:	f000 fc68 	bl	80019d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	071a      	lsls	r2, r3, #28
 800110c:	d4f0      	bmi.n	80010f0 <restore_non_core_regs+0x20>
 800110e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001112:	f000 fc69 	bl	80019e8 <__gnu_Unwind_Restore_WMMXD>
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	06db      	lsls	r3, r3, #27
 800111a:	d4eb      	bmi.n	80010f4 <restore_non_core_regs+0x24>
 800111c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001124:	f000 bca4 	b.w	8001a70 <__gnu_Unwind_Restore_WMMXC>

08001128 <__gnu_unwind_24bit.constprop.0>:
 8001128:	2009      	movs	r0, #9
 800112a:	4770      	bx	lr

0800112c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800112c:	4603      	mov	r3, r0
 800112e:	6800      	ldr	r0, [r0, #0]
 8001130:	b100      	cbz	r0, 8001134 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8001132:	4418      	add	r0, r3
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <_Unwind_DebugHook>:
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <unwind_phase2>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	4604      	mov	r4, r0
 8001140:	460e      	mov	r6, r1
 8001142:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff ff77 	bl	8001038 <get_eit_entry>
 800114a:	4605      	mov	r5, r0
 800114c:	b988      	cbnz	r0, 8001172 <unwind_phase2+0x36>
 800114e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8001150:	6162      	str	r2, [r4, #20]
 8001152:	6923      	ldr	r3, [r4, #16]
 8001154:	4632      	mov	r2, r6
 8001156:	4621      	mov	r1, r4
 8001158:	2001      	movs	r0, #1
 800115a:	4798      	blx	r3
 800115c:	2808      	cmp	r0, #8
 800115e:	d0f0      	beq.n	8001142 <unwind_phase2+0x6>
 8001160:	2807      	cmp	r0, #7
 8001162:	d106      	bne.n	8001172 <unwind_phase2+0x36>
 8001164:	4628      	mov	r0, r5
 8001166:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001168:	f7ff ffe6 	bl	8001138 <_Unwind_DebugHook>
 800116c:	1d30      	adds	r0, r6, #4
 800116e:	f000 fc17 	bl	80019a0 <__restore_core_regs>
 8001172:	f012 ff8b 	bl	801408c <abort>
 8001176:	bf00      	nop

08001178 <unwind_phase2_forced>:
 8001178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800117c:	1d0d      	adds	r5, r1, #4
 800117e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8001182:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8001186:	4607      	mov	r7, r0
 8001188:	4614      	mov	r4, r2
 800118a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8001190:	f10d 0c0c 	add.w	ip, sp, #12
 8001194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a8:	ae02      	add	r6, sp, #8
 80011aa:	f04f 0e00 	mov.w	lr, #0
 80011ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011b2:	f8c6 e000 	str.w	lr, [r6]
 80011b6:	e020      	b.n	80011fa <unwind_phase2_forced+0x82>
 80011b8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011c0:	4631      	mov	r1, r6
 80011c2:	a87a      	add	r0, sp, #488	; 0x1e8
 80011c4:	f013 fe9f 	bl	8014f06 <memcpy>
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	aa7a      	add	r2, sp, #488	; 0x1e8
 80011cc:	4639      	mov	r1, r7
 80011ce:	4650      	mov	r0, sl
 80011d0:	4798      	blx	r3
 80011d2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80011d4:	6473      	str	r3, [r6, #68]	; 0x44
 80011d6:	4621      	mov	r1, r4
 80011d8:	e9cd 6900 	strd	r6, r9, [sp]
 80011dc:	4605      	mov	r5, r0
 80011de:	463b      	mov	r3, r7
 80011e0:	463a      	mov	r2, r7
 80011e2:	2001      	movs	r0, #1
 80011e4:	47c0      	blx	r8
 80011e6:	4604      	mov	r4, r0
 80011e8:	b9e0      	cbnz	r0, 8001224 <unwind_phase2_forced+0xac>
 80011ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011ee:	a97a      	add	r1, sp, #488	; 0x1e8
 80011f0:	4630      	mov	r0, r6
 80011f2:	f013 fe88 	bl	8014f06 <memcpy>
 80011f6:	2d08      	cmp	r5, #8
 80011f8:	d11a      	bne.n	8001230 <unwind_phase2_forced+0xb8>
 80011fa:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80011fc:	4638      	mov	r0, r7
 80011fe:	f7ff ff1b 	bl	8001038 <get_eit_entry>
 8001202:	3409      	adds	r4, #9
 8001204:	fa5f fa84 	uxtb.w	sl, r4
 8001208:	4605      	mov	r5, r0
 800120a:	2800      	cmp	r0, #0
 800120c:	d0d4      	beq.n	80011b8 <unwind_phase2_forced+0x40>
 800120e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001210:	6473      	str	r3, [r6, #68]	; 0x44
 8001212:	463a      	mov	r2, r7
 8001214:	e9cd 6900 	strd	r6, r9, [sp]
 8001218:	463b      	mov	r3, r7
 800121a:	f04a 0110 	orr.w	r1, sl, #16
 800121e:	2001      	movs	r0, #1
 8001220:	47c0      	blx	r8
 8001222:	b100      	cbz	r0, 8001226 <unwind_phase2_forced+0xae>
 8001224:	2509      	movs	r5, #9
 8001226:	4628      	mov	r0, r5
 8001228:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800122c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001230:	2d07      	cmp	r5, #7
 8001232:	d1f7      	bne.n	8001224 <unwind_phase2_forced+0xac>
 8001234:	4620      	mov	r0, r4
 8001236:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001238:	f7ff ff7e 	bl	8001138 <_Unwind_DebugHook>
 800123c:	a803      	add	r0, sp, #12
 800123e:	f000 fbaf 	bl	80019a0 <__restore_core_regs>
 8001242:	bf00      	nop

08001244 <_Unwind_GetCFA>:
 8001244:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001246:	4770      	bx	lr

08001248 <__gnu_Unwind_RaiseException>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800124c:	640b      	str	r3, [r1, #64]	; 0x40
 800124e:	f101 0c04 	add.w	ip, r1, #4
 8001252:	460e      	mov	r6, r1
 8001254:	4605      	mov	r5, r0
 8001256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800125a:	b0f9      	sub	sp, #484	; 0x1e4
 800125c:	ac01      	add	r4, sp, #4
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001270:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001278:	9700      	str	r7, [sp, #0]
 800127a:	e006      	b.n	800128a <__gnu_Unwind_RaiseException+0x42>
 800127c:	692b      	ldr	r3, [r5, #16]
 800127e:	466a      	mov	r2, sp
 8001280:	4629      	mov	r1, r5
 8001282:	4798      	blx	r3
 8001284:	2808      	cmp	r0, #8
 8001286:	4604      	mov	r4, r0
 8001288:	d108      	bne.n	800129c <__gnu_Unwind_RaiseException+0x54>
 800128a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff fed3 	bl	8001038 <get_eit_entry>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0f2      	beq.n	800127c <__gnu_Unwind_RaiseException+0x34>
 8001296:	2009      	movs	r0, #9
 8001298:	b079      	add	sp, #484	; 0x1e4
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129c:	4668      	mov	r0, sp
 800129e:	f7ff ff17 	bl	80010d0 <restore_non_core_regs>
 80012a2:	2c06      	cmp	r4, #6
 80012a4:	d1f7      	bne.n	8001296 <__gnu_Unwind_RaiseException+0x4e>
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff ff47 	bl	800113c <unwind_phase2>
 80012ae:	bf00      	nop

080012b0 <__gnu_Unwind_ForcedUnwind>:
 80012b0:	60c1      	str	r1, [r0, #12]
 80012b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012b4:	6182      	str	r2, [r0, #24]
 80012b6:	6419      	str	r1, [r3, #64]	; 0x40
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	e75c      	b.n	8001178 <unwind_phase2_forced>
 80012be:	bf00      	nop

080012c0 <__gnu_Unwind_Resume>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	68c6      	ldr	r6, [r0, #12]
 80012c4:	6943      	ldr	r3, [r0, #20]
 80012c6:	640b      	str	r3, [r1, #64]	; 0x40
 80012c8:	b9ae      	cbnz	r6, 80012f6 <__gnu_Unwind_Resume+0x36>
 80012ca:	6903      	ldr	r3, [r0, #16]
 80012cc:	460a      	mov	r2, r1
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4601      	mov	r1, r0
 80012d4:	2002      	movs	r0, #2
 80012d6:	4798      	blx	r3
 80012d8:	2807      	cmp	r0, #7
 80012da:	d005      	beq.n	80012e8 <__gnu_Unwind_Resume+0x28>
 80012dc:	2808      	cmp	r0, #8
 80012de:	d10f      	bne.n	8001300 <__gnu_Unwind_Resume+0x40>
 80012e0:	4629      	mov	r1, r5
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff ff2a 	bl	800113c <unwind_phase2>
 80012e8:	4630      	mov	r0, r6
 80012ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80012ec:	f7ff ff24 	bl	8001138 <_Unwind_DebugHook>
 80012f0:	1d28      	adds	r0, r5, #4
 80012f2:	f000 fb55 	bl	80019a0 <__restore_core_regs>
 80012f6:	2201      	movs	r2, #1
 80012f8:	f7ff ff3e 	bl	8001178 <unwind_phase2_forced>
 80012fc:	f012 fec6 	bl	801408c <abort>
 8001300:	f012 fec4 	bl	801408c <abort>

08001304 <__gnu_Unwind_Resume_or_Rethrow>:
 8001304:	68c2      	ldr	r2, [r0, #12]
 8001306:	b11a      	cbz	r2, 8001310 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001308:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800130a:	640a      	str	r2, [r1, #64]	; 0x40
 800130c:	2200      	movs	r2, #0
 800130e:	e733      	b.n	8001178 <unwind_phase2_forced>
 8001310:	e79a      	b.n	8001248 <__gnu_Unwind_RaiseException>
 8001312:	bf00      	nop

08001314 <_Unwind_Complete>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_DeleteException>:
 8001318:	6883      	ldr	r3, [r0, #8]
 800131a:	4601      	mov	r1, r0
 800131c:	b10b      	cbz	r3, 8001322 <_Unwind_DeleteException+0xa>
 800131e:	2001      	movs	r0, #1
 8001320:	4718      	bx	r3
 8001322:	4770      	bx	lr

08001324 <_Unwind_VRS_Get>:
 8001324:	2901      	cmp	r1, #1
 8001326:	d012      	beq.n	800134e <_Unwind_VRS_Get+0x2a>
 8001328:	d809      	bhi.n	800133e <_Unwind_VRS_Get+0x1a>
 800132a:	b973      	cbnz	r3, 800134a <_Unwind_VRS_Get+0x26>
 800132c:	2a0f      	cmp	r2, #15
 800132e:	d80c      	bhi.n	800134a <_Unwind_VRS_Get+0x26>
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	4618      	mov	r0, r3
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4770      	bx	lr
 800133e:	3903      	subs	r1, #3
 8001340:	2901      	cmp	r1, #1
 8001342:	bf94      	ite	ls
 8001344:	2001      	movls	r0, #1
 8001346:	2002      	movhi	r0, #2
 8001348:	4770      	bx	lr
 800134a:	2002      	movs	r0, #2
 800134c:	4770      	bx	lr
 800134e:	4608      	mov	r0, r1
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <_Unwind_GetGR>:
 8001354:	b500      	push	{lr}
 8001356:	b085      	sub	sp, #20
 8001358:	460a      	mov	r2, r1
 800135a:	2300      	movs	r3, #0
 800135c:	a903      	add	r1, sp, #12
 800135e:	9100      	str	r1, [sp, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff ffdf 	bl	8001324 <_Unwind_VRS_Get>
 8001366:	9803      	ldr	r0, [sp, #12]
 8001368:	b005      	add	sp, #20
 800136a:	f85d fb04 	ldr.w	pc, [sp], #4
 800136e:	bf00      	nop

08001370 <_Unwind_VRS_Set>:
 8001370:	2901      	cmp	r1, #1
 8001372:	d012      	beq.n	800139a <_Unwind_VRS_Set+0x2a>
 8001374:	d809      	bhi.n	800138a <_Unwind_VRS_Set+0x1a>
 8001376:	b973      	cbnz	r3, 8001396 <_Unwind_VRS_Set+0x26>
 8001378:	2a0f      	cmp	r2, #15
 800137a:	d80c      	bhi.n	8001396 <_Unwind_VRS_Set+0x26>
 800137c:	9900      	ldr	r1, [sp, #0]
 800137e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001382:	6809      	ldr	r1, [r1, #0]
 8001384:	6051      	str	r1, [r2, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
 800138a:	3903      	subs	r1, #3
 800138c:	2901      	cmp	r1, #1
 800138e:	bf94      	ite	ls
 8001390:	2001      	movls	r0, #1
 8001392:	2002      	movhi	r0, #2
 8001394:	4770      	bx	lr
 8001396:	2002      	movs	r0, #2
 8001398:	4770      	bx	lr
 800139a:	4608      	mov	r0, r1
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <_Unwind_SetGR>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	2300      	movs	r3, #0
 80013a6:	ac03      	add	r4, sp, #12
 80013a8:	9203      	str	r2, [sp, #12]
 80013aa:	9400      	str	r4, [sp, #0]
 80013ac:	460a      	mov	r2, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff ffde 	bl	8001370 <_Unwind_VRS_Set>
 80013b4:	b004      	add	sp, #16
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <__gnu_Unwind_Backtrace>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	f102 0c04 	add.w	ip, r2, #4
 80013c2:	4605      	mov	r5, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013ca:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80013ce:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80013d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013ea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80013ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013f2:	9616      	str	r6, [sp, #88]	; 0x58
 80013f4:	e010      	b.n	8001418 <__gnu_Unwind_Backtrace+0x60>
 80013f6:	f7ff ffd3 	bl	80013a0 <_Unwind_SetGR>
 80013fa:	4621      	mov	r1, r4
 80013fc:	a816      	add	r0, sp, #88	; 0x58
 80013fe:	47a8      	blx	r5
 8001400:	4603      	mov	r3, r0
 8001402:	aa16      	add	r2, sp, #88	; 0x58
 8001404:	4669      	mov	r1, sp
 8001406:	2008      	movs	r0, #8
 8001408:	b983      	cbnz	r3, 800142c <__gnu_Unwind_Backtrace+0x74>
 800140a:	9b04      	ldr	r3, [sp, #16]
 800140c:	4798      	blx	r3
 800140e:	2805      	cmp	r0, #5
 8001410:	4606      	mov	r6, r0
 8001412:	d00c      	beq.n	800142e <__gnu_Unwind_Backtrace+0x76>
 8001414:	2809      	cmp	r0, #9
 8001416:	d009      	beq.n	800142c <__gnu_Unwind_Backtrace+0x74>
 8001418:	9926      	ldr	r1, [sp, #152]	; 0x98
 800141a:	4668      	mov	r0, sp
 800141c:	f7ff fe0c 	bl	8001038 <get_eit_entry>
 8001420:	4603      	mov	r3, r0
 8001422:	466a      	mov	r2, sp
 8001424:	210c      	movs	r1, #12
 8001426:	a816      	add	r0, sp, #88	; 0x58
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e4      	beq.n	80013f6 <__gnu_Unwind_Backtrace+0x3e>
 800142c:	2609      	movs	r6, #9
 800142e:	a816      	add	r0, sp, #88	; 0x58
 8001430:	f7ff fe4e 	bl	80010d0 <restore_non_core_regs>
 8001434:	4630      	mov	r0, r6
 8001436:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <__gnu_unwind_pr_common>:
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	461e      	mov	r6, r3
 8001446:	f854 3b04 	ldr.w	r3, [r4], #4
 800144a:	9406      	str	r4, [sp, #24]
 800144c:	460d      	mov	r5, r1
 800144e:	4617      	mov	r7, r2
 8001450:	f000 0803 	and.w	r8, r0, #3
 8001454:	2e00      	cmp	r6, #0
 8001456:	d079      	beq.n	800154c <__gnu_unwind_pr_common+0x110>
 8001458:	0c1a      	lsrs	r2, r3, #16
 800145a:	f88d 201d 	strb.w	r2, [sp, #29]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	9305      	str	r3, [sp, #20]
 8001464:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001468:	2302      	movs	r3, #2
 800146a:	f88d 301c 	strb.w	r3, [sp, #28]
 800146e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001470:	f1b8 0f02 	cmp.w	r8, #2
 8001474:	bf08      	it	eq
 8001476:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8001478:	f013 0301 	ands.w	r3, r3, #1
 800147c:	d00c      	beq.n	8001498 <__gnu_unwind_pr_common+0x5c>
 800147e:	a905      	add	r1, sp, #20
 8001480:	4638      	mov	r0, r7
 8001482:	f000 fb8f 	bl	8001ba4 <__gnu_unwind_execute>
 8001486:	b918      	cbnz	r0, 8001490 <__gnu_unwind_pr_common+0x54>
 8001488:	2008      	movs	r0, #8
 800148a:	b009      	add	sp, #36	; 0x24
 800148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001490:	2009      	movs	r0, #9
 8001492:	b009      	add	sp, #36	; 0x24
 8001494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001498:	f8d4 a000 	ldr.w	sl, [r4]
 800149c:	f1ba 0f00 	cmp.w	sl, #0
 80014a0:	d0ed      	beq.n	800147e <__gnu_unwind_pr_common+0x42>
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	f000 0308 	and.w	r3, r0, #8
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2e02      	cmp	r6, #2
 80014ac:	d04a      	beq.n	8001544 <__gnu_unwind_pr_common+0x108>
 80014ae:	f8b4 a000 	ldrh.w	sl, [r4]
 80014b2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80014b6:	3404      	adds	r4, #4
 80014b8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80014ba:	f029 0b01 	bic.w	fp, r9, #1
 80014be:	210f      	movs	r1, #15
 80014c0:	4638      	mov	r0, r7
 80014c2:	449b      	add	fp, r3
 80014c4:	f7ff ff46 	bl	8001354 <_Unwind_GetGR>
 80014c8:	4583      	cmp	fp, r0
 80014ca:	d839      	bhi.n	8001540 <__gnu_unwind_pr_common+0x104>
 80014cc:	f02a 0201 	bic.w	r2, sl, #1
 80014d0:	445a      	add	r2, fp
 80014d2:	4282      	cmp	r2, r0
 80014d4:	bf94      	ite	ls
 80014d6:	2200      	movls	r2, #0
 80014d8:	2201      	movhi	r2, #1
 80014da:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	f00a 0a01 	and.w	sl, sl, #1
 80014e6:	ea43 030a 	orr.w	r3, r3, sl
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d04b      	beq.n	8001586 <__gnu_unwind_pr_common+0x14a>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d032      	beq.n	8001558 <__gnu_unwind_pr_common+0x11c>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1cc      	bne.n	8001490 <__gnu_unwind_pr_common+0x54>
 80014f6:	f1b8 0f00 	cmp.w	r8, #0
 80014fa:	d002      	beq.n	8001502 <__gnu_unwind_pr_common+0xc6>
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	f040 80cd 	bne.w	800169c <__gnu_unwind_pr_common+0x260>
 8001502:	3404      	adds	r4, #4
 8001504:	f8d4 a000 	ldr.w	sl, [r4]
 8001508:	f1ba 0f00 	cmp.w	sl, #0
 800150c:	d1cd      	bne.n	80014aa <__gnu_unwind_pr_common+0x6e>
 800150e:	a905      	add	r1, sp, #20
 8001510:	4638      	mov	r0, r7
 8001512:	f000 fb47 	bl	8001ba4 <__gnu_unwind_execute>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1ba      	bne.n	8001490 <__gnu_unwind_pr_common+0x54>
 800151a:	9b01      	ldr	r3, [sp, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0b3      	beq.n	8001488 <__gnu_unwind_pr_common+0x4c>
 8001520:	210f      	movs	r1, #15
 8001522:	4638      	mov	r0, r7
 8001524:	f7ff ff16 	bl	8001354 <_Unwind_GetGR>
 8001528:	210e      	movs	r1, #14
 800152a:	4602      	mov	r2, r0
 800152c:	4638      	mov	r0, r7
 800152e:	f7ff ff37 	bl	80013a0 <_Unwind_SetGR>
 8001532:	4638      	mov	r0, r7
 8001534:	4a6a      	ldr	r2, [pc, #424]	; (80016e0 <__gnu_unwind_pr_common+0x2a4>)
 8001536:	210f      	movs	r1, #15
 8001538:	f7ff ff32 	bl	80013a0 <_Unwind_SetGR>
 800153c:	2007      	movs	r0, #7
 800153e:	e7a8      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 8001540:	2200      	movs	r2, #0
 8001542:	e7ca      	b.n	80014da <__gnu_unwind_pr_common+0x9e>
 8001544:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8001548:	3408      	adds	r4, #8
 800154a:	e7b5      	b.n	80014b8 <__gnu_unwind_pr_common+0x7c>
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	9305      	str	r3, [sp, #20]
 8001550:	f88d 601d 	strb.w	r6, [sp, #29]
 8001554:	2303      	movs	r3, #3
 8001556:	e788      	b.n	800146a <__gnu_unwind_pr_common+0x2e>
 8001558:	f8d4 9000 	ldr.w	r9, [r4]
 800155c:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
 8001560:	f1b8 0f00 	cmp.w	r8, #0
 8001564:	d146      	bne.n	80015f4 <__gnu_unwind_pr_common+0x1b8>
 8001566:	b12a      	cbz	r2, 8001574 <__gnu_unwind_pr_common+0x138>
 8001568:	9b02      	ldr	r3, [sp, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d05b      	beq.n	8001626 <__gnu_unwind_pr_common+0x1ea>
 800156e:	f1bb 0f00 	cmp.w	fp, #0
 8001572:	d073      	beq.n	800165c <__gnu_unwind_pr_common+0x220>
 8001574:	f1b9 0f00 	cmp.w	r9, #0
 8001578:	da00      	bge.n	800157c <__gnu_unwind_pr_common+0x140>
 800157a:	3404      	adds	r4, #4
 800157c:	f10b 0b01 	add.w	fp, fp, #1
 8001580:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8001584:	e7be      	b.n	8001504 <__gnu_unwind_pr_common+0xc8>
 8001586:	f1b8 0f00 	cmp.w	r8, #0
 800158a:	d119      	bne.n	80015c0 <__gnu_unwind_pr_common+0x184>
 800158c:	b1b2      	cbz	r2, 80015bc <__gnu_unwind_pr_common+0x180>
 800158e:	6861      	ldr	r1, [r4, #4]
 8001590:	6822      	ldr	r2, [r4, #0]
 8001592:	1c88      	adds	r0, r1, #2
 8001594:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001598:	f43f af7a 	beq.w	8001490 <__gnu_unwind_pr_common+0x54>
 800159c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80015a0:	3101      	adds	r1, #1
 80015a2:	9304      	str	r3, [sp, #16]
 80015a4:	f000 808e 	beq.w	80016c4 <__gnu_unwind_pr_common+0x288>
 80015a8:	1d20      	adds	r0, r4, #4
 80015aa:	f7ff fdbf 	bl	800112c <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015ae:	ab04      	add	r3, sp, #16
 80015b0:	4601      	mov	r1, r0
 80015b2:	4628      	mov	r0, r5
 80015b4:	f011 ffb0 	bl	8013518 <__cxa_type_match>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d159      	bne.n	8001670 <__gnu_unwind_pr_common+0x234>
 80015bc:	3408      	adds	r4, #8
 80015be:	e7a1      	b.n	8001504 <__gnu_unwind_pr_common+0xc8>
 80015c0:	210d      	movs	r1, #13
 80015c2:	4638      	mov	r0, r7
 80015c4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80015c8:	f7ff fec4 	bl	8001354 <_Unwind_GetGR>
 80015cc:	4581      	cmp	r9, r0
 80015ce:	d1f5      	bne.n	80015bc <__gnu_unwind_pr_common+0x180>
 80015d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015d2:	429c      	cmp	r4, r3
 80015d4:	d1f2      	bne.n	80015bc <__gnu_unwind_pr_common+0x180>
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff fce2 	bl	8000fa0 <selfrel_offset31>
 80015dc:	210f      	movs	r1, #15
 80015de:	4602      	mov	r2, r0
 80015e0:	4638      	mov	r0, r7
 80015e2:	f7ff fedd 	bl	80013a0 <_Unwind_SetGR>
 80015e6:	4638      	mov	r0, r7
 80015e8:	462a      	mov	r2, r5
 80015ea:	2100      	movs	r1, #0
 80015ec:	f7ff fed8 	bl	80013a0 <_Unwind_SetGR>
 80015f0:	2007      	movs	r0, #7
 80015f2:	e74e      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 80015f4:	210d      	movs	r1, #13
 80015f6:	4638      	mov	r0, r7
 80015f8:	f8d5 a020 	ldr.w	sl, [r5, #32]
 80015fc:	f7ff feaa 	bl	8001354 <_Unwind_GetGR>
 8001600:	4582      	cmp	sl, r0
 8001602:	d1b7      	bne.n	8001574 <__gnu_unwind_pr_common+0x138>
 8001604:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001606:	429c      	cmp	r4, r3
 8001608:	d1b4      	bne.n	8001574 <__gnu_unwind_pr_common+0x138>
 800160a:	2304      	movs	r3, #4
 800160c:	2200      	movs	r2, #0
 800160e:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8001612:	18e3      	adds	r3, r4, r3
 8001614:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8001618:	636b      	str	r3, [r5, #52]	; 0x34
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db59      	blt.n	80016d4 <__gnu_unwind_pr_common+0x298>
 8001620:	2301      	movs	r3, #1
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	e7aa      	b.n	800157c <__gnu_unwind_pr_common+0x140>
 8001626:	4699      	mov	r9, r3
 8001628:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800162c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001630:	f104 0a04 	add.w	sl, r4, #4
 8001634:	46b0      	mov	r8, r6
 8001636:	461e      	mov	r6, r3
 8001638:	e00e      	b.n	8001658 <__gnu_unwind_pr_common+0x21c>
 800163a:	4650      	mov	r0, sl
 800163c:	9604      	str	r6, [sp, #16]
 800163e:	f7ff fd75 	bl	800112c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001642:	2200      	movs	r2, #0
 8001644:	4601      	mov	r1, r0
 8001646:	ab04      	add	r3, sp, #16
 8001648:	4628      	mov	r0, r5
 800164a:	f109 0901 	add.w	r9, r9, #1
 800164e:	f10a 0a04 	add.w	sl, sl, #4
 8001652:	f011 ff61 	bl	8013518 <__cxa_type_match>
 8001656:	b9d8      	cbnz	r0, 8001690 <__gnu_unwind_pr_common+0x254>
 8001658:	45d9      	cmp	r9, fp
 800165a:	d1ee      	bne.n	800163a <__gnu_unwind_pr_common+0x1fe>
 800165c:	210d      	movs	r1, #13
 800165e:	4638      	mov	r0, r7
 8001660:	f7ff fe78 	bl	8001354 <_Unwind_GetGR>
 8001664:	9b04      	ldr	r3, [sp, #16]
 8001666:	6228      	str	r0, [r5, #32]
 8001668:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 800166c:	2006      	movs	r0, #6
 800166e:	e710      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 8001670:	4681      	mov	r9, r0
 8001672:	210d      	movs	r1, #13
 8001674:	4638      	mov	r0, r7
 8001676:	f7ff fe6d 	bl	8001354 <_Unwind_GetGR>
 800167a:	f1b9 0f02 	cmp.w	r9, #2
 800167e:	bf04      	itt	eq
 8001680:	462b      	moveq	r3, r5
 8001682:	9a04      	ldreq	r2, [sp, #16]
 8001684:	6228      	str	r0, [r5, #32]
 8001686:	bf14      	ite	ne
 8001688:	9b04      	ldrne	r3, [sp, #16]
 800168a:	f843 2f2c 	streq.w	r2, [r3, #44]!
 800168e:	e7eb      	b.n	8001668 <__gnu_unwind_pr_common+0x22c>
 8001690:	4646      	mov	r6, r8
 8001692:	f8d4 9000 	ldr.w	r9, [r4]
 8001696:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800169a:	e76b      	b.n	8001574 <__gnu_unwind_pr_common+0x138>
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff fc7f 	bl	8000fa0 <selfrel_offset31>
 80016a2:	3404      	adds	r4, #4
 80016a4:	4602      	mov	r2, r0
 80016a6:	63ac      	str	r4, [r5, #56]	; 0x38
 80016a8:	4628      	mov	r0, r5
 80016aa:	4614      	mov	r4, r2
 80016ac:	f011 ff92 	bl	80135d4 <__cxa_begin_cleanup>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	f43f aeed 	beq.w	8001490 <__gnu_unwind_pr_common+0x54>
 80016b6:	4638      	mov	r0, r7
 80016b8:	4622      	mov	r2, r4
 80016ba:	210f      	movs	r1, #15
 80016bc:	f7ff fe70 	bl	80013a0 <_Unwind_SetGR>
 80016c0:	2007      	movs	r0, #7
 80016c2:	e6e6      	b.n	8001492 <__gnu_unwind_pr_common+0x56>
 80016c4:	210d      	movs	r1, #13
 80016c6:	4638      	mov	r0, r7
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	f7ff fe43 	bl	8001354 <_Unwind_GetGR>
 80016ce:	9b01      	ldr	r3, [sp, #4]
 80016d0:	6228      	str	r0, [r5, #32]
 80016d2:	e7c9      	b.n	8001668 <__gnu_unwind_pr_common+0x22c>
 80016d4:	f10b 0001 	add.w	r0, fp, #1
 80016d8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80016dc:	e77c      	b.n	80015d8 <__gnu_unwind_pr_common+0x19c>
 80016de:	bf00      	nop
 80016e0:	08013fc9 	.word	0x08013fc9

080016e4 <__aeabi_unwind_cpp_pr0>:
 80016e4:	2300      	movs	r3, #0
 80016e6:	e6a9      	b.n	800143c <__gnu_unwind_pr_common>

080016e8 <__aeabi_unwind_cpp_pr1>:
 80016e8:	2301      	movs	r3, #1
 80016ea:	e6a7      	b.n	800143c <__gnu_unwind_pr_common>

080016ec <__aeabi_unwind_cpp_pr2>:
 80016ec:	2302      	movs	r3, #2
 80016ee:	e6a5      	b.n	800143c <__gnu_unwind_pr_common>

080016f0 <_Unwind_VRS_Pop>:
 80016f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f4:	4606      	mov	r6, r0
 80016f6:	b0c3      	sub	sp, #268	; 0x10c
 80016f8:	4691      	mov	r9, r2
 80016fa:	461c      	mov	r4, r3
 80016fc:	2904      	cmp	r1, #4
 80016fe:	f200 809b 	bhi.w	8001838 <_Unwind_VRS_Pop+0x148>
 8001702:	e8df f001 	tbb	[pc, r1]
 8001706:	567b      	.short	0x567b
 8001708:	2e99      	.short	0x2e99
 800170a:	03          	.byte	0x03
 800170b:	00          	.byte	0x00
 800170c:	2c00      	cmp	r4, #0
 800170e:	f040 8093 	bne.w	8001838 <_Unwind_VRS_Pop+0x148>
 8001712:	2a10      	cmp	r2, #16
 8001714:	f200 8090 	bhi.w	8001838 <_Unwind_VRS_Pop+0x148>
 8001718:	6803      	ldr	r3, [r0, #0]
 800171a:	06dc      	lsls	r4, r3, #27
 800171c:	f100 80f3 	bmi.w	8001906 <_Unwind_VRS_Pop+0x216>
 8001720:	af20      	add	r7, sp, #128	; 0x80
 8001722:	4638      	mov	r0, r7
 8001724:	f000 f9ae 	bl	8001a84 <__gnu_Unwind_Save_WMMXC>
 8001728:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800172a:	4639      	mov	r1, r7
 800172c:	2300      	movs	r3, #0
 800172e:	f04f 0c01 	mov.w	ip, #1
 8001732:	fa0c f203 	lsl.w	r2, ip, r3
 8001736:	ea12 0f09 	tst.w	r2, r9
 800173a:	4620      	mov	r0, r4
 800173c:	f103 0301 	add.w	r3, r3, #1
 8001740:	d003      	beq.n	800174a <_Unwind_VRS_Pop+0x5a>
 8001742:	f850 2b04 	ldr.w	r2, [r0], #4
 8001746:	600a      	str	r2, [r1, #0]
 8001748:	4604      	mov	r4, r0
 800174a:	2b04      	cmp	r3, #4
 800174c:	f101 0104 	add.w	r1, r1, #4
 8001750:	d1ef      	bne.n	8001732 <_Unwind_VRS_Pop+0x42>
 8001752:	4638      	mov	r0, r7
 8001754:	63b4      	str	r4, [r6, #56]	; 0x38
 8001756:	f000 f98b 	bl	8001a70 <__gnu_Unwind_Restore_WMMXC>
 800175a:	2000      	movs	r0, #0
 800175c:	b043      	add	sp, #268	; 0x10c
 800175e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001762:	2c03      	cmp	r4, #3
 8001764:	d168      	bne.n	8001838 <_Unwind_VRS_Pop+0x148>
 8001766:	b294      	uxth	r4, r2
 8001768:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 800176c:	2b10      	cmp	r3, #16
 800176e:	ea4f 4912 	mov.w	r9, r2, lsr #16
 8001772:	d861      	bhi.n	8001838 <_Unwind_VRS_Pop+0x148>
 8001774:	6803      	ldr	r3, [r0, #0]
 8001776:	071d      	lsls	r5, r3, #28
 8001778:	f100 80cd 	bmi.w	8001916 <_Unwind_VRS_Pop+0x226>
 800177c:	af20      	add	r7, sp, #128	; 0x80
 800177e:	4638      	mov	r0, r7
 8001780:	f000 f954 	bl	8001a2c <__gnu_Unwind_Save_WMMXD>
 8001784:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001786:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
 800178a:	b154      	cbz	r4, 80017a2 <_Unwind_VRS_Pop+0xb2>
 800178c:	460b      	mov	r3, r1
 800178e:	1ad0      	subs	r0, r2, r3
 8001790:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001794:	00e4      	lsls	r4, r4, #3
 8001796:	581d      	ldr	r5, [r3, r0]
 8001798:	f843 5b04 	str.w	r5, [r3], #4
 800179c:	428b      	cmp	r3, r1
 800179e:	d1fa      	bne.n	8001796 <_Unwind_VRS_Pop+0xa6>
 80017a0:	4422      	add	r2, r4
 80017a2:	4638      	mov	r0, r7
 80017a4:	63b2      	str	r2, [r6, #56]	; 0x38
 80017a6:	f000 f91f 	bl	80019e8 <__gnu_Unwind_Restore_WMMXD>
 80017aa:	2000      	movs	r0, #0
 80017ac:	b043      	add	sp, #268	; 0x10c
 80017ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017b2:	2c01      	cmp	r4, #1
 80017b4:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80017b8:	fa1f f982 	uxth.w	r9, r2
 80017bc:	d038      	beq.n	8001830 <_Unwind_VRS_Pop+0x140>
 80017be:	2c05      	cmp	r4, #5
 80017c0:	d13a      	bne.n	8001838 <_Unwind_VRS_Pop+0x148>
 80017c2:	eb08 0309 	add.w	r3, r8, r9
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d836      	bhi.n	8001838 <_Unwind_VRS_Pop+0x148>
 80017ca:	f1b8 0f0f 	cmp.w	r8, #15
 80017ce:	d976      	bls.n	80018be <_Unwind_VRS_Pop+0x1ce>
 80017d0:	f1b9 0f00 	cmp.w	r9, #0
 80017d4:	f040 8083 	bne.w	80018de <_Unwind_VRS_Pop+0x1ee>
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80b      	bhi.n	80017f4 <_Unwind_VRS_Pop+0x104>
 80017dc:	6833      	ldr	r3, [r6, #0]
 80017de:	07d8      	lsls	r0, r3, #31
 80017e0:	d508      	bpl.n	80017f4 <_Unwind_VRS_Pop+0x104>
 80017e2:	4630      	mov	r0, r6
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	f840 3b48 	str.w	r3, [r0], #72
 80017f0:	f000 f8ee 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 80017f4:	2000      	movs	r0, #0
 80017f6:	b043      	add	sp, #268	; 0x10c
 80017f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017fc:	b9e4      	cbnz	r4, 8001838 <_Unwind_VRS_Pop+0x148>
 80017fe:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8001800:	4623      	mov	r3, r4
 8001802:	fa1f fc82 	uxth.w	ip, r2
 8001806:	2001      	movs	r0, #1
 8001808:	1d34      	adds	r4, r6, #4
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	ea12 0f0c 	tst.w	r2, ip
 8001812:	4639      	mov	r1, r7
 8001814:	d004      	beq.n	8001820 <_Unwind_VRS_Pop+0x130>
 8001816:	f851 2b04 	ldr.w	r2, [r1], #4
 800181a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800181e:	460f      	mov	r7, r1
 8001820:	3301      	adds	r3, #1
 8001822:	2b10      	cmp	r3, #16
 8001824:	d1f1      	bne.n	800180a <_Unwind_VRS_Pop+0x11a>
 8001826:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
 800182a:	d1e3      	bne.n	80017f4 <_Unwind_VRS_Pop+0x104>
 800182c:	63b7      	str	r7, [r6, #56]	; 0x38
 800182e:	e004      	b.n	800183a <_Unwind_VRS_Pop+0x14a>
 8001830:	eb08 0309 	add.w	r3, r8, r9
 8001834:	2b10      	cmp	r3, #16
 8001836:	d903      	bls.n	8001840 <_Unwind_VRS_Pop+0x150>
 8001838:	2002      	movs	r0, #2
 800183a:	b043      	add	sp, #268	; 0x10c
 800183c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001840:	f1b8 0f0f 	cmp.w	r8, #15
 8001844:	d8f8      	bhi.n	8001838 <_Unwind_VRS_Pop+0x148>
 8001846:	6833      	ldr	r3, [r6, #0]
 8001848:	07da      	lsls	r2, r3, #31
 800184a:	d506      	bpl.n	800185a <_Unwind_VRS_Pop+0x16a>
 800184c:	4630      	mov	r0, r6
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	f840 3b48 	str.w	r3, [r0], #72
 8001856:	f000 f8b3 	bl	80019c0 <__gnu_Unwind_Save_VFP>
 800185a:	af20      	add	r7, sp, #128	; 0x80
 800185c:	4638      	mov	r0, r7
 800185e:	464d      	mov	r5, r9
 8001860:	f000 f8ae 	bl	80019c0 <__gnu_Unwind_Save_VFP>
 8001864:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001866:	2d00      	cmp	r5, #0
 8001868:	d05e      	beq.n	8001928 <_Unwind_VRS_Pop+0x238>
 800186a:	f04f 0900 	mov.w	r9, #0
 800186e:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001872:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 8001876:	3904      	subs	r1, #4
 8001878:	f852 0b04 	ldr.w	r0, [r2], #4
 800187c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001880:	429a      	cmp	r2, r3
 8001882:	d1f9      	bne.n	8001878 <_Unwind_VRS_Pop+0x188>
 8001884:	f1b9 0f00 	cmp.w	r9, #0
 8001888:	d054      	beq.n	8001934 <_Unwind_VRS_Pop+0x244>
 800188a:	466f      	mov	r7, sp
 800188c:	4641      	mov	r1, r8
 800188e:	2910      	cmp	r1, #16
 8001890:	bf38      	it	cc
 8001892:	2110      	movcc	r1, #16
 8001894:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001898:	3984      	subs	r1, #132	; 0x84
 800189a:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
 800189e:	f853 5b04 	ldr.w	r5, [r3], #4
 80018a2:	f841 5f04 	str.w	r5, [r1, #4]!
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d1f9      	bne.n	800189e <_Unwind_VRS_Pop+0x1ae>
 80018aa:	2c01      	cmp	r4, #1
 80018ac:	d03b      	beq.n	8001926 <_Unwind_VRS_Pop+0x236>
 80018ae:	f1b8 0f0f 	cmp.w	r8, #15
 80018b2:	63b2      	str	r2, [r6, #56]	; 0x38
 80018b4:	d958      	bls.n	8001968 <_Unwind_VRS_Pop+0x278>
 80018b6:	4638      	mov	r0, r7
 80018b8:	f000 f88e 	bl	80019d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80018bc:	e79a      	b.n	80017f4 <_Unwind_VRS_Pop+0x104>
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d954      	bls.n	800196c <_Unwind_VRS_Pop+0x27c>
 80018c2:	6832      	ldr	r2, [r6, #0]
 80018c4:	07d7      	lsls	r7, r2, #31
 80018c6:	f1a3 0910 	sub.w	r9, r3, #16
 80018ca:	d509      	bpl.n	80018e0 <_Unwind_VRS_Pop+0x1f0>
 80018cc:	f022 0301 	bic.w	r3, r2, #1
 80018d0:	4630      	mov	r0, r6
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f840 3b48 	str.w	r3, [r0], #72
 80018da:	f000 f879 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 80018de:	6832      	ldr	r2, [r6, #0]
 80018e0:	0753      	lsls	r3, r2, #29
 80018e2:	d439      	bmi.n	8001958 <_Unwind_VRS_Pop+0x268>
 80018e4:	f1b8 0f0f 	cmp.w	r8, #15
 80018e8:	d802      	bhi.n	80018f0 <_Unwind_VRS_Pop+0x200>
 80018ea:	a820      	add	r0, sp, #128	; 0x80
 80018ec:	f000 f870 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 80018f0:	466f      	mov	r7, sp
 80018f2:	4638      	mov	r0, r7
 80018f4:	f1c8 0510 	rsb	r5, r8, #16
 80018f8:	f000 f872 	bl	80019e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001900:	dd28      	ble.n	8001954 <_Unwind_VRS_Pop+0x264>
 8001902:	af20      	add	r7, sp, #128	; 0x80
 8001904:	e7b3      	b.n	800186e <_Unwind_VRS_Pop+0x17e>
 8001906:	f023 0310 	bic.w	r3, r3, #16
 800190a:	6003      	str	r3, [r0, #0]
 800190c:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8001910:	f000 f8b8 	bl	8001a84 <__gnu_Unwind_Save_WMMXC>
 8001914:	e704      	b.n	8001720 <_Unwind_VRS_Pop+0x30>
 8001916:	f023 0308 	bic.w	r3, r3, #8
 800191a:	6003      	str	r3, [r0, #0]
 800191c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001920:	f000 f884 	bl	8001a2c <__gnu_Unwind_Save_WMMXD>
 8001924:	e72a      	b.n	800177c <_Unwind_VRS_Pop+0x8c>
 8001926:	af20      	add	r7, sp, #128	; 0x80
 8001928:	3204      	adds	r2, #4
 800192a:	63b2      	str	r2, [r6, #56]	; 0x38
 800192c:	4638      	mov	r0, r7
 800192e:	f000 f843 	bl	80019b8 <__gnu_Unwind_Restore_VFP>
 8001932:	e75f      	b.n	80017f4 <_Unwind_VRS_Pop+0x104>
 8001934:	2c01      	cmp	r4, #1
 8001936:	d0f7      	beq.n	8001928 <_Unwind_VRS_Pop+0x238>
 8001938:	f1b8 0f0f 	cmp.w	r8, #15
 800193c:	63b2      	str	r2, [r6, #56]	; 0x38
 800193e:	f63f af59 	bhi.w	80017f4 <_Unwind_VRS_Pop+0x104>
 8001942:	4638      	mov	r0, r7
 8001944:	f000 f840 	bl	80019c8 <__gnu_Unwind_Restore_VFP_D>
 8001948:	f1b9 0f00 	cmp.w	r9, #0
 800194c:	f43f af52 	beq.w	80017f4 <_Unwind_VRS_Pop+0x104>
 8001950:	466f      	mov	r7, sp
 8001952:	e7b0      	b.n	80018b6 <_Unwind_VRS_Pop+0x1c6>
 8001954:	4613      	mov	r3, r2
 8001956:	e799      	b.n	800188c <_Unwind_VRS_Pop+0x19c>
 8001958:	4630      	mov	r0, r6
 800195a:	f022 0204 	bic.w	r2, r2, #4
 800195e:	f840 2bd0 	str.w	r2, [r0], #208
 8001962:	f000 f83d 	bl	80019e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001966:	e7bd      	b.n	80018e4 <_Unwind_VRS_Pop+0x1f4>
 8001968:	af20      	add	r7, sp, #128	; 0x80
 800196a:	e7ea      	b.n	8001942 <_Unwind_VRS_Pop+0x252>
 800196c:	6833      	ldr	r3, [r6, #0]
 800196e:	07d9      	lsls	r1, r3, #31
 8001970:	d508      	bpl.n	8001984 <_Unwind_VRS_Pop+0x294>
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	4630      	mov	r0, r6
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	f840 3b48 	str.w	r3, [r0], #72
 8001980:	f000 f826 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 8001984:	af20      	add	r7, sp, #128	; 0x80
 8001986:	4638      	mov	r0, r7
 8001988:	464d      	mov	r5, r9
 800198a:	f000 f821 	bl	80019d0 <__gnu_Unwind_Save_VFP_D>
 800198e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001990:	2d00      	cmp	r5, #0
 8001992:	f47f af6a 	bne.w	800186a <_Unwind_VRS_Pop+0x17a>
 8001996:	4638      	mov	r0, r7
 8001998:	f000 f816 	bl	80019c8 <__gnu_Unwind_Restore_VFP_D>
 800199c:	e72a      	b.n	80017f4 <_Unwind_VRS_Pop+0x104>
 800199e:	bf00      	nop

080019a0 <__restore_core_regs>:
 80019a0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80019a4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80019a8:	469c      	mov	ip, r3
 80019aa:	46a6      	mov	lr, r4
 80019ac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80019b0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80019b4:	46e5      	mov	sp, ip
 80019b6:	bd00      	pop	{pc}

080019b8 <__gnu_Unwind_Restore_VFP>:
 80019b8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <__gnu_Unwind_Save_VFP>:
 80019c0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <__gnu_Unwind_Restore_VFP_D>:
 80019c8:	ec90 0b20 	vldmia	r0, {d0-d15}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <__gnu_Unwind_Save_VFP_D>:
 80019d0:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019d8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019e0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <__gnu_Unwind_Restore_WMMXD>:
 80019e8:	ecf0 0102 	ldfe	f0, [r0], #8
 80019ec:	ecf0 1102 	ldfe	f1, [r0], #8
 80019f0:	ecf0 2102 	ldfe	f2, [r0], #8
 80019f4:	ecf0 3102 	ldfe	f3, [r0], #8
 80019f8:	ecf0 4102 	ldfe	f4, [r0], #8
 80019fc:	ecf0 5102 	ldfe	f5, [r0], #8
 8001a00:	ecf0 6102 	ldfe	f6, [r0], #8
 8001a04:	ecf0 7102 	ldfe	f7, [r0], #8
 8001a08:	ecf0 8102 	ldfp	f0, [r0], #8
 8001a0c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001a10:	ecf0 a102 	ldfp	f2, [r0], #8
 8001a14:	ecf0 b102 	ldfp	f3, [r0], #8
 8001a18:	ecf0 c102 	ldfp	f4, [r0], #8
 8001a1c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001a20:	ecf0 e102 	ldfp	f6, [r0], #8
 8001a24:	ecf0 f102 	ldfp	f7, [r0], #8
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <__gnu_Unwind_Save_WMMXD>:
 8001a2c:	ece0 0102 	stfe	f0, [r0], #8
 8001a30:	ece0 1102 	stfe	f1, [r0], #8
 8001a34:	ece0 2102 	stfe	f2, [r0], #8
 8001a38:	ece0 3102 	stfe	f3, [r0], #8
 8001a3c:	ece0 4102 	stfe	f4, [r0], #8
 8001a40:	ece0 5102 	stfe	f5, [r0], #8
 8001a44:	ece0 6102 	stfe	f6, [r0], #8
 8001a48:	ece0 7102 	stfe	f7, [r0], #8
 8001a4c:	ece0 8102 	stfp	f0, [r0], #8
 8001a50:	ece0 9102 	stfp	f1, [r0], #8
 8001a54:	ece0 a102 	stfp	f2, [r0], #8
 8001a58:	ece0 b102 	stfp	f3, [r0], #8
 8001a5c:	ece0 c102 	stfp	f4, [r0], #8
 8001a60:	ece0 d102 	stfp	f5, [r0], #8
 8001a64:	ece0 e102 	stfp	f6, [r0], #8
 8001a68:	ece0 f102 	stfp	f7, [r0], #8
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <__gnu_Unwind_Restore_WMMXC>:
 8001a70:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a74:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a78:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a7c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <__gnu_Unwind_Save_WMMXC>:
 8001a84:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a88:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a8c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a90:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <_Unwind_RaiseException>:
 8001a98:	46ec      	mov	ip, sp
 8001a9a:	b500      	push	{lr}
 8001a9c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001aa0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001aac:	a901      	add	r1, sp, #4
 8001aae:	f7ff fbcb 	bl	8001248 <__gnu_Unwind_RaiseException>
 8001ab2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ab6:	b012      	add	sp, #72	; 0x48
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop

08001abc <_Unwind_Resume>:
 8001abc:	46ec      	mov	ip, sp
 8001abe:	b500      	push	{lr}
 8001ac0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ac4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ad0:	a901      	add	r1, sp, #4
 8001ad2:	f7ff fbf5 	bl	80012c0 <__gnu_Unwind_Resume>
 8001ad6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ada:	b012      	add	sp, #72	; 0x48
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <_Unwind_Resume_or_Rethrow>:
 8001ae0:	46ec      	mov	ip, sp
 8001ae2:	b500      	push	{lr}
 8001ae4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ae8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001af4:	a901      	add	r1, sp, #4
 8001af6:	f7ff fc05 	bl	8001304 <__gnu_Unwind_Resume_or_Rethrow>
 8001afa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001afe:	b012      	add	sp, #72	; 0x48
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop

08001b04 <_Unwind_ForcedUnwind>:
 8001b04:	46ec      	mov	ip, sp
 8001b06:	b500      	push	{lr}
 8001b08:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b18:	ab01      	add	r3, sp, #4
 8001b1a:	f7ff fbc9 	bl	80012b0 <__gnu_Unwind_ForcedUnwind>
 8001b1e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001b22:	b012      	add	sp, #72	; 0x48
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop

08001b28 <_Unwind_Backtrace>:
 8001b28:	46ec      	mov	ip, sp
 8001b2a:	b500      	push	{lr}
 8001b2c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b3c:	aa01      	add	r2, sp, #4
 8001b3e:	f7ff fc3b 	bl	80013b8 <__gnu_Unwind_Backtrace>
 8001b42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001b46:	b012      	add	sp, #72	; 0x48
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop

08001b4c <next_unwind_byte>:
 8001b4c:	7a02      	ldrb	r2, [r0, #8]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b97a      	cbnz	r2, 8001b72 <next_unwind_byte+0x26>
 8001b52:	7a42      	ldrb	r2, [r0, #9]
 8001b54:	b1a2      	cbz	r2, 8001b80 <next_unwind_byte+0x34>
 8001b56:	6841      	ldr	r1, [r0, #4]
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	b410      	push	{r4}
 8001b5c:	7242      	strb	r2, [r0, #9]
 8001b5e:	6808      	ldr	r0, [r1, #0]
 8001b60:	2203      	movs	r2, #3
 8001b62:	1d0c      	adds	r4, r1, #4
 8001b64:	721a      	strb	r2, [r3, #8]
 8001b66:	0202      	lsls	r2, r0, #8
 8001b68:	605c      	str	r4, [r3, #4]
 8001b6a:	0e00      	lsrs	r0, r0, #24
 8001b6c:	bc10      	pop	{r4}
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	4770      	bx	lr
 8001b72:	6800      	ldr	r0, [r0, #0]
 8001b74:	3a01      	subs	r2, #1
 8001b76:	721a      	strb	r2, [r3, #8]
 8001b78:	0202      	lsls	r2, r0, #8
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	0e00      	lsrs	r0, r0, #24
 8001b7e:	4770      	bx	lr
 8001b80:	20b0      	movs	r0, #176	; 0xb0
 8001b82:	4770      	bx	lr

08001b84 <_Unwind_GetGR.constprop.0>:
 8001b84:	b500      	push	{lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	2300      	movs	r3, #0
 8001b8a:	aa03      	add	r2, sp, #12
 8001b8c:	9200      	str	r2, [sp, #0]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	220c      	movs	r2, #12
 8001b92:	f7ff fbc7 	bl	8001324 <_Unwind_VRS_Get>
 8001b96:	9803      	ldr	r0, [sp, #12]
 8001b98:	b005      	add	sp, #20
 8001b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b9e:	bf00      	nop

08001ba0 <unwind_UCB_from_context>:
 8001ba0:	e7f0      	b.n	8001b84 <_Unwind_GetGR.constprop.0>
 8001ba2:	bf00      	nop

08001ba4 <__gnu_unwind_execute>:
 8001ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	4607      	mov	r7, r0
 8001bac:	460e      	mov	r6, r1
 8001bae:	f04f 0800 	mov.w	r8, #0
 8001bb2:	ad03      	add	r5, sp, #12
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f7ff ffc9 	bl	8001b4c <next_unwind_byte>
 8001bba:	28b0      	cmp	r0, #176	; 0xb0
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	f000 80cb 	beq.w	8001d58 <__gnu_unwind_execute+0x1b4>
 8001bc2:	0603      	lsls	r3, r0, #24
 8001bc4:	d540      	bpl.n	8001c48 <__gnu_unwind_execute+0xa4>
 8001bc6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001bca:	2b80      	cmp	r3, #128	; 0x80
 8001bcc:	d056      	beq.n	8001c7c <__gnu_unwind_execute+0xd8>
 8001bce:	2bb0      	cmp	r3, #176	; 0xb0
 8001bd0:	d07d      	beq.n	8001cce <__gnu_unwind_execute+0x12a>
 8001bd2:	d81c      	bhi.n	8001c0e <__gnu_unwind_execute+0x6a>
 8001bd4:	2b90      	cmp	r3, #144	; 0x90
 8001bd6:	f000 8093 	beq.w	8001d00 <__gnu_unwind_execute+0x15c>
 8001bda:	2ba0      	cmp	r3, #160	; 0xa0
 8001bdc:	d113      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001bde:	43c3      	mvns	r3, r0
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001be8:	411a      	asrs	r2, r3
 8001bea:	0701      	lsls	r1, r0, #28
 8001bec:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	bf48      	it	mi
 8001bf6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	f7ff fd77 	bl	80016f0 <_Unwind_VRS_Pop>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d0d6      	beq.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001c06:	2009      	movs	r0, #9
 8001c08:	b005      	add	sp, #20
 8001c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8001c10:	d14b      	bne.n	8001caa <__gnu_unwind_execute+0x106>
 8001c12:	28c6      	cmp	r0, #198	; 0xc6
 8001c14:	f000 8089 	beq.w	8001d2a <__gnu_unwind_execute+0x186>
 8001c18:	28c7      	cmp	r0, #199	; 0xc7
 8001c1a:	f000 80a2 	beq.w	8001d62 <__gnu_unwind_execute+0x1be>
 8001c1e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001c22:	2bc0      	cmp	r3, #192	; 0xc0
 8001c24:	f000 80bc 	beq.w	8001da0 <__gnu_unwind_execute+0x1fc>
 8001c28:	28c8      	cmp	r0, #200	; 0xc8
 8001c2a:	f000 80bf 	beq.w	8001dac <__gnu_unwind_execute+0x208>
 8001c2e:	28c9      	cmp	r0, #201	; 0xc9
 8001c30:	d1e9      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001c32:	4630      	mov	r0, r6
 8001c34:	f7ff ff8a 	bl	8001b4c <next_unwind_byte>
 8001c38:	0302      	lsls	r2, r0, #12
 8001c3a:	f000 000f 	and.w	r0, r0, #15
 8001c3e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001c42:	3001      	adds	r0, #1
 8001c44:	4302      	orrs	r2, r0
 8001c46:	e039      	b.n	8001cbc <__gnu_unwind_execute+0x118>
 8001c48:	0083      	lsls	r3, r0, #2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f103 0904 	add.w	r9, r3, #4
 8001c50:	2300      	movs	r3, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	9500      	str	r5, [sp, #0]
 8001c56:	220d      	movs	r2, #13
 8001c58:	4638      	mov	r0, r7
 8001c5a:	f7ff fb63 	bl	8001324 <_Unwind_VRS_Get>
 8001c5e:	9b03      	ldr	r3, [sp, #12]
 8001c60:	0660      	lsls	r0, r4, #25
 8001c62:	bf4c      	ite	mi
 8001c64:	eba3 0309 	submi.w	r3, r3, r9
 8001c68:	444b      	addpl	r3, r9
 8001c6a:	9303      	str	r3, [sp, #12]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9500      	str	r5, [sp, #0]
 8001c70:	220d      	movs	r2, #13
 8001c72:	4619      	mov	r1, r3
 8001c74:	4638      	mov	r0, r7
 8001c76:	f7ff fb7b 	bl	8001370 <_Unwind_VRS_Set>
 8001c7a:	e79b      	b.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001c7c:	0204      	lsls	r4, r0, #8
 8001c7e:	4630      	mov	r0, r6
 8001c80:	f7ff ff64 	bl	8001b4c <next_unwind_byte>
 8001c84:	4320      	orrs	r0, r4
 8001c86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001c8a:	d0bc      	beq.n	8001c06 <__gnu_unwind_execute+0x62>
 8001c8c:	0104      	lsls	r4, r0, #4
 8001c8e:	2300      	movs	r3, #0
 8001c90:	b2a2      	uxth	r2, r4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4638      	mov	r0, r7
 8001c96:	f7ff fd2b 	bl	80016f0 <_Unwind_VRS_Pop>
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d1b3      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001c9e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001ca2:	bf18      	it	ne
 8001ca4:	f04f 0801 	movne.w	r8, #1
 8001ca8:	e784      	b.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001caa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001cae:	2bd0      	cmp	r3, #208	; 0xd0
 8001cb0:	d1a9      	bne.n	8001c06 <__gnu_unwind_execute+0x62>
 8001cb2:	f000 0207 	and.w	r2, r0, #7
 8001cb6:	3201      	adds	r2, #1
 8001cb8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4638      	mov	r0, r7
 8001cc2:	f7ff fd15 	bl	80016f0 <_Unwind_VRS_Pop>
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	f43f af74 	beq.w	8001bb4 <__gnu_unwind_execute+0x10>
 8001ccc:	e79b      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001cce:	28b1      	cmp	r0, #177	; 0xb1
 8001cd0:	d037      	beq.n	8001d42 <__gnu_unwind_execute+0x19e>
 8001cd2:	28b2      	cmp	r0, #178	; 0xb2
 8001cd4:	f000 8087 	beq.w	8001de6 <__gnu_unwind_execute+0x242>
 8001cd8:	28b3      	cmp	r0, #179	; 0xb3
 8001cda:	d056      	beq.n	8001d8a <__gnu_unwind_execute+0x1e6>
 8001cdc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001ce0:	2bb4      	cmp	r3, #180	; 0xb4
 8001ce2:	d090      	beq.n	8001c06 <__gnu_unwind_execute+0x62>
 8001ce4:	f000 0207 	and.w	r2, r0, #7
 8001ce8:	3201      	adds	r2, #1
 8001cea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4638      	mov	r0, r7
 8001cf4:	f7ff fcfc 	bl	80016f0 <_Unwind_VRS_Pop>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	f43f af5b 	beq.w	8001bb4 <__gnu_unwind_execute+0x10>
 8001cfe:	e782      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001d00:	f000 030d 	and.w	r3, r0, #13
 8001d04:	2b0d      	cmp	r3, #13
 8001d06:	f43f af7e 	beq.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f000 020f 	and.w	r2, r0, #15
 8001d10:	4619      	mov	r1, r3
 8001d12:	9500      	str	r5, [sp, #0]
 8001d14:	4638      	mov	r0, r7
 8001d16:	f7ff fb05 	bl	8001324 <_Unwind_VRS_Get>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9500      	str	r5, [sp, #0]
 8001d1e:	220d      	movs	r2, #13
 8001d20:	4619      	mov	r1, r3
 8001d22:	4638      	mov	r0, r7
 8001d24:	f7ff fb24 	bl	8001370 <_Unwind_VRS_Set>
 8001d28:	e744      	b.n	8001bb4 <__gnu_unwind_execute+0x10>
 8001d2a:	4630      	mov	r0, r6
 8001d2c:	f7ff ff0e 	bl	8001b4c <next_unwind_byte>
 8001d30:	0302      	lsls	r2, r0, #12
 8001d32:	f000 000f 	and.w	r0, r0, #15
 8001d36:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001d3a:	3001      	adds	r0, #1
 8001d3c:	4302      	orrs	r2, r0
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e7d6      	b.n	8001cf0 <__gnu_unwind_execute+0x14c>
 8001d42:	4630      	mov	r0, r6
 8001d44:	f7ff ff02 	bl	8001b4c <next_unwind_byte>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	f43f af5b 	beq.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d50:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d54:	d0cc      	beq.n	8001cf0 <__gnu_unwind_execute+0x14c>
 8001d56:	e756      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001d58:	f1b8 0f00 	cmp.w	r8, #0
 8001d5c:	d032      	beq.n	8001dc4 <__gnu_unwind_execute+0x220>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	e752      	b.n	8001c08 <__gnu_unwind_execute+0x64>
 8001d62:	4630      	mov	r0, r6
 8001d64:	f7ff fef2 	bl	8001b4c <next_unwind_byte>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	f43f af4b 	beq.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d70:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8001d74:	f47f af47 	bne.w	8001c06 <__gnu_unwind_execute+0x62>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4638      	mov	r0, r7
 8001d7e:	f7ff fcb7 	bl	80016f0 <_Unwind_VRS_Pop>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	f43f af16 	beq.w	8001bb4 <__gnu_unwind_execute+0x10>
 8001d88:	e73d      	b.n	8001c06 <__gnu_unwind_execute+0x62>
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff fede 	bl	8001b4c <next_unwind_byte>
 8001d90:	0302      	lsls	r2, r0, #12
 8001d92:	f000 000f 	and.w	r0, r0, #15
 8001d96:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001d9a:	3001      	adds	r0, #1
 8001d9c:	4302      	orrs	r2, r0
 8001d9e:	e7a6      	b.n	8001cee <__gnu_unwind_execute+0x14a>
 8001da0:	f000 020f 	and.w	r2, r0, #15
 8001da4:	3201      	adds	r2, #1
 8001da6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001daa:	e7c8      	b.n	8001d3e <__gnu_unwind_execute+0x19a>
 8001dac:	4630      	mov	r0, r6
 8001dae:	f7ff fecd 	bl	8001b4c <next_unwind_byte>
 8001db2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001db6:	f000 030f 	and.w	r3, r0, #15
 8001dba:	3210      	adds	r2, #16
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001dc2:	e77b      	b.n	8001cbc <__gnu_unwind_execute+0x118>
 8001dc4:	ac03      	add	r4, sp, #12
 8001dc6:	4643      	mov	r3, r8
 8001dc8:	220e      	movs	r2, #14
 8001dca:	4641      	mov	r1, r8
 8001dcc:	9400      	str	r4, [sp, #0]
 8001dce:	4638      	mov	r0, r7
 8001dd0:	f7ff faa8 	bl	8001324 <_Unwind_VRS_Get>
 8001dd4:	9400      	str	r4, [sp, #0]
 8001dd6:	4643      	mov	r3, r8
 8001dd8:	220f      	movs	r2, #15
 8001dda:	4641      	mov	r1, r8
 8001ddc:	4638      	mov	r0, r7
 8001dde:	f7ff fac7 	bl	8001370 <_Unwind_VRS_Set>
 8001de2:	4640      	mov	r0, r8
 8001de4:	e710      	b.n	8001c08 <__gnu_unwind_execute+0x64>
 8001de6:	2300      	movs	r3, #0
 8001de8:	220d      	movs	r2, #13
 8001dea:	4619      	mov	r1, r3
 8001dec:	9500      	str	r5, [sp, #0]
 8001dee:	4638      	mov	r0, r7
 8001df0:	f7ff fa98 	bl	8001324 <_Unwind_VRS_Get>
 8001df4:	4630      	mov	r0, r6
 8001df6:	f7ff fea9 	bl	8001b4c <next_unwind_byte>
 8001dfa:	0602      	lsls	r2, r0, #24
 8001dfc:	9c03      	ldr	r4, [sp, #12]
 8001dfe:	f04f 0902 	mov.w	r9, #2
 8001e02:	d50c      	bpl.n	8001e1e <__gnu_unwind_execute+0x27a>
 8001e04:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001e08:	fa00 f009 	lsl.w	r0, r0, r9
 8001e0c:	4404      	add	r4, r0
 8001e0e:	4630      	mov	r0, r6
 8001e10:	9403      	str	r4, [sp, #12]
 8001e12:	f7ff fe9b 	bl	8001b4c <next_unwind_byte>
 8001e16:	0603      	lsls	r3, r0, #24
 8001e18:	f109 0907 	add.w	r9, r9, #7
 8001e1c:	d4f2      	bmi.n	8001e04 <__gnu_unwind_execute+0x260>
 8001e1e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8001e22:	fa03 f309 	lsl.w	r3, r3, r9
 8001e26:	f504 7401 	add.w	r4, r4, #516	; 0x204
 8001e2a:	4423      	add	r3, r4
 8001e2c:	e71d      	b.n	8001c6a <__gnu_unwind_execute+0xc6>
 8001e2e:	bf00      	nop

08001e30 <__gnu_unwind_frame>:
 8001e30:	b510      	push	{r4, lr}
 8001e32:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001e34:	6853      	ldr	r3, [r2, #4]
 8001e36:	b084      	sub	sp, #16
 8001e38:	f04f 0c03 	mov.w	ip, #3
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	021c      	lsls	r4, r3, #8
 8001e40:	4608      	mov	r0, r1
 8001e42:	0e1b      	lsrs	r3, r3, #24
 8001e44:	a901      	add	r1, sp, #4
 8001e46:	9401      	str	r4, [sp, #4]
 8001e48:	9202      	str	r2, [sp, #8]
 8001e4a:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e4e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e52:	f7ff fea7 	bl	8001ba4 <__gnu_unwind_execute>
 8001e56:	b004      	add	sp, #16
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	bf00      	nop

08001e5c <_Unwind_GetRegionStart>:
 8001e5c:	b508      	push	{r3, lr}
 8001e5e:	f7ff fe9f 	bl	8001ba0 <unwind_UCB_from_context>
 8001e62:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001e64:	bd08      	pop	{r3, pc}
 8001e66:	bf00      	nop

08001e68 <_Unwind_GetLanguageSpecificData>:
 8001e68:	b508      	push	{r3, lr}
 8001e6a:	f7ff fe99 	bl	8001ba0 <unwind_UCB_from_context>
 8001e6e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001e70:	79c3      	ldrb	r3, [r0, #7]
 8001e72:	3302      	adds	r3, #2
 8001e74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001e78:	bd08      	pop	{r3, pc}
 8001e7a:	bf00      	nop

08001e7c <__aeabi_idiv0>:
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>:
	 * @param standby_reset_port port name of the STBY\RST pin of the xnucleo shield.
	 * @param standby_reset_pin pin of the STBY\RST pin of the xnucleo shield.
	 * @param ssel_port     port name of the SSEL pin used for SPI communication.
	 * @param ssel_pin     pin of the SSEL used for SPI communication.
	 */
	XNucleoIHM02A1(L6470_init_t *init_0, L6470_init_t *init_1, SPI_HandleTypeDef *spi, GPIO_TypeDef* standby_reset_port  ,uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin) :spi(spi), standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin)
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e98:	619a      	str	r2, [r3, #24]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e9e:	839a      	strh	r2, [r3, #28]
	{
	    HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8001ea0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ea8:	f00e f93c 	bl	8010124 <HAL_GPIO_WritePin>


	    if( shield_1::count == 0)
 8001eac:	4b65      	ldr	r3, [pc, #404]	; (8002044 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1c4>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d125      	bne.n	8001f00 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x80>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001eb4:	2008      	movs	r0, #8
 8001eb6:	f011 fee3 	bl	8013c80 <_Znaj>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e017      	b.n	8001ef8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x78>
	    	{
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001ec8:	206c      	movs	r0, #108	; 0x6c
 8001eca:	f011 fec8 	bl	8013c5e <_Znwj>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f000 fc53 	bl	800278c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	dde4      	ble.n	8001ec8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x48>
 8001efe:	e061      	b.n	8001fc4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x144>
	    	}
	    }
	    else if( shield_2::count == 0)
 8001f00:	4b51      	ldr	r3, [pc, #324]	; (8002048 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1c8>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d125      	bne.n	8001f54 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xd4>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f08:	2008      	movs	r0, #8
 8001f0a:	f011 feb9 	bl	8013c80 <_Znaj>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	e017      	b.n	8001f4c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xcc>
	    	{
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f1c:	206c      	movs	r0, #108	; 0x6c
 8001f1e:	f011 fe9e 	bl	8013c5e <_Znwj>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461c      	mov	r4, r3
 8001f26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f34:	4620      	mov	r0, r4
 8001f36:	f000 fc9b 	bl	8002870 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	dde4      	ble.n	8001f1c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x9c>
 8001f52:	e037      	b.n	8001fc4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x144>
	    	}
	    }
	    else if( shield_3::count == 0)
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1cc>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d125      	bne.n	8001fa8 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x128>
	    {
	    	motor_drivers = new abstractL6470*[L6470DAISYCHAINSIZE];
 8001f5c:	2008      	movs	r0, #8
 8001f5e:	f011 fe8f 	bl	8013c80 <_Znaj>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	605a      	str	r2, [r3, #4]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e017      	b.n	8001fa0 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x120>
	    	{
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8001f70:	206c      	movs	r0, #108	; 0x6c
 8001f72:	f011 fe74 	bl	8013c5e <_Znwj>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461c      	mov	r4, r3
 8001f7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f000 fce3 	bl	8002954 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	601c      	str	r4, [r3, #0]
	    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	dde4      	ble.n	8001f70 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0xf0>
 8001fa6:	e00d      	b.n	8001fc4 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x144>
	    	}
	    }
	    else
	    {
	    	throw std::runtime_error("Cannot create more than 3 shields");
 8001fa8:	2008      	movs	r0, #8
 8001faa:	f011 fa57 	bl	801345c <__cxa_allocate_exception>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	4927      	ldr	r1, [pc, #156]	; (8002050 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d0>)
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f011 ff61 	bl	8013e7c <_ZNSt13runtime_errorC1EPKc>
 8001fba:	4a26      	ldr	r2, [pc, #152]	; (8002054 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d4>)
 8001fbc:	4926      	ldr	r1, [pc, #152]	; (8002058 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d8>)
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f011 fe32 	bl	8013c28 <__cxa_throw>




	    /* Initializing the motor_drivers. */
	    init_motor_drivers[0] = init_0;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	609a      	str	r2, [r3, #8]
	    init_motor_drivers[1] = init_1;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
	    if (!init()) {
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f845 	bl	8002060 <_ZNK14XNucleoIHM02A14initEv>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x17e>
	        /*Do nothing*/
	    	throw std::runtime_error("init failed");
 8001fe2:	2008      	movs	r0, #8
 8001fe4:	f011 fa3a 	bl	801345c <__cxa_allocate_exception>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461c      	mov	r4, r3
 8001fec:	491b      	ldr	r1, [pc, #108]	; (800205c <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1dc>)
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f011 ff44 	bl	8013e7c <_ZNSt13runtime_errorC1EPKc>
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d4>)
 8001ff6:	4918      	ldr	r1, [pc, #96]	; (8002058 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1d8>)
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f011 fe15 	bl	8013c28 <__cxa_throw>
	    }
	}
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	e01b      	b.n	800203a <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t+0x1ba>
				motor_drivers[i] = new L6470<shield_1>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 8002002:	216c      	movs	r1, #108	; 0x6c
 8002004:	4620      	mov	r0, r4
 8002006:	f011 f9cb 	bl	80133a0 <_ZdlPvj>
 800200a:	f011 fa61 	bl	80134d0 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_2>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 800200e:	216c      	movs	r1, #108	; 0x6c
 8002010:	4620      	mov	r0, r4
 8002012:	f011 f9c5 	bl	80133a0 <_ZdlPvj>
 8002016:	f011 fa5b 	bl	80134d0 <__cxa_end_cleanup>
				motor_drivers[i] = new L6470<shield_3>(standby_reset_port, standby_reset_pin, ssel_port, ssel_pin, spi);
 800201a:	216c      	movs	r1, #108	; 0x6c
 800201c:	4620      	mov	r0, r4
 800201e:	f011 f9bf 	bl	80133a0 <_ZdlPvj>
 8002022:	f011 fa55 	bl	80134d0 <__cxa_end_cleanup>
	    	throw std::runtime_error("Cannot create more than 3 shields");
 8002026:	4620      	mov	r0, r4
 8002028:	f011 fa2e 	bl	8013488 <__cxa_free_exception>
 800202c:	f011 fa50 	bl	80134d0 <__cxa_end_cleanup>
	    	throw std::runtime_error("init failed");
 8002030:	4620      	mov	r0, r4
 8002032:	f011 fa29 	bl	8013488 <__cxa_free_exception>
 8002036:	f011 fa4b 	bl	80134d0 <__cxa_end_cleanup>
	}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	bf00      	nop
 8002044:	200002a4 	.word	0x200002a4
 8002048:	200002a5 	.word	0x200002a5
 800204c:	200002a6 	.word	0x200002a6
 8002050:	08016dd0 	.word	0x08016dd0
 8002054:	08013dd1 	.word	0x08013dd1
 8002058:	08018624 	.word	0x08018624
 800205c:	08016df4 	.word	0x08016df4

08002060 <_ZNK14XNucleoIHM02A14initEv>:

    /**
     * @brief Initializing the X_NUCLEO_IHM02A1 board.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init(void) const noexcept
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    {
        /* Disable the L6470. */

    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6998      	ldr	r0, [r3, #24]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8b9b      	ldrh	r3, [r3, #28]
 8002070:	2200      	movs	r2, #0
 8002072:	4619      	mov	r1, r3
 8002074:	f00e f856 	bl	8010124 <HAL_GPIO_WritePin>

    	/* Wait for at least t_STBY,min */
    	HAL_Delay(1);
 8002078:	2001      	movs	r0, #1
 800207a:	f00d fceb 	bl	800fa54 <HAL_Delay>

    	/* Enable the L6470. */
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_SET);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6998      	ldr	r0, [r3, #24]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8b9b      	ldrh	r3, [r3, #28]
 8002086:	2201      	movs	r2, #1
 8002088:	4619      	mov	r1, r3
 800208a:	f00e f84b 	bl	8010124 <HAL_GPIO_WritePin>

    	/* Wait for at least t_logicwu */
    	HAL_Delay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f00d fce0 	bl	800fa54 <HAL_Delay>



        return init_all_motor_drivers();
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f892 	bl	80021be <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>
 800209a:	4603      	mov	r3, r0
    }
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>:
    /**
     * @brief  Getting the array of motor_drivers.
     * @param  None.
     * @retval The array of motor_drivers.
     */
    abstractL6470 **get_motor_drivers(void) const noexcept
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    {
        return motor_drivers;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
    }
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>:
      *         "Prepare<Action>()" methods, one for each motor of the daisy-chain.
      * @param  None.
      * @retval A pointer to the results returned by the motor_drivers, i.e. an
      *         integer value for each of them.
      */
    uint32_t* perform_prepared_actions(void) noexcept
 80020bc:	b5b0      	push	{r4, r5, r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    {
        /* Performing pre-actions, if needed. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e040      	b.n	800214c <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x90>
            /*
               "GetPosition()" is needed by "PrepareSetMark()" at the time when the
               prepared actions get performed.
            */
            if (motor_drivers[m]->get_prepared_action() == prepared_action_t::PREPARED_SET_MARK) {
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	6819      	ldr	r1, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4608      	mov	r0, r1
 80020ec:	4798      	blx	r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b09      	cmp	r3, #9
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d023      	beq.n	8002146 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0x8a>
                motor_drivers[m]->prepare_set_mark((uint32_t) motor_drivers[m]->get_position());
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	681d      	ldr	r5, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	33cc      	adds	r3, #204	; 0xcc
 800211a:	681c      	ldr	r4, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3314      	adds	r3, #20
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4608      	mov	r0, r1
 800213c:	4798      	blx	r3
 800213e:	4603      	mov	r3, r0
 8002140:	4619      	mov	r1, r3
 8002142:	4628      	mov	r0, r5
 8002144:	47a0      	blx	r4
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b01      	cmp	r3, #1
 8002150:	ddbb      	ble.n	80020ca <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xe>
            }
        }
        
        /* Performing the prepared actions and getting back raw data. */
        uint8_t *raw_data = motor_drivers[0]->perform_prepared_actions();
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4610      	mov	r0, r2
 8002168:	4798      	blx	r3
 800216a:	4603      	mov	r3, r0
 800216c:	60fb      	str	r3, [r7, #12]

        /* Processing raw data. */
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	e01b      	b.n	80021ac <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xf0>
            results[m] = motor_drivers[m]->get_result(raw_data);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68f9      	ldr	r1, [r7, #12]
 8002196:	4798      	blx	r3
 8002198:	4603      	mov	r3, r0
 800219a:	4619      	mov	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	3204      	adds	r2, #4
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int m = 0; m < L6470DAISYCHAINSIZE; m++) {
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	3301      	adds	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	dde0      	ble.n	8002174 <_ZN14XNucleoIHM02A124perform_prepared_actionsEv+0xb8>
        }

        /* Returning results. */
        return results;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3310      	adds	r3, #16
    }
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bdb0      	pop	{r4, r5, r7, pc}

080021be <_ZNK14XNucleoIHM02A122init_all_motor_driversEv>:

    /**
     * @brief  Initialize the L6470 motor drivers.
     * @retval true if initialization is successful, false otherwise.
     */
    bool init_all_motor_drivers() const noexcept
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
    {
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e022      	b.n	8002212 <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x54>
    	{
    		if(motor_drivers[i]->init((void*) init_motor_drivers[i]) != COMPONENT_OK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3308      	adds	r3, #8
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68f9      	ldr	r1, [r7, #12]
 80021ee:	3102      	adds	r1, #2
 80021f0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4798      	blx	r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x4e>
    		{
    			return false;
 8002208:	2300      	movs	r3, #0
 800220a:	e006      	b.n	800221a <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0x5c>
    	for( int i = 0; i < L6470DAISYCHAINSIZE; i ++)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b01      	cmp	r3, #1
 8002216:	ddd9      	ble.n	80021cc <_ZNK14XNucleoIHM02A122init_all_motor_driversEv+0xe>
    		}
    	}
    	return true;
 8002218:	2301      	movs	r3, #1

    }
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>:
  * @param standby_reset_port_shield_2 , port du GPIO du signal de reset du shield 2
  * @param standby_reset_pin_shield_2  , pin  du GPIO du signal de reset du shield 2
  * @param ssel_port_shield_2          , port du GPIO de commmunication SPI pour le shield 2
  * @param ssel_port_shield_2          , pin  du GPIO de commmunication SPI pour le shield 2
  */
BlocMoteurs::BlocMoteurs(SPI_HandleTypeDef *spi,
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b08b      	sub	sp, #44	; 0x2c
 8002228:	af04      	add	r7, sp, #16
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef* standby_reset_port_shield_1  ,uint16_t standby_reset_pin_shield_1 ,GPIO_TypeDef* ssel_port_shield_1 , uint16_t ssel_pin_shield_1,
		GPIO_TypeDef* standby_reset_port_shield_2  ,uint16_t standby_reset_pin_shield_2 ,GPIO_TypeDef* ssel_port_shield_2 , uint16_t ssel_pin_shield_2)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>)
 8002236:	3318      	adds	r3, #24
 8002238:	4611      	mov	r1, r2
 800223a:	22b0      	movs	r2, #176	; 0xb0
 800223c:	4618      	mov	r0, r3
 800223e:	f012 fe62 	bl	8014f06 <memcpy>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a3d      	ldr	r2, [pc, #244]	; (800233c <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x118>)
 8002246:	33c8      	adds	r3, #200	; 0xc8
 8002248:	4611      	mov	r1, r2
 800224a:	22b0      	movs	r2, #176	; 0xb0
 800224c:	4618      	mov	r0, r3
 800224e:	f012 fe5a 	bl	8014f06 <memcpy>
{
	//moteurs à l'arret par défaut
	moteurs_arret = 0;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
	//vitesse par défaut
	max_vitesse = MAX_VITESSE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800225e:	605a      	str	r2, [r3, #4]

    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 8002260:	2020      	movs	r0, #32
 8002262:	f011 fcfc 	bl	8013c5e <_Znwj>
 8002266:	4603      	mov	r3, r0
 8002268:	461c      	mov	r4, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f103 0118 	add.w	r1, r3, #24
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8002276:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002278:	9303      	str	r3, [sp, #12]
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	9302      	str	r3, [sp, #8]
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff fdf9 	bl	8001e80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	609c      	str	r4, [r3, #8]
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002292:	2020      	movs	r0, #32
 8002294:	f011 fce3 	bl	8013c5e <_Znwj>
 8002298:	4603      	mov	r3, r0
 800229a:	461c      	mov	r4, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f103 0118 	add.w	r1, r3, #24
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f503 7290 	add.w	r2, r3, #288	; 0x120
 80022a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80022aa:	9303      	str	r3, [sp, #12]
 80022ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7ff fde0 	bl	8001e80 <_ZN14XNucleoIHM02A1C1EP12L6470_init_tS1_P19__SPI_HandleTypeDefP12GPIO_TypeDeftS5_t>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	60dc      	str	r4, [r3, #12]
    abstractL6470** moteurs_shield_1 = shield_1->get_motor_drivers();
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff feeb 	bl	80020a4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022ce:	6178      	str	r0, [r7, #20]
    abstractL6470** moteurs_shield_2 = shield_2->get_motor_drivers();
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fee5 	bl	80020a4 <_ZNK14XNucleoIHM02A117get_motor_driversEv>
 80022da:	6138      	str	r0, [r7, #16]
    moteurs = new abstractL6470*[NMOTEURS];
 80022dc:	2010      	movs	r0, #16
 80022de:	f011 fccf 	bl	8013c80 <_Znaj>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	611a      	str	r2, [r3, #16]

	#ifdef CANONICAL_DIR // inverse ou non shield du haut/bas
		moteurs[front_left] = moteurs_shield_1[left];
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	601a      	str	r2, [r3, #0]
		moteurs[front_right] = moteurs_shield_1[right];
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	3304      	adds	r3, #4
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	6852      	ldr	r2, [r2, #4]
 80022fe:	601a      	str	r2, [r3, #0]
		moteurs[back_left] = moteurs_shield_2[left];
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	3308      	adds	r3, #8
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_2[right];
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	330c      	adds	r3, #12
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	6852      	ldr	r2, [r2, #4]
 8002316:	601a      	str	r2, [r3, #0]
		moteurs[back_right] = moteurs_shield_1[right];
	#endif



}
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	e00b      	b.n	8002334 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t+0x110>
    shield_1 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_1, standby_reset_pin_shield_1, ssel_port_shield_1, ssel_pin_shield_1);
 800231c:	2120      	movs	r1, #32
 800231e:	4620      	mov	r0, r4
 8002320:	f011 f83e 	bl	80133a0 <_ZdlPvj>
 8002324:	f011 f8d4 	bl	80134d0 <__cxa_end_cleanup>
    shield_2 = new XNucleoIHM02A1(&initShield1[0], &initShield2[1], spi, standby_reset_port_shield_2, standby_reset_pin_shield_2, ssel_port_shield_2, ssel_pin_shield_2);
 8002328:	2120      	movs	r1, #32
 800232a:	4620      	mov	r0, r4
 800232c:	f011 f838 	bl	80133a0 <_ZdlPvj>
 8002330:	f011 f8ce 	bl	80134d0 <__cxa_end_cleanup>
}
 8002334:	4618      	mov	r0, r3
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd90      	pop	{r4, r7, pc}
 800233c:	08016e00 	.word	0x08016e00

08002340 <_ZN11BlocMoteurs11step_to_radEj>:
float BlocMoteurs::rad_to_step( float rad)
{
	return  (rad/RAD_PER_FULL_STEP);
}
float BlocMoteurs::step_to_rad( unsigned int step)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
	return (RAD_PER_FULL_STEP*step);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002354:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800236c <_ZN11BlocMoteurs11step_to_radEj+0x2c>
 8002358:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800235c:	eeb0 0a67 	vmov.f32	s0, s15
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	3d00adfd 	.word	0x3d00adfd

08002370 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>:
  * @param  vitesse_normalisee_FR vitesse du moteur Avant droit
  * @param  vitesse_normalisee_BL vitesse du moteur Arriere gauche
  * @param  vitesse_normalisee_BR vitesse du moteur Arriere droit
  */
void BlocMoteurs::commande_vitesses_normalisees(float vitesse_normalisee_FL, float vitesse_normalisee_FR, float vitesse_normalisee_BL, float vitesse_normalisee_BR )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b094      	sub	sp, #80	; 0x50
 8002374:	af00      	add	r7, sp, #0
 8002376:	6178      	str	r0, [r7, #20]
 8002378:	ed87 0a04 	vstr	s0, [r7, #16]
 800237c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002380:	ed87 1a02 	vstr	s2, [r7, #8]
 8002384:	edc7 1a01 	vstr	s3, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_FL = std::min(1.0f, vitesse_normalisee_FL);
 8002388:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	f107 0210 	add.w	r2, r7, #16
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fb4d 	bl	8002a38 <_ZSt3minIfERKT_S2_S2_>
 800239e:	4603      	mov	r3, r0
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
    vitesse_normalisee_FL = std::max(-1.0f, vitesse_normalisee_FL);
 80023a4:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	f107 0210 	add.w	r2, r7, #16
 80023ac:	f107 0320 	add.w	r3, r7, #32
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fb59 	bl	8002a6a <_ZSt3maxIfERKT_S2_S2_>
 80023b8:	4603      	mov	r3, r0
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	613b      	str	r3, [r7, #16]

    vitesse_normalisee_FR = std::min(1.0f, vitesse_normalisee_FR);
 80023be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
 80023c4:	f107 020c 	add.w	r2, r7, #12
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fb32 	bl	8002a38 <_ZSt3minIfERKT_S2_S2_>
 80023d4:	4603      	mov	r3, r0
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]
    vitesse_normalisee_FR = std::max(-1.0f, vitesse_normalisee_FR);
 80023da:	4b72      	ldr	r3, [pc, #456]	; (80025a4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023de:	f107 020c 	add.w	r2, r7, #12
 80023e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fb3e 	bl	8002a6a <_ZSt3maxIfERKT_S2_S2_>
 80023ee:	4603      	mov	r3, r0
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]

    vitesse_normalisee_BL = std::min(1.0f, vitesse_normalisee_BL);
 80023f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	f107 0208 	add.w	r2, r7, #8
 80023fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fb17 	bl	8002a38 <_ZSt3minIfERKT_S2_S2_>
 800240a:	4603      	mov	r3, r0
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60bb      	str	r3, [r7, #8]
    vitesse_normalisee_BL = std::max(-1.0f, vitesse_normalisee_BL);
 8002410:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
 8002414:	f107 0208 	add.w	r2, r7, #8
 8002418:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fb23 	bl	8002a6a <_ZSt3maxIfERKT_S2_S2_>
 8002424:	4603      	mov	r3, r0
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60bb      	str	r3, [r7, #8]

    vitesse_normalisee_BR = std::min(1.0f, vitesse_normalisee_BR);
 800242a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
 8002430:	1d3a      	adds	r2, r7, #4
 8002432:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fafd 	bl	8002a38 <_ZSt3minIfERKT_S2_S2_>
 800243e:	4603      	mov	r3, r0
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	607b      	str	r3, [r7, #4]
    vitesse_normalisee_BR = std::max(-1.0f, vitesse_normalisee_BR);
 8002444:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x234>)
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
 8002448:	1d3a      	adds	r2, r7, #4
 800244a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fb0a 	bl	8002a6a <_ZSt3maxIfERKT_S2_S2_>
 8002456:	4603      	mov	r3, r0
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	607b      	str	r3, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs car placés symétriquement sur le robot et branchement identique)
    StepperMotor::direction_t sens_FL = vitesse_normalisee_FL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 800245c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	db01      	blt.n	800246e <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0xfe>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x100>
 800246e:	2300      	movs	r3, #0
 8002470:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    StepperMotor::direction_t sens_FR = vitesse_normalisee_FR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 8002474:	edd7 7a03 	vldr	s15, [r7, #12]
 8002478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	bfac      	ite	ge
 8002482:	2301      	movge	r3, #1
 8002484:	2300      	movlt	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f083 0301 	eor.w	r3, r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    StepperMotor::direction_t sens_BL = vitesse_normalisee_BL >= 0.0f ? StepperMotor::FWD : StepperMotor::BWD;
 8002492:	edd7 7a02 	vldr	s15, [r7, #8]
 8002496:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	db01      	blt.n	80024a4 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x134>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff+0x136>
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    StepperMotor::direction_t sens_BR = vitesse_normalisee_BR >= 0.0f ? StepperMotor::BWD : StepperMotor::FWD;
 80024aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	bfac      	ite	ge
 80024b8:	2301      	movge	r3, #1
 80024ba:	2300      	movlt	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c


    // Détermination des valeurs de vitesses réelles à envoyer au shield
    unsigned int vitesse_FL = ( (float) fabs(vitesse_normalisee_FL) * max_vitesse);
 80024c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024cc:	eeb0 7ae7 	vabs.f32	s14, s15
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024e4:	ee17 3a90 	vmov	r3, s15
 80024e8:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned int vitesse_FR = ( (float) fabs(vitesse_normalisee_FR) * max_vitesse);
 80024ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ee:	eeb0 7ae7 	vabs.f32	s14, s15
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002506:	ee17 3a90 	vmov	r3, s15
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
    unsigned int vitesse_BL = ( (float) fabs(vitesse_normalisee_BL) * max_vitesse);
 800250c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002510:	eeb0 7ae7 	vabs.f32	s14, s15
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002528:	ee17 3a90 	vmov	r3, s15
 800252c:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned int vitesse_BR = ( (float) fabs(vitesse_normalisee_BR) * max_vitesse);
 800252e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002532:	eeb0 7ae7 	vabs.f32	s14, s15
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254a:	ee17 3a90 	vmov	r3, s15
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c

    set_vitesse_moteur(vitesse_FL, sens_FL, id_moteurs::front_left);
 8002550:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002554:	2300      	movs	r3, #0
 8002556:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002558:	6978      	ldr	r0, [r7, #20]
 800255a:	f000 f825 	bl	80025a8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_FR, sens_FR, id_moteurs::front_right);
 800255e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002562:	2301      	movs	r3, #1
 8002564:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f000 f81e 	bl	80025a8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BL, sens_BL, id_moteurs::back_left);
 800256c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002570:	2302      	movs	r3, #2
 8002572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002574:	6978      	ldr	r0, [r7, #20]
 8002576:	f000 f817 	bl	80025a8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    set_vitesse_moteur(vitesse_BR, sens_BR, id_moteurs::back_right);
 800257a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800257e:	2303      	movs	r3, #3
 8002580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f000 f810 	bl	80025a8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>
    shield_1->perform_prepared_actions();
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fd95 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fd90 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

}
 800259c:	bf00      	nop
 800259e:	3750      	adds	r7, #80	; 0x50
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	bf800000 	.word	0xbf800000

080025a8 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs>:
  * @param vitesse , vitesse absolue en step/s
  * @param dir , sens de rotation (FWD / BWD)
  * @param id , id du moteur (front_left, front_right, back_left, back_right)
  */
void BlocMoteurs::set_vitesse_moteur(unsigned int vitesse, StepperMotor::direction_t dir, id_moteurs id)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	460b      	mov	r3, r1
 80025b8:	71fb      	strb	r3, [r7, #7]
 80025ba:	4613      	mov	r3, r2
 80025bc:	71bb      	strb	r3, [r7, #6]
    if (!moteurs_arret)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d012      	beq.n	80025f2 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x4a>
    {
        moteurs[id]->prepare_run(dir, vitesse);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	33fc      	adds	r3, #252	; 0xfc
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	79f9      	ldrb	r1, [r7, #7]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	4798      	blx	r3
    }
    else
    {
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
    }
}
 80025f0:	e011      	b.n	8002616 <_ZN11BlocMoteurs18set_vitesse_moteurEjN12StepperMotor11direction_tE11_id_moteurs+0x6e>
    	moteurs[id]->prepare_hard_hiz(); // mode haute impédence pour pouvoir déplacer le robot à la main
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	79bb      	ldrb	r3, [r7, #6]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4608      	mov	r0, r1
 8002614:	4798      	blx	r3
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_ZN11BlocMoteurs9motors_onEv>:

/**
  * @brief  autorise les commandes de vitesse jusqu'a l'appel des fonctions motors_stop
  */
void BlocMoteurs::motors_on()
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_ZN11BlocMoteurs20motors_stop_soft_hizEv>:
  * @brief  stop les roues et les laisse libres par la suite
  * Le passage a la vitesse a zero respecte les parametre de deceleration maximale du robot
  * (contrairement a la methode motors_stop_hard_hiz)
  */
void BlocMoteurs::motors_stop_soft_hiz()
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < NMOTEURS; i ++)
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e014      	b.n	8002670 <_ZN11BlocMoteurs20motors_stop_soft_hizEv+0x38>
	{
		moteurs[i]->prepare_soft_hiz();
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4608      	mov	r0, r1
 8002668:	4798      	blx	r3
	for(int i = 0; i < NMOTEURS; i ++)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3301      	adds	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b03      	cmp	r3, #3
 8002674:	dde7      	ble.n	8002646 <_ZN11BlocMoteurs20motors_stop_soft_hizEv+0xe>
	}
    shield_1->perform_prepared_actions();
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fd1e 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
    shield_2->perform_prepared_actions();
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fd19 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>

    moteurs_arret = true;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <_ZN11BlocMoteurs19mesure_vitesses_radEv>:
  *
  * @retval tableau float des 4 valeursen rad/s des vitesse. Les index correspondent à l'enum motor id
  * ex : id_moteurs::front_left = 0 -> to_return[0] = vitesse du moteur Avant gauche (front left)
  */
float* BlocMoteurs::mesure_vitesses_rad()
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	static float to_return[NMOTEURS];
	for( int i = 0; i < NMOTEURS; i ++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e013      	b.n	80026ce <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x36>
	{
		moteurs[i]->prepare_get_speed();
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	33a8      	adds	r3, #168	; 0xa8
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4608      	mov	r0, r1
 80026c6:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	dde8      	ble.n	80026a6 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xe>
	}
	uint32_t* result1 = shield_1->perform_prepared_actions();
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fcef 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 80026de:	60f8      	str	r0, [r7, #12]
	for( int i = 0; i < NMOTEURS; i ++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	e013      	b.n	800270e <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x76>
	{
		moteurs[i]->prepare_get_speed();
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	33a8      	adds	r3, #168	; 0xa8
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4608      	mov	r0, r1
 8002706:	4798      	blx	r3
	for( int i = 0; i < NMOTEURS; i ++)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	3301      	adds	r3, #1
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b03      	cmp	r3, #3
 8002712:	dde8      	ble.n	80026e6 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0x4e>
	}
	uint32_t* result2 = shield_2->perform_prepared_actions();
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fccf 	bl	80020bc <_ZN14XNucleoIHM02A124perform_prepared_actionsEv>
 800271e:	60b8      	str	r0, [r7, #8]
	#ifdef CANONICAL_DIR // inverse ou non shield du haut/bas
		to_return[front_left] = step_to_rad(result1[left]);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fe0a 	bl	8002340 <_ZN11BlocMoteurs11step_to_radEj>
 800272c:	eef0 7a40 	vmov.f32	s15, s0
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 8002732:	edc3 7a00 	vstr	s15, [r3]
		to_return[front_right] = step_to_rad(result1[right]);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3304      	adds	r3, #4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fdfe 	bl	8002340 <_ZN11BlocMoteurs11step_to_radEj>
 8002744:	eef0 7a40 	vmov.f32	s15, s0
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 800274a:	edc3 7a01 	vstr	s15, [r3, #4]
		to_return[back_left] = step_to_rad(result2[left]);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fdf3 	bl	8002340 <_ZN11BlocMoteurs11step_to_radEj>
 800275a:	eef0 7a40 	vmov.f32	s15, s0
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 8002760:	edc3 7a02 	vstr	s15, [r3, #8]
		to_return[back_right] = step_to_rad(result2[right]);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	3304      	adds	r3, #4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4619      	mov	r1, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fde7 	bl	8002340 <_ZN11BlocMoteurs11step_to_radEj>
 8002772:	eef0 7a40 	vmov.f32	s15, s0
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
 8002778:	edc3 7a03 	vstr	s15, [r3, #12]
		to_return[front_right] = step_to_rad(result2[right]);
		to_return[back_left] = step_to_rad(result1[left]);
		to_return[back_right] = step_to_rad(result1[right]);
	#endif

	return to_return;
 800277c:	4b02      	ldr	r3, [pc, #8]	; (8002788 <_ZN11BlocMoteurs19mesure_vitesses_radEv+0xf0>)
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200001f8 	.word	0x200001f8

0800278c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
     * @param standby_reset pin name of the STBY\RST pin of the component.
     * @param ssel_port     port name of the SSEL pin of the SPI device to be used for communication.
     * @param ssel_pin      pin name of the SSEL pin of the SPI device to be used for communication.
     * @param spi           SPI handler to be used for communication.
     */
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	80fb      	strh	r3, [r7, #6]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4618      	mov	r0, r3
 80027a0:	f009 fc54 	bl	800c04c <_ZN13abstractL6470C1Ev>
 80027a4:	4a27      	ldr	r2, [pc, #156]	; (8002844 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	819a      	strh	r2, [r3, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	611a      	str	r2, [r3, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8b3a      	ldrh	r2, [r7, #24]
 80027c0:	829a      	strh	r2, [r3, #20]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	619a      	str	r2, [r3, #24]
    {

    	if(std::is_same<shield_x,shield_1>::value)
    	{
    		shield_id = 1;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	711a      	strb	r2, [r3, #4]
    		shield_1::count++;
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80027d8:	701a      	strb	r2, [r3, #0]
    	}
    	else
    	{
    		throw std::runtime_error("template of L6470 must be shield_1, shield_2 or shield_3");
    	}
        L6470_Register = &_L6470_Register[0];
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a1b      	ldr	r2, [pc, #108]	; (800284c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80027de:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
        L6470_Direction = &_L6470_Direction[0];
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
        L6470_ACT = &_L6470_ACT[0];
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	635a      	str	r2, [r3, #52]	; 0x34
        prepared_action = PREPARED_NO_ACTION;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        L6470_Id = number_of_devices++;
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	b2d1      	uxtb	r1, r2
 800280c:	4a13      	ldr	r2, [pc, #76]	; (800285c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 800280e:	7011      	strb	r1, [r2, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 800281a:	2220      	movs	r2, #32
 800281c:	2100      	movs	r1, #0
 800281e:	4811      	ldr	r0, [pc, #68]	; (8002864 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002820:	f012 fa9d 	bl	8014d5e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002824:	2208      	movs	r2, #8
 8002826:	2100      	movs	r1, #0
 8002828:	480f      	ldr	r0, [pc, #60]	; (8002868 <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 800282a:	f012 fa98 	bl	8014d5e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 800282e:	2208      	movs	r2, #8
 8002830:	2100      	movs	r1, #0
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <_ZN5L6470I8shield_1EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002834:	f012 fa93 	bl	8014d5e <memset>
    }
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	080173a0 	.word	0x080173a0
 8002848:	200002a4 	.word	0x200002a4
 800284c:	08017664 	.word	0x08017664
 8002850:	08017858 	.word	0x08017858
 8002854:	08017964 	.word	0x08017964
 8002858:	08017978 	.word	0x08017978
 800285c:	20000208 	.word	0x20000208
 8002860:	20000209 	.word	0x20000209
 8002864:	2000020c 	.word	0x2000020c
 8002868:	2000022c 	.word	0x2000022c
 800286c:	20000234 	.word	0x20000234

08002870 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	80fb      	strh	r3, [r7, #6]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4618      	mov	r0, r3
 8002884:	f009 fbe2 	bl	800c04c <_ZN13abstractL6470C1Ev>
 8002888:	4a27      	ldr	r2, [pc, #156]	; (8002928 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	819a      	strh	r2, [r3, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	611a      	str	r2, [r3, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8b3a      	ldrh	r2, [r7, #24]
 80028a4:	829a      	strh	r2, [r3, #20]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	619a      	str	r2, [r3, #24]
    		shield_id = 2;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2202      	movs	r2, #2
 80028b0:	711a      	strb	r2, [r3, #4]
    		shield_2::count++;
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	3301      	adds	r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80028bc:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80028c2:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
        L6470_Direction = &_L6470_Direction[0];
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
        L6470_ACT = &_L6470_ACT[0];
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a1a      	ldr	r2, [pc, #104]	; (800293c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	635a      	str	r2, [r3, #52]	; 0x34
        prepared_action = PREPARED_NO_ACTION;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        L6470_Id = number_of_devices++;
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	b2d1      	uxtb	r1, r2
 80028f0:	4a13      	ldr	r2, [pc, #76]	; (8002940 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80028f2:	7011      	strb	r1, [r2, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 80028fe:	2220      	movs	r2, #32
 8002900:	2100      	movs	r1, #0
 8002902:	4811      	ldr	r0, [pc, #68]	; (8002948 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 8002904:	f012 fa2b 	bl	8014d5e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002908:	2208      	movs	r2, #8
 800290a:	2100      	movs	r1, #0
 800290c:	480f      	ldr	r0, [pc, #60]	; (800294c <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 800290e:	f012 fa26 	bl	8014d5e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 8002912:	2208      	movs	r2, #8
 8002914:	2100      	movs	r1, #0
 8002916:	480e      	ldr	r0, [pc, #56]	; (8002950 <_ZN5L6470I8shield_2EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 8002918:	f012 fa21 	bl	8014d5e <memset>
    }
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	08017134 	.word	0x08017134
 800292c:	200002a5 	.word	0x200002a5
 8002930:	08017984 	.word	0x08017984
 8002934:	08017b78 	.word	0x08017b78
 8002938:	08017c84 	.word	0x08017c84
 800293c:	08017c98 	.word	0x08017c98
 8002940:	2000023c 	.word	0x2000023c
 8002944:	2000023d 	.word	0x2000023d
 8002948:	20000240 	.word	0x20000240
 800294c:	20000260 	.word	0x20000260
 8002950:	20000268 	.word	0x20000268

08002954 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef>:
    L6470(GPIO_TypeDef* standby_reset_port, uint16_t standby_reset_pin,GPIO_TypeDef* ssel_port , uint16_t ssel_pin, SPI_HandleTypeDef *spi) : standby_reset_port(standby_reset_port), standby_reset_pin(standby_reset_pin), ssel_port(ssel_port),ssel_pin(ssel_pin) , spi(spi)
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4618      	mov	r0, r3
 8002968:	f009 fb70 	bl	800c04c <_ZN13abstractL6470C1Ev>
 800296c:	4a27      	ldr	r2, [pc, #156]	; (8002a0c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xb8>)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	88fa      	ldrh	r2, [r7, #6]
 800297c:	819a      	strh	r2, [r3, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	611a      	str	r2, [r3, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8b3a      	ldrh	r2, [r7, #24]
 8002988:	829a      	strh	r2, [r3, #20]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	619a      	str	r2, [r3, #24]
    		shield_id = 3;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2203      	movs	r2, #3
 8002994:	711a      	strb	r2, [r3, #4]
    		shield_3::count++;
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xbc>)
 80029a0:	701a      	strb	r2, [r3, #0]
        L6470_Register = &_L6470_Register[0];
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc0>)
 80029a6:	621a      	str	r2, [r3, #32]
        L6470_ApplicationCommand = &_L6470_ApplicationCommand[0];
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc4>)
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24
        L6470_Direction = &_L6470_Direction[0];
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xc8>)
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
        L6470_ACT = &_L6470_ACT[0];
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xcc>)
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c
        pL6470_StatusRegister = &L6470_StatusRegister;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	635a      	str	r2, [r3, #52]	; 0x34
        prepared_action = PREPARED_NO_ACTION;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        L6470_Id = number_of_devices++;
 80029cc:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	b2d1      	uxtb	r1, r2
 80029d4:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd0>)
 80029d6:	7011      	strb	r1, [r2, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	7713      	strb	r3, [r2, #28]
        L6470_DaisyChain_HalfPrepared = ZERO_F;
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd4>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
        memset(L6470_AppCmdPkg, 0, L6470DAISYCHAINSIZE * sizeof(sL6470_AppCmdPkg_t));
 80029e2:	2220      	movs	r2, #32
 80029e4:	2100      	movs	r1, #0
 80029e6:	4811      	ldr	r0, [pc, #68]	; (8002a2c <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xd8>)
 80029e8:	f012 f9b9 	bl	8014d5e <memset>
        memset(L6470_DaisyChainSpiTxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80029ec:	2208      	movs	r2, #8
 80029ee:	2100      	movs	r1, #0
 80029f0:	480f      	ldr	r0, [pc, #60]	; (8002a30 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xdc>)
 80029f2:	f012 f9b4 	bl	8014d5e <memset>
        memset(L6470_DaisyChainSpiRxStruct, 0, L6470MAXSPICMDBYTESIZE * L6470DAISYCHAINSIZE * sizeof(uint8_t));
 80029f6:	2208      	movs	r2, #8
 80029f8:	2100      	movs	r1, #0
 80029fa:	480e      	ldr	r0, [pc, #56]	; (8002a34 <_ZN5L6470I8shield_3EC1EP12GPIO_TypeDeftS3_tP19__SPI_HandleTypeDef+0xe0>)
 80029fc:	f012 f9af 	bl	8014d5e <memset>
    }
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	08016ec8 	.word	0x08016ec8
 8002a10:	200002a6 	.word	0x200002a6
 8002a14:	08017ca4 	.word	0x08017ca4
 8002a18:	08017e98 	.word	0x08017e98
 8002a1c:	08017fa4 	.word	0x08017fa4
 8002a20:	08017fb8 	.word	0x08017fb8
 8002a24:	20000270 	.word	0x20000270
 8002a28:	20000271 	.word	0x20000271
 8002a2c:	20000274 	.word	0x20000274
 8002a30:	20000294 	.word	0x20000294
 8002a34:	2000029c 	.word	0x2000029c

08002a38 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	ed93 7a00 	vldr	s14, [r3]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a56:	d501      	bpl.n	8002a5c <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	e000      	b.n	8002a5e <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002a5c:	687b      	ldr	r3, [r7, #4]
    }
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	ed93 7a00 	vldr	s14, [r3]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a88:	d501      	bpl.n	8002a8e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	e000      	b.n	8002a90 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002a8e:	687b      	ldr	r3, [r7, #4]
    }
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_ZN5L6470I8shield_3ED1Ev>:

    /**
     * @brief Destructor.
     */
    ~L6470(void) = default;
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	4a05      	ldr	r2, [pc, #20]	; (8002abc <_ZN5L6470I8shield_3ED1Ev+0x20>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f009 fadd 	bl	800c06c <_ZN13abstractL6470D1Ev>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	08016ec8 	.word	0x08016ec8

08002ac0 <_ZN5L6470I8shield_3ED0Ev>:
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ffe7 	bl	8002a9c <_ZN5L6470I8shield_3ED1Ev>
 8002ace:	216c      	movs	r1, #108	; 0x6c
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f010 fc65 	bl	80133a0 <_ZdlPvj>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <_ZN5L6470I8shield_2ED1Ev>:
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <_ZN5L6470I8shield_2ED1Ev+0x20>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f009 fabb 	bl	800c06c <_ZN13abstractL6470D1Ev>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	08017134 	.word	0x08017134

08002b04 <_ZN5L6470I8shield_2ED0Ev>:
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff ffe7 	bl	8002ae0 <_ZN5L6470I8shield_2ED1Ev>
 8002b12:	216c      	movs	r1, #108	; 0x6c
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f010 fc43 	bl	80133a0 <_ZdlPvj>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZN5L6470I8shield_1ED1Ev>:
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <_ZN5L6470I8shield_1ED1Ev+0x20>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f009 fa99 	bl	800c06c <_ZN13abstractL6470D1Ev>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	080173a0 	.word	0x080173a0

08002b48 <_ZN5L6470I8shield_1ED0Ev>:
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ffe7 	bl	8002b24 <_ZN5L6470I8shield_1ED1Ev>
 8002b56:	216c      	movs	r1, #108	; 0x6c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f010 fc21 	bl	80133a0 <_ZdlPvj>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_ZN5L6470I8shield_3E4initEPv>:
    /**
     * @brief  Initializing the component.
     * @param  init Pointer to device specific initalization structure.
     * @retval "0" in case of success, an error code otherwise.
     */
    virtual int init(void *init)
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    {
        return (int) L6470_Config((void *) init);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
 8002b82:	4603      	mov	r3, r0
    }
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_ZN5L6470I8shield_3E10get_statusEv>:
    /**
     * @brief  Getting the status.
     * @param  None.
     * @retval The status.
     */
    virtual unsigned int get_status(void)
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
    {
        return (unsigned int) L6470_GetStatus();
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
 8002ba2:	4603      	mov	r3, r0
    }
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_ZN5L6470I8shield_3E13get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual unsigned int get_parameter(unsigned int parameter)
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
    {
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
 8002bca:	4603      	mov	r3, r0
    }
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_ZN5L6470I8shield_3E12get_positionEv>:
    /**
     * @brief  Getting the position.
     * @param  None.
     * @retval The position.
     */
    virtual signed int get_position(void)
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002be4:	681c      	ldr	r4, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	47a0      	blx	r4
 8002bfe:	4603      	mov	r3, r0
    }
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd90      	pop	{r4, r7, pc}

08002c08 <_ZN5L6470I8shield_3E8get_markEv>:
    /**
     * @brief  Getting the marked position.
     * @param  None.
     * @retval The marked position.
     */
    virtual signed int get_mark(void)
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
    {
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002c18:	681c      	ldr	r4, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2102      	movs	r1, #2
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	47a0      	blx	r4
 8002c32:	4603      	mov	r3, r0
    }
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}

08002c3c <_ZN5L6470I8shield_3E9get_speedEv>:
    /**
     * @brief  Getting the current speed in pps.
     * @param  None.
     * @retval The current speed in pps.
     */
    virtual unsigned int get_speed(void)
 8002c3c:	b5b0      	push	{r4, r5, r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c4c:	681c      	ldr	r4, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002c56:	681d      	ldr	r5, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2103      	movs	r1, #3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	47a8      	blx	r5
 8002c70:	eef0 7a40 	vmov.f32	s15, s0
 8002c74:	eeb0 0a67 	vmov.f32	s0, s15
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	47a0      	blx	r4
 8002c7c:	4603      	mov	r3, r0
    }
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bdb0      	pop	{r4, r5, r7, pc}

08002c86 <_ZN5L6470I8shield_3E13get_max_speedEv>:
    /**
     * @brief  Getting the maximum speed in pps.
     * @param  None.
     * @retval The maximum speed in pps.
     */
    virtual unsigned int get_max_speed(void)
 8002c86:	b5b0      	push	{r4, r5, r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c96:	681c      	ldr	r4, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002ca0:	681d      	ldr	r5, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2106      	movs	r1, #6
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	47a8      	blx	r5
 8002cbc:	eef0 7a40 	vmov.f32	s15, s0
 8002cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	47a0      	blx	r4
 8002cc8:	4603      	mov	r3, r0
    }
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bdb0      	pop	{r4, r5, r7, pc}

08002cd2 <_ZN5L6470I8shield_3E13get_min_speedEv>:
    /**
     * @brief  Getting the minimum speed in pps.
     * @param  None.
     * @retval The minimum speed in pps.
     */
    virtual unsigned int get_min_speed(void)
 8002cd2:	b5b0      	push	{r4, r5, r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ce2:	681c      	ldr	r4, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002cec:	681d      	ldr	r5, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2107      	movs	r1, #7
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	47a8      	blx	r5
 8002d08:	eef0 7a40 	vmov.f32	s15, s0
 8002d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	47a0      	blx	r4
 8002d14:	4603      	mov	r3, r0
    }
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}

08002d1e <_ZN5L6470I8shield_3E16get_accelerationEv>:
    /**
     * @brief  Getting the acceleration in pps^2.
     * @param  None.
     * @retval The acceleration in pps^2.
     */
    virtual unsigned int get_acceleration(void)
 8002d1e:	b5b0      	push	{r4, r5, r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d2e:	681c      	ldr	r4, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002d38:	681d      	ldr	r5, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2104      	movs	r1, #4
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	47a8      	blx	r5
 8002d54:	eef0 7a40 	vmov.f32	s15, s0
 8002d58:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	47a0      	blx	r4
 8002d60:	4603      	mov	r3, r0
    }
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bdb0      	pop	{r4, r5, r7, pc}

08002d6a <_ZN5L6470I8shield_3E16get_decelerationEv>:
    /**
     * @brief  Getting the deceleration in pps^2.
     * @param  None.
     * @retval The deceleration in pps^2.
     */
    virtual unsigned int get_deceleration(void)
 8002d6a:	b5b0      	push	{r4, r5, r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
    {
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d7a:	681c      	ldr	r4, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002d84:	681d      	ldr	r5, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2105      	movs	r1, #5
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	47a8      	blx	r5
 8002da0:	eef0 7a40 	vmov.f32	s15, s0
 8002da4:	eeb0 0a67 	vmov.f32	s0, s15
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	47a0      	blx	r4
 8002dac:	4603      	mov	r3, r0
    }
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bdb0      	pop	{r4, r5, r7, pc}

08002db6 <_ZN5L6470I8shield_3E13get_directionEv>:
    /**
     * @brief  Getting the direction of rotation.
     * @param  None.
     * @retval The direction of rotation.
     */
    virtual StepperMotor::direction_t get_direction(void)
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    {
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2104      	movs	r1, #4
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <_ZN5L6470I8shield_3E13get_directionEv+0x22>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <_ZN5L6470I8shield_3E13get_directionEv+0x24>
 8002dd8:	2300      	movs	r3, #0
    }
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_ZN5L6470I8shield_3E13set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	b2d1      	uxtb	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	4798      	blx	r3
    }
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <_ZN5L6470I8shield_3E8set_homeEv>:
    /**
     * @brief  Setting the current position to be the home position.
     * @param  None.
     * @retval None.
     */
    virtual void set_home(void)
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetPos();
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
    }
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_ZN5L6470I8shield_3E8set_markEv>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void set_mark(void)
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002e38:	681c      	ldr	r4, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2100      	movs	r1, #0
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2102      	movs	r1, #2
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	47a0      	blx	r4
    }
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}

08002e5c <_ZN5L6470I8shield_3E8set_markEi>:
    /**
     * @brief  Setting the current position to be the marked position.
     * @param  position The given position.
     * @retval None.
     */
    virtual void set_mark(signed int position)
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002e6e:	681c      	ldr	r4, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	2102      	movs	r1, #2
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	47a0      	blx	r4
    }
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd90      	pop	{r4, r7, pc}

08002e92 <_ZN5L6470I8shield_3E13set_max_speedEj>:
    /**
     * @brief  Setting the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_max_speed(unsigned int speed)
 8002e92:	b590      	push	{r4, r7, lr}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002ea4:	681c      	ldr	r4, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	ee07 2a90 	vmov	s15, r2
 8002eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eba:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2106      	movs	r1, #6
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	47a0      	blx	r4
        return true;
 8002ecc:	2301      	movs	r3, #1
    }
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}

08002ed6 <_ZN5L6470I8shield_3E13set_min_speedEj>:
    /**
     * @brief  Setting the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_min_speed(unsigned int speed)
 8002ed6:	b590      	push	{r4, r7, lr}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002ee8:	681c      	ldr	r4, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	ee07 2a90 	vmov	s15, r2
 8002efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efe:	eeb0 0a67 	vmov.f32	s0, s15
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2107      	movs	r1, #7
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	47a0      	blx	r4
        return true;
 8002f10:	2301      	movs	r3, #1
    }
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd90      	pop	{r4, r7, pc}

08002f1a <_ZN5L6470I8shield_3E16set_accelerationEj>:
    /**
     * @brief  Setting the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_acceleration(unsigned int acceleration)
 8002f1a:	b590      	push	{r4, r7, lr}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002f2c:	681c      	ldr	r4, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	ee07 2a90 	vmov	s15, r2
 8002f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f42:	eeb0 0a67 	vmov.f32	s0, s15
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2104      	movs	r1, #4
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	47a0      	blx	r4
        return true;
 8002f54:	2301      	movs	r3, #1
    }
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd90      	pop	{r4, r7, pc}

08002f5e <_ZN5L6470I8shield_3E16set_decelerationEj>:
    /**
     * @brief  Setting the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval "true" in case of success, "false" otherwise.
     */
    virtual bool set_deceleration(unsigned int deceleration)
 8002f5e:	b590      	push	{r4, r7, lr}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
    {
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002f70:	681c      	ldr	r4, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	ee07 2a90 	vmov	s15, r2
 8002f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f86:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	461a      	mov	r2, r3
 8002f92:	2105      	movs	r1, #5
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	47a0      	blx	r4
        return true;
 8002f98:	2301      	movs	r3, #1
    }
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd90      	pop	{r4, r7, pc}

08002fa2 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE>:
     * @warning Setting the step mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     * @warning Every time step mode is changed, the values of the home
     *          and mark positions lose meaning and are reset.
     */
    virtual bool set_step_mode(step_mode_t step_mode)
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70fb      	strb	r3, [r7, #3]
    {
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d901      	bls.n	8002fb8 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e00f      	b.n	8002fd8 <_ZN5L6470I8shield_3E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        }
        soft_hiz();
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3380      	adds	r3, #128	; 0x80
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	2115      	movs	r1, #21
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4798      	blx	r3
        return true;
 8002fd6:	2301      	movs	r3, #1
    }
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_ZN5L6470I8shield_3E5go_toEi>:
    /**
     * @brief  Going to a specified position through the shortest path.
     * @param  position The desired position.
     * @retval None.
     */
    virtual void go_to(signed int position)
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
    {
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8002ff2:	681c      	ldr	r4, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6839      	ldr	r1, [r7, #0]
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	4798      	blx	r3
 8003004:	4603      	mov	r3, r0
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	47a0      	blx	r4
    }
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bd90      	pop	{r4, r7, pc}

08003014 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE>:
     * @brief  Going to a specified position imposing the desired direction.
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8003014:	b5b0      	push	{r4, r5, r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	4613      	mov	r3, r2
 8003020:	71fb      	strb	r3, [r7, #7]
    {
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800302a:	681c      	ldr	r4, [r3, #0]
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x22>
 8003032:	2501      	movs	r5, #1
 8003034:	e000      	b.n	8003038 <_ZN5L6470I8shield_3E5go_toEiN12StepperMotor11direction_tE+0x24>
 8003036:	2500      	movs	r5, #0
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	4798      	blx	r3
 8003048:	4603      	mov	r3, r0
 800304a:	461a      	mov	r2, r3
 800304c:	4629      	mov	r1, r5
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	47a0      	blx	r4
    }
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bdb0      	pop	{r4, r5, r7, pc}

0800305a <_ZN5L6470I8shield_3E7go_homeEv>:
    /**
     * @brief  Going to the home position.
     * @param  None.
     * @retval None.
     */
    virtual void go_home(void)
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
    {
        L6470_GoHome();
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
    }
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_ZN5L6470I8shield_3E7go_markEv>:
    /**
     * @brief  Going to the marked position.
     * @param  None.
     * @retval None.
     */
    virtual void go_mark(void)
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
    {
        L6470_GoMark();
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
    }
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     * @note   The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8003096:	b5b0      	push	{r4, r5, r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	72fb      	strb	r3, [r7, #11]
 80030a4:	4613      	mov	r3, r2
 80030a6:	72bb      	strb	r3, [r7, #10]
    {
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030b0:	681c      	ldr	r4, [r3, #0]
 80030b2:	7abb      	ldrb	r3, [r7, #10]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80030b8:	2501      	movs	r5, #1
 80030ba:	e000      	b.n	80030be <_ZN5L6470I8shield_3E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80030bc:	2500      	movs	r5, #0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	ee07 2a90 	vmov	s15, r2
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	eeb0 0a67 	vmov.f32	s0, s15
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	4798      	blx	r3
 80030da:	4603      	mov	r3, r0
 80030dc:	7af9      	ldrb	r1, [r7, #11]
 80030de:	462a      	mov	r2, r5
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	47a0      	blx	r4
    }
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bdb0      	pop	{r4, r5, r7, pc}

080030ec <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE>:
    /**
     * @brief  Running towards a specified direction.
     * @param  direction The direction of rotation.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction)
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	70fb      	strb	r3, [r7, #3]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8003100:	681c      	ldr	r4, [r3, #0]
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x20>
 8003108:	2501      	movs	r5, #1
 800310a:	e000      	b.n	800310e <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tE+0x22>
 800310c:	2500      	movs	r5, #0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2106      	movs	r1, #6
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
 800311e:	4603      	mov	r3, r0
 8003120:	461a      	mov	r2, r3
 8003122:	4629      	mov	r1, r5
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	47a0      	blx	r4
    }
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bdb0      	pop	{r4, r5, r7, pc}

08003130 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj>:
     * @brief  Running towards a specified direction at the given speed.
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     */
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8003130:	b5b0      	push	{r4, r5, r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	460b      	mov	r3, r1
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8003146:	681c      	ldr	r4, [r3, #0]
 8003148:	7afb      	ldrb	r3, [r7, #11]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x22>
 800314e:	2501      	movs	r5, #1
 8003150:	e000      	b.n	8003154 <_ZN5L6470I8shield_3E3runEN12StepperMotor11direction_tEj+0x24>
 8003152:	2500      	movs	r5, #0
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	ee07 2a90 	vmov	s15, r2
 8003164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003168:	eeb0 0a67 	vmov.f32	s0, s15
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	4798      	blx	r3
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	4629      	mov	r1, r5
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	47a0      	blx	r4
    }
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bdb0      	pop	{r4, r5, r7, pc}

08003182 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj>:
     * @brief  Moving towards a specified direction for a certain number of steps.
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     */
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	460b      	mov	r3, r1
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	72fb      	strb	r3, [r7, #11]
    {
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	7afa      	ldrb	r2, [r7, #11]
 800319c:	2a01      	cmp	r2, #1
 800319e:	d101      	bne.n	80031a4 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x22>
 80031a0:	2101      	movs	r1, #1
 80031a2:	e000      	b.n	80031a6 <_ZN5L6470I8shield_3E4moveEN12StepperMotor11direction_tEj+0x24>
 80031a4:	2100      	movs	r1, #0
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	4798      	blx	r3
    }
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_ZN5L6470I8shield_3E9soft_stopEv>:
     * @brief  Stopping the motor through an immediate deceleration up to zero speed.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_stop(void)
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftStop();
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
    }
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_ZN5L6470I8shield_3E9hard_stopEv>:
    /**
     * @brief  Stopping the motor through an immediate infinite deceleration.
     * @param  None.
     * @retval None.
     */
    virtual void hard_stop(void)
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
    {
        L6470_HardStop();
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
    }
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <_ZN5L6470I8shield_3E8soft_hizEv>:
     * @brief  Disabling the power bridge after performing a deceleration to zero.
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     */
    virtual void soft_hiz(void)
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    {
        L6470_SoftHiZ();
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
    }
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <_ZN5L6470I8shield_3E8hard_hizEv>:
    /**
     * @brief  Disabling the power bridge immediately.
     * @param  None.
     * @retval None.
     */
    virtual void hard_hiz(void)
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
    {
        L6470_HardHiZ();
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
    }
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <_ZN5L6470I8shield_3E17wait_while_activeEv>:
    /**
     * @brief  Waiting while the motor is active.
     * @param  None.
     * @retval None.
     */
    virtual void wait_while_active(void)
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    {
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8003234:	bf00      	nop
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1ef      	bne.n	8003236 <_ZN5L6470I8shield_3E17wait_while_activeEv+0xa>
    }
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE>:
     * @param   direction The direction of rotation.
     * @retval  None.
     * @warning Setting the step-clock mode implies first disabling the power bridge through
     *          the soft_hiz() method.
     */
    virtual void step_clock(StepperMotor::direction_t direction)
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
    {
        soft_hiz();
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3380      	adds	r3, #128	; 0x80
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	2a01      	cmp	r2, #1
 8003286:	d101      	bne.n	800328c <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2c>
 8003288:	2201      	movs	r2, #1
 800328a:	e000      	b.n	800328e <_ZN5L6470I8shield_3E10step_clockEN12StepperMotor11direction_tE+0x2e>
 800328c:	2200      	movs	r2, #0
 800328e:	4611      	mov	r1, r2
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
    }
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      * @note   The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	70fb      	strb	r3, [r7, #3]
 80032a8:	4613      	mov	r3, r2
 80032aa:	70bb      	strb	r3, [r7, #2]
    {
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	78ba      	ldrb	r2, [r7, #2]
 80032b8:	2a01      	cmp	r2, #1
 80032ba:	d101      	bne.n	80032c0 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80032bc:	2201      	movs	r2, #1
 80032be:	e000      	b.n	80032c2 <_ZN5L6470I8shield_3E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80032c0:	2200      	movs	r2, #0
 80032c2:	78f9      	ldrb	r1, [r7, #3]
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
    }
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZN5L6470I8shield_3E12reset_deviceEv>:
    /**
      * @brief  Resetting the device to power-up conditions.
      * @param  None.
      * @retval None.
      */
    virtual void reset_device(void)
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    {
        L6470_ResetDevice();
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	4798      	blx	r3
    }
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZN5L6470I8shield_3E18prepare_get_statusEv>:
     * @brief  Preparing the command to get the status.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_status(void)
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetStatus();
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_ZN5L6470I8shield_3E21prepare_get_parameterEj>:
     *           + L6470_STEP_MODE_ID
     *           + L6470_ALARM_EN_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_get_parameter(unsigned int parameter)
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	4611      	mov	r1, r2
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <_ZN5L6470I8shield_3E20prepare_get_positionEv>:
     * @brief  Preparing the command to get the position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_position(void)
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2100      	movs	r1, #0
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_ZN5L6470I8shield_3E16prepare_get_markEv>:
     * @brief  Preparing the command to get the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_mark(void)
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2102      	movs	r1, #2
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <_ZN5L6470I8shield_3E17prepare_get_speedEv>:
     * @brief  Preparing the command to get the current speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_speed(void)
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2103      	movs	r1, #3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2203      	movs	r2, #3
 80033ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <_ZN5L6470I8shield_3E21prepare_get_max_speedEv>:
     * @brief  Preparing the command to get the maximum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_max_speed(void)
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2106      	movs	r1, #6
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2204      	movs	r2, #4
 80033d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <_ZN5L6470I8shield_3E21prepare_get_min_speedEv>:
     * @brief  Preparing the command to get the minimum speed in pps.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_min_speed(void)
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2107      	movs	r1, #7
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2205      	movs	r2, #5
 80033fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <_ZN5L6470I8shield_3E24prepare_get_accelerationEv>:
     * @brief  Preparing the command to get the acceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_acceleration(void)
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2104      	movs	r1, #4
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2206      	movs	r2, #6
 8003426:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <_ZN5L6470I8shield_3E24prepare_get_decelerationEv>:
     * @brief  Preparing the command to get the deceleration in pps^2.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_deceleration(void)
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2105      	movs	r1, #5
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2207      	movs	r2, #7
 800344e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <_ZN5L6470I8shield_3E21prepare_get_directionEv>:
     * @brief  Preparing the command to get the direction of rotation.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_get_direction(void)
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
    {
        if (!L6470_DaisyChain_HalfPrepared) {
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x26>
            /* To avoid deleting the previous entered command. */
            L6470_DaisyChain_HalfPrepared = ONE_F;
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x38>)
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
            /* Resetting commands. */
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4906      	ldr	r1, [pc, #24]	; (8003498 <_ZN5L6470I8shield_3E21prepare_get_directionEv+0x3c>)
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
        }
        prepared_action = PREPARED_GET_DIRECTION;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2208      	movs	r2, #8
 8003486:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000271 	.word	0x20000271
 8003498:	20000274 	.word	0x20000274

0800349c <_ZN5L6470I8shield_3E21prepare_set_parameterEjj>:
     *           + L6470_ADC_OUT_ID
     *           + L6470_STEP_MODE_ID
     *           + L6470_CONFIG_ID
     *           + L6470_STATUS_ID
     */
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	b2d1      	uxtb	r1, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <_ZN5L6470I8shield_3E16prepare_set_homeEv>:
     *         the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_home(void)
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetPos();
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <_ZN5L6470I8shield_3E16prepare_set_markEv>:
     *         the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(void)
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
        /*
           Set "0" now as marked position. This value will be replaced by the
           actual position read at the time when the prepared actions will be
           performed.
        */
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2200      	movs	r2, #0
 8003506:	2102      	movs	r1, #2
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2209      	movs	r2, #9
 8003510:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZN5L6470I8shield_3E16prepare_set_markEi>:
     *         the marked position.
     * @param  position The given position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_mark(signed int position)
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800352e:	681c      	ldr	r4, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6839      	ldr	r1, [r7, #0]
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	2102      	movs	r1, #2
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}

0800355a <_ZN5L6470I8shield_3E17prepare_set_speedEj>:
     * @brief  Preparing the command to set the current speed in pps.
     * @param  speed The current speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_speed(unsigned int speed)
 800355a:	b590      	push	{r4, r7, lr}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800356c:	681c      	ldr	r4, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	ee07 2a90 	vmov	s15, r2
 800357e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003582:	eeb0 0a67 	vmov.f32	s0, s15
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	2103      	movs	r1, #3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd90      	pop	{r4, r7, pc}

080035a4 <_ZN5L6470I8shield_3E21prepare_set_max_speedEj>:
     * @brief  Preparing the command to set the maximum speed in pps.
     * @param  speed The maximum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_max_speed(unsigned int speed)
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80035b6:	681c      	ldr	r4, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	ee07 2a90 	vmov	s15, r2
 80035c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035cc:	eeb0 0a67 	vmov.f32	s0, s15
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	2106      	movs	r1, #6
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd90      	pop	{r4, r7, pc}

080035ee <_ZN5L6470I8shield_3E21prepare_set_min_speedEj>:
     * @brief  Preparing the command to set the minimum speed in pps.
     * @param  speed The minimum speed in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_min_speed(unsigned int speed)
 80035ee:	b590      	push	{r4, r7, lr}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003600:	681c      	ldr	r4, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	ee07 2a90 	vmov	s15, r2
 8003612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003616:	eeb0 0a67 	vmov.f32	s0, s15
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	2107      	movs	r1, #7
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}

08003638 <_ZN5L6470I8shield_3E24prepare_set_accelerationEj>:
     * @brief  Preparing the command to set the acceleration in pps^2.
     * @param  acceleration The acceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800364a:	681c      	ldr	r4, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	ee07 2a90 	vmov	s15, r2
 800365c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003660:	eeb0 0a67 	vmov.f32	s0, s15
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	2104      	movs	r1, #4
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}

08003682 <_ZN5L6470I8shield_3E24prepare_set_decelerationEj>:
     * @brief  Preparing the command to set the deceleration in pps^2.
     * @param  deceleration The deceleration in pps^2.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8003682:	b590      	push	{r4, r7, lr}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003694:	681c      	ldr	r4, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	ee07 2a90 	vmov	s15, r2
 80036a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036aa:	eeb0 0a67 	vmov.f32	s0, s15
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	2105      	movs	r1, #5
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd90      	pop	{r4, r7, pc}

080036cc <_ZN5L6470I8shield_3E13prepare_go_toEi>:
     * @brief  Preparing the command to go to a specified position.
     * @param  position The desired position.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position)
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
    {
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6839      	ldr	r1, [r7, #0]
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
 80036f0:	4603      	mov	r3, r0
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bd90      	pop	{r4, r7, pc}

08003708 <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE>:
     * @param  position The desired position.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8003708:	b5b0      	push	{r4, r5, r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	71fb      	strb	r3, [r7, #7]
    {
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800371e:	681c      	ldr	r4, [r3, #0]
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8003726:	2501      	movs	r5, #1
 8003728:	e000      	b.n	800372c <_ZN5L6470I8shield_3E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 800372a:	2500      	movs	r5, #0
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	4798      	blx	r3
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	4629      	mov	r1, r5
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bdb0      	pop	{r4, r5, r7, pc}

08003756 <_ZN5L6470I8shield_3E15prepare_go_homeEv>:
     * @brief  Preparing the command to go to the home position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_home(void)
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoHome();
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <_ZN5L6470I8shield_3E15prepare_go_markEv>:
     * @brief  Preparing the command to go to the marked position.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_go_mark(void)
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareGoMark();
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
     *         The identifier of the action about the absolute position can be
     *         one of the following:
     *           + L6470_ACT_RST_ID: the absolute position is reset;
     *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
     */
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 80037a2:	b5b0      	push	{r4, r5, r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	72fb      	strb	r3, [r7, #11]
 80037b0:	4613      	mov	r3, r2
 80037b2:	72bb      	strb	r3, [r7, #10]
    {
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037bc:	681c      	ldr	r4, [r3, #0]
 80037be:	7abb      	ldrb	r3, [r7, #10]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80037c4:	2501      	movs	r5, #1
 80037c6:	e000      	b.n	80037ca <_ZN5L6470I8shield_3E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80037c8:	2500      	movs	r5, #0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	ee07 2a90 	vmov	s15, r2
 80037da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037de:	eeb0 0a67 	vmov.f32	s0, s15
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	4798      	blx	r3
 80037e6:	4603      	mov	r3, r0
 80037e8:	7af9      	ldrb	r1, [r7, #11]
 80037ea:	462a      	mov	r2, r5
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bdb0      	pop	{r4, r5, r7, pc}

08003800 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE>:
     *         at the maximum speed.
     * @param  direction The direction of rotation.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction)
 8003800:	b5b0      	push	{r4, r5, r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003814:	681c      	ldr	r4, [r3, #0]
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x20>
 800381c:	2501      	movs	r5, #1
 800381e:	e000      	b.n	8003822 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8003820:	2500      	movs	r5, #0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2106      	movs	r1, #6
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	4629      	mov	r1, r5
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bdb0      	pop	{r4, r5, r7, pc}

0800384c <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  speed The speed value in pps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 800384c:	b5b0      	push	{r4, r5, r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	460b      	mov	r3, r1
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003862:	681c      	ldr	r4, [r3, #0]
 8003864:	7afb      	ldrb	r3, [r7, #11]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 800386a:	2501      	movs	r5, #1
 800386c:	e000      	b.n	8003870 <_ZN5L6470I8shield_3E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 800386e:	2500      	movs	r5, #0
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	ee07 2a90 	vmov	s15, r2
 8003880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003884:	eeb0 0a67 	vmov.f32	s0, s15
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	4798      	blx	r3
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	4629      	mov	r1, r5
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bdb0      	pop	{r4, r5, r7, pc}

080038a6 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj>:
     * @param  direction The direction of rotation.
     * @param  steps The desired number of steps.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	460b      	mov	r3, r1
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	72fb      	strb	r3, [r7, #11]
    {
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	7afa      	ldrb	r2, [r7, #11]
 80038c0:	2a01      	cmp	r2, #1
 80038c2:	d101      	bne.n	80038c8 <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 80038c4:	2101      	movs	r1, #1
 80038c6:	e000      	b.n	80038ca <_ZN5L6470I8shield_3E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 80038c8:	2100      	movs	r1, #0
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <_ZN5L6470I8shield_3E17prepare_soft_stopEv>:
     * @brief  Preparing the command to stop the motor.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_stop(void)
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftStop();
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_ZN5L6470I8shield_3E17prepare_hard_stopEv>:
     * @brief  Preparing the command to stop the motor and disabling the power bridge.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_stop(void)
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardStop();
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <_ZN5L6470I8shield_3E16prepare_soft_hizEv>:
     *         The used deceleration value is the one stored in the "DECEL" register.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_soft_hiz(void)
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareSoftHiZ();
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_ZN5L6470I8shield_3E16prepare_hard_hizEv>:
     * @brief  Preparing the command to disable the power bridge immediately.
     * @param  None.
     * @retval None.
     * @note   The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_hard_hiz(void)
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareHardHiZ();
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE>:
     * @retval  None.
     * @warning Setting the step-clock mode requires an explicit action by the user to first
     *          disable the power bridge through the soft_hiz() method.
     * @note    The command will be sent by issuing "perform_action()".
     */
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
    {
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	2a01      	cmp	r2, #1
 8003992:	d101      	bne.n	8003998 <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8003994:	2201      	movs	r2, #1
 8003996:	e000      	b.n	800399a <_ZN5L6470I8shield_3E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8003998:	2200      	movs	r2, #0
 800399a:	4611      	mov	r1, r2
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
      *         The identifier of the action about the absolute position can be
      *         one of the following:
      *           + L6470_ACT_RST_ID: the absolute position is reset;
      *           + L6470_ACT_CPY_ID: the absolute position is set as the marked position.
      */
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
 80039bc:	4613      	mov	r3, r2
 80039be:	70bb      	strb	r3, [r7, #2]
    {
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	78ba      	ldrb	r2, [r7, #2]
 80039cc:	2a01      	cmp	r2, #1
 80039ce:	d101      	bne.n	80039d4 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80039d0:	2201      	movs	r2, #1
 80039d2:	e000      	b.n	80039d6 <_ZN5L6470I8shield_3E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 80039d4:	2200      	movs	r2, #0
 80039d6:	78f9      	ldrb	r1, [r7, #3]
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_ZN5L6470I8shield_3E20prepare_reset_deviceEv>:
      * @brief  Preparing the command to reset the device to power-up conditions.
      * @param  None.
      * @retval None.
      * @note   The command will be sent by issuing "perform_action()".
      */
    virtual void prepare_reset_device(void)
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
    {
        L6470_PrepareResetDevice();
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_ZN5L6470I8shield_3E24perform_prepared_actionsEv>:
      * @brief    Performing all the actions prepared on the components
      *           of the daisy-chain.
      * @param    None.
      * @retval   The raw data returned by the components.
      */
    uint8_t* perform_prepared_actions(void)
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
    {
        return L6470_PerformPreparedApplicationCommand();
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4798      	blx	r3
 8003a28:	4603      	mov	r3, r0
    }
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <_ZN5L6470I8shield_3E19get_prepared_actionEv>:
    /**
      * @brief    Getting the prepared action.
      * @param    None
      * @retval   The prepared action.
      */
    prepared_action_t get_prepared_action(void)
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
    {
        return prepared_action;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    }
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <_ZN5L6470I8shield_3E10get_resultEPh>:
      * @brief    Converting the raw data received by the component according to
      *           the action performed on it.
      * @param    raw_data The received raw data.
      * @retval   The result of the action performed.
      */
    int32_t get_result(uint8_t *raw_data)
 8003a4c:	b5b0      	push	{r4, r5, r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
    {
        switch (prepared_action) {
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	2b07      	cmp	r3, #7
 8003a60:	f200 80fe 	bhi.w	8003c60 <_ZN5L6470I8shield_3E10get_resultEPh+0x214>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <_ZN5L6470I8shield_3E10get_resultEPh+0x20>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a8d 	.word	0x08003a8d
 8003a70:	08003ab9 	.word	0x08003ab9
 8003a74:	08003ae7 	.word	0x08003ae7
 8003a78:	08003b2b 	.word	0x08003b2b
 8003a7c:	08003b71 	.word	0x08003b71
 8003a80:	08003bb7 	.word	0x08003bb7
 8003a84:	08003bfd 	.word	0x08003bfd
 8003a88:	08003c43 	.word	0x08003c43
            case PREPARED_GET_POSITION:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003a94:	681c      	ldr	r4, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6a12      	ldr	r2, [r2, #32]
 8003aa4:	7b92      	ldrb	r2, [r2, #14]
 8003aa6:	6839      	ldr	r1, [r7, #0]
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
 8003aac:	4603      	mov	r3, r0
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	47a0      	blx	r4
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	e0d4      	b.n	8003c62 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_MARK:
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003ac0:	681c      	ldr	r4, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6a12      	ldr	r2, [r2, #32]
 8003ad0:	3228      	adds	r2, #40	; 0x28
 8003ad2:	7b92      	ldrb	r2, [r2, #14]
 8003ad4:	6839      	ldr	r1, [r7, #0]
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	4619      	mov	r1, r3
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	47a0      	blx	r4
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	e0bd      	b.n	8003c62 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_SPEED:
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003aee:	681c      	ldr	r4, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003af8:	681d      	ldr	r5, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6a12      	ldr	r2, [r2, #32]
 8003b08:	323c      	adds	r2, #60	; 0x3c
 8003b0a:	7b92      	ldrb	r2, [r2, #14]
 8003b0c:	6839      	ldr	r1, [r7, #0]
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	47a8      	blx	r5
 8003b1a:	eef0 7a40 	vmov.f32	s15, s0
 8003b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	47a0      	blx	r4
 8003b26:	4603      	mov	r3, r0
 8003b28:	e09b      	b.n	8003c62 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MAX_SPEED:
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b32:	681c      	ldr	r4, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b3c:	681d      	ldr	r5, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6a12      	ldr	r2, [r2, #32]
 8003b4c:	3278      	adds	r2, #120	; 0x78
 8003b4e:	7b92      	ldrb	r2, [r2, #14]
 8003b50:	6839      	ldr	r1, [r7, #0]
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4798      	blx	r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	47a8      	blx	r5
 8003b60:	eef0 7a40 	vmov.f32	s15, s0
 8003b64:	eeb0 0a67 	vmov.f32	s0, s15
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	47a0      	blx	r4
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	e078      	b.n	8003c62 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_MIN_SPEED:
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b78:	681c      	ldr	r4, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003b82:	681d      	ldr	r5, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6a12      	ldr	r2, [r2, #32]
 8003b92:	328c      	adds	r2, #140	; 0x8c
 8003b94:	7b92      	ldrb	r2, [r2, #14]
 8003b96:	6839      	ldr	r1, [r7, #0]
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	47a8      	blx	r5
 8003ba6:	eef0 7a40 	vmov.f32	s15, s0
 8003baa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	47a0      	blx	r4
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	e055      	b.n	8003c62 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_ACCELERATION:
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003bbe:	681c      	ldr	r4, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003bc8:	681d      	ldr	r5, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6a12      	ldr	r2, [r2, #32]
 8003bd8:	3250      	adds	r2, #80	; 0x50
 8003bda:	7b92      	ldrb	r2, [r2, #14]
 8003bdc:	6839      	ldr	r1, [r7, #0]
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	47a8      	blx	r5
 8003bec:	eef0 7a40 	vmov.f32	s15, s0
 8003bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	47a0      	blx	r4
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	e032      	b.n	8003c62 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
    
            case PREPARED_GET_DECELERATION:
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c04:	681c      	ldr	r4, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003c0e:	681d      	ldr	r5, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6a12      	ldr	r2, [r2, #32]
 8003c1e:	3264      	adds	r2, #100	; 0x64
 8003c20:	7b92      	ldrb	r2, [r2, #14]
 8003c22:	6839      	ldr	r1, [r7, #0]
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	4603      	mov	r3, r0
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	47a8      	blx	r5
 8003c32:	eef0 7a40 	vmov.f32	s15, s0
 8003c36:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	47a0      	blx	r4
 8003c3e:	4603      	mov	r3, r0
 8003c40:	e00f      	b.n	8003c62 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            case PREPARED_GET_DIRECTION:
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2104      	movs	r1, #4
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <_ZN5L6470I8shield_3E10get_resultEPh+0x210>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e002      	b.n	8003c62 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e000      	b.n	8003c62 <_ZN5L6470I8shield_3E10get_resultEPh+0x216>

            default:
            case PREPARED_NO_ACTION:
                return 0;
 8003c60:	2300      	movs	r3, #0
        }
    }
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6a:	bf00      	nop

08003c6c <_ZN5L6470I8shield_3E13L6470_DISABLEEv>:
    }

    /*
     * Puts the device in reset mode.
     */
    void L6470_DISABLE(void)
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    {
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6898      	ldr	r0, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	899b      	ldrh	r3, [r3, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f00c fa50 	bl	8010124 <HAL_GPIO_WritePin>
    }
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
template <class shield_x>
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
{
  if (AbsPos > L6470_MAX_POSITION)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c9c:	d303      	bcc.n	8003ca6 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8003ca4:	e000      	b.n	8003ca8 <_ZN5L6470I8shield_3E23L6470_AbsPos_2_PositionEm+0x1c>
  else
    return AbsPos;
 8003ca6:	683b      	ldr	r3, [r7, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl>:
  * 
  * @param  Position    The position as signed number.
  * @retval AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
{
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	db05      	blt.n	8003cd0 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cca:	da01      	bge.n	8003cd0 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	e00c      	b.n	8003cea <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
  else
  {
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
 8003cd6:	db06      	blt.n	8003ce6 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da03      	bge.n	8003ce6 <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8003ce4:	e001      	b.n	8003cea <_ZN5L6470I8shield_3E23L6470_Position_2_AbsPosEl+0x36>
    else
      return (L6470_POSITION_RANGE + 1);        // OVF
 8003ce6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm>:
  * 
  * @param  Speed       The SPEED register value.
  * @retval step/s      The speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
{
  return (Speed * ((float)14.9012e-3));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003d24 <_ZN5L6470I8shield_3E20L6470_Speed_2_Step_sEm+0x2c>
 8003d10:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003d14:	eeb0 0a67 	vmov.f32	s0, s15
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	3c74242a 	.word	0x3c74242a

08003d28 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
template <class shield_x>
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8003d34:	edd7 7a00 	vldr	s15, [r7]
 8003d38:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003d6c <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x44>
 8003d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	d80a      	bhi.n	8003d5c <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8003d46:	ed97 7a00 	vldr	s14, [r7]
 8003d4a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003d70 <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x48>
 8003d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d56:	ee17 3a90 	vmov	r3, s15
 8003d5a:	e000      	b.n	8003d5e <_ZN5L6470I8shield_3E20L6470_Step_s_2_SpeedEf+0x36>
  else
    return 0;   // Warning
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	4674241b 	.word	0x4674241b
 8003d70:	3c74242a 	.word	0x3c74242a

08003d74 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et>:
  * 
  * @param  Acc         The ACCEL register value.
  * @retval step/(s^2)  The acceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
{
  if (Acc <= L6470_MAX_ACC)
 8003d80:	887b      	ldrh	r3, [r7, #2]
 8003d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d86:	d209      	bcs.n	8003d9c <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d92:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003db0 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x3c>
 8003d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d9a:	e001      	b.n	8003da0 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003d9c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003db4 <_ZN5L6470I8shield_3E19L6470_Acc_2_Step_s2Et+0x40>
}
 8003da0:	eeb0 0a67 	vmov.f32	s0, s15
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	4168d4fe 	.word	0x4168d4fe
 8003db4:	00000000 	.word	0x00000000

08003db8 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACCEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8003dc4:	edd7 7a00 	vldr	s15, [r7]
 8003dc8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003dfc <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x44>
 8003dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd4:	d80b      	bhi.n	8003dee <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003dd6:	ed97 7a00 	vldr	s14, [r7]
 8003dda:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003e00 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x48>
 8003dde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de6:	ee17 3a90 	vmov	r3, s15
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	e000      	b.n	8003df0 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_AccEf+0x38>
  else
    return 0;   // Warning
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	4768c671 	.word	0x4768c671
 8003e00:	4168d4fe 	.word	0x4168d4fe

08003e04 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et>:
  * 
  * @param  Dec         The DECEL register value.
  * @retval step/(s^2)  The deceleration as step/(s^2).
  */
template <class shield_x>
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
{
  if (Dec <= L6470_MAX_DEC)
 8003e10:	887b      	ldrh	r3, [r7, #2]
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d209      	bcs.n	8003e2c <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e22:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003e40 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x3c>
 8003e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e2a:	e001      	b.n	8003e30 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x2c>
  else
    return 0;   // Warning
 8003e2c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003e44 <_ZN5L6470I8shield_3E19L6470_Dec_2_Step_s2Et+0x40>
}
 8003e30:	eeb0 0a67 	vmov.f32	s0, s15
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	4168d4fe 	.word	0x4168d4fe
 8003e44:	00000000 	.word	0x00000000

08003e48 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DECEL register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8003e54:	edd7 7a00 	vldr	s15, [r7]
 8003e58:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003e8c <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x44>
 8003e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e64:	d80b      	bhi.n	8003e7e <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003e66:	ed97 7a00 	vldr	s14, [r7]
 8003e6a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003e90 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x48>
 8003e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e76:	ee17 3a90 	vmov	r3, s15
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	e000      	b.n	8003e80 <_ZN5L6470I8shield_3E19L6470_Step_s2_2_DecEf+0x38>
  else
    return 0;   // Warning
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	4768c671 	.word	0x4768c671
 8003e90:	4168d4fe 	.word	0x4168d4fe

08003e94 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt>:
  * 
  * @param  MaxSpeed    The MAX_SPEED register value.
  * @retval step/s      The max speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
{
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea6:	d209      	bcs.n	8003ebc <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8003ea8:	887b      	ldrh	r3, [r7, #2]
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003ed0 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8003eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eba:	e001      	b.n	8003ec0 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8003ebc:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003ed4 <_ZN5L6470I8shield_3E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8003ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	4174240b 	.word	0x4174240b
 8003ed4:	00000000 	.word	0x00000000

08003ed8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8003ee4:	edd7 7a00 	vldr	s15, [r7]
 8003ee8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003f1c <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x44>
 8003eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef4:	d80b      	bhi.n	8003f0e <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8003ef6:	ed97 7a00 	vldr	s14, [r7]
 8003efa:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003f20 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x48>
 8003efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f06:	ee17 3a90 	vmov	r3, s15
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	e000      	b.n	8003f10 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MaxSpeedEf+0x38>
  else
    return 0;   // Warning
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	4673e702 	.word	0x4673e702
 8003f20:	4174240b 	.word	0x4174240b

08003f24 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt>:
  * 
  * @param  MinSpeed    The MIN_SPEED register value.
  * @retval step/s      The min speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
{
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 8003f30:	887b      	ldrh	r3, [r7, #2]
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f36:	d209      	bcs.n	8003f4c <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 8003f38:	887b      	ldrh	r3, [r7, #2]
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f42:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003f60 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x3c>
 8003f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f4a:	e001      	b.n	8003f50 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8003f4c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003f64 <_ZN5L6470I8shield_3E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 8003f50:	eeb0 0a67 	vmov.f32	s0, s15
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	3e742401 	.word	0x3e742401
 8003f64:	00000000 	.word	0x00000000

08003f68 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8003f74:	edd7 7a00 	vldr	s15, [r7]
 8003f78:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003fac <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x44>
 8003f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f84:	d80b      	bhi.n	8003f9e <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8003f86:	ed97 7a00 	vldr	s14, [r7]
 8003f8a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003fb0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x48>
 8003f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f96:	ee17 3a90 	vmov	r3, s15
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	e000      	b.n	8003fa0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_MinSpeedEf+0x38>
  else
    return 0;   // Warning
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	447414bf 	.word	0x447414bf
 8003fb0:	3e742401 	.word	0x3e742401

08003fb4 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt>:
  * 
  * @param  FsSpd       The FS_SPD register value.
  * @retval step/s      The full-step speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
{
  if (FsSpd <= L6470_MAX_FS_SPD)
 8003fc0:	887b      	ldrh	r3, [r7, #2]
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d219      	bcs.n	8003ffc <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8003fc8:	887b      	ldrh	r3, [r7, #2]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fc fada 	bl	8000584 <__aeabi_i2d>
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8003fd6:	f7fc f989 	bl	80002ec <__adddf3>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x60>)
 8003fe8:	f7fc fb36 	bl	8000658 <__aeabi_dmul>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f7fc fe08 	bl	8000c08 <__aeabi_d2f>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	e001      	b.n	8004000 <_ZN5L6470I8shield_3E20L6470_FsSpd_2_Step_sEt+0x4c>
  else
    return 0;   // Warning
 8003ffc:	f04f 0300 	mov.w	r3, #0
}
 8004000:	ee07 3a90 	vmov	s15, r3
 8004004:	eeb0 0a67 	vmov.f32	s0, s15
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	3fe00000 	.word	0x3fe00000
 8004014:	402e8000 	.word	0x402e8000

08004018 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8004024:	edd7 7a00 	vldr	s15, [r7]
 8004028:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004064 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x4c>
 800402c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004034:	d80f      	bhi.n	8004056 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8004036:	ed97 7a00 	vldr	s14, [r7]
 800403a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004068 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x50>
 800403e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004042:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800404a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800404e:	ee17 3a90 	vmov	r3, s15
 8004052:	b29b      	uxth	r3, r3
 8004054:	e000      	b.n	8004058 <_ZN5L6470I8shield_3E20L6470_Step_s_2_FsSpdEf+0x40>
  else
    return 0;   // Warning
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	4673e180 	.word	0x4673e180
 8004068:	41740000 	.word	0x41740000

0800406c <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	807b      	strh	r3, [r7, #2]
{
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8004078:	887b      	ldrh	r3, [r7, #2]
 800407a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800407e:	d209      	bcs.n	8004094 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800408a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80040a8 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800408e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004092:	e001      	b.n	8004098 <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x2c>
  else
    return 0;   // Warning
 8004094:	eddf 7a05 	vldr	s15, [pc, #20]	; 80040ac <_ZN5L6470I8shield_3E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8004098:	eeb0 0a67 	vmov.f32	s0, s15
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	3d7423f4 	.word	0x3d7423f4
 80040ac:	00000000 	.word	0x00000000

080040b0 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	ed87 0a00 	vstr	s0, [r7]
{
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 80040bc:	edd7 7a00 	vldr	s15, [r7]
 80040c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80040f4 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x44>
 80040c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	d80b      	bhi.n	80040e6 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 80040ce:	ed97 7a00 	vldr	s14, [r7]
 80040d2:	eddf 6a09 	vldr	s13, [pc, #36]	; 80040f8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x48>
 80040d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040de:	ee17 3a90 	vmov	r3, s15
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	e000      	b.n	80040e8 <_ZN5L6470I8shield_3E23L6470_Step_s_2_IntSpeedEf+0x38>
  else
    return 0;   // Warning
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	44742023 	.word	0x44742023
 80040f8:	3d7423f4 	.word	0x3d7423f4

080040fc <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh>:
  * 
  * @param  StartSlope  The ST_SLP register value.
  * @retval s/step      The start slope as s/step.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]
{
//  if (StSlp <= L6470_MAX_ST_SLP)
    return (StSlp * ((float)1.5686e-5));
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004112:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004128 <_ZN5L6470I8shield_3E20L6470_StSlp_2_s_StepEh+0x2c>
 8004116:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 800411a:	eeb0 0a67 	vmov.f32	s0, s15
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	3783956e 	.word	0x3783956e

0800412c <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004138:	edd7 7a02 	vldr	s15, [r7, #8]
 800413c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004174 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x48>
 8004140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004148:	d80c      	bhi.n	8004164 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800414a:	ed97 7a02 	vldr	s14, [r7, #8]
 800414e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004178 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x4c>
 8004152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800415a:	edc7 7a01 	vstr	s15, [r7, #4]
 800415e:	793b      	ldrb	r3, [r7, #4]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e000      	b.n	8004166 <_ZN5L6470I8shield_3E20L6470_s_Step_2_StSlpEf+0x3a>
  else
    return 0;   // Warning
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	3b8311d9 	.word	0x3b8311d9
 8004178:	3783956e 	.word	0x3783956e

0800417c <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpAcc <= L6470_MAX_FN_SLP_ACC)
    return (FnSlpAcc * ((float)1.5686e-5));
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004192:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80041a8 <_ZN5L6470I8shield_3E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8004196:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 800419a:	eeb0 0a67 	vmov.f32	s0, s15
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	3783956e 	.word	0x3783956e

080041ac <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 80041b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80041bc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80041f4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x48>
 80041c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c8:	d80c      	bhi.n	80041e4 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80041ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80041ce:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80041f8 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 80041d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041da:	edc7 7a01 	vstr	s15, [r7, #4]
 80041de:	793b      	ldrb	r3, [r7, #4]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e000      	b.n	80041e6 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpAccEf+0x3a>
  else
    return 0;   // Warning
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	3b8311d9 	.word	0x3b8311d9
 80041f8:	3783956e 	.word	0x3783956e

080041fc <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh>:
  * 
  * @param  IntSpeed    The INT_SPEED register value.
  * @retval step/s      The intersect speed as step/s.
  */
template <class shield_x>
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
{
//  if (FnSlpDec <= L6470_MAX_FN_SLP_DEC)
    return (FnSlpDec * ((float)1.5686e-5));
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004212:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004228 <_ZN5L6470I8shield_3E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 8004216:	ee67 7a87 	vmul.f32	s15, s15, s14
//  else
//    return 0;   // Warning
}
 800421a:	eeb0 0a67 	vmov.f32	s0, s15
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	3783956e 	.word	0x3783956e

0800422c <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	ed87 0a02 	vstr	s0, [r7, #8]
{
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8004238:	edd7 7a02 	vldr	s15, [r7, #8]
 800423c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004274 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x48>
 8004240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004248:	d80c      	bhi.n	8004264 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800424a:	ed97 7a02 	vldr	s14, [r7, #8]
 800424e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004278 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 8004252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425a:	edc7 7a01 	vstr	s15, [r7, #4]
 800425e:	793b      	ldrb	r3, [r7, #4]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e000      	b.n	8004266 <_ZN5L6470I8shield_3E23L6470_s_Step_2_FnSlpDecEf+0x3a>
  else
    return 0;   // Warning
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	3b8311d9 	.word	0x3b8311d9
 8004278:	3783956e 	.word	0x3783956e

0800427c <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh>:
  * 
  * @param  OcdTh       The OCD_TH register value.
  * @retval mA          The overcurrent threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
{
  if (OcdTh <= L6470_MAX_OCD_TH)
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	2b0f      	cmp	r3, #15
 800428c:	d80a      	bhi.n	80042a4 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	3301      	adds	r3, #1
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800429a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80042b8 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x3c>
 800429e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a2:	e001      	b.n	80042a8 <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x2c>
  else
    return 0;   // Warning
 80042a4:	eddf 7a05 	vldr	s15, [pc, #20]	; 80042bc <_ZN5L6470I8shield_3E16L6470_OcdTh_2_mAEh+0x40>
}
 80042a8:	eeb0 0a67 	vmov.f32	s0, s15
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	43bb8000 	.word	0x43bb8000
 80042bc:	00000000 	.word	0x00000000

080042c0 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80042cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80042d0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800435c <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x9c>
 80042d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042dc:	d836      	bhi.n	800434c <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8c>
  {
    result = (mA / ((float)375));
 80042de:	ed97 7a02 	vldr	s14, [r7, #8]
 80042e2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004360 <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0xa0>
 80042e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042ea:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80042ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80042f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80042fa:	793b      	ldrb	r3, [r7, #4]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004306:	ed97 7a05 	vldr	s14, [r7, #20]
 800430a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800430e:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 8004312:	edd7 7a04 	vldr	s15, [r7, #16]
 8004316:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800431a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004322:	d50a      	bpl.n	800433a <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 8004324:	edd7 7a05 	vldr	s15, [r7, #20]
 8004328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800432c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004330:	793b      	ldrb	r3, [r7, #4]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b2db      	uxtb	r3, r3
 8004338:	e009      	b.n	800434e <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
    else
      return ((uint8_t)result);    
 800433a:	edd7 7a05 	vldr	s15, [r7, #20]
 800433e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004342:	edc7 7a01 	vstr	s15, [r7, #4]
 8004346:	793b      	ldrb	r3, [r7, #4]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e000      	b.n	800434e <_ZN5L6470I8shield_3E16L6470_mA_2_OcdThEf+0x8e>
  }
  else
    return 0;   // Warning
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	45bb8000 	.word	0x45bb8000
 8004360:	43bb8000 	.word	0x43bb8000

08004364 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh>:
  * 
  * @param  StallTh     The STALL_TH register value.
  * @retval mA          The stall detection threshold as mA.
  */
template <class shield_x>
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
{
  if (StallTh <= L6470_MAX_STALL_TH)
 8004370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004374:	2b00      	cmp	r3, #0
 8004376:	db0a      	blt.n	800438e <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	3301      	adds	r3, #1
 800437c:	ee07 3a90 	vmov	s15, r3
 8004380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004384:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80043a0 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x3c>
 8004388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800438c:	e001      	b.n	8004392 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x2e>
  else
    return 0;   // Warning
 800438e:	eddf 7a05 	vldr	s15, [pc, #20]	; 80043a4 <_ZN5L6470I8shield_3E18L6470_StallTh_2_mAEh+0x40>
}
 8004392:	eeb0 0a67 	vmov.f32	s0, s15
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	41fa0000 	.word	0x41fa0000
 80043a4:	00000000 	.word	0x00000000

080043a8 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
template <class shield_x>
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	ed87 0a02 	vstr	s0, [r7, #8]
{
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 80043b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80043b8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004444 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x9c>
 80043bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c4:	d836      	bhi.n	8004434 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8c>
  {
    result = (mA / ((float)31.25));
 80043c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80043ca:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004448 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0xa0>
 80043ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043d2:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 80043d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80043da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043de:	edc7 7a01 	vstr	s15, [r7, #4]
 80043e2:	793b      	ldrb	r3, [r7, #4]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80043f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f6:	edc7 7a04 	vstr	s15, [r7, #16]
    
    if (decimal < (float)0.5)
 80043fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80043fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440a:	d50a      	bpl.n	8004422 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800440c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004414:	edc7 7a01 	vstr	s15, [r7, #4]
 8004418:	793b      	ldrb	r3, [r7, #4]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b2db      	uxtb	r3, r3
 8004420:	e009      	b.n	8004436 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
    else
      return ((uint8_t)result);    
 8004422:	edd7 7a05 	vldr	s15, [r7, #20]
 8004426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442a:	edc7 7a01 	vstr	s15, [r7, #4]
 800442e:	793b      	ldrb	r3, [r7, #4]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e000      	b.n	8004436 <_ZN5L6470I8shield_3E18L6470_mA_2_StallThEf+0x8e>
  }
  else
    return 0;   // Warning
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	457a0000 	.word	0x457a0000
 8004448:	41fa0000 	.word	0x41fa0000

0800444c <_ZN5L6470I8shield_3E12L6470_ConfigEPv>:
/**
  * @brief  Configures the L6470 registers.
  * @param  init The pointer to the initialization structure.
  */
template <class shield_x>
status_t L6470<shield_x>::L6470_Config(void *init)
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
{
  /* Reset devices. */
  reset_device();
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3394      	adds	r3, #148	; 0x94
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	4798      	blx	r3

  /* Reset Status Register flags. */
  get_status();
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	4798      	blx	r3

  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	edd2 7a05 	vldr	s15, [r2, #20]
 8004482:	eeb0 0a67 	vmov.f32	s0, s15
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	4798      	blx	r3
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	edd2 7a06 	vldr	s15, [r2, #24]
 80044a4:	eeb0 0a67 	vmov.f32	s0, s15
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	4798      	blx	r3
 80044ac:	4603      	mov	r3, r0
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	edd2 7a07 	vldr	s15, [r2, #28]
 80044c6:	eeb0 0a67 	vmov.f32	s0, s15
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	4798      	blx	r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	edd2 7a08 	vldr	s15, [r2, #32]
 80044e8:	eeb0 0a67 	vmov.f32	s0, s15
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	4798      	blx	r3
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800450a:	eeb0 0a67 	vmov.f32	s0, s15
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	4798      	blx	r3
 8004512:	4603      	mov	r3, r0
 8004514:	461a      	mov	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004522:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80047f4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004526:	ee67 6a87 	vmul.f32	s13, s15, s14
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	ed93 7a00 	vldr	s14, [r3]
 8004530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004538:	edc7 7a01 	vstr	s15, [r7, #4]
 800453c:	793b      	ldrb	r3, [r7, #4]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800454c:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80047f4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 8004550:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	ed93 7a00 	vldr	s14, [r3]
 800455a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800455e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004562:	edc7 7a01 	vstr	s15, [r7, #4]
 8004566:	793b      	ldrb	r3, [r7, #4]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004576:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80047f4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 800457a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	ed93 7a00 	vldr	s14, [r3]
 8004584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800458c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004590:	793b      	ldrb	r3, [r7, #4]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80045a0:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80047f4 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3a8>
 80045a4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	ed93 7a00 	vldr	s14, [r3]
 80045ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80045ba:	793b      	ldrb	r3, [r7, #4]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80045d4:	eeb0 0a67 	vmov.f32	s0, s15
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	4798      	blx	r3
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 80045f6:	eeb0 0a67 	vmov.f32	s0, s15
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	4798      	blx	r3
 80045fe:	4603      	mov	r3, r0
 8004600:	461a      	mov	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	edd2 7a10 	vldr	s15, [r2, #64]	; 0x40
 8004618:	eeb0 0a67 	vmov.f32	s0, s15
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	4798      	blx	r3
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800463a:	eeb0 0a67 	vmov.f32	s0, s15
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	4798      	blx	r3
 8004642:	4603      	mov	r3, r0
 8004644:	461a      	mov	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	edd2 7a13 	vldr	s15, [r2, #76]	; 0x4c
 8004668:	eeb0 0a67 	vmov.f32	s0, s15
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	4798      	blx	r3
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	edd2 7a14 	vldr	s15, [r2, #80]	; 0x50
 800468a:	eeb0 0a67 	vmov.f32	s0, s15
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	4798      	blx	r3
 8004692:	4603      	mov	r3, r0
 8004694:	461a      	mov	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

  /* Write the L6470 registers with the prepared data */
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 80046d0:	2104      	movs	r1, #4
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 80046e6:	2105      	movs	r1, #5
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 80046fc:	2106      	movs	r1, #6
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 8004712:	2107      	movs	r1, #7
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8004728:	2108      	movs	r1, #8
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800473e:	2109      	movs	r1, #9
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 8004754:	210a      	movs	r1, #10
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800476a:	210b      	movs	r1, #11
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004780:	210c      	movs	r1, #12
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 8004796:	210d      	movs	r1, #13
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 80047ac:	210e      	movs	r1, #14
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 80047c2:	210f      	movs	r1, #15
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 80047d8:	2110      	movs	r1, #16
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	f892 205b 	ldrb.w	r2, [r2, #91]	; 0x5b
 80047ee:	2111      	movs	r1, #17
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	e001      	b.n	80047f8 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x3ac>
 80047f4:	43800000 	.word	0x43800000
 80047f8:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 800480a:	2113      	movs	r1, #19
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 8004820:	2114      	movs	r1, #20
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004836:	2116      	movs	r1, #22
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 800484c:	2117      	movs	r1, #23
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3354      	adds	r3, #84	; 0x54
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 8004860:	4611      	mov	r1, r2
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	4798      	blx	r3
 8004866:	4603      	mov	r3, r0
 8004868:	f083 0301 	eor.w	r3, r3, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <_ZN5L6470I8shield_3E12L6470_ConfigEPv+0x42c>
  
  return COMPONENT_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b087      	sub	sp, #28
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	460b      	mov	r3, r1
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004896:	681c      	ldr	r4, [r3, #0]
 8004898:	7afa      	ldrb	r2, [r7, #11]
 800489a:	2300      	movs	r3, #0
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	4613      	mov	r3, r2
 80048a4:	2201      	movs	r2, #1
 80048a6:	490c      	ldr	r1, [pc, #48]	; (80048d8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a09      	ldr	r2, [pc, #36]	; (80048dc <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 80048b8:	4907      	ldr	r1, [pc, #28]	; (80048d8 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a05      	ldr	r2, [pc, #20]	; (80048e0 <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 80048ca:	4904      	ldr	r1, [pc, #16]	; (80048dc <_ZN5L6470I8shield_3E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	4798      	blx	r3
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd90      	pop	{r4, r7, pc}
 80048d8:	20000274 	.word	0x20000274
 80048dc:	20000294 	.word	0x20000294
 80048e0:	2000029c 	.word	0x2000029c

080048e4 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80048f8:	681c      	ldr	r4, [r3, #0]
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	2200      	movs	r2, #0
 80048fe:	9201      	str	r2, [sp, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	9200      	str	r2, [sp, #0]
 8004904:	2202      	movs	r2, #2
 8004906:	4917      	ldr	r1, [pc, #92]	; (8004964 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a14      	ldr	r2, [pc, #80]	; (8004968 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8004918:	4912      	ldr	r1, [pc, #72]	; (8004964 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a10      	ldr	r2, [pc, #64]	; (800496c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800492a:	490f      	ldr	r1, [pc, #60]	; (8004968 <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a19      	ldr	r1, [r3, #32]
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	7b9b      	ldrb	r3, [r3, #14]
 8004942:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	4906      	ldr	r1, [pc, #24]	; (800496c <_ZN5L6470I8shield_3E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4798      	blx	r3
 8004956:	4603      	mov	r3, r0
 8004958:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800495a:	68bb      	ldr	r3, [r7, #8]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	bd90      	pop	{r4, r7, pc}
 8004964:	20000274 	.word	0x20000274
 8004968:	20000294 	.word	0x20000294
 800496c:	2000029c 	.word	0x2000029c

08004970 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b087      	sub	sp, #28
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	460b      	mov	r3, r1
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004986:	681c      	ldr	r4, [r3, #0]
 8004988:	7afa      	ldrb	r2, [r7, #11]
 800498a:	2300      	movs	r3, #0
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	2203      	movs	r2, #3
 8004996:	490c      	ldr	r1, [pc, #48]	; (80049c8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 80049a8:	4907      	ldr	r1, [pc, #28]	; (80049c8 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x58>)
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a05      	ldr	r2, [pc, #20]	; (80049d0 <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x60>)
 80049ba:	4904      	ldr	r1, [pc, #16]	; (80049cc <_ZN5L6470I8shield_3E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	4798      	blx	r3
}
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd90      	pop	{r4, r7, pc}
 80049c8:	20000274 	.word	0x20000274
 80049cc:	20000294 	.word	0x20000294
 80049d0:	2000029c 	.word	0x2000029c

080049d4 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af02      	add	r7, sp, #8
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80049e8:	681c      	ldr	r4, [r3, #0]
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	2200      	movs	r2, #0
 80049ee:	9201      	str	r2, [sp, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	9200      	str	r2, [sp, #0]
 80049f4:	2204      	movs	r2, #4
 80049f6:	490c      	ldr	r1, [pc, #48]	; (8004a28 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004a08:	4907      	ldr	r1, [pc, #28]	; (8004a28 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8004a1a:	4904      	ldr	r1, [pc, #16]	; (8004a2c <_ZN5L6470I8shield_3E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	4798      	blx	r3
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd90      	pop	{r4, r7, pc}
 8004a28:	20000274 	.word	0x20000274
 8004a2c:	20000294 	.word	0x20000294
 8004a30:	2000029c 	.word	0x2000029c

08004a34 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004a4a:	681c      	ldr	r4, [r3, #0]
 8004a4c:	7afa      	ldrb	r2, [r7, #11]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	2205      	movs	r2, #5
 8004a5a:	490c      	ldr	r1, [pc, #48]	; (8004a8c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004a6c:	4907      	ldr	r1, [pc, #28]	; (8004a8c <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a05      	ldr	r2, [pc, #20]	; (8004a94 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8004a7e:	4904      	ldr	r1, [pc, #16]	; (8004a90 <_ZN5L6470I8shield_3E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	4798      	blx	r3
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd90      	pop	{r4, r7, pc}
 8004a8c:	20000274 	.word	0x20000274
 8004a90:	20000294 	.word	0x20000294
 8004a94:	2000029c 	.word	0x2000029c

08004a98 <_ZN5L6470I8shield_3E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa8:	d21f      	bcs.n	8004aea <_ZN5L6470I8shield_3E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004ab2:	681c      	ldr	r4, [r3, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2206      	movs	r2, #6
 8004ac0:	490c      	ldr	r1, [pc, #48]	; (8004af4 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004ad2:	4908      	ldr	r1, [pc, #32]	; (8004af4 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x5c>)
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a06      	ldr	r2, [pc, #24]	; (8004afc <_ZN5L6470I8shield_3E10L6470_GoToEm+0x64>)
 8004ae4:	4904      	ldr	r1, [pc, #16]	; (8004af8 <_ZN5L6470I8shield_3E10L6470_GoToEm+0x60>)
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd90      	pop	{r4, r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000274 	.word	0x20000274
 8004af8:	20000294 	.word	0x20000294
 8004afc:	2000029c 	.word	0x2000029c

08004b00 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b14:	d220      	bcs.n	8004b58 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004b1e:	681c      	ldr	r4, [r3, #0]
 8004b20:	7afa      	ldrb	r2, [r7, #11]
 8004b22:	2300      	movs	r3, #0
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	490c      	ldr	r1, [pc, #48]	; (8004b60 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004b40:	4907      	ldr	r1, [pc, #28]	; (8004b60 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a05      	ldr	r2, [pc, #20]	; (8004b68 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8004b52:	4904      	ldr	r1, [pc, #16]	; (8004b64 <_ZN5L6470I8shield_3E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	4798      	blx	r3
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd90      	pop	{r4, r7, pc}
 8004b60:	20000274 	.word	0x20000274
 8004b64:	20000294 	.word	0x20000294
 8004b68:	2000029c 	.word	0x2000029c

08004b6c <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	460b      	mov	r3, r1
 8004b78:	72fb      	strb	r3, [r7, #11]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004b86:	681c      	ldr	r4, [r3, #0]
 8004b88:	7af9      	ldrb	r1, [r7, #11]
 8004b8a:	7abb      	ldrb	r3, [r7, #10]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	9201      	str	r2, [sp, #4]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	460b      	mov	r3, r1
 8004b94:	2208      	movs	r2, #8
 8004b96:	490c      	ldr	r1, [pc, #48]	; (8004bc8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a09      	ldr	r2, [pc, #36]	; (8004bcc <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004ba8:	4907      	ldr	r1, [pc, #28]	; (8004bc8 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a05      	ldr	r2, [pc, #20]	; (8004bd0 <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8004bba:	4904      	ldr	r1, [pc, #16]	; (8004bcc <_ZN5L6470I8shield_3E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	4798      	blx	r3
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd90      	pop	{r4, r7, pc}
 8004bc8:	20000274 	.word	0x20000274
 8004bcc:	20000294 	.word	0x20000294
 8004bd0:	2000029c 	.word	0x2000029c

08004bd4 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	70fb      	strb	r3, [r7, #3]
 8004be0:	4613      	mov	r3, r2
 8004be2:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004bec:	681c      	ldr	r4, [r3, #0]
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	78bb      	ldrb	r3, [r7, #2]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	9101      	str	r1, [sp, #4]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	2209      	movs	r2, #9
 8004bfc:	490c      	ldr	r1, [pc, #48]	; (8004c30 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004c0e:	4908      	ldr	r1, [pc, #32]	; (8004c30 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a06      	ldr	r2, [pc, #24]	; (8004c38 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8004c20:	4904      	ldr	r1, [pc, #16]	; (8004c34 <_ZN5L6470I8shield_3E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd90      	pop	{r4, r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000274 	.word	0x20000274
 8004c34:	20000294 	.word	0x20000294
 8004c38:	2000029c 	.word	0x2000029c

08004c3c <_ZN5L6470I8shield_3E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004c4c:	681c      	ldr	r4, [r3, #0]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	2300      	movs	r3, #0
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	2300      	movs	r3, #0
 8004c58:	220a      	movs	r2, #10
 8004c5a:	490c      	ldr	r1, [pc, #48]	; (8004c8c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004c6c:	4907      	ldr	r1, [pc, #28]	; (8004c8c <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x50>)
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a05      	ldr	r2, [pc, #20]	; (8004c94 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x58>)
 8004c7e:	4904      	ldr	r1, [pc, #16]	; (8004c90 <_ZN5L6470I8shield_3E12L6470_GoHomeEv+0x54>)
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd90      	pop	{r4, r7, pc}
 8004c8c:	20000274 	.word	0x20000274
 8004c90:	20000294 	.word	0x20000294
 8004c94:	2000029c 	.word	0x2000029c

08004c98 <_ZN5L6470I8shield_3E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004ca8:	681c      	ldr	r4, [r3, #0]
 8004caa:	2300      	movs	r3, #0
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	220b      	movs	r2, #11
 8004cb6:	490c      	ldr	r1, [pc, #48]	; (8004ce8 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a09      	ldr	r2, [pc, #36]	; (8004cec <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004cc8:	4907      	ldr	r1, [pc, #28]	; (8004ce8 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x50>)
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a05      	ldr	r2, [pc, #20]	; (8004cf0 <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x58>)
 8004cda:	4904      	ldr	r1, [pc, #16]	; (8004cec <_ZN5L6470I8shield_3E12L6470_GoMarkEv+0x54>)
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd90      	pop	{r4, r7, pc}
 8004ce8:	20000274 	.word	0x20000274
 8004cec:	20000294 	.word	0x20000294
 8004cf0:	2000029c 	.word	0x2000029c

08004cf4 <_ZN5L6470I8shield_3E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004d04:	681c      	ldr	r4, [r3, #0]
 8004d06:	2300      	movs	r3, #0
 8004d08:	9301      	str	r3, [sp, #4]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	220c      	movs	r2, #12
 8004d12:	490c      	ldr	r1, [pc, #48]	; (8004d44 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004d24:	4907      	ldr	r1, [pc, #28]	; (8004d44 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x50>)
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x58>)
 8004d36:	4904      	ldr	r1, [pc, #16]	; (8004d48 <_ZN5L6470I8shield_3E14L6470_ResetPosEv+0x54>)
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd90      	pop	{r4, r7, pc}
 8004d44:	20000274 	.word	0x20000274
 8004d48:	20000294 	.word	0x20000294
 8004d4c:	2000029c 	.word	0x2000029c

08004d50 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004d60:	681c      	ldr	r4, [r3, #0]
 8004d62:	2300      	movs	r3, #0
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	220d      	movs	r2, #13
 8004d6e:	490c      	ldr	r1, [pc, #48]	; (8004da0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a09      	ldr	r2, [pc, #36]	; (8004da4 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004d80:	4907      	ldr	r1, [pc, #28]	; (8004da0 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x50>)
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a05      	ldr	r2, [pc, #20]	; (8004da8 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x58>)
 8004d92:	4904      	ldr	r1, [pc, #16]	; (8004da4 <_ZN5L6470I8shield_3E17L6470_ResetDeviceEv+0x54>)
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd90      	pop	{r4, r7, pc}
 8004da0:	20000274 	.word	0x20000274
 8004da4:	20000294 	.word	0x20000294
 8004da8:	2000029c 	.word	0x2000029c

08004dac <_ZN5L6470I8shield_3E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004dbc:	681c      	ldr	r4, [r3, #0]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	220e      	movs	r2, #14
 8004dca:	490c      	ldr	r1, [pc, #48]	; (8004dfc <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004ddc:	4907      	ldr	r1, [pc, #28]	; (8004dfc <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x50>)
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a05      	ldr	r2, [pc, #20]	; (8004e04 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x58>)
 8004dee:	4904      	ldr	r1, [pc, #16]	; (8004e00 <_ZN5L6470I8shield_3E14L6470_SoftStopEv+0x54>)
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	20000274 	.word	0x20000274
 8004e00:	20000294 	.word	0x20000294
 8004e04:	2000029c 	.word	0x2000029c

08004e08 <_ZN5L6470I8shield_3E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004e18:	681c      	ldr	r4, [r3, #0]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	220f      	movs	r2, #15
 8004e26:	490c      	ldr	r1, [pc, #48]	; (8004e58 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a09      	ldr	r2, [pc, #36]	; (8004e5c <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004e38:	4907      	ldr	r1, [pc, #28]	; (8004e58 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x50>)
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x58>)
 8004e4a:	4904      	ldr	r1, [pc, #16]	; (8004e5c <_ZN5L6470I8shield_3E14L6470_HardStopEv+0x54>)
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4798      	blx	r3
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd90      	pop	{r4, r7, pc}
 8004e58:	20000274 	.word	0x20000274
 8004e5c:	20000294 	.word	0x20000294
 8004e60:	2000029c 	.word	0x2000029c

08004e64 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004e74:	681c      	ldr	r4, [r3, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2210      	movs	r2, #16
 8004e82:	490c      	ldr	r1, [pc, #48]	; (8004eb4 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a09      	ldr	r2, [pc, #36]	; (8004eb8 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8004e94:	4907      	ldr	r1, [pc, #28]	; (8004eb4 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x50>)
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a05      	ldr	r2, [pc, #20]	; (8004ebc <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x58>)
 8004ea6:	4904      	ldr	r1, [pc, #16]	; (8004eb8 <_ZN5L6470I8shield_3E13L6470_SoftHiZEv+0x54>)
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd90      	pop	{r4, r7, pc}
 8004eb4:	20000274 	.word	0x20000274
 8004eb8:	20000294 	.word	0x20000294
 8004ebc:	2000029c 	.word	0x2000029c

08004ec0 <_ZN5L6470I8shield_3E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004ed0:	681c      	ldr	r4, [r3, #0]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2300      	movs	r3, #0
 8004edc:	2211      	movs	r2, #17
 8004ede:	490c      	ldr	r1, [pc, #48]	; (8004f10 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8004ef0:	4907      	ldr	r1, [pc, #28]	; (8004f10 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x50>)
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x58>)
 8004f02:	4904      	ldr	r1, [pc, #16]	; (8004f14 <_ZN5L6470I8shield_3E13L6470_HardHiZEv+0x54>)
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd90      	pop	{r4, r7, pc}
 8004f10:	20000274 	.word	0x20000274
 8004f14:	20000294 	.word	0x20000294
 8004f18:	2000029c 	.word	0x2000029c

08004f1c <_ZN5L6470I8shield_3E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004f2c:	681c      	ldr	r4, [r3, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	2300      	movs	r3, #0
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	2300      	movs	r3, #0
 8004f38:	2212      	movs	r2, #18
 8004f3a:	4912      	ldr	r1, [pc, #72]	; (8004f84 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8004f4c:	490d      	ldr	r1, [pc, #52]	; (8004f84 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x68>)
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a0b      	ldr	r2, [pc, #44]	; (8004f8c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 8004f5e:	490a      	ldr	r1, [pc, #40]	; (8004f88 <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x6c>)
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	4906      	ldr	r1, [pc, #24]	; (8004f8c <_ZN5L6470I8shield_3E15L6470_GetStatusEv+0x70>)
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 8004f7a:	89fb      	ldrh	r3, [r7, #14]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd90      	pop	{r4, r7, pc}
 8004f84:	20000274 	.word	0x20000274
 8004f88:	20000294 	.word	0x20000294
 8004f8c:	2000029c 	.word	0x2000029c

08004f90 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004fa6:	681c      	ldr	r4, [r3, #0]
 8004fa8:	7afa      	ldrb	r2, [r7, #11]
 8004faa:	2300      	movs	r3, #0
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	4903      	ldr	r1, [pc, #12]	; (8004fc4 <_ZN5L6470I8shield_3E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	47a0      	blx	r4
}
 8004fbc:	bf00      	nop
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd90      	pop	{r4, r7, pc}
 8004fc4:	20000274 	.word	0x20000274

08004fc8 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004fdc:	681c      	ldr	r4, [r3, #0]
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	9201      	str	r2, [sp, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	9200      	str	r2, [sp, #0]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	4903      	ldr	r1, [pc, #12]	; (8004ff8 <_ZN5L6470I8shield_3E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	47a0      	blx	r4
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd90      	pop	{r4, r7, pc}
 8004ff8:	20000274 	.word	0x20000274

08004ffc <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	460b      	mov	r3, r1
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005012:	681c      	ldr	r4, [r3, #0]
 8005014:	7afa      	ldrb	r2, [r7, #11]
 8005016:	2300      	movs	r3, #0
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	4613      	mov	r3, r2
 8005020:	2203      	movs	r2, #3
 8005022:	4903      	ldr	r1, [pc, #12]	; (8005030 <_ZN5L6470I8shield_3E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	47a0      	blx	r4
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	bd90      	pop	{r4, r7, pc}
 8005030:	20000274 	.word	0x20000274

08005034 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	b085      	sub	sp, #20
 8005038:	af02      	add	r7, sp, #8
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005048:	681c      	ldr	r4, [r3, #0]
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	2200      	movs	r2, #0
 800504e:	9201      	str	r2, [sp, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	9200      	str	r2, [sp, #0]
 8005054:	2204      	movs	r2, #4
 8005056:	4903      	ldr	r1, [pc, #12]	; (8005064 <_ZN5L6470I8shield_3E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	47a0      	blx	r4
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bd90      	pop	{r4, r7, pc}
 8005064:	20000274 	.word	0x20000274

08005068 <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b087      	sub	sp, #28
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	460b      	mov	r3, r1
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800507e:	681c      	ldr	r4, [r3, #0]
 8005080:	7afa      	ldrb	r2, [r7, #11]
 8005082:	2300      	movs	r3, #0
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	2205      	movs	r2, #5
 800508e:	4903      	ldr	r1, [pc, #12]	; (800509c <_ZN5L6470I8shield_3E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	47a0      	blx	r4
}
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	bd90      	pop	{r4, r7, pc}
 800509c:	20000274 	.word	0x20000274

080050a0 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80050b2:	681c      	ldr	r4, [r3, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	2300      	movs	r3, #0
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2206      	movs	r2, #6
 80050c0:	4903      	ldr	r1, [pc, #12]	; (80050d0 <_ZN5L6470I8shield_3E17L6470_PrepareGoToEm+0x30>)
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	47a0      	blx	r4
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd90      	pop	{r4, r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000274 	.word	0x20000274

080050d4 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	460b      	mov	r3, r1
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80050ea:	681c      	ldr	r4, [r3, #0]
 80050ec:	7afa      	ldrb	r2, [r7, #11]
 80050ee:	2300      	movs	r3, #0
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	4613      	mov	r3, r2
 80050f8:	2207      	movs	r2, #7
 80050fa:	4903      	ldr	r1, [pc, #12]	; (8005108 <_ZN5L6470I8shield_3E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	47a0      	blx	r4
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	bd90      	pop	{r4, r7, pc}
 8005108:	20000274 	.word	0x20000274

0800510c <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b087      	sub	sp, #28
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	460b      	mov	r3, r1
 8005118:	72fb      	strb	r3, [r7, #11]
 800511a:	4613      	mov	r3, r2
 800511c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005126:	681c      	ldr	r4, [r3, #0]
 8005128:	7af9      	ldrb	r1, [r7, #11]
 800512a:	7abb      	ldrb	r3, [r7, #10]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	9201      	str	r2, [sp, #4]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	460b      	mov	r3, r1
 8005134:	2208      	movs	r2, #8
 8005136:	4903      	ldr	r1, [pc, #12]	; (8005144 <_ZN5L6470I8shield_3E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	47a0      	blx	r4
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	bd90      	pop	{r4, r7, pc}
 8005144:	20000274 	.word	0x20000274

08005148 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b085      	sub	sp, #20
 800514c:	af02      	add	r7, sp, #8
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]
 8005154:	4613      	mov	r3, r2
 8005156:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005160:	681c      	ldr	r4, [r3, #0]
 8005162:	78fa      	ldrb	r2, [r7, #3]
 8005164:	78bb      	ldrb	r3, [r7, #2]
 8005166:	2100      	movs	r1, #0
 8005168:	9101      	str	r1, [sp, #4]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	2209      	movs	r2, #9
 8005170:	4903      	ldr	r1, [pc, #12]	; (8005180 <_ZN5L6470I8shield_3E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	47a0      	blx	r4
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bd90      	pop	{r4, r7, pc}
 800517e:	bf00      	nop
 8005180:	20000274 	.word	0x20000274

08005184 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b085      	sub	sp, #20
 8005188:	af02      	add	r7, sp, #8
 800518a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005194:	681c      	ldr	r4, [r3, #0]
 8005196:	2300      	movs	r3, #0
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	2300      	movs	r3, #0
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	2300      	movs	r3, #0
 80051a0:	220a      	movs	r2, #10
 80051a2:	4903      	ldr	r1, [pc, #12]	; (80051b0 <_ZN5L6470I8shield_3E19L6470_PrepareGoHomeEv+0x2c>)
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	47a0      	blx	r4
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd90      	pop	{r4, r7, pc}
 80051b0:	20000274 	.word	0x20000274

080051b4 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 80051b4:	b590      	push	{r4, r7, lr}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80051c4:	681c      	ldr	r4, [r3, #0]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	2300      	movs	r3, #0
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	2300      	movs	r3, #0
 80051d0:	220b      	movs	r2, #11
 80051d2:	4903      	ldr	r1, [pc, #12]	; (80051e0 <_ZN5L6470I8shield_3E19L6470_PrepareGoMarkEv+0x2c>)
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	47a0      	blx	r4
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd90      	pop	{r4, r7, pc}
 80051e0:	20000274 	.word	0x20000274

080051e4 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80051f4:	681c      	ldr	r4, [r3, #0]
 80051f6:	2300      	movs	r3, #0
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	2300      	movs	r3, #0
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2300      	movs	r3, #0
 8005200:	220c      	movs	r2, #12
 8005202:	4903      	ldr	r1, [pc, #12]	; (8005210 <_ZN5L6470I8shield_3E21L6470_PrepareResetPosEv+0x2c>)
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	47a0      	blx	r4
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	bd90      	pop	{r4, r7, pc}
 8005210:	20000274 	.word	0x20000274

08005214 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b085      	sub	sp, #20
 8005218:	af02      	add	r7, sp, #8
 800521a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005224:	681c      	ldr	r4, [r3, #0]
 8005226:	2300      	movs	r3, #0
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	2300      	movs	r3, #0
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	220d      	movs	r2, #13
 8005232:	4903      	ldr	r1, [pc, #12]	; (8005240 <_ZN5L6470I8shield_3E24L6470_PrepareResetDeviceEv+0x2c>)
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	47a0      	blx	r4
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bd90      	pop	{r4, r7, pc}
 8005240:	20000274 	.word	0x20000274

08005244 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b085      	sub	sp, #20
 8005248:	af02      	add	r7, sp, #8
 800524a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005254:	681c      	ldr	r4, [r3, #0]
 8005256:	2300      	movs	r3, #0
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	2300      	movs	r3, #0
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	2300      	movs	r3, #0
 8005260:	220e      	movs	r2, #14
 8005262:	4903      	ldr	r1, [pc, #12]	; (8005270 <_ZN5L6470I8shield_3E21L6470_PrepareSoftStopEv+0x2c>)
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	47a0      	blx	r4
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	bd90      	pop	{r4, r7, pc}
 8005270:	20000274 	.word	0x20000274

08005274 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b085      	sub	sp, #20
 8005278:	af02      	add	r7, sp, #8
 800527a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005284:	681c      	ldr	r4, [r3, #0]
 8005286:	2300      	movs	r3, #0
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	2300      	movs	r3, #0
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	2300      	movs	r3, #0
 8005290:	220f      	movs	r2, #15
 8005292:	4903      	ldr	r1, [pc, #12]	; (80052a0 <_ZN5L6470I8shield_3E21L6470_PrepareHardStopEv+0x2c>)
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	47a0      	blx	r4
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bd90      	pop	{r4, r7, pc}
 80052a0:	20000274 	.word	0x20000274

080052a4 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 80052a4:	b590      	push	{r4, r7, lr}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80052b4:	681c      	ldr	r4, [r3, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	2300      	movs	r3, #0
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	2300      	movs	r3, #0
 80052c0:	2210      	movs	r2, #16
 80052c2:	4903      	ldr	r1, [pc, #12]	; (80052d0 <_ZN5L6470I8shield_3E20L6470_PrepareSoftHiZEv+0x2c>)
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	47a0      	blx	r4
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd90      	pop	{r4, r7, pc}
 80052d0:	20000274 	.word	0x20000274

080052d4 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 80052d4:	b590      	push	{r4, r7, lr}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af02      	add	r7, sp, #8
 80052da:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80052e4:	681c      	ldr	r4, [r3, #0]
 80052e6:	2300      	movs	r3, #0
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	2300      	movs	r3, #0
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	2300      	movs	r3, #0
 80052f0:	2211      	movs	r2, #17
 80052f2:	4903      	ldr	r1, [pc, #12]	; (8005300 <_ZN5L6470I8shield_3E20L6470_PrepareHardHiZEv+0x2c>)
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	47a0      	blx	r4
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd90      	pop	{r4, r7, pc}
 8005300:	20000274 	.word	0x20000274

08005304 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b085      	sub	sp, #20
 8005308:	af02      	add	r7, sp, #8
 800530a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005314:	681c      	ldr	r4, [r3, #0]
 8005316:	2300      	movs	r3, #0
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	2300      	movs	r3, #0
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	2300      	movs	r3, #0
 8005320:	2212      	movs	r2, #18
 8005322:	4903      	ldr	r1, [pc, #12]	; (8005330 <_ZN5L6470I8shield_3E22L6470_PrepareGetStatusEv+0x2c>)
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	47a0      	blx	r4
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	bd90      	pop	{r4, r7, pc}
 8005330:	20000274 	.word	0x20000274

08005334 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a09      	ldr	r2, [pc, #36]	; (800536c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 8005348:	4909      	ldr	r1, [pc, #36]	; (8005370 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a06      	ldr	r2, [pc, #24]	; (8005374 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800535a:	4904      	ldr	r1, [pc, #16]	; (800536c <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <_ZN5L6470I8shield_3E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000294 	.word	0x20000294
 8005370:	20000274 	.word	0x20000274
 8005374:	2000029c 	.word	0x2000029c

08005378 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8005378:	b590      	push	{r4, r7, lr}
 800537a:	b089      	sub	sp, #36	; 0x24
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8005384:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]
 800538e:	e020      	b.n	80053d2 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005398:	681c      	ldr	r4, [r3, #0]
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	461a      	mov	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	1899      	adds	r1, r3, r2
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	461a      	mov	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	441a      	add	r2, r3
 80053ae:	230a      	movs	r3, #10
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	2302      	movs	r3, #2
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 80053b8:	2300      	movs	r3, #0
 80053ba:	75bb      	strb	r3, [r7, #22]
 80053bc:	e003      	b.n	80053c6 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x4e>
 80053be:	bf00      	nop
 80053c0:	7dbb      	ldrb	r3, [r7, #22]
 80053c2:	3301      	adds	r3, #1
 80053c4:	75bb      	strb	r3, [r7, #22]
 80053c6:	7dbb      	ldrb	r3, [r7, #22]
 80053c8:	2b7c      	cmp	r3, #124	; 0x7c
 80053ca:	d9f8      	bls.n	80053be <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	3301      	adds	r3, #1
 80053d0:	75fb      	strb	r3, [r7, #23]
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d9db      	bls.n	8005390 <_ZN5L6470I8shield_3E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 80053d8:	bf00      	nop
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd90      	pop	{r4, r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000271 	.word	0x20000271

080053e8 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80053fa:	2301      	movs	r3, #1
 80053fc:	74fb      	strb	r3, [r7, #19]
 80053fe:	e016      	b.n	800542e <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	461a      	mov	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	7f1b      	ldrb	r3, [r3, #28]
 800540a:	4413      	add	r3, r2
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	4413      	add	r3, r2
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	4619      	mov	r1, r3
 8005414:	79fa      	ldrb	r2, [r7, #7]
 8005416:	7cfb      	ldrb	r3, [r7, #19]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	fa01 f303 	lsl.w	r3, r1, r3
 8005420:	461a      	mov	r2, r3
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	3301      	adds	r3, #1
 800542c:	74fb      	strb	r3, [r7, #19]
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	2b03      	cmp	r3, #3
 8005432:	d9e5      	bls.n	8005400 <_ZN5L6470I8shield_3E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 8005434:	697b      	ldr	r3, [r7, #20]
}
 8005436:	4618      	mov	r0, r3
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2118      	movs	r1, #24
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
 8005464:	4602      	mov	r2, r0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546a:	b292      	uxth	r2, r2
 800546c:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	2b0e      	cmp	r3, #14
 8005472:	f200 8099 	bhi.w	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	080054b9 	.word	0x080054b9
 8005480:	080054c9 	.word	0x080054c9
 8005484:	080054d9 	.word	0x080054d9
 8005488:	080054e9 	.word	0x080054e9
 800548c:	080054f9 	.word	0x080054f9
 8005490:	08005509 	.word	0x08005509
 8005494:	08005519 	.word	0x08005519
 8005498:	08005529 	.word	0x08005529
 800549c:	08005539 	.word	0x08005539
 80054a0:	08005549 	.word	0x08005549
 80054a4:	08005559 	.word	0x08005559
 80054a8:	08005569 	.word	0x08005569
 80054ac:	08005579 	.word	0x08005579
 80054b0:	08005589 	.word	0x08005589
 80054b4:	08005599 	.word	0x08005599
      state = pL6470_StatusRegister->HiZ;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	73fb      	strb	r3, [r7, #15]
      break;
 80054c6:	e06f      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	73fb      	strb	r3, [r7, #15]
      break;
 80054d6:	e067      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	73fb      	strb	r3, [r7, #15]
      break;
 80054e6:	e05f      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	73fb      	strb	r3, [r7, #15]
      break;
 80054f6:	e057      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005502:	b2db      	uxtb	r3, r3
 8005504:	73fb      	strb	r3, [r7, #15]
      break;
 8005506:	e04f      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8005512:	b2db      	uxtb	r3, r3
 8005514:	73fb      	strb	r3, [r7, #15]
      break;
 8005516:	e047      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005522:	b2db      	uxtb	r3, r3
 8005524:	73fb      	strb	r3, [r7, #15]
      break;
 8005526:	e03f      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005532:	b2db      	uxtb	r3, r3
 8005534:	73fb      	strb	r3, [r7, #15]
      break;
 8005536:	e037      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005542:	b2db      	uxtb	r3, r3
 8005544:	73fb      	strb	r3, [r7, #15]
      break;
 8005546:	e02f      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005552:	b2db      	uxtb	r3, r3
 8005554:	73fb      	strb	r3, [r7, #15]
      break;
 8005556:	e027      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005562:	b2db      	uxtb	r3, r3
 8005564:	73fb      	strb	r3, [r7, #15]
      break;
 8005566:	e01f      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	73fb      	strb	r3, [r7, #15]
      break;
 8005576:	e017      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557c:	785b      	ldrb	r3, [r3, #1]
 800557e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	73fb      	strb	r3, [r7, #15]
      break;
 8005586:	e00f      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	73fb      	strb	r3, [r7, #15]
      break;
 8005596:	e007      	b.n	80055a8 <_ZN5L6470I8shield_3E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	73fb      	strb	r3, [r7, #15]
      break;
 80055a6:	bf00      	nop
  return state;
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop

080055b4 <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	2b18      	cmp	r3, #24
 80055c4:	d809      	bhi.n	80055da <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a19      	ldr	r1, [r3, #32]
 80055ca:	78fa      	ldrb	r2, [r7, #3]
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	3301      	adds	r3, #1
 80055d8:	e000      	b.n	80055dc <_ZN5L6470I8shield_3E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80055f2:	2300      	movs	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]
 80055f6:	e01a      	b.n	800562e <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	4413      	add	r3, r2
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	4413      	add	r3, r2
 800560c:	2200      	movs	r2, #0
 800560e:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	4413      	add	r3, r2
 8005618:	2200      	movs	r2, #0
 800561a:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	4413      	add	r3, r2
 8005624:	2200      	movs	r2, #0
 8005626:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	3301      	adds	r3, #1
 800562c:	73fb      	strb	r3, [r7, #15]
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d9e1      	bls.n	80055f8 <_ZN5L6470I8shield_3E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <_ZN5L6470I8shield_3E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	4613      	mov	r3, r2
 8005650:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	7f1b      	ldrb	r3, [r3, #28]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	4413      	add	r3, r2
 800565c:	79fa      	ldrb	r2, [r7, #7]
 800565e:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	7f1b      	ldrb	r3, [r3, #28]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4413      	add	r3, r2
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	7f1b      	ldrb	r3, [r3, #28]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	4413      	add	r3, r2
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	7f1b      	ldrb	r3, [r3, #28]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	4413      	add	r3, r2
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	60da      	str	r2, [r3, #12]
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8005698:	b590      	push	{r4, r7, lr}
 800569a:	b087      	sub	sp, #28
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4613      	mov	r3, r2
 80056a6:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 80056a8:	4b10      	ldr	r3, [pc, #64]	; (80056ec <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80056b0:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <_ZN5L6470I8shield_3E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80056ce:	681c      	ldr	r4, [r3, #0]
 80056d0:	79fa      	ldrb	r2, [r7, #7]
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	47a0      	blx	r4
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd90      	pop	{r4, r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000271 	.word	0x20000271

080056f0 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005700:	2300      	movs	r3, #0
 8005702:	75bb      	strb	r3, [r7, #22]
 8005704:	e013      	b.n	800572e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005706:	2300      	movs	r3, #0
 8005708:	75fb      	strb	r3, [r7, #23]
 800570a:	e00a      	b.n	8005722 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800570c:	7d7b      	ldrb	r3, [r7, #21]
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	757a      	strb	r2, [r7, #21]
 8005712:	461a      	mov	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4413      	add	r3, r2
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800571c:	7dfb      	ldrb	r3, [r7, #23]
 800571e:	3301      	adds	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
 8005722:	7dfb      	ldrb	r3, [r7, #23]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d9f1      	bls.n	800570c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005728:	7dbb      	ldrb	r3, [r7, #22]
 800572a:	3301      	adds	r3, #1
 800572c:	75bb      	strb	r3, [r7, #22]
 800572e:	7dbb      	ldrb	r3, [r7, #22]
 8005730:	2b03      	cmp	r3, #3
 8005732:	d9e8      	bls.n	8005706 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005734:	2300      	movs	r3, #0
 8005736:	75fb      	strb	r3, [r7, #23]
 8005738:	e1f1      	b.n	8005b1e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	440b      	add	r3, r1
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	4619      	mov	r1, r3
 800574a:	460b      	mov	r3, r1
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	1a5b      	subs	r3, r3, r1
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	441a      	add	r2, r3
 8005754:	7dfb      	ldrb	r3, [r7, #23]
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	440b      	add	r3, r1
 800575a:	7b12      	ldrb	r2, [r2, #12]
 800575c:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	4413      	add	r3, r2
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b12      	cmp	r3, #18
 800576a:	f200 81d5 	bhi.w	8005b18 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005b19 	.word	0x08005b19
 8005778:	080057c1 	.word	0x080057c1
 800577c:	08005849 	.word	0x08005849
 8005780:	08005879 	.word	0x08005879
 8005784:	080058e1 	.word	0x080058e1
 8005788:	0800590f 	.word	0x0800590f
 800578c:	08005977 	.word	0x08005977
 8005790:	080059b3 	.word	0x080059b3
 8005794:	08005a1b 	.word	0x08005a1b
 8005798:	08005ab7 	.word	0x08005ab7
 800579c:	08005b19 	.word	0x08005b19
 80057a0:	08005b19 	.word	0x08005b19
 80057a4:	08005b19 	.word	0x08005b19
 80057a8:	08005b19 	.word	0x08005b19
 80057ac:	08005b19 	.word	0x08005b19
 80057b0:	08005b19 	.word	0x08005b19
 80057b4:	08005b19 	.word	0x08005b19
 80057b8:	08005b19 	.word	0x08005b19
 80057bc:	08005b19 	.word	0x08005b19
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	4413      	add	r3, r2
 80057c6:	7819      	ldrb	r1, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a18      	ldr	r0, [r3, #32]
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	4413      	add	r3, r2
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4403      	add	r3, r0
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4403      	add	r3, r0
 80057e8:	430a      	orrs	r2, r1
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a19      	ldr	r1, [r3, #32]
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	4413      	add	r3, r2
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	7b9b      	ldrb	r3, [r3, #14]
 8005808:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800580a:	2301      	movs	r3, #1
 800580c:	75bb      	strb	r3, [r7, #22]
 800580e:	e016      	b.n	800583e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	4413      	add	r3, r2
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	7d39      	ldrb	r1, [r7, #20]
 800581c:	7dbb      	ldrb	r3, [r7, #22]
 800581e:	1acb      	subs	r3, r1, r3
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	fa22 f103 	lsr.w	r1, r2, r3
 8005826:	7dbb      	ldrb	r3, [r7, #22]
 8005828:	005a      	lsls	r2, r3, #1
 800582a:	7dfb      	ldrb	r3, [r7, #23]
 800582c:	4413      	add	r3, r2
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4413      	add	r3, r2
 8005834:	b2ca      	uxtb	r2, r1
 8005836:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005838:	7dbb      	ldrb	r3, [r7, #22]
 800583a:	3301      	adds	r3, #1
 800583c:	75bb      	strb	r3, [r7, #22]
 800583e:	7d3a      	ldrb	r2, [r7, #20]
 8005840:	7dbb      	ldrb	r3, [r7, #22]
 8005842:	429a      	cmp	r2, r3
 8005844:	d2e4      	bcs.n	8005810 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 8005846:	e167      	b.n	8005b18 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	4413      	add	r3, r2
 800584e:	7819      	ldrb	r1, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a18      	ldr	r0, [r3, #32]
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	4413      	add	r3, r2
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4403      	add	r3, r0
 8005868:	781a      	ldrb	r2, [r3, #0]
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	4403      	add	r3, r0
 8005870:	430a      	orrs	r2, r1
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
      break;
 8005876:	e14f      	b.n	8005b18 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	7819      	ldrb	r1, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	4413      	add	r3, r2
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	4413      	add	r3, r2
 8005894:	4403      	add	r3, r0
 8005896:	7a1a      	ldrb	r2, [r3, #8]
 8005898:	7dfb      	ldrb	r3, [r7, #23]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	4403      	add	r3, r0
 800589e:	430a      	orrs	r2, r1
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80058a4:	2301      	movs	r3, #1
 80058a6:	75bb      	strb	r3, [r7, #22]
 80058a8:	e016      	b.n	80058d8 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	4413      	add	r3, r2
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	7dbb      	ldrb	r3, [r7, #22]
 80058b6:	f1c3 0303 	rsb	r3, r3, #3
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	fa22 f103 	lsr.w	r1, r2, r3
 80058c0:	7dbb      	ldrb	r3, [r7, #22]
 80058c2:	005a      	lsls	r2, r3, #1
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	4413      	add	r3, r2
 80058c8:	461a      	mov	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4413      	add	r3, r2
 80058ce:	b2ca      	uxtb	r2, r1
 80058d0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80058d2:	7dbb      	ldrb	r3, [r7, #22]
 80058d4:	3301      	adds	r3, #1
 80058d6:	75bb      	strb	r3, [r7, #22]
 80058d8:	7dbb      	ldrb	r3, [r7, #22]
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d9e5      	bls.n	80058aa <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 80058de:	e11b      	b.n	8005b18 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4413      	add	r3, r2
 80058e6:	7819      	ldrb	r1, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	4413      	add	r3, r2
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	4403      	add	r3, r0
 80058fe:	7a1a      	ldrb	r2, [r3, #8]
 8005900:	7dfb      	ldrb	r3, [r7, #23]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4403      	add	r3, r0
 8005906:	430a      	orrs	r2, r1
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]
      break;
 800590c:	e104      	b.n	8005b18 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	7819      	ldrb	r1, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800591a:	7dfb      	ldrb	r3, [r7, #23]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4413      	add	r3, r2
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4413      	add	r3, r2
 800592a:	4403      	add	r3, r0
 800592c:	7a1a      	ldrb	r2, [r3, #8]
 800592e:	7dfb      	ldrb	r3, [r7, #23]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4403      	add	r3, r0
 8005934:	430a      	orrs	r2, r1
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800593a:	2301      	movs	r3, #1
 800593c:	75bb      	strb	r3, [r7, #22]
 800593e:	e016      	b.n	800596e <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	4413      	add	r3, r2
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	7dbb      	ldrb	r3, [r7, #22]
 800594c:	f1c3 0303 	rsb	r3, r3, #3
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	fa22 f103 	lsr.w	r1, r2, r3
 8005956:	7dbb      	ldrb	r3, [r7, #22]
 8005958:	005a      	lsls	r2, r3, #1
 800595a:	7dfb      	ldrb	r3, [r7, #23]
 800595c:	4413      	add	r3, r2
 800595e:	461a      	mov	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	b2ca      	uxtb	r2, r1
 8005966:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005968:	7dbb      	ldrb	r3, [r7, #22]
 800596a:	3301      	adds	r3, #1
 800596c:	75bb      	strb	r3, [r7, #22]
 800596e:	7dbb      	ldrb	r3, [r7, #22]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d9e5      	bls.n	8005940 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8005974:	e0d0      	b.n	8005b18 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005976:	2301      	movs	r3, #1
 8005978:	75bb      	strb	r3, [r7, #22]
 800597a:	e016      	b.n	80059aa <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	4413      	add	r3, r2
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	7dbb      	ldrb	r3, [r7, #22]
 8005988:	f1c3 0303 	rsb	r3, r3, #3
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	fa22 f103 	lsr.w	r1, r2, r3
 8005992:	7dbb      	ldrb	r3, [r7, #22]
 8005994:	005a      	lsls	r2, r3, #1
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	4413      	add	r3, r2
 800599a:	461a      	mov	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	b2ca      	uxtb	r2, r1
 80059a2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80059a4:	7dbb      	ldrb	r3, [r7, #22]
 80059a6:	3301      	adds	r3, #1
 80059a8:	75bb      	strb	r3, [r7, #22]
 80059aa:	7dbb      	ldrb	r3, [r7, #22]
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d9e5      	bls.n	800597c <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 80059b0:	e0b2      	b.n	8005b18 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	4413      	add	r3, r2
 80059b8:	7819      	ldrb	r1, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80059be:	7dfb      	ldrb	r3, [r7, #23]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	4413      	add	r3, r2
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4413      	add	r3, r2
 80059ce:	4403      	add	r3, r0
 80059d0:	7a1a      	ldrb	r2, [r3, #8]
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4403      	add	r3, r0
 80059d8:	430a      	orrs	r2, r1
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80059de:	2301      	movs	r3, #1
 80059e0:	75bb      	strb	r3, [r7, #22]
 80059e2:	e016      	b.n	8005a12 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	4413      	add	r3, r2
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	7dbb      	ldrb	r3, [r7, #22]
 80059f0:	f1c3 0303 	rsb	r3, r3, #3
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	fa22 f103 	lsr.w	r1, r2, r3
 80059fa:	7dbb      	ldrb	r3, [r7, #22]
 80059fc:	005a      	lsls	r2, r3, #1
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
 8005a00:	4413      	add	r3, r2
 8005a02:	461a      	mov	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4413      	add	r3, r2
 8005a08:	b2ca      	uxtb	r2, r1
 8005a0a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a0c:	7dbb      	ldrb	r3, [r7, #22]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	75bb      	strb	r3, [r7, #22]
 8005a12:	7dbb      	ldrb	r3, [r7, #22]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d9e5      	bls.n	80059e4 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8005a18:	e07e      	b.n	8005b18 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	4413      	add	r3, r2
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b259      	sxtb	r1, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	4413      	add	r3, r2
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	4403      	add	r3, r0
 8005a3a:	791b      	ldrb	r3, [r3, #4]
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	b25b      	sxtb	r3, r3
 8005a40:	430b      	orrs	r3, r1
 8005a42:	b259      	sxtb	r1, r3
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	4413      	add	r3, r2
 8005a4a:	b2ca      	uxtb	r2, r1
 8005a4c:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	4413      	add	r3, r2
 8005a54:	7819      	ldrb	r1, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4413      	add	r3, r2
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	4403      	add	r3, r0
 8005a6c:	7a1a      	ldrb	r2, [r3, #8]
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	4403      	add	r3, r0
 8005a74:	430a      	orrs	r2, r1
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75bb      	strb	r3, [r7, #22]
 8005a7e:	e016      	b.n	8005aae <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	4413      	add	r3, r2
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	7dbb      	ldrb	r3, [r7, #22]
 8005a8c:	f1c3 0303 	rsb	r3, r3, #3
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	fa22 f103 	lsr.w	r1, r2, r3
 8005a96:	7dbb      	ldrb	r3, [r7, #22]
 8005a98:	005a      	lsls	r2, r3, #1
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	b2ca      	uxtb	r2, r1
 8005aa6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005aa8:	7dbb      	ldrb	r3, [r7, #22]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	75bb      	strb	r3, [r7, #22]
 8005aae:	7dbb      	ldrb	r3, [r7, #22]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d9e5      	bls.n	8005a80 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8005ab4:	e030      	b.n	8005b18 <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4413      	add	r3, r2
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b259      	sxtb	r1, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	4413      	add	r3, r2
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	4403      	add	r3, r0
 8005ad6:	791b      	ldrb	r3, [r3, #4]
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	b25b      	sxtb	r3, r3
 8005adc:	430b      	orrs	r3, r1
 8005ade:	b259      	sxtb	r1, r3
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	b2ca      	uxtb	r2, r1
 8005ae8:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	7819      	ldrb	r1, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4413      	add	r3, r2
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	4613      	mov	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	4413      	add	r3, r2
 8005b06:	4403      	add	r3, r0
 8005b08:	7a1a      	ldrb	r2, [r3, #8]
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	4403      	add	r3, r0
 8005b10:	430a      	orrs	r2, r1
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
      break;
 8005b16:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	75fb      	strb	r3, [r7, #23]
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f67f ae0a 	bls.w	800573a <_ZN5L6470I8shield_3E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <_ZN5L6470I8shield_3E11L6470_roundEf>:
    /**
     * @brief  Rounding a floating point number to the nearest unsigned integer number.
     * @param  f The floating point number.
     * @retval The nearest unsigned integer number.
     */
    int L6470_round(float f)
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	ed87 0a00 	vstr	s0, [r7]
    {
        if (f >= 0) {
 8005b40:	edd7 7a00 	vldr	s15, [r7]
 8005b44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4c:	db1e      	blt.n	8005b8c <_ZN5L6470I8shield_3E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8005b4e:	edd7 7a00 	vldr	s15, [r7]
 8005b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b56:	ee17 2a90 	vmov	r2, s15
 8005b5a:	edd7 7a00 	vldr	s15, [r7]
 8005b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b66:	ed97 7a00 	vldr	s14, [r7]
 8005b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7a:	bf4c      	ite	mi
 8005b7c:	2301      	movmi	r3, #1
 8005b7e:	2300      	movpl	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	f083 0301 	eor.w	r3, r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	4413      	add	r3, r2
 8005b8a:	e01a      	b.n	8005bc2 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8e>
        } else {
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8005b8c:	edd7 7a00 	vldr	s15, [r7]
 8005b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b94:	ee17 2a90 	vmov	r2, s15
 8005b98:	edd7 7a00 	vldr	s15, [r7]
 8005b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba4:	ed97 7a00 	vldr	s14, [r7]
 8005ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bac:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8005bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb8:	d501      	bpl.n	8005bbe <_ZN5L6470I8shield_3E11L6470_roundEf+0x8a>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <_ZN5L6470I8shield_3E11L6470_roundEf+0x8c>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	1ad3      	subs	r3, r2, r3
        }
    }
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <_ZN5L6470I8shield_3E4ReadEPht>:
     * @brief      Utility function to read data from L6470.
     * @param[out] pBuffer pointer to the buffer to read data into.
     * @param[in]  NumBytesToRead number of bytes to read.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b086      	sub	sp, #24
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6918      	ldr	r0, [r3, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8a9b      	ldrh	r3, [r3, #20]
 8005be4:	2200      	movs	r2, #0
 8005be6:	4619      	mov	r1, r3
 8005be8:	f00a fa9c 	bl	8010124 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6998      	ldr	r0, [r3, #24]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	2364      	movs	r3, #100	; 0x64
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	f00b fa5c 	bl	80110b2 <HAL_SPI_Receive>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6918      	ldr	r0, [r3, #16]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8a9b      	ldrh	r3, [r3, #20]
 8005c06:	2201      	movs	r2, #1
 8005c08:	4619      	mov	r1, r3
 8005c0a:	f00a fa8b 	bl	8010124 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <_ZN5L6470I8shield_3E4ReadEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <_ZN5L6470I8shield_3E4ReadEPht+0x4c>
        }
        return COMPONENT_OK;
 8005c18:	2300      	movs	r3, #0
    }
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <_ZN5L6470I8shield_3E5WriteEPht>:
     * @brief      Utility function to write data to L6470.
     * @param[in]  pBuffer pointer to the buffer of data to send.
     * @param[in]  NumBytesToWrite number of bytes to write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b086      	sub	sp, #24
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	80fb      	strh	r3, [r7, #6]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6918      	ldr	r0, [r3, #16]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8a9b      	ldrh	r3, [r3, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	f00a fa72 	bl	8010124 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6998      	ldr	r0, [r3, #24]
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	2364      	movs	r3, #100	; 0x64
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	f00b f8f6 	bl	8010e3a <HAL_SPI_Transmit>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6918      	ldr	r0, [r3, #16]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8a9b      	ldrh	r3, [r3, #20]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f00a fa61 	bl	8010124 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <_ZN5L6470I8shield_3E5WriteEPht+0x4a>
        {
        	return COMPONENT_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <_ZN5L6470I8shield_3E5WriteEPht+0x4c>
        }
        return COMPONENT_OK;
 8005c6c:	2300      	movs	r3, #0
    }
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t>:
     * @param[out] pBufferToRead pointer to the buffer to read data into.
     * @param[in]  pBufferToWrite pointer to the buffer of data to send.
     * @param[in]  NumBytes number of bytes to read and write.
     * @retval     COMPONENT_OK in case of success, COMPONENT_ERROR otherwise.
     */
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b088      	sub	sp, #32
 8005c7a:	af02      	add	r7, sp, #8
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
 8005c82:	807b      	strh	r3, [r7, #2]
    {
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6918      	ldr	r0, [r3, #16]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8a9b      	ldrh	r3, [r3, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f00a fa48 	bl	8010124 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6998      	ldr	r0, [r3, #24]
 8005c98:	887b      	ldrh	r3, [r7, #2]
 8005c9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c9e:	9200      	str	r2, [sp, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	f00b fb16 	bl	80112d4 <HAL_SPI_TransmitReceive>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x50>
        {
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6918      	ldr	r0, [r3, #16]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8a9b      	ldrh	r3, [r3, #20]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f00a fa31 	bl	8010124 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e008      	b.n	8005cd8 <_ZN5L6470I8shield_3E9ReadWriteEPhS2_t+0x62>
        }
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6918      	ldr	r0, [r3, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8a9b      	ldrh	r3, [r3, #20]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	f00a fa27 	bl	8010124 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8005cd6:	2300      	movs	r3, #0
    }
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <_ZN5L6470I8shield_3E23L6470_SPI_CommunicationEPhS2_tm>:


    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8005ce0:	b590      	push	{r4, r7, lr}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	807b      	strh	r3, [r7, #2]
    {
        ReadWrite(pRxData, pTxData, Size);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005cf6:	681c      	ldr	r4, [r3, #0]
 8005cf8:	887b      	ldrh	r3, [r7, #2]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	47a0      	blx	r4
    }
 8005d02:	bf00      	nop
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd90      	pop	{r4, r7, pc}

08005d0a <_ZN5L6470I8shield_2E4initEPv>:
    virtual int init(void *init)
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	4798      	blx	r3
 8005d24:	4603      	mov	r3, r0
    }
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <_ZN5L6470I8shield_2E10get_statusEv>:
    virtual unsigned int get_status(void)
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	4798      	blx	r3
 8005d44:	4603      	mov	r3, r0
    }
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <_ZN5L6470I8shield_2E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	4611      	mov	r1, r2
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
 8005d6c:	4603      	mov	r3, r0
    }
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <_ZN5L6470I8shield_2E12get_positionEv>:
    virtual signed int get_position(void)
 8005d76:	b590      	push	{r4, r7, lr}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005d86:	681c      	ldr	r4, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2100      	movs	r1, #0
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	4798      	blx	r3
 8005d98:	4603      	mov	r3, r0
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	47a0      	blx	r4
 8005da0:	4603      	mov	r3, r0
    }
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd90      	pop	{r4, r7, pc}

08005daa <_ZN5L6470I8shield_2E8get_markEv>:
    virtual signed int get_mark(void)
 8005daa:	b590      	push	{r4, r7, lr}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005dba:	681c      	ldr	r4, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
 8005dcc:	4603      	mov	r3, r0
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	47a0      	blx	r4
 8005dd4:	4603      	mov	r3, r0
    }
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd90      	pop	{r4, r7, pc}

08005dde <_ZN5L6470I8shield_2E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8005dde:	b5b0      	push	{r4, r5, r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005dee:	681c      	ldr	r4, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005df8:	681d      	ldr	r5, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2103      	movs	r1, #3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	4798      	blx	r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	47a8      	blx	r5
 8005e12:	eef0 7a40 	vmov.f32	s15, s0
 8005e16:	eeb0 0a67 	vmov.f32	s0, s15
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	47a0      	blx	r4
 8005e1e:	4603      	mov	r3, r0
    }
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bdb0      	pop	{r4, r5, r7, pc}

08005e28 <_ZN5L6470I8shield_2E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8005e28:	b5b0      	push	{r4, r5, r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005e38:	681c      	ldr	r4, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e42:	681d      	ldr	r5, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2106      	movs	r1, #6
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
 8005e54:	4603      	mov	r3, r0
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	47a8      	blx	r5
 8005e5e:	eef0 7a40 	vmov.f32	s15, s0
 8005e62:	eeb0 0a67 	vmov.f32	s0, s15
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	47a0      	blx	r4
 8005e6a:	4603      	mov	r3, r0
    }
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bdb0      	pop	{r4, r5, r7, pc}

08005e74 <_ZN5L6470I8shield_2E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8005e74:	b5b0      	push	{r4, r5, r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005e84:	681c      	ldr	r4, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005e8e:	681d      	ldr	r5, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2107      	movs	r1, #7
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	47a8      	blx	r5
 8005eaa:	eef0 7a40 	vmov.f32	s15, s0
 8005eae:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	47a0      	blx	r4
 8005eb6:	4603      	mov	r3, r0
    }
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bdb0      	pop	{r4, r5, r7, pc}

08005ec0 <_ZN5L6470I8shield_2E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8005ec0:	b5b0      	push	{r4, r5, r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005ed0:	681c      	ldr	r4, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005eda:	681d      	ldr	r5, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2104      	movs	r1, #4
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	4798      	blx	r3
 8005eec:	4603      	mov	r3, r0
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	47a8      	blx	r5
 8005ef6:	eef0 7a40 	vmov.f32	s15, s0
 8005efa:	eeb0 0a67 	vmov.f32	s0, s15
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	47a0      	blx	r4
 8005f02:	4603      	mov	r3, r0
    }
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bdb0      	pop	{r4, r5, r7, pc}

08005f0c <_ZN5L6470I8shield_2E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 8005f0c:	b5b0      	push	{r4, r5, r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005f1c:	681c      	ldr	r4, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8005f26:	681d      	ldr	r5, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2105      	movs	r1, #5
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
 8005f38:	4603      	mov	r3, r0
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	47a8      	blx	r5
 8005f42:	eef0 7a40 	vmov.f32	s15, s0
 8005f46:	eeb0 0a67 	vmov.f32	s0, s15
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	47a0      	blx	r4
 8005f4e:	4603      	mov	r3, r0
    }
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bdb0      	pop	{r4, r5, r7, pc}

08005f58 <_ZN5L6470I8shield_2E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2104      	movs	r1, #4
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <_ZN5L6470I8shield_2E13get_directionEv+0x22>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <_ZN5L6470I8shield_2E13get_directionEv+0x24>
 8005f7a:	2300      	movs	r3, #0
    }
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <_ZN5L6470I8shield_2E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	b2d1      	uxtb	r1, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	4798      	blx	r3
    }
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <_ZN5L6470I8shield_2E8set_homeEv>:
    virtual void set_home(void)
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
    }
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <_ZN5L6470I8shield_2E8set_markEv>:
    virtual void set_mark(void)
 8005fca:	b590      	push	{r4, r7, lr}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005fda:	681c      	ldr	r4, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4798      	blx	r3
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	47a0      	blx	r4
    }
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd90      	pop	{r4, r7, pc}

08005ffe <_ZN5L6470I8shield_2E8set_markEi>:
    virtual void set_mark(signed int position)
 8005ffe:	b590      	push	{r4, r7, lr}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8006010:	681c      	ldr	r4, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	2102      	movs	r1, #2
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	47a0      	blx	r4
    }
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	bd90      	pop	{r4, r7, pc}

08006034 <_ZN5L6470I8shield_2E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8006046:	681c      	ldr	r4, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	ee07 2a90 	vmov	s15, r2
 8006058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605c:	eeb0 0a67 	vmov.f32	s0, s15
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	2106      	movs	r1, #6
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	47a0      	blx	r4
        return true;
 800606e:	2301      	movs	r3, #1
    }
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	bd90      	pop	{r4, r7, pc}

08006078 <_ZN5L6470I8shield_2E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8006078:	b590      	push	{r4, r7, lr}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800608a:	681c      	ldr	r4, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	ee07 2a90 	vmov	s15, r2
 800609c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a0:	eeb0 0a67 	vmov.f32	s0, s15
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	2107      	movs	r1, #7
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	47a0      	blx	r4
        return true;
 80060b2:	2301      	movs	r3, #1
    }
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd90      	pop	{r4, r7, pc}

080060bc <_ZN5L6470I8shield_2E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 80060bc:	b590      	push	{r4, r7, lr}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80060ce:	681c      	ldr	r4, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	ee07 2a90 	vmov	s15, r2
 80060e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e4:	eeb0 0a67 	vmov.f32	s0, s15
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
 80060ec:	4603      	mov	r3, r0
 80060ee:	461a      	mov	r2, r3
 80060f0:	2104      	movs	r1, #4
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	47a0      	blx	r4
        return true;
 80060f6:	2301      	movs	r3, #1
    }
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd90      	pop	{r4, r7, pc}

08006100 <_ZN5L6470I8shield_2E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 8006100:	b590      	push	{r4, r7, lr}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8006112:	681c      	ldr	r4, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	ee07 2a90 	vmov	s15, r2
 8006124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006128:	eeb0 0a67 	vmov.f32	s0, s15
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	4798      	blx	r3
 8006130:	4603      	mov	r3, r0
 8006132:	461a      	mov	r2, r3
 8006134:	2105      	movs	r1, #5
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	47a0      	blx	r4
        return true;
 800613a:	2301      	movs	r3, #1
    }
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	bd90      	pop	{r4, r7, pc}

08006144 <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	2b07      	cmp	r3, #7
 8006154:	d901      	bls.n	800615a <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8006156:	2300      	movs	r3, #0
 8006158:	e00f      	b.n	800617a <_ZN5L6470I8shield_2E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3380      	adds	r3, #128	; 0x80
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	78fa      	ldrb	r2, [r7, #3]
 8006172:	2115      	movs	r1, #21
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
        return true;
 8006178:	2301      	movs	r3, #1
    }
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <_ZN5L6470I8shield_2E5go_toEi>:
    virtual void go_to(signed int position)
 8006182:	b590      	push	{r4, r7, lr}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8006194:	681c      	ldr	r4, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	47a0      	blx	r4
    }
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd90      	pop	{r4, r7, pc}

080061b6 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 80061b6:	b5b0      	push	{r4, r5, r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	4613      	mov	r3, r2
 80061c2:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80061cc:	681c      	ldr	r4, [r3, #0]
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d101      	bne.n	80061d8 <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x22>
 80061d4:	2501      	movs	r5, #1
 80061d6:	e000      	b.n	80061da <_ZN5L6470I8shield_2E5go_toEiN12StepperMotor11direction_tE+0x24>
 80061d8:	2500      	movs	r5, #0
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	4798      	blx	r3
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	4629      	mov	r1, r5
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	47a0      	blx	r4
    }
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bdb0      	pop	{r4, r5, r7, pc}

080061fc <_ZN5L6470I8shield_2E7go_homeEv>:
    virtual void go_home(void)
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
    }
 8006212:	bf00      	nop
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <_ZN5L6470I8shield_2E7go_markEv>:
    virtual void go_mark(void)
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
    }
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 8006238:	b5b0      	push	{r4, r5, r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	607b      	str	r3, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	72fb      	strb	r3, [r7, #11]
 8006246:	4613      	mov	r3, r2
 8006248:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006252:	681c      	ldr	r4, [r3, #0]
 8006254:	7abb      	ldrb	r3, [r7, #10]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 800625a:	2501      	movs	r5, #1
 800625c:	e000      	b.n	8006260 <_ZN5L6470I8shield_2E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 800625e:	2500      	movs	r5, #0
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	ee07 2a90 	vmov	s15, r2
 8006270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006274:	eeb0 0a67 	vmov.f32	s0, s15
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	4798      	blx	r3
 800627c:	4603      	mov	r3, r0
 800627e:	7af9      	ldrb	r1, [r7, #11]
 8006280:	462a      	mov	r2, r5
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	47a0      	blx	r4
    }
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bdb0      	pop	{r4, r5, r7, pc}

0800628e <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 800628e:	b5b0      	push	{r4, r5, r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80062a2:	681c      	ldr	r4, [r3, #0]
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x20>
 80062aa:	2501      	movs	r5, #1
 80062ac:	e000      	b.n	80062b0 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tE+0x22>
 80062ae:	2500      	movs	r5, #0
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2106      	movs	r1, #6
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	4629      	mov	r1, r5
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	47a0      	blx	r4
    }
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bdb0      	pop	{r4, r5, r7, pc}

080062d2 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 80062d2:	b5b0      	push	{r4, r5, r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	460b      	mov	r3, r1
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80062e8:	681c      	ldr	r4, [r3, #0]
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x22>
 80062f0:	2501      	movs	r5, #1
 80062f2:	e000      	b.n	80062f6 <_ZN5L6470I8shield_2E3runEN12StepperMotor11direction_tEj+0x24>
 80062f4:	2500      	movs	r5, #0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	ee07 2a90 	vmov	s15, r2
 8006306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630a:	eeb0 0a67 	vmov.f32	s0, s15
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	4798      	blx	r3
 8006312:	4603      	mov	r3, r0
 8006314:	461a      	mov	r2, r3
 8006316:	4629      	mov	r1, r5
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	47a0      	blx	r4
    }
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bdb0      	pop	{r4, r5, r7, pc}

08006324 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	460b      	mov	r3, r1
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	7afa      	ldrb	r2, [r7, #11]
 800633e:	2a01      	cmp	r2, #1
 8006340:	d101      	bne.n	8006346 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x22>
 8006342:	2101      	movs	r1, #1
 8006344:	e000      	b.n	8006348 <_ZN5L6470I8shield_2E4moveEN12StepperMotor11direction_tEj+0x24>
 8006346:	2100      	movs	r1, #0
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	4798      	blx	r3
    }
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <_ZN5L6470I8shield_2E9soft_stopEv>:
    virtual void soft_stop(void)
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	4798      	blx	r3
    }
 800636c:	bf00      	nop
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <_ZN5L6470I8shield_2E9hard_stopEv>:
    virtual void hard_stop(void)
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
    }
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <_ZN5L6470I8shield_2E8soft_hizEv>:
    virtual void soft_hiz(void)
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	4798      	blx	r3
    }
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <_ZN5L6470I8shield_2E8hard_hizEv>:
    virtual void hard_hiz(void)
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
    }
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <_ZN5L6470I8shield_2E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 80063d6:	bf00      	nop
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2101      	movs	r1, #1
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	bf0c      	ite	eq
 80063ee:	2301      	moveq	r3, #1
 80063f0:	2300      	movne	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1ef      	bne.n	80063d8 <_ZN5L6470I8shield_2E17wait_while_activeEv+0xa>
    }
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3380      	adds	r3, #128	; 0x80
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	78fa      	ldrb	r2, [r7, #3]
 8006426:	2a01      	cmp	r2, #1
 8006428:	d101      	bne.n	800642e <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2c>
 800642a:	2201      	movs	r2, #1
 800642c:	e000      	b.n	8006430 <_ZN5L6470I8shield_2E10step_clockEN12StepperMotor11direction_tE+0x2e>
 800642e:	2200      	movs	r2, #0
 8006430:	4611      	mov	r1, r2
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	4798      	blx	r3
    }
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	70fb      	strb	r3, [r7, #3]
 800644a:	4613      	mov	r3, r2
 800644c:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	78ba      	ldrb	r2, [r7, #2]
 800645a:	2a01      	cmp	r2, #1
 800645c:	d101      	bne.n	8006462 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 800645e:	2201      	movs	r2, #1
 8006460:	e000      	b.n	8006464 <_ZN5L6470I8shield_2E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006462:	2200      	movs	r2, #0
 8006464:	78f9      	ldrb	r1, [r7, #3]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	4798      	blx	r3
    }
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <_ZN5L6470I8shield_2E12reset_deviceEv>:
    virtual void reset_device(void)
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
    }
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <_ZN5L6470I8shield_2E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80064ae:	bf00      	nop
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <_ZN5L6470I8shield_2E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	4611      	mov	r1, r2
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <_ZN5L6470I8shield_2E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2100      	movs	r1, #0
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006504:	bf00      	nop
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <_ZN5L6470I8shield_2E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2102      	movs	r1, #2
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800652c:	bf00      	nop
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <_ZN5L6470I8shield_2E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2103      	movs	r1, #3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2203      	movs	r2, #3
 8006550:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <_ZN5L6470I8shield_2E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2106      	movs	r1, #6
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2204      	movs	r2, #4
 8006578:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800657c:	bf00      	nop
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <_ZN5L6470I8shield_2E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2107      	movs	r1, #7
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2205      	movs	r2, #5
 80065a0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <_ZN5L6470I8shield_2E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2104      	movs	r1, #4
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2206      	movs	r2, #6
 80065c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <_ZN5L6470I8shield_2E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2105      	movs	r1, #5
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2207      	movs	r2, #7
 80065f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <_ZN5L6470I8shield_2E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 8006604:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x38>)
 800660e:	2201      	movs	r2, #1
 8006610:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4906      	ldr	r1, [pc, #24]	; (8006638 <_ZN5L6470I8shield_2E21prepare_get_directionEv+0x3c>)
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2208      	movs	r2, #8
 8006626:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	2000023d 	.word	0x2000023d
 8006638:	20000240 	.word	0x20000240

0800663c <_ZN5L6470I8shield_2E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	b2d1      	uxtb	r1, r2
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <_ZN5L6470I8shield_2E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <_ZN5L6470I8shield_2E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2102      	movs	r1, #2
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2209      	movs	r2, #9
 80066b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <_ZN5L6470I8shield_2E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 80066bc:	b590      	push	{r4, r7, lr}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80066ce:	681c      	ldr	r4, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
 80066e0:	4603      	mov	r3, r0
 80066e2:	461a      	mov	r2, r3
 80066e4:	2102      	movs	r1, #2
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}

080066fa <_ZN5L6470I8shield_2E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 80066fa:	b590      	push	{r4, r7, lr}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800670c:	681c      	ldr	r4, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	ee07 2a90 	vmov	s15, r2
 800671e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006722:	eeb0 0a67 	vmov.f32	s0, s15
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
 800672a:	4603      	mov	r3, r0
 800672c:	461a      	mov	r2, r3
 800672e:	2103      	movs	r1, #3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	bd90      	pop	{r4, r7, pc}

08006744 <_ZN5L6470I8shield_2E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 8006744:	b590      	push	{r4, r7, lr}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006756:	681c      	ldr	r4, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	ee07 2a90 	vmov	s15, r2
 8006768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676c:	eeb0 0a67 	vmov.f32	s0, s15
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
 8006774:	4603      	mov	r3, r0
 8006776:	461a      	mov	r2, r3
 8006778:	2106      	movs	r1, #6
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	bd90      	pop	{r4, r7, pc}

0800678e <_ZN5L6470I8shield_2E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 800678e:	b590      	push	{r4, r7, lr}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80067a0:	681c      	ldr	r4, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	ee07 2a90 	vmov	s15, r2
 80067b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b6:	eeb0 0a67 	vmov.f32	s0, s15
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
 80067be:	4603      	mov	r3, r0
 80067c0:	461a      	mov	r2, r3
 80067c2:	2107      	movs	r1, #7
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd90      	pop	{r4, r7, pc}

080067d8 <_ZN5L6470I8shield_2E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80067ea:	681c      	ldr	r4, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	ee07 2a90 	vmov	s15, r2
 80067fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006800:	eeb0 0a67 	vmov.f32	s0, s15
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
 8006808:	4603      	mov	r3, r0
 800680a:	461a      	mov	r2, r3
 800680c:	2104      	movs	r1, #4
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bd90      	pop	{r4, r7, pc}

08006822 <_ZN5L6470I8shield_2E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 8006822:	b590      	push	{r4, r7, lr}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006834:	681c      	ldr	r4, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	ee07 2a90 	vmov	s15, r2
 8006846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684a:	eeb0 0a67 	vmov.f32	s0, s15
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	4798      	blx	r3
 8006852:	4603      	mov	r3, r0
 8006854:	461a      	mov	r2, r3
 8006856:	2105      	movs	r1, #5
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	bd90      	pop	{r4, r7, pc}

0800686c <_ZN5L6470I8shield_2E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800687e:	681c      	ldr	r4, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
 8006890:	4603      	mov	r3, r0
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd90      	pop	{r4, r7, pc}

080068a8 <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 80068a8:	b5b0      	push	{r4, r5, r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80068be:	681c      	ldr	r4, [r3, #0]
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d101      	bne.n	80068ca <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 80068c6:	2501      	movs	r5, #1
 80068c8:	e000      	b.n	80068cc <_ZN5L6470I8shield_2E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 80068ca:	2500      	movs	r5, #0
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	4798      	blx	r3
 80068dc:	4603      	mov	r3, r0
 80068de:	461a      	mov	r2, r3
 80068e0:	4629      	mov	r1, r5
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80068ee:	bf00      	nop
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bdb0      	pop	{r4, r5, r7, pc}

080068f6 <_ZN5L6470I8shield_2E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <_ZN5L6470I8shield_2E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8006942:	b5b0      	push	{r4, r5, r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	607b      	str	r3, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	72fb      	strb	r3, [r7, #11]
 8006950:	4613      	mov	r3, r2
 8006952:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800695c:	681c      	ldr	r4, [r3, #0]
 800695e:	7abb      	ldrb	r3, [r7, #10]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8006964:	2501      	movs	r5, #1
 8006966:	e000      	b.n	800696a <_ZN5L6470I8shield_2E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8006968:	2500      	movs	r5, #0
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	ee07 2a90 	vmov	s15, r2
 800697a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697e:	eeb0 0a67 	vmov.f32	s0, s15
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	4798      	blx	r3
 8006986:	4603      	mov	r3, r0
 8006988:	7af9      	ldrb	r1, [r7, #11]
 800698a:	462a      	mov	r2, r5
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bdb0      	pop	{r4, r5, r7, pc}

080069a0 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 80069a0:	b5b0      	push	{r4, r5, r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80069b4:	681c      	ldr	r4, [r3, #0]
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x20>
 80069bc:	2501      	movs	r5, #1
 80069be:	e000      	b.n	80069c2 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tE+0x22>
 80069c0:	2500      	movs	r5, #0
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2106      	movs	r1, #6
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	461a      	mov	r2, r3
 80069d6:	4629      	mov	r1, r5
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80069e4:	bf00      	nop
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bdb0      	pop	{r4, r5, r7, pc}

080069ec <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 80069ec:	b5b0      	push	{r4, r5, r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	460b      	mov	r3, r1
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006a02:	681c      	ldr	r4, [r3, #0]
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8006a0a:	2501      	movs	r5, #1
 8006a0c:	e000      	b.n	8006a10 <_ZN5L6470I8shield_2E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8006a0e:	2500      	movs	r5, #0
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	ee07 2a90 	vmov	s15, r2
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a24:	eeb0 0a67 	vmov.f32	s0, s15
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	4798      	blx	r3
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	461a      	mov	r2, r3
 8006a30:	4629      	mov	r1, r5
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bdb0      	pop	{r4, r5, r7, pc}

08006a46 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	7afa      	ldrb	r2, [r7, #11]
 8006a60:	2a01      	cmp	r2, #1
 8006a62:	d101      	bne.n	8006a68 <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8006a64:	2101      	movs	r1, #1
 8006a66:	e000      	b.n	8006a6a <_ZN5L6470I8shield_2E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8006a68:	2100      	movs	r1, #0
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <_ZN5L6470I8shield_2E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006a9e:	bf00      	nop
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <_ZN5L6470I8shield_2E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <_ZN5L6470I8shield_2E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <_ZN5L6470I8shield_2E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	78fa      	ldrb	r2, [r7, #3]
 8006b30:	2a01      	cmp	r2, #1
 8006b32:	d101      	bne.n	8006b38 <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8006b34:	2201      	movs	r2, #1
 8006b36:	e000      	b.n	8006b3a <_ZN5L6470I8shield_2E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006b48:	bf00      	nop
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	78ba      	ldrb	r2, [r7, #2]
 8006b6c:	2a01      	cmp	r2, #1
 8006b6e:	d101      	bne.n	8006b74 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8006b70:	2201      	movs	r2, #1
 8006b72:	e000      	b.n	8006b76 <_ZN5L6470I8shield_2E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8006b74:	2200      	movs	r2, #0
 8006b76:	78f9      	ldrb	r1, [r7, #3]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <_ZN5L6470I8shield_2E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <_ZN5L6470I8shield_2E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	4798      	blx	r3
 8006bc8:	4603      	mov	r3, r0
    }
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <_ZN5L6470I8shield_2E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    }
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <_ZN5L6470I8shield_2E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8006bec:	b5b0      	push	{r4, r5, r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	2b07      	cmp	r3, #7
 8006c00:	f200 80fe 	bhi.w	8006e00 <_ZN5L6470I8shield_2E10get_resultEPh+0x214>
 8006c04:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <_ZN5L6470I8shield_2E10get_resultEPh+0x20>)
 8006c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006c2d 	.word	0x08006c2d
 8006c10:	08006c59 	.word	0x08006c59
 8006c14:	08006c87 	.word	0x08006c87
 8006c18:	08006ccb 	.word	0x08006ccb
 8006c1c:	08006d11 	.word	0x08006d11
 8006c20:	08006d57 	.word	0x08006d57
 8006c24:	08006d9d 	.word	0x08006d9d
 8006c28:	08006de3 	.word	0x08006de3
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006c34:	681c      	ldr	r4, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6a12      	ldr	r2, [r2, #32]
 8006c44:	7b92      	ldrb	r2, [r2, #14]
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	47a0      	blx	r4
 8006c54:	4603      	mov	r3, r0
 8006c56:	e0d4      	b.n	8006e02 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8006c60:	681c      	ldr	r4, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6a12      	ldr	r2, [r2, #32]
 8006c70:	3228      	adds	r2, #40	; 0x28
 8006c72:	7b92      	ldrb	r2, [r2, #14]
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	47a0      	blx	r4
 8006c82:	4603      	mov	r3, r0
 8006c84:	e0bd      	b.n	8006e02 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006c8e:	681c      	ldr	r4, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006c98:	681d      	ldr	r5, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6a12      	ldr	r2, [r2, #32]
 8006ca8:	323c      	adds	r2, #60	; 0x3c
 8006caa:	7b92      	ldrb	r2, [r2, #14]
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	47a8      	blx	r5
 8006cba:	eef0 7a40 	vmov.f32	s15, s0
 8006cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	47a0      	blx	r4
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	e09b      	b.n	8006e02 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006cd2:	681c      	ldr	r4, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cdc:	681d      	ldr	r5, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6a12      	ldr	r2, [r2, #32]
 8006cec:	3278      	adds	r2, #120	; 0x78
 8006cee:	7b92      	ldrb	r2, [r2, #14]
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	47a8      	blx	r5
 8006d00:	eef0 7a40 	vmov.f32	s15, s0
 8006d04:	eeb0 0a67 	vmov.f32	s0, s15
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	47a0      	blx	r4
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	e078      	b.n	8006e02 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006d18:	681c      	ldr	r4, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006d22:	681d      	ldr	r5, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6a12      	ldr	r2, [r2, #32]
 8006d32:	328c      	adds	r2, #140	; 0x8c
 8006d34:	7b92      	ldrb	r2, [r2, #14]
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	47a8      	blx	r5
 8006d46:	eef0 7a40 	vmov.f32	s15, s0
 8006d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	47a0      	blx	r4
 8006d52:	4603      	mov	r3, r0
 8006d54:	e055      	b.n	8006e02 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006d5e:	681c      	ldr	r4, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006d68:	681d      	ldr	r5, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6a12      	ldr	r2, [r2, #32]
 8006d78:	3250      	adds	r2, #80	; 0x50
 8006d7a:	7b92      	ldrb	r2, [r2, #14]
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	47a8      	blx	r5
 8006d8c:	eef0 7a40 	vmov.f32	s15, s0
 8006d90:	eeb0 0a67 	vmov.f32	s0, s15
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	47a0      	blx	r4
 8006d98:	4603      	mov	r3, r0
 8006d9a:	e032      	b.n	8006e02 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006da4:	681c      	ldr	r4, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8006dae:	681d      	ldr	r5, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6a12      	ldr	r2, [r2, #32]
 8006dbe:	3264      	adds	r2, #100	; 0x64
 8006dc0:	7b92      	ldrb	r2, [r2, #14]
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
 8006dc8:	4603      	mov	r3, r0
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	47a8      	blx	r5
 8006dd2:	eef0 7a40 	vmov.f32	s15, s0
 8006dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	47a0      	blx	r4
 8006dde:	4603      	mov	r3, r0
 8006de0:	e00f      	b.n	8006e02 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2104      	movs	r1, #4
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <_ZN5L6470I8shield_2E10get_resultEPh+0x210>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e002      	b.n	8006e02 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e000      	b.n	8006e02 <_ZN5L6470I8shield_2E10get_resultEPh+0x216>
                return 0;
 8006e00:	2300      	movs	r3, #0
    }
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bdb0      	pop	{r4, r5, r7, pc}
 8006e0a:	bf00      	nop

08006e0c <_ZN5L6470I8shield_2E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6898      	ldr	r0, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	899b      	ldrh	r3, [r3, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4619      	mov	r1, r3
 8006e20:	f009 f980 	bl	8010124 <HAL_GPIO_WritePin>
    }
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e3c:	d303      	bcc.n	8006e46 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8006e44:	e000      	b.n	8006e48 <_ZN5L6470I8shield_2E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8006e46:	683b      	ldr	r3, [r7, #0]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	db05      	blt.n	8006e70 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e6a:	da01      	bge.n	8006e70 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	e00c      	b.n	8006e8a <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
 8006e76:	db06      	blt.n	8006e86 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	da03      	bge.n	8006e86 <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8006e84:	e001      	b.n	8006e8a <_ZN5L6470I8shield_2E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 8006e86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	ee07 3a90 	vmov	s15, r3
 8006ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eac:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006ec4 <_ZN5L6470I8shield_2E20L6470_Speed_2_Step_sEm+0x2c>
 8006eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	3c74242a 	.word	0x3c74242a

08006ec8 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8006ed4:	edd7 7a00 	vldr	s15, [r7]
 8006ed8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006f0c <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x44>
 8006edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee4:	d80a      	bhi.n	8006efc <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8006ee6:	ed97 7a00 	vldr	s14, [r7]
 8006eea:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006f10 <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x48>
 8006eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ef6:	ee17 3a90 	vmov	r3, s15
 8006efa:	e000      	b.n	8006efe <_ZN5L6470I8shield_2E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	4674241b 	.word	0x4674241b
 8006f10:	3c74242a 	.word	0x3c74242a

08006f14 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f26:	d209      	bcs.n	8006f3c <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 8006f28:	887b      	ldrh	r3, [r7, #2]
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f32:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006f50 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x3c>
 8006f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f3a:	e001      	b.n	8006f40 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8006f3c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8006f54 <_ZN5L6470I8shield_2E19L6470_Acc_2_Step_s2Et+0x40>
}
 8006f40:	eeb0 0a67 	vmov.f32	s0, s15
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	4168d4fe 	.word	0x4168d4fe
 8006f54:	00000000 	.word	0x00000000

08006f58 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8006f64:	edd7 7a00 	vldr	s15, [r7]
 8006f68:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006f9c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x44>
 8006f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f74:	d80b      	bhi.n	8006f8e <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8006f76:	ed97 7a00 	vldr	s14, [r7]
 8006f7a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006fa0 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x48>
 8006f7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f86:	ee17 3a90 	vmov	r3, s15
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	e000      	b.n	8006f90 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	4768c671 	.word	0x4768c671
 8006fa0:	4168d4fe 	.word	0x4168d4fe

08006fa4 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 8006fb0:	887b      	ldrh	r3, [r7, #2]
 8006fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb6:	d209      	bcs.n	8006fcc <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 8006fb8:	887b      	ldrh	r3, [r7, #2]
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fc2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006fe0 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x3c>
 8006fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006fca:	e001      	b.n	8006fd0 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 8006fcc:	eddf 7a05 	vldr	s15, [pc, #20]	; 8006fe4 <_ZN5L6470I8shield_2E19L6470_Dec_2_Step_s2Et+0x40>
}
 8006fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	4168d4fe 	.word	0x4168d4fe
 8006fe4:	00000000 	.word	0x00000000

08006fe8 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8006ff4:	edd7 7a00 	vldr	s15, [r7]
 8006ff8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800702c <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x44>
 8006ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007004:	d80b      	bhi.n	800701e <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8007006:	ed97 7a00 	vldr	s14, [r7]
 800700a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007030 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x48>
 800700e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007016:	ee17 3a90 	vmov	r3, s15
 800701a:	b29b      	uxth	r3, r3
 800701c:	e000      	b.n	8007020 <_ZN5L6470I8shield_2E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	4768c671 	.word	0x4768c671
 8007030:	4168d4fe 	.word	0x4168d4fe

08007034 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 8007040:	887b      	ldrh	r3, [r7, #2]
 8007042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007046:	d209      	bcs.n	800705c <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 8007048:	887b      	ldrh	r3, [r7, #2]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007052:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007070 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 8007056:	ee67 7a87 	vmul.f32	s15, s15, s14
 800705a:	e001      	b.n	8007060 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800705c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007074 <_ZN5L6470I8shield_2E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 8007060:	eeb0 0a67 	vmov.f32	s0, s15
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	4174240b 	.word	0x4174240b
 8007074:	00000000 	.word	0x00000000

08007078 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8007084:	edd7 7a00 	vldr	s15, [r7]
 8007088:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80070bc <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800708c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007094:	d80b      	bhi.n	80070ae <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8007096:	ed97 7a00 	vldr	s14, [r7]
 800709a:	eddf 6a09 	vldr	s13, [pc, #36]	; 80070c0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800709e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a6:	ee17 3a90 	vmov	r3, s15
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	e000      	b.n	80070b0 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	4673e702 	.word	0x4673e702
 80070c0:	4174240b 	.word	0x4174240b

080070c4 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 80070d0:	887b      	ldrh	r3, [r7, #2]
 80070d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d6:	d209      	bcs.n	80070ec <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 80070d8:	887b      	ldrh	r3, [r7, #2]
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070e2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007100 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x3c>
 80070e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070ea:	e001      	b.n	80070f0 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 80070ec:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007104 <_ZN5L6470I8shield_2E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 80070f0:	eeb0 0a67 	vmov.f32	s0, s15
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	3e742401 	.word	0x3e742401
 8007104:	00000000 	.word	0x00000000

08007108 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8007114:	edd7 7a00 	vldr	s15, [r7]
 8007118:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800714c <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x44>
 800711c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007124:	d80b      	bhi.n	800713e <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8007126:	ed97 7a00 	vldr	s14, [r7]
 800712a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007150 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x48>
 800712e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007136:	ee17 3a90 	vmov	r3, s15
 800713a:	b29b      	uxth	r3, r3
 800713c:	e000      	b.n	8007140 <_ZN5L6470I8shield_2E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	447414bf 	.word	0x447414bf
 8007150:	3e742401 	.word	0x3e742401

08007154 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 8007160:	887b      	ldrh	r3, [r7, #2]
 8007162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007166:	d219      	bcs.n	800719c <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 8007168:	887b      	ldrh	r3, [r7, #2]
 800716a:	4618      	mov	r0, r3
 800716c:	f7f9 fa0a 	bl	8000584 <__aeabi_i2d>
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x5c>)
 8007176:	f7f9 f8b9 	bl	80002ec <__adddf3>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4610      	mov	r0, r2
 8007180:	4619      	mov	r1, r3
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x60>)
 8007188:	f7f9 fa66 	bl	8000658 <__aeabi_dmul>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4610      	mov	r0, r2
 8007192:	4619      	mov	r1, r3
 8007194:	f7f9 fd38 	bl	8000c08 <__aeabi_d2f>
 8007198:	4603      	mov	r3, r0
 800719a:	e001      	b.n	80071a0 <_ZN5L6470I8shield_2E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800719c:	f04f 0300 	mov.w	r3, #0
}
 80071a0:	ee07 3a90 	vmov	s15, r3
 80071a4:	eeb0 0a67 	vmov.f32	s0, s15
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	3fe00000 	.word	0x3fe00000
 80071b4:	402e8000 	.word	0x402e8000

080071b8 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 80071c4:	edd7 7a00 	vldr	s15, [r7]
 80071c8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007204 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x4c>
 80071cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d4:	d80f      	bhi.n	80071f6 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 80071d6:	ed97 7a00 	vldr	s14, [r7]
 80071da:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8007208 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x50>
 80071de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80071e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ee:	ee17 3a90 	vmov	r3, s15
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	e000      	b.n	80071f8 <_ZN5L6470I8shield_2E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	4673e180 	.word	0x4673e180
 8007208:	41740000 	.word	0x41740000

0800720c <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 8007218:	887b      	ldrh	r3, [r7, #2]
 800721a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800721e:	d209      	bcs.n	8007234 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 8007220:	887b      	ldrh	r3, [r7, #2]
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800722a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007248 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800722e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007232:	e001      	b.n	8007238 <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 8007234:	eddf 7a05 	vldr	s15, [pc, #20]	; 800724c <_ZN5L6470I8shield_2E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 8007238:	eeb0 0a67 	vmov.f32	s0, s15
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	3d7423f4 	.word	0x3d7423f4
 800724c:	00000000 	.word	0x00000000

08007250 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800725c:	edd7 7a00 	vldr	s15, [r7]
 8007260:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007294 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x44>
 8007264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726c:	d80b      	bhi.n	8007286 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800726e:	ed97 7a00 	vldr	s14, [r7]
 8007272:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007298 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x48>
 8007276:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800727a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727e:	ee17 3a90 	vmov	r3, s15
 8007282:	b29b      	uxth	r3, r3
 8007284:	e000      	b.n	8007288 <_ZN5L6470I8shield_2E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	44742023 	.word	0x44742023
 8007298:	3d7423f4 	.word	0x3d7423f4

0800729c <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80072c8 <_ZN5L6470I8shield_2E20L6470_StSlp_2_s_StepEh+0x2c>
 80072b6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80072ba:	eeb0 0a67 	vmov.f32	s0, s15
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	3783956e 	.word	0x3783956e

080072cc <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 80072d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80072dc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007314 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x48>
 80072e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e8:	d80c      	bhi.n	8007304 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80072ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80072ee:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007318 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x4c>
 80072f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80072fe:	793b      	ldrb	r3, [r7, #4]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	e000      	b.n	8007306 <_ZN5L6470I8shield_2E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	3b8311d9 	.word	0x3b8311d9
 8007318:	3783956e 	.word	0x3783956e

0800731c <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007332:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007348 <_ZN5L6470I8shield_2E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 8007336:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800733a:	eeb0 0a67 	vmov.f32	s0, s15
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	3783956e 	.word	0x3783956e

0800734c <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8007358:	edd7 7a02 	vldr	s15, [r7, #8]
 800735c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007394 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x48>
 8007360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007368:	d80c      	bhi.n	8007384 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800736a:	ed97 7a02 	vldr	s14, [r7, #8]
 800736e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007398 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 8007372:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800737a:	edc7 7a01 	vstr	s15, [r7, #4]
 800737e:	793b      	ldrb	r3, [r7, #4]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	e000      	b.n	8007386 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	3b8311d9 	.word	0x3b8311d9
 8007398:	3783956e 	.word	0x3783956e

0800739c <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80073c8 <_ZN5L6470I8shield_2E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 80073b6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80073ba:	eeb0 0a67 	vmov.f32	s0, s15
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	3783956e 	.word	0x3783956e

080073cc <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80073d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80073dc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007414 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x48>
 80073e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e8:	d80c      	bhi.n	8007404 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80073ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80073ee:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007418 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 80073f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80073fe:	793b      	ldrb	r3, [r7, #4]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	e000      	b.n	8007406 <_ZN5L6470I8shield_2E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	3b8311d9 	.word	0x3b8311d9
 8007418:	3783956e 	.word	0x3783956e

0800741c <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	2b0f      	cmp	r3, #15
 800742c:	d80a      	bhi.n	8007444 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	3301      	adds	r3, #1
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800743a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007458 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x3c>
 800743e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007442:	e001      	b.n	8007448 <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 8007444:	eddf 7a05 	vldr	s15, [pc, #20]	; 800745c <_ZN5L6470I8shield_2E16L6470_OcdTh_2_mAEh+0x40>
}
 8007448:	eeb0 0a67 	vmov.f32	s0, s15
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	43bb8000 	.word	0x43bb8000
 800745c:	00000000 	.word	0x00000000

08007460 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800746c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007470:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80074fc <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x9c>
 8007474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747c:	d836      	bhi.n	80074ec <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800747e:	ed97 7a02 	vldr	s14, [r7, #8]
 8007482:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007500 <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0xa0>
 8007486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800748a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800748e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007496:	edc7 7a01 	vstr	s15, [r7, #4]
 800749a:	793b      	ldrb	r3, [r7, #4]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80074aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074ae:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 80074b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80074b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c2:	d50a      	bpl.n	80074da <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 80074c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80074c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80074d0:	793b      	ldrb	r3, [r7, #4]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	e009      	b.n	80074ee <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 80074da:	edd7 7a05 	vldr	s15, [r7, #20]
 80074de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80074e6:	793b      	ldrb	r3, [r7, #4]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	e000      	b.n	80074ee <_ZN5L6470I8shield_2E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	45bb8000 	.word	0x45bb8000
 8007500:	43bb8000 	.word	0x43bb8000

08007504 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 8007510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007514:	2b00      	cmp	r3, #0
 8007516:	db0a      	blt.n	800752e <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	3301      	adds	r3, #1
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007524:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007540 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x3c>
 8007528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800752c:	e001      	b.n	8007532 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800752e:	eddf 7a05 	vldr	s15, [pc, #20]	; 8007544 <_ZN5L6470I8shield_2E18L6470_StallTh_2_mAEh+0x40>
}
 8007532:	eeb0 0a67 	vmov.f32	s0, s15
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	41fa0000 	.word	0x41fa0000
 8007544:	00000000 	.word	0x00000000

08007548 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8007554:	edd7 7a02 	vldr	s15, [r7, #8]
 8007558:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80075e4 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x9c>
 800755c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007564:	d836      	bhi.n	80075d4 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 8007566:	ed97 7a02 	vldr	s14, [r7, #8]
 800756a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80075e8 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0xa0>
 800756e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007572:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 8007576:	edd7 7a05 	vldr	s15, [r7, #20]
 800757a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800757e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007582:	793b      	ldrb	r3, [r7, #4]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800758e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007596:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800759a:	edd7 7a04 	vldr	s15, [r7, #16]
 800759e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80075a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075aa:	d50a      	bpl.n	80075c2 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 80075ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80075b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80075b8:	793b      	ldrb	r3, [r7, #4]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	e009      	b.n	80075d6 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 80075c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80075c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80075ce:	793b      	ldrb	r3, [r7, #4]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	e000      	b.n	80075d6 <_ZN5L6470I8shield_2E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	457a0000 	.word	0x457a0000
 80075e8:	41fa0000 	.word	0x41fa0000

080075ec <_ZN5L6470I8shield_2E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
  reset_device();
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3394      	adds	r3, #148	; 0x94
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	4798      	blx	r3
  get_status();
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	330c      	adds	r3, #12
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	edd2 7a05 	vldr	s15, [r2, #20]
 8007622:	eeb0 0a67 	vmov.f32	s0, s15
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	4798      	blx	r3
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	edd2 7a06 	vldr	s15, [r2, #24]
 8007644:	eeb0 0a67 	vmov.f32	s0, s15
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	4798      	blx	r3
 800764c:	4603      	mov	r3, r0
 800764e:	461a      	mov	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	edd2 7a07 	vldr	s15, [r2, #28]
 8007666:	eeb0 0a67 	vmov.f32	s0, s15
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	4798      	blx	r3
 800766e:	4603      	mov	r3, r0
 8007670:	461a      	mov	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	edd2 7a08 	vldr	s15, [r2, #32]
 8007688:	eeb0 0a67 	vmov.f32	s0, s15
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	4798      	blx	r3
 8007690:	4603      	mov	r3, r0
 8007692:	461a      	mov	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80076aa:	eeb0 0a67 	vmov.f32	s0, s15
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	4798      	blx	r3
 80076b2:	4603      	mov	r3, r0
 80076b4:	461a      	mov	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80076c2:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8007994 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80076c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	ed93 7a00 	vldr	s14, [r3]
 80076d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80076dc:	793b      	ldrb	r3, [r7, #4]
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80076ec:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8007994 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 80076f0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	ed93 7a00 	vldr	s14, [r3]
 80076fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007702:	edc7 7a01 	vstr	s15, [r7, #4]
 8007706:	793b      	ldrb	r3, [r7, #4]
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007716:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8007994 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 800771a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	ed93 7a00 	vldr	s14, [r3]
 8007724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800772c:	edc7 7a01 	vstr	s15, [r7, #4]
 8007730:	793b      	ldrb	r3, [r7, #4]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007740:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8007994 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3a8>
 8007744:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	ed93 7a00 	vldr	s14, [r3]
 800774e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007756:	edc7 7a01 	vstr	s15, [r7, #4]
 800775a:	793b      	ldrb	r3, [r7, #4]
 800775c:	b2da      	uxtb	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007774:	eeb0 0a67 	vmov.f32	s0, s15
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	4798      	blx	r3
 800777c:	4603      	mov	r3, r0
 800777e:	461a      	mov	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8007796:	eeb0 0a67 	vmov.f32	s0, s15
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	4798      	blx	r3
 800779e:	4603      	mov	r3, r0
 80077a0:	461a      	mov	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	edd2 7a10 	vldr	s15, [r2, #64]	; 0x40
 80077b8:	eeb0 0a67 	vmov.f32	s0, s15
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	4798      	blx	r3
 80077c0:	4603      	mov	r3, r0
 80077c2:	461a      	mov	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 80077da:	eeb0 0a67 	vmov.f32	s0, s15
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	4798      	blx	r3
 80077e2:	4603      	mov	r3, r0
 80077e4:	461a      	mov	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	edd2 7a13 	vldr	s15, [r2, #76]	; 0x4c
 8007808:	eeb0 0a67 	vmov.f32	s0, s15
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	4798      	blx	r3
 8007810:	4603      	mov	r3, r0
 8007812:	461a      	mov	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	edd2 7a14 	vldr	s15, [r2, #80]	; 0x50
 800782a:	eeb0 0a67 	vmov.f32	s0, s15
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	4798      	blx	r3
 8007832:	4603      	mov	r3, r0
 8007834:	461a      	mov	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8007870:	2104      	movs	r1, #4
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8007886:	2105      	movs	r1, #5
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800789c:	2106      	movs	r1, #6
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 80078b2:	2107      	movs	r1, #7
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 80078c8:	2108      	movs	r1, #8
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80078de:	2109      	movs	r1, #9
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 80078f4:	210a      	movs	r1, #10
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800790a:	210b      	movs	r1, #11
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8007920:	210c      	movs	r1, #12
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 8007936:	210d      	movs	r1, #13
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 800794c:	210e      	movs	r1, #14
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 8007962:	210f      	movs	r1, #15
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 8007978:	2110      	movs	r1, #16
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	f892 205b 	ldrb.w	r2, [r2, #91]	; 0x5b
 800798e:	2111      	movs	r1, #17
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	e001      	b.n	8007998 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x3ac>
 8007994:	43800000 	.word	0x43800000
 8007998:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 80079aa:	2113      	movs	r1, #19
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 80079c0:	2114      	movs	r1, #20
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80079d6:	2116      	movs	r1, #22
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 80079ec:	2117      	movs	r1, #23
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3354      	adds	r3, #84	; 0x54
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 8007a00:	4611      	mov	r1, r2
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	4798      	blx	r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	f083 0301 	eor.w	r3, r3, #1
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e000      	b.n	8007a18 <_ZN5L6470I8shield_2E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8007a20:	b590      	push	{r4, r7, lr}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007a36:	681c      	ldr	r4, [r3, #0]
 8007a38:	7afa      	ldrb	r2, [r7, #11]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	4613      	mov	r3, r2
 8007a44:	2201      	movs	r2, #1
 8007a46:	490c      	ldr	r1, [pc, #48]	; (8007a78 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007a58:	4907      	ldr	r1, [pc, #28]	; (8007a78 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a05      	ldr	r2, [pc, #20]	; (8007a80 <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 8007a6a:	4904      	ldr	r1, [pc, #16]	; (8007a7c <_ZN5L6470I8shield_2E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	4798      	blx	r3
}
 8007a70:	bf00      	nop
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd90      	pop	{r4, r7, pc}
 8007a78:	20000240 	.word	0x20000240
 8007a7c:	20000260 	.word	0x20000260
 8007a80:	20000268 	.word	0x20000268

08007a84 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 8007a84:	b590      	push	{r4, r7, lr}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af02      	add	r7, sp, #8
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007a98:	681c      	ldr	r4, [r3, #0]
 8007a9a:	78fb      	ldrb	r3, [r7, #3]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	9201      	str	r2, [sp, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	9200      	str	r2, [sp, #0]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	4917      	ldr	r1, [pc, #92]	; (8007b04 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a14      	ldr	r2, [pc, #80]	; (8007b08 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007ab8:	4912      	ldr	r1, [pc, #72]	; (8007b04 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a10      	ldr	r2, [pc, #64]	; (8007b0c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007aca:	490f      	ldr	r1, [pc, #60]	; (8007b08 <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a19      	ldr	r1, [r3, #32]
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	7b9b      	ldrb	r3, [r3, #14]
 8007ae2:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	7bfa      	ldrb	r2, [r7, #15]
 8007af0:	4906      	ldr	r1, [pc, #24]	; (8007b0c <_ZN5L6470I8shield_2E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
 8007af6:	4603      	mov	r3, r0
 8007af8:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 8007afa:	68bb      	ldr	r3, [r7, #8]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd90      	pop	{r4, r7, pc}
 8007b04:	20000240 	.word	0x20000240
 8007b08:	20000260 	.word	0x20000260
 8007b0c:	20000268 	.word	0x20000268

08007b10 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007b10:	b590      	push	{r4, r7, lr}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af02      	add	r7, sp, #8
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007b26:	681c      	ldr	r4, [r3, #0]
 8007b28:	7afa      	ldrb	r2, [r7, #11]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	4613      	mov	r3, r2
 8007b34:	2203      	movs	r2, #3
 8007b36:	490c      	ldr	r1, [pc, #48]	; (8007b68 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a09      	ldr	r2, [pc, #36]	; (8007b6c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007b48:	4907      	ldr	r1, [pc, #28]	; (8007b68 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x58>)
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a05      	ldr	r2, [pc, #20]	; (8007b70 <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x60>)
 8007b5a:	4904      	ldr	r1, [pc, #16]	; (8007b6c <_ZN5L6470I8shield_2E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	4798      	blx	r3
}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd90      	pop	{r4, r7, pc}
 8007b68:	20000240 	.word	0x20000240
 8007b6c:	20000260 	.word	0x20000260
 8007b70:	20000268 	.word	0x20000268

08007b74 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af02      	add	r7, sp, #8
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007b88:	681c      	ldr	r4, [r3, #0]
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	9201      	str	r2, [sp, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	9200      	str	r2, [sp, #0]
 8007b94:	2204      	movs	r2, #4
 8007b96:	490c      	ldr	r1, [pc, #48]	; (8007bc8 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a09      	ldr	r2, [pc, #36]	; (8007bcc <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007ba8:	4907      	ldr	r1, [pc, #28]	; (8007bc8 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a05      	ldr	r2, [pc, #20]	; (8007bd0 <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 8007bba:	4904      	ldr	r1, [pc, #16]	; (8007bcc <_ZN5L6470I8shield_2E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4798      	blx	r3
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd90      	pop	{r4, r7, pc}
 8007bc8:	20000240 	.word	0x20000240
 8007bcc:	20000260 	.word	0x20000260
 8007bd0:	20000268 	.word	0x20000268

08007bd4 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8007bd4:	b590      	push	{r4, r7, lr}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af02      	add	r7, sp, #8
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007bea:	681c      	ldr	r4, [r3, #0]
 8007bec:	7afa      	ldrb	r2, [r7, #11]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	2205      	movs	r2, #5
 8007bfa:	490c      	ldr	r1, [pc, #48]	; (8007c2c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007c0c:	4907      	ldr	r1, [pc, #28]	; (8007c2c <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a05      	ldr	r2, [pc, #20]	; (8007c34 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 8007c1e:	4904      	ldr	r1, [pc, #16]	; (8007c30 <_ZN5L6470I8shield_2E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	4798      	blx	r3
}
 8007c24:	bf00      	nop
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd90      	pop	{r4, r7, pc}
 8007c2c:	20000240 	.word	0x20000240
 8007c30:	20000260 	.word	0x20000260
 8007c34:	20000268 	.word	0x20000268

08007c38 <_ZN5L6470I8shield_2E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 8007c38:	b590      	push	{r4, r7, lr}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c48:	d21f      	bcs.n	8007c8a <_ZN5L6470I8shield_2E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007c52:	681c      	ldr	r4, [r3, #0]
 8007c54:	2300      	movs	r3, #0
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2206      	movs	r2, #6
 8007c60:	490c      	ldr	r1, [pc, #48]	; (8007c94 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007c72:	4908      	ldr	r1, [pc, #32]	; (8007c94 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x5c>)
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a06      	ldr	r2, [pc, #24]	; (8007c9c <_ZN5L6470I8shield_2E10L6470_GoToEm+0x64>)
 8007c84:	4904      	ldr	r1, [pc, #16]	; (8007c98 <_ZN5L6470I8shield_2E10L6470_GoToEm+0x60>)
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd90      	pop	{r4, r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000240 	.word	0x20000240
 8007c98:	20000260 	.word	0x20000260
 8007c9c:	20000268 	.word	0x20000268

08007ca0 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8007ca0:	b590      	push	{r4, r7, lr}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cb4:	d220      	bcs.n	8007cf8 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007cbe:	681c      	ldr	r4, [r3, #0]
 8007cc0:	7afa      	ldrb	r2, [r7, #11]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	2207      	movs	r2, #7
 8007cce:	490c      	ldr	r1, [pc, #48]	; (8007d00 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a09      	ldr	r2, [pc, #36]	; (8007d04 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007ce0:	4907      	ldr	r1, [pc, #28]	; (8007d00 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a05      	ldr	r2, [pc, #20]	; (8007d08 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 8007cf2:	4904      	ldr	r1, [pc, #16]	; (8007d04 <_ZN5L6470I8shield_2E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	4798      	blx	r3
}
 8007cf8:	bf00      	nop
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd90      	pop	{r4, r7, pc}
 8007d00:	20000240 	.word	0x20000240
 8007d04:	20000260 	.word	0x20000260
 8007d08:	20000268 	.word	0x20000268

08007d0c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 8007d0c:	b590      	push	{r4, r7, lr}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	607b      	str	r3, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	72fb      	strb	r3, [r7, #11]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007d26:	681c      	ldr	r4, [r3, #0]
 8007d28:	7af9      	ldrb	r1, [r7, #11]
 8007d2a:	7abb      	ldrb	r3, [r7, #10]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	9201      	str	r2, [sp, #4]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	460b      	mov	r3, r1
 8007d34:	2208      	movs	r2, #8
 8007d36:	490c      	ldr	r1, [pc, #48]	; (8007d68 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007d48:	4907      	ldr	r1, [pc, #28]	; (8007d68 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a05      	ldr	r2, [pc, #20]	; (8007d70 <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 8007d5a:	4904      	ldr	r1, [pc, #16]	; (8007d6c <_ZN5L6470I8shield_2E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	4798      	blx	r3
}
 8007d60:	bf00      	nop
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd90      	pop	{r4, r7, pc}
 8007d68:	20000240 	.word	0x20000240
 8007d6c:	20000260 	.word	0x20000260
 8007d70:	20000268 	.word	0x20000268

08007d74 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 8007d74:	b590      	push	{r4, r7, lr}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
 8007d80:	4613      	mov	r3, r2
 8007d82:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007d8c:	681c      	ldr	r4, [r3, #0]
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	78bb      	ldrb	r3, [r7, #2]
 8007d92:	2100      	movs	r1, #0
 8007d94:	9101      	str	r1, [sp, #4]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	2209      	movs	r2, #9
 8007d9c:	490c      	ldr	r1, [pc, #48]	; (8007dd0 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a09      	ldr	r2, [pc, #36]	; (8007dd4 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007dae:	4908      	ldr	r1, [pc, #32]	; (8007dd0 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a06      	ldr	r2, [pc, #24]	; (8007dd8 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 8007dc0:	4904      	ldr	r1, [pc, #16]	; (8007dd4 <_ZN5L6470I8shield_2E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd90      	pop	{r4, r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000240 	.word	0x20000240
 8007dd4:	20000260 	.word	0x20000260
 8007dd8:	20000268 	.word	0x20000268

08007ddc <_ZN5L6470I8shield_2E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 8007ddc:	b590      	push	{r4, r7, lr}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007dec:	681c      	ldr	r4, [r3, #0]
 8007dee:	2300      	movs	r3, #0
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	2300      	movs	r3, #0
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	2300      	movs	r3, #0
 8007df8:	220a      	movs	r2, #10
 8007dfa:	490c      	ldr	r1, [pc, #48]	; (8007e2c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a09      	ldr	r2, [pc, #36]	; (8007e30 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007e0c:	4907      	ldr	r1, [pc, #28]	; (8007e2c <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x50>)
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a05      	ldr	r2, [pc, #20]	; (8007e34 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x58>)
 8007e1e:	4904      	ldr	r1, [pc, #16]	; (8007e30 <_ZN5L6470I8shield_2E12L6470_GoHomeEv+0x54>)
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd90      	pop	{r4, r7, pc}
 8007e2c:	20000240 	.word	0x20000240
 8007e30:	20000260 	.word	0x20000260
 8007e34:	20000268 	.word	0x20000268

08007e38 <_ZN5L6470I8shield_2E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 8007e38:	b590      	push	{r4, r7, lr}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af02      	add	r7, sp, #8
 8007e3e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007e48:	681c      	ldr	r4, [r3, #0]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	2300      	movs	r3, #0
 8007e54:	220b      	movs	r2, #11
 8007e56:	490c      	ldr	r1, [pc, #48]	; (8007e88 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8007e68:	4907      	ldr	r1, [pc, #28]	; (8007e88 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x50>)
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a05      	ldr	r2, [pc, #20]	; (8007e90 <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x58>)
 8007e7a:	4904      	ldr	r1, [pc, #16]	; (8007e8c <_ZN5L6470I8shield_2E12L6470_GoMarkEv+0x54>)
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd90      	pop	{r4, r7, pc}
 8007e88:	20000240 	.word	0x20000240
 8007e8c:	20000260 	.word	0x20000260
 8007e90:	20000268 	.word	0x20000268

08007e94 <_ZN5L6470I8shield_2E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 8007e94:	b590      	push	{r4, r7, lr}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007ea4:	681c      	ldr	r4, [r3, #0]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	220c      	movs	r2, #12
 8007eb2:	490c      	ldr	r1, [pc, #48]	; (8007ee4 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a09      	ldr	r2, [pc, #36]	; (8007ee8 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8007ec4:	4907      	ldr	r1, [pc, #28]	; (8007ee4 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x50>)
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a05      	ldr	r2, [pc, #20]	; (8007eec <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x58>)
 8007ed6:	4904      	ldr	r1, [pc, #16]	; (8007ee8 <_ZN5L6470I8shield_2E14L6470_ResetPosEv+0x54>)
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4798      	blx	r3
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd90      	pop	{r4, r7, pc}
 8007ee4:	20000240 	.word	0x20000240
 8007ee8:	20000260 	.word	0x20000260
 8007eec:	20000268 	.word	0x20000268

08007ef0 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 8007ef0:	b590      	push	{r4, r7, lr}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007f00:	681c      	ldr	r4, [r3, #0]
 8007f02:	2300      	movs	r3, #0
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	220d      	movs	r2, #13
 8007f0e:	490c      	ldr	r1, [pc, #48]	; (8007f40 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a09      	ldr	r2, [pc, #36]	; (8007f44 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8007f20:	4907      	ldr	r1, [pc, #28]	; (8007f40 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x50>)
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a05      	ldr	r2, [pc, #20]	; (8007f48 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x58>)
 8007f32:	4904      	ldr	r1, [pc, #16]	; (8007f44 <_ZN5L6470I8shield_2E17L6470_ResetDeviceEv+0x54>)
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	4798      	blx	r3
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd90      	pop	{r4, r7, pc}
 8007f40:	20000240 	.word	0x20000240
 8007f44:	20000260 	.word	0x20000260
 8007f48:	20000268 	.word	0x20000268

08007f4c <_ZN5L6470I8shield_2E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 8007f4c:	b590      	push	{r4, r7, lr}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007f5c:	681c      	ldr	r4, [r3, #0]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	2300      	movs	r3, #0
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	2300      	movs	r3, #0
 8007f68:	220e      	movs	r2, #14
 8007f6a:	490c      	ldr	r1, [pc, #48]	; (8007f9c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a09      	ldr	r2, [pc, #36]	; (8007fa0 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8007f7c:	4907      	ldr	r1, [pc, #28]	; (8007f9c <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x50>)
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a05      	ldr	r2, [pc, #20]	; (8007fa4 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x58>)
 8007f8e:	4904      	ldr	r1, [pc, #16]	; (8007fa0 <_ZN5L6470I8shield_2E14L6470_SoftStopEv+0x54>)
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	4798      	blx	r3
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd90      	pop	{r4, r7, pc}
 8007f9c:	20000240 	.word	0x20000240
 8007fa0:	20000260 	.word	0x20000260
 8007fa4:	20000268 	.word	0x20000268

08007fa8 <_ZN5L6470I8shield_2E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 8007fa8:	b590      	push	{r4, r7, lr}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007fb8:	681c      	ldr	r4, [r3, #0]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	220f      	movs	r2, #15
 8007fc6:	490c      	ldr	r1, [pc, #48]	; (8007ff8 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8007fd8:	4907      	ldr	r1, [pc, #28]	; (8007ff8 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x50>)
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a05      	ldr	r2, [pc, #20]	; (8008000 <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x58>)
 8007fea:	4904      	ldr	r1, [pc, #16]	; (8007ffc <_ZN5L6470I8shield_2E14L6470_HardStopEv+0x54>)
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	4798      	blx	r3
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd90      	pop	{r4, r7, pc}
 8007ff8:	20000240 	.word	0x20000240
 8007ffc:	20000260 	.word	0x20000260
 8008000:	20000268 	.word	0x20000268

08008004 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 8008004:	b590      	push	{r4, r7, lr}
 8008006:	b085      	sub	sp, #20
 8008008:	af02      	add	r7, sp, #8
 800800a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008014:	681c      	ldr	r4, [r3, #0]
 8008016:	2300      	movs	r3, #0
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	2300      	movs	r3, #0
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	2300      	movs	r3, #0
 8008020:	2210      	movs	r2, #16
 8008022:	490c      	ldr	r1, [pc, #48]	; (8008054 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a09      	ldr	r2, [pc, #36]	; (8008058 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8008034:	4907      	ldr	r1, [pc, #28]	; (8008054 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x50>)
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a05      	ldr	r2, [pc, #20]	; (800805c <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x58>)
 8008046:	4904      	ldr	r1, [pc, #16]	; (8008058 <_ZN5L6470I8shield_2E13L6470_SoftHiZEv+0x54>)
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	bd90      	pop	{r4, r7, pc}
 8008054:	20000240 	.word	0x20000240
 8008058:	20000260 	.word	0x20000260
 800805c:	20000268 	.word	0x20000268

08008060 <_ZN5L6470I8shield_2E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 8008060:	b590      	push	{r4, r7, lr}
 8008062:	b085      	sub	sp, #20
 8008064:	af02      	add	r7, sp, #8
 8008066:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008070:	681c      	ldr	r4, [r3, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	2300      	movs	r3, #0
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	2211      	movs	r2, #17
 800807e:	490c      	ldr	r1, [pc, #48]	; (80080b0 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a09      	ldr	r2, [pc, #36]	; (80080b4 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 8008090:	4907      	ldr	r1, [pc, #28]	; (80080b0 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x50>)
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a05      	ldr	r2, [pc, #20]	; (80080b8 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x58>)
 80080a2:	4904      	ldr	r1, [pc, #16]	; (80080b4 <_ZN5L6470I8shield_2E13L6470_HardHiZEv+0x54>)
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd90      	pop	{r4, r7, pc}
 80080b0:	20000240 	.word	0x20000240
 80080b4:	20000260 	.word	0x20000260
 80080b8:	20000268 	.word	0x20000268

080080bc <_ZN5L6470I8shield_2E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 80080bc:	b590      	push	{r4, r7, lr}
 80080be:	b087      	sub	sp, #28
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80080cc:	681c      	ldr	r4, [r3, #0]
 80080ce:	2300      	movs	r3, #0
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	2300      	movs	r3, #0
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	2300      	movs	r3, #0
 80080d8:	2212      	movs	r2, #18
 80080da:	4912      	ldr	r1, [pc, #72]	; (8008124 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a0f      	ldr	r2, [pc, #60]	; (8008128 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 80080ec:	490d      	ldr	r1, [pc, #52]	; (8008124 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x68>)
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a0b      	ldr	r2, [pc, #44]	; (800812c <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 80080fe:	490a      	ldr	r1, [pc, #40]	; (8008128 <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x6c>)
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2202      	movs	r2, #2
 8008110:	4906      	ldr	r1, [pc, #24]	; (800812c <_ZN5L6470I8shield_2E15L6470_GetStatusEv+0x70>)
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
 8008116:	4603      	mov	r3, r0
 8008118:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800811a:	89fb      	ldrh	r3, [r7, #14]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	bd90      	pop	{r4, r7, pc}
 8008124:	20000240 	.word	0x20000240
 8008128:	20000260 	.word	0x20000260
 800812c:	20000268 	.word	0x20000268

08008130 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 8008130:	b590      	push	{r4, r7, lr}
 8008132:	b087      	sub	sp, #28
 8008134:	af02      	add	r7, sp, #8
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	460b      	mov	r3, r1
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008146:	681c      	ldr	r4, [r3, #0]
 8008148:	7afa      	ldrb	r2, [r7, #11]
 800814a:	2300      	movs	r3, #0
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	4613      	mov	r3, r2
 8008154:	2201      	movs	r2, #1
 8008156:	4903      	ldr	r1, [pc, #12]	; (8008164 <_ZN5L6470I8shield_2E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	47a0      	blx	r4
}
 800815c:	bf00      	nop
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	bd90      	pop	{r4, r7, pc}
 8008164:	20000240 	.word	0x20000240

08008168 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b085      	sub	sp, #20
 800816c:	af02      	add	r7, sp, #8
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800817c:	681c      	ldr	r4, [r3, #0]
 800817e:	78fb      	ldrb	r3, [r7, #3]
 8008180:	2200      	movs	r2, #0
 8008182:	9201      	str	r2, [sp, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	9200      	str	r2, [sp, #0]
 8008188:	2202      	movs	r2, #2
 800818a:	4903      	ldr	r1, [pc, #12]	; (8008198 <_ZN5L6470I8shield_2E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	47a0      	blx	r4
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	bd90      	pop	{r4, r7, pc}
 8008198:	20000240 	.word	0x20000240

0800819c <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800819c:	b590      	push	{r4, r7, lr}
 800819e:	b087      	sub	sp, #28
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	460b      	mov	r3, r1
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80081b2:	681c      	ldr	r4, [r3, #0]
 80081b4:	7afa      	ldrb	r2, [r7, #11]
 80081b6:	2300      	movs	r3, #0
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	4613      	mov	r3, r2
 80081c0:	2203      	movs	r2, #3
 80081c2:	4903      	ldr	r1, [pc, #12]	; (80081d0 <_ZN5L6470I8shield_2E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	47a0      	blx	r4
}
 80081c8:	bf00      	nop
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd90      	pop	{r4, r7, pc}
 80081d0:	20000240 	.word	0x20000240

080081d4 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 80081d4:	b590      	push	{r4, r7, lr}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af02      	add	r7, sp, #8
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80081e8:	681c      	ldr	r4, [r3, #0]
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	2200      	movs	r2, #0
 80081ee:	9201      	str	r2, [sp, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	9200      	str	r2, [sp, #0]
 80081f4:	2204      	movs	r2, #4
 80081f6:	4903      	ldr	r1, [pc, #12]	; (8008204 <_ZN5L6470I8shield_2E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	47a0      	blx	r4
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bd90      	pop	{r4, r7, pc}
 8008204:	20000240 	.word	0x20000240

08008208 <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b087      	sub	sp, #28
 800820c:	af02      	add	r7, sp, #8
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	460b      	mov	r3, r1
 8008212:	607a      	str	r2, [r7, #4]
 8008214:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800821e:	681c      	ldr	r4, [r3, #0]
 8008220:	7afa      	ldrb	r2, [r7, #11]
 8008222:	2300      	movs	r3, #0
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	4613      	mov	r3, r2
 800822c:	2205      	movs	r2, #5
 800822e:	4903      	ldr	r1, [pc, #12]	; (800823c <_ZN5L6470I8shield_2E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	47a0      	blx	r4
}
 8008234:	bf00      	nop
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	bd90      	pop	{r4, r7, pc}
 800823c:	20000240 	.word	0x20000240

08008240 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 8008240:	b590      	push	{r4, r7, lr}
 8008242:	b085      	sub	sp, #20
 8008244:	af02      	add	r7, sp, #8
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008252:	681c      	ldr	r4, [r3, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	2300      	movs	r3, #0
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2206      	movs	r2, #6
 8008260:	4903      	ldr	r1, [pc, #12]	; (8008270 <_ZN5L6470I8shield_2E17L6470_PrepareGoToEm+0x30>)
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	47a0      	blx	r4
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	bd90      	pop	{r4, r7, pc}
 800826e:	bf00      	nop
 8008270:	20000240 	.word	0x20000240

08008274 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 8008274:	b590      	push	{r4, r7, lr}
 8008276:	b087      	sub	sp, #28
 8008278:	af02      	add	r7, sp, #8
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	460b      	mov	r3, r1
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800828a:	681c      	ldr	r4, [r3, #0]
 800828c:	7afa      	ldrb	r2, [r7, #11]
 800828e:	2300      	movs	r3, #0
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	4613      	mov	r3, r2
 8008298:	2207      	movs	r2, #7
 800829a:	4903      	ldr	r1, [pc, #12]	; (80082a8 <_ZN5L6470I8shield_2E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	47a0      	blx	r4
}
 80082a0:	bf00      	nop
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd90      	pop	{r4, r7, pc}
 80082a8:	20000240 	.word	0x20000240

080082ac <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	607b      	str	r3, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	72fb      	strb	r3, [r7, #11]
 80082ba:	4613      	mov	r3, r2
 80082bc:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80082c6:	681c      	ldr	r4, [r3, #0]
 80082c8:	7af9      	ldrb	r1, [r7, #11]
 80082ca:	7abb      	ldrb	r3, [r7, #10]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	9201      	str	r2, [sp, #4]
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	460b      	mov	r3, r1
 80082d4:	2208      	movs	r2, #8
 80082d6:	4903      	ldr	r1, [pc, #12]	; (80082e4 <_ZN5L6470I8shield_2E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	47a0      	blx	r4
}
 80082dc:	bf00      	nop
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd90      	pop	{r4, r7, pc}
 80082e4:	20000240 	.word	0x20000240

080082e8 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 80082e8:	b590      	push	{r4, r7, lr}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
 80082f4:	4613      	mov	r3, r2
 80082f6:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008300:	681c      	ldr	r4, [r3, #0]
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	78bb      	ldrb	r3, [r7, #2]
 8008306:	2100      	movs	r1, #0
 8008308:	9101      	str	r1, [sp, #4]
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	2209      	movs	r2, #9
 8008310:	4903      	ldr	r1, [pc, #12]	; (8008320 <_ZN5L6470I8shield_2E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	47a0      	blx	r4
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bd90      	pop	{r4, r7, pc}
 800831e:	bf00      	nop
 8008320:	20000240 	.word	0x20000240

08008324 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 8008324:	b590      	push	{r4, r7, lr}
 8008326:	b085      	sub	sp, #20
 8008328:	af02      	add	r7, sp, #8
 800832a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008334:	681c      	ldr	r4, [r3, #0]
 8008336:	2300      	movs	r3, #0
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	2300      	movs	r3, #0
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	2300      	movs	r3, #0
 8008340:	220a      	movs	r2, #10
 8008342:	4903      	ldr	r1, [pc, #12]	; (8008350 <_ZN5L6470I8shield_2E19L6470_PrepareGoHomeEv+0x2c>)
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	47a0      	blx	r4
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	bd90      	pop	{r4, r7, pc}
 8008350:	20000240 	.word	0x20000240

08008354 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 8008354:	b590      	push	{r4, r7, lr}
 8008356:	b085      	sub	sp, #20
 8008358:	af02      	add	r7, sp, #8
 800835a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008364:	681c      	ldr	r4, [r3, #0]
 8008366:	2300      	movs	r3, #0
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	2300      	movs	r3, #0
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	2300      	movs	r3, #0
 8008370:	220b      	movs	r2, #11
 8008372:	4903      	ldr	r1, [pc, #12]	; (8008380 <_ZN5L6470I8shield_2E19L6470_PrepareGoMarkEv+0x2c>)
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	47a0      	blx	r4
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	bd90      	pop	{r4, r7, pc}
 8008380:	20000240 	.word	0x20000240

08008384 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 8008384:	b590      	push	{r4, r7, lr}
 8008386:	b085      	sub	sp, #20
 8008388:	af02      	add	r7, sp, #8
 800838a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008394:	681c      	ldr	r4, [r3, #0]
 8008396:	2300      	movs	r3, #0
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	2300      	movs	r3, #0
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	2300      	movs	r3, #0
 80083a0:	220c      	movs	r2, #12
 80083a2:	4903      	ldr	r1, [pc, #12]	; (80083b0 <_ZN5L6470I8shield_2E21L6470_PrepareResetPosEv+0x2c>)
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	47a0      	blx	r4
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd90      	pop	{r4, r7, pc}
 80083b0:	20000240 	.word	0x20000240

080083b4 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 80083b4:	b590      	push	{r4, r7, lr}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80083c4:	681c      	ldr	r4, [r3, #0]
 80083c6:	2300      	movs	r3, #0
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	2300      	movs	r3, #0
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	2300      	movs	r3, #0
 80083d0:	220d      	movs	r2, #13
 80083d2:	4903      	ldr	r1, [pc, #12]	; (80083e0 <_ZN5L6470I8shield_2E24L6470_PrepareResetDeviceEv+0x2c>)
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	47a0      	blx	r4
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd90      	pop	{r4, r7, pc}
 80083e0:	20000240 	.word	0x20000240

080083e4 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 80083e4:	b590      	push	{r4, r7, lr}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80083f4:	681c      	ldr	r4, [r3, #0]
 80083f6:	2300      	movs	r3, #0
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	2300      	movs	r3, #0
 8008400:	220e      	movs	r2, #14
 8008402:	4903      	ldr	r1, [pc, #12]	; (8008410 <_ZN5L6470I8shield_2E21L6470_PrepareSoftStopEv+0x2c>)
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	47a0      	blx	r4
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	bd90      	pop	{r4, r7, pc}
 8008410:	20000240 	.word	0x20000240

08008414 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 8008414:	b590      	push	{r4, r7, lr}
 8008416:	b085      	sub	sp, #20
 8008418:	af02      	add	r7, sp, #8
 800841a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008424:	681c      	ldr	r4, [r3, #0]
 8008426:	2300      	movs	r3, #0
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	2300      	movs	r3, #0
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	2300      	movs	r3, #0
 8008430:	220f      	movs	r2, #15
 8008432:	4903      	ldr	r1, [pc, #12]	; (8008440 <_ZN5L6470I8shield_2E21L6470_PrepareHardStopEv+0x2c>)
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	47a0      	blx	r4
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	bd90      	pop	{r4, r7, pc}
 8008440:	20000240 	.word	0x20000240

08008444 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 8008444:	b590      	push	{r4, r7, lr}
 8008446:	b085      	sub	sp, #20
 8008448:	af02      	add	r7, sp, #8
 800844a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008454:	681c      	ldr	r4, [r3, #0]
 8008456:	2300      	movs	r3, #0
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	2300      	movs	r3, #0
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	2300      	movs	r3, #0
 8008460:	2210      	movs	r2, #16
 8008462:	4903      	ldr	r1, [pc, #12]	; (8008470 <_ZN5L6470I8shield_2E20L6470_PrepareSoftHiZEv+0x2c>)
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	47a0      	blx	r4
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	bd90      	pop	{r4, r7, pc}
 8008470:	20000240 	.word	0x20000240

08008474 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 8008474:	b590      	push	{r4, r7, lr}
 8008476:	b085      	sub	sp, #20
 8008478:	af02      	add	r7, sp, #8
 800847a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008484:	681c      	ldr	r4, [r3, #0]
 8008486:	2300      	movs	r3, #0
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	2300      	movs	r3, #0
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	2300      	movs	r3, #0
 8008490:	2211      	movs	r2, #17
 8008492:	4903      	ldr	r1, [pc, #12]	; (80084a0 <_ZN5L6470I8shield_2E20L6470_PrepareHardHiZEv+0x2c>)
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	47a0      	blx	r4
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	bd90      	pop	{r4, r7, pc}
 80084a0:	20000240 	.word	0x20000240

080084a4 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80084b4:	681c      	ldr	r4, [r3, #0]
 80084b6:	2300      	movs	r3, #0
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	2300      	movs	r3, #0
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	2300      	movs	r3, #0
 80084c0:	2212      	movs	r2, #18
 80084c2:	4903      	ldr	r1, [pc, #12]	; (80084d0 <_ZN5L6470I8shield_2E22L6470_PrepareGetStatusEv+0x2c>)
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	47a0      	blx	r4
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd90      	pop	{r4, r7, pc}
 80084d0:	20000240 	.word	0x20000240

080084d4 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a09      	ldr	r2, [pc, #36]	; (800850c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80084e8:	4909      	ldr	r1, [pc, #36]	; (8008510 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a06      	ldr	r2, [pc, #24]	; (8008514 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 80084fa:	4904      	ldr	r1, [pc, #16]	; (800850c <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8008500:	4b04      	ldr	r3, [pc, #16]	; (8008514 <_ZN5L6470I8shield_2E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	20000260 	.word	0x20000260
 8008510:	20000240 	.word	0x20000240
 8008514:	20000268 	.word	0x20000268

08008518 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 8008518:	b590      	push	{r4, r7, lr}
 800851a:	b089      	sub	sp, #36	; 0x24
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8008524:	4b17      	ldr	r3, [pc, #92]	; (8008584 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 8008526:	2200      	movs	r2, #0
 8008528:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800852a:	2300      	movs	r3, #0
 800852c:	75fb      	strb	r3, [r7, #23]
 800852e:	e020      	b.n	8008572 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008538:	681c      	ldr	r4, [r3, #0]
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	461a      	mov	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	1899      	adds	r1, r3, r2
 8008544:	7dfb      	ldrb	r3, [r7, #23]
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	461a      	mov	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	441a      	add	r2, r3
 800854e:	230a      	movs	r3, #10
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	2302      	movs	r3, #2
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 8008558:	2300      	movs	r3, #0
 800855a:	75bb      	strb	r3, [r7, #22]
 800855c:	e003      	b.n	8008566 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800855e:	bf00      	nop
 8008560:	7dbb      	ldrb	r3, [r7, #22]
 8008562:	3301      	adds	r3, #1
 8008564:	75bb      	strb	r3, [r7, #22]
 8008566:	7dbb      	ldrb	r3, [r7, #22]
 8008568:	2b7c      	cmp	r3, #124	; 0x7c
 800856a:	d9f8      	bls.n	800855e <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800856c:	7dfb      	ldrb	r3, [r7, #23]
 800856e:	3301      	adds	r3, #1
 8008570:	75fb      	strb	r3, [r7, #23]
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	2b03      	cmp	r3, #3
 8008576:	d9db      	bls.n	8008530 <_ZN5L6470I8shield_2E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 8008578:	bf00      	nop
}
 800857a:	bf00      	nop
 800857c:	371c      	adds	r7, #28
 800857e:	46bd      	mov	sp, r7
 8008580:	bd90      	pop	{r4, r7, pc}
 8008582:	bf00      	nop
 8008584:	2000023d 	.word	0x2000023d

08008588 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800859a:	2301      	movs	r3, #1
 800859c:	74fb      	strb	r3, [r7, #19]
 800859e:	e016      	b.n	80085ce <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80085a0:	7cfb      	ldrb	r3, [r7, #19]
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	461a      	mov	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	7f1b      	ldrb	r3, [r3, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	4413      	add	r3, r2
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	4619      	mov	r1, r3
 80085b4:	79fa      	ldrb	r2, [r7, #7]
 80085b6:	7cfb      	ldrb	r3, [r7, #19]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	fa01 f303 	lsl.w	r3, r1, r3
 80085c0:	461a      	mov	r2, r3
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80085c8:	7cfb      	ldrb	r3, [r7, #19]
 80085ca:	3301      	adds	r3, #1
 80085cc:	74fb      	strb	r3, [r7, #19]
 80085ce:	7cfb      	ldrb	r3, [r7, #19]
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d9e5      	bls.n	80085a0 <_ZN5L6470I8shield_2E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 80085d4:	697b      	ldr	r3, [r7, #20]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2118      	movs	r1, #24
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	4798      	blx	r3
 8008604:	4602      	mov	r2, r0
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860a:	b292      	uxth	r2, r2
 800860c:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	2b0e      	cmp	r3, #14
 8008612:	f200 8099 	bhi.w	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
 8008616:	a201      	add	r2, pc, #4	; (adr r2, 800861c <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x38>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	08008659 	.word	0x08008659
 8008620:	08008669 	.word	0x08008669
 8008624:	08008679 	.word	0x08008679
 8008628:	08008689 	.word	0x08008689
 800862c:	08008699 	.word	0x08008699
 8008630:	080086a9 	.word	0x080086a9
 8008634:	080086b9 	.word	0x080086b9
 8008638:	080086c9 	.word	0x080086c9
 800863c:	080086d9 	.word	0x080086d9
 8008640:	080086e9 	.word	0x080086e9
 8008644:	080086f9 	.word	0x080086f9
 8008648:	08008709 	.word	0x08008709
 800864c:	08008719 	.word	0x08008719
 8008650:	08008729 	.word	0x08008729
 8008654:	08008739 	.word	0x08008739
      state = pL6470_StatusRegister->HiZ;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008662:	b2db      	uxtb	r3, r3
 8008664:	73fb      	strb	r3, [r7, #15]
      break;
 8008666:	e06f      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008672:	b2db      	uxtb	r3, r3
 8008674:	73fb      	strb	r3, [r7, #15]
      break;
 8008676:	e067      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008682:	b2db      	uxtb	r3, r3
 8008684:	73fb      	strb	r3, [r7, #15]
      break;
 8008686:	e05f      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008692:	b2db      	uxtb	r3, r3
 8008694:	73fb      	strb	r3, [r7, #15]
      break;
 8008696:	e057      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	73fb      	strb	r3, [r7, #15]
      break;
 80086a6:	e04f      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	73fb      	strb	r3, [r7, #15]
      break;
 80086b6:	e047      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	73fb      	strb	r3, [r7, #15]
      break;
 80086c6:	e03f      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	73fb      	strb	r3, [r7, #15]
      break;
 80086d6:	e037      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086dc:	785b      	ldrb	r3, [r3, #1]
 80086de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	73fb      	strb	r3, [r7, #15]
      break;
 80086e6:	e02f      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	73fb      	strb	r3, [r7, #15]
      break;
 80086f6:	e027      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008702:	b2db      	uxtb	r3, r3
 8008704:	73fb      	strb	r3, [r7, #15]
      break;
 8008706:	e01f      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008712:	b2db      	uxtb	r3, r3
 8008714:	73fb      	strb	r3, [r7, #15]
      break;
 8008716:	e017      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008722:	b2db      	uxtb	r3, r3
 8008724:	73fb      	strb	r3, [r7, #15]
      break;
 8008726:	e00f      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008732:	b2db      	uxtb	r3, r3
 8008734:	73fb      	strb	r3, [r7, #15]
      break;
 8008736:	e007      	b.n	8008748 <_ZN5L6470I8shield_2E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873c:	785b      	ldrb	r3, [r3, #1]
 800873e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008742:	b2db      	uxtb	r3, r3
 8008744:	73fb      	strb	r3, [r7, #15]
      break;
 8008746:	bf00      	nop
  return state;
 8008748:	7bfb      	ldrb	r3, [r7, #15]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop

08008754 <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	2b18      	cmp	r3, #24
 8008764:	d809      	bhi.n	800877a <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a19      	ldr	r1, [r3, #32]
 800876a:	78fa      	ldrb	r2, [r7, #3]
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	440b      	add	r3, r1
 8008776:	3301      	adds	r3, #1
 8008778:	e000      	b.n	800877c <_ZN5L6470I8shield_2E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]
 8008796:	e01a      	b.n	80087ce <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	011b      	lsls	r3, r3, #4
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	4413      	add	r3, r2
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	4413      	add	r3, r2
 80087ac:	2200      	movs	r2, #0
 80087ae:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	011b      	lsls	r3, r3, #4
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	4413      	add	r3, r2
 80087b8:	2200      	movs	r2, #0
 80087ba:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	4413      	add	r3, r2
 80087c4:	2200      	movs	r2, #0
 80087c6:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	3301      	adds	r3, #1
 80087cc:	73fb      	strb	r3, [r7, #15]
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d9e1      	bls.n	8008798 <_ZN5L6470I8shield_2E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <_ZN5L6470I8shield_2E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 80087e2:	b480      	push	{r7}
 80087e4:	b085      	sub	sp, #20
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	60b9      	str	r1, [r7, #8]
 80087ec:	603b      	str	r3, [r7, #0]
 80087ee:	4613      	mov	r3, r2
 80087f0:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	7f1b      	ldrb	r3, [r3, #28]
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	4413      	add	r3, r2
 80087fc:	79fa      	ldrb	r2, [r7, #7]
 80087fe:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	7f1b      	ldrb	r3, [r3, #28]
 8008804:	011b      	lsls	r3, r3, #4
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	4413      	add	r3, r2
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	7f1b      	ldrb	r3, [r3, #28]
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	4413      	add	r3, r2
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	7f1b      	ldrb	r3, [r3, #28]
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	4413      	add	r3, r2
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	60da      	str	r2, [r3, #12]
}
 800882a:	bf00      	nop
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
	...

08008838 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 8008838:	b590      	push	{r4, r7, lr}
 800883a:	b087      	sub	sp, #28
 800883c:	af02      	add	r7, sp, #8
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	603b      	str	r3, [r7, #0]
 8008844:	4613      	mov	r3, r2
 8008846:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 8008848:	4b10      	ldr	r3, [pc, #64]	; (800888c <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8008850:	4b0e      	ldr	r3, [pc, #56]	; (800888c <_ZN5L6470I8shield_2E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 8008852:	2201      	movs	r2, #1
 8008854:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800886e:	681c      	ldr	r4, [r3, #0]
 8008870:	79fa      	ldrb	r2, [r7, #7]
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	47a0      	blx	r4
}
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	bd90      	pop	{r4, r7, pc}
 800888a:	bf00      	nop
 800888c:	2000023d 	.word	0x2000023d

08008890 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80088a0:	2300      	movs	r3, #0
 80088a2:	75bb      	strb	r3, [r7, #22]
 80088a4:	e013      	b.n	80088ce <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80088a6:	2300      	movs	r3, #0
 80088a8:	75fb      	strb	r3, [r7, #23]
 80088aa:	e00a      	b.n	80088c2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 80088ac:	7d7b      	ldrb	r3, [r7, #21]
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	757a      	strb	r2, [r7, #21]
 80088b2:	461a      	mov	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4413      	add	r3, r2
 80088b8:	2200      	movs	r2, #0
 80088ba:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
 80088be:	3301      	adds	r3, #1
 80088c0:	75fb      	strb	r3, [r7, #23]
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d9f1      	bls.n	80088ac <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80088c8:	7dbb      	ldrb	r3, [r7, #22]
 80088ca:	3301      	adds	r3, #1
 80088cc:	75bb      	strb	r3, [r7, #22]
 80088ce:	7dbb      	ldrb	r3, [r7, #22]
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d9e8      	bls.n	80088a6 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80088d4:	2300      	movs	r3, #0
 80088d6:	75fb      	strb	r3, [r7, #23]
 80088d8:	e1f1      	b.n	8008cbe <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	011b      	lsls	r3, r3, #4
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	440b      	add	r3, r1
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	4619      	mov	r1, r3
 80088ea:	460b      	mov	r3, r1
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	1a5b      	subs	r3, r3, r1
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	441a      	add	r2, r3
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	440b      	add	r3, r1
 80088fa:	7b12      	ldrb	r2, [r2, #12]
 80088fc:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b12      	cmp	r3, #18
 800890a:	f200 81d5 	bhi.w	8008cb8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800890e:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	08008cb9 	.word	0x08008cb9
 8008918:	08008961 	.word	0x08008961
 800891c:	080089e9 	.word	0x080089e9
 8008920:	08008a19 	.word	0x08008a19
 8008924:	08008a81 	.word	0x08008a81
 8008928:	08008aaf 	.word	0x08008aaf
 800892c:	08008b17 	.word	0x08008b17
 8008930:	08008b53 	.word	0x08008b53
 8008934:	08008bbb 	.word	0x08008bbb
 8008938:	08008c57 	.word	0x08008c57
 800893c:	08008cb9 	.word	0x08008cb9
 8008940:	08008cb9 	.word	0x08008cb9
 8008944:	08008cb9 	.word	0x08008cb9
 8008948:	08008cb9 	.word	0x08008cb9
 800894c:	08008cb9 	.word	0x08008cb9
 8008950:	08008cb9 	.word	0x08008cb9
 8008954:	08008cb9 	.word	0x08008cb9
 8008958:	08008cb9 	.word	0x08008cb9
 800895c:	08008cb9 	.word	0x08008cb9
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	4413      	add	r3, r2
 8008966:	7819      	ldrb	r1, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a18      	ldr	r0, [r3, #32]
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	4413      	add	r3, r2
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4403      	add	r3, r0
 8008980:	781a      	ldrb	r2, [r3, #0]
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4403      	add	r3, r0
 8008988:	430a      	orrs	r2, r1
 800898a:	b2d2      	uxtb	r2, r2
 800898c:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a19      	ldr	r1, [r3, #32]
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	4413      	add	r3, r2
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	440b      	add	r3, r1
 80089a6:	7b9b      	ldrb	r3, [r3, #14]
 80089a8:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80089aa:	2301      	movs	r3, #1
 80089ac:	75bb      	strb	r3, [r7, #22]
 80089ae:	e016      	b.n	80089de <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	4413      	add	r3, r2
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	7d39      	ldrb	r1, [r7, #20]
 80089bc:	7dbb      	ldrb	r3, [r7, #22]
 80089be:	1acb      	subs	r3, r1, r3
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	fa22 f103 	lsr.w	r1, r2, r3
 80089c6:	7dbb      	ldrb	r3, [r7, #22]
 80089c8:	005a      	lsls	r2, r3, #1
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
 80089cc:	4413      	add	r3, r2
 80089ce:	461a      	mov	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4413      	add	r3, r2
 80089d4:	b2ca      	uxtb	r2, r1
 80089d6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80089d8:	7dbb      	ldrb	r3, [r7, #22]
 80089da:	3301      	adds	r3, #1
 80089dc:	75bb      	strb	r3, [r7, #22]
 80089de:	7d3a      	ldrb	r2, [r7, #20]
 80089e0:	7dbb      	ldrb	r3, [r7, #22]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d2e4      	bcs.n	80089b0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 80089e6:	e167      	b.n	8008cb8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	7819      	ldrb	r1, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6a18      	ldr	r0, [r3, #32]
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	011b      	lsls	r3, r3, #4
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	4413      	add	r3, r2
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	4613      	mov	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4403      	add	r3, r0
 8008a08:	781a      	ldrb	r2, [r3, #0]
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	4403      	add	r3, r0
 8008a10:	430a      	orrs	r2, r1
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	701a      	strb	r2, [r3, #0]
      break;
 8008a16:	e14f      	b.n	8008cb8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	7819      	ldrb	r1, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	4413      	add	r3, r2
 8008a34:	4403      	add	r3, r0
 8008a36:	7a1a      	ldrb	r2, [r3, #8]
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4403      	add	r3, r0
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	b2d2      	uxtb	r2, r2
 8008a42:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008a44:	2301      	movs	r3, #1
 8008a46:	75bb      	strb	r3, [r7, #22]
 8008a48:	e016      	b.n	8008a78 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4413      	add	r3, r2
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	7dbb      	ldrb	r3, [r7, #22]
 8008a56:	f1c3 0303 	rsb	r3, r3, #3
 8008a5a:	00db      	lsls	r3, r3, #3
 8008a5c:	fa22 f103 	lsr.w	r1, r2, r3
 8008a60:	7dbb      	ldrb	r3, [r7, #22]
 8008a62:	005a      	lsls	r2, r3, #1
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	4413      	add	r3, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	b2ca      	uxtb	r2, r1
 8008a70:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008a72:	7dbb      	ldrb	r3, [r7, #22]
 8008a74:	3301      	adds	r3, #1
 8008a76:	75bb      	strb	r3, [r7, #22]
 8008a78:	7dbb      	ldrb	r3, [r7, #22]
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d9e5      	bls.n	8008a4a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 8008a7e:	e11b      	b.n	8008cb8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008a80:	7dfb      	ldrb	r3, [r7, #23]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	7819      	ldrb	r1, [r3, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008a8c:	7dfb      	ldrb	r3, [r7, #23]
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	4413      	add	r3, r2
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	4413      	add	r3, r2
 8008a9c:	4403      	add	r3, r0
 8008a9e:	7a1a      	ldrb	r2, [r3, #8]
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4403      	add	r3, r0
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	b2d2      	uxtb	r2, r2
 8008aaa:	701a      	strb	r2, [r3, #0]
      break;
 8008aac:	e104      	b.n	8008cb8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008aae:	7dfb      	ldrb	r3, [r7, #23]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	7819      	ldrb	r1, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	011b      	lsls	r3, r3, #4
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	4413      	add	r3, r2
 8008aca:	4403      	add	r3, r0
 8008acc:	7a1a      	ldrb	r2, [r3, #8]
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	4403      	add	r3, r0
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008ada:	2301      	movs	r3, #1
 8008adc:	75bb      	strb	r3, [r7, #22]
 8008ade:	e016      	b.n	8008b0e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	7dbb      	ldrb	r3, [r7, #22]
 8008aec:	f1c3 0303 	rsb	r3, r3, #3
 8008af0:	00db      	lsls	r3, r3, #3
 8008af2:	fa22 f103 	lsr.w	r1, r2, r3
 8008af6:	7dbb      	ldrb	r3, [r7, #22]
 8008af8:	005a      	lsls	r2, r3, #1
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	4413      	add	r3, r2
 8008afe:	461a      	mov	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4413      	add	r3, r2
 8008b04:	b2ca      	uxtb	r2, r1
 8008b06:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008b08:	7dbb      	ldrb	r3, [r7, #22]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	75bb      	strb	r3, [r7, #22]
 8008b0e:	7dbb      	ldrb	r3, [r7, #22]
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d9e5      	bls.n	8008ae0 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 8008b14:	e0d0      	b.n	8008cb8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008b16:	2301      	movs	r3, #1
 8008b18:	75bb      	strb	r3, [r7, #22]
 8008b1a:	e016      	b.n	8008b4a <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	4413      	add	r3, r2
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	7dbb      	ldrb	r3, [r7, #22]
 8008b28:	f1c3 0303 	rsb	r3, r3, #3
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	fa22 f103 	lsr.w	r1, r2, r3
 8008b32:	7dbb      	ldrb	r3, [r7, #22]
 8008b34:	005a      	lsls	r2, r3, #1
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	4413      	add	r3, r2
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4413      	add	r3, r2
 8008b40:	b2ca      	uxtb	r2, r1
 8008b42:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008b44:	7dbb      	ldrb	r3, [r7, #22]
 8008b46:	3301      	adds	r3, #1
 8008b48:	75bb      	strb	r3, [r7, #22]
 8008b4a:	7dbb      	ldrb	r3, [r7, #22]
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d9e5      	bls.n	8008b1c <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 8008b50:	e0b2      	b.n	8008cb8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	4413      	add	r3, r2
 8008b58:	7819      	ldrb	r1, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	4413      	add	r3, r2
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	4403      	add	r3, r0
 8008b70:	7a1a      	ldrb	r2, [r3, #8]
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	4403      	add	r3, r0
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008b7e:	2301      	movs	r3, #1
 8008b80:	75bb      	strb	r3, [r7, #22]
 8008b82:	e016      	b.n	8008bb2 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	7dbb      	ldrb	r3, [r7, #22]
 8008b90:	f1c3 0303 	rsb	r3, r3, #3
 8008b94:	00db      	lsls	r3, r3, #3
 8008b96:	fa22 f103 	lsr.w	r1, r2, r3
 8008b9a:	7dbb      	ldrb	r3, [r7, #22]
 8008b9c:	005a      	lsls	r2, r3, #1
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	b2ca      	uxtb	r2, r1
 8008baa:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008bac:	7dbb      	ldrb	r3, [r7, #22]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	75bb      	strb	r3, [r7, #22]
 8008bb2:	7dbb      	ldrb	r3, [r7, #22]
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d9e5      	bls.n	8008b84 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 8008bb8:	e07e      	b.n	8008cb8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	b259      	sxtb	r1, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	4413      	add	r3, r2
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	4403      	add	r3, r0
 8008bda:	791b      	ldrb	r3, [r3, #4]
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	b25b      	sxtb	r3, r3
 8008be0:	430b      	orrs	r3, r1
 8008be2:	b259      	sxtb	r1, r3
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	4413      	add	r3, r2
 8008bea:	b2ca      	uxtb	r2, r1
 8008bec:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	7819      	ldrb	r1, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	4413      	add	r3, r2
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	4613      	mov	r3, r2
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	4413      	add	r3, r2
 8008c0a:	4403      	add	r3, r0
 8008c0c:	7a1a      	ldrb	r2, [r3, #8]
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	4403      	add	r3, r0
 8008c14:	430a      	orrs	r2, r1
 8008c16:	b2d2      	uxtb	r2, r2
 8008c18:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	75bb      	strb	r3, [r7, #22]
 8008c1e:	e016      	b.n	8008c4e <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	4413      	add	r3, r2
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	7dbb      	ldrb	r3, [r7, #22]
 8008c2c:	f1c3 0303 	rsb	r3, r3, #3
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	fa22 f103 	lsr.w	r1, r2, r3
 8008c36:	7dbb      	ldrb	r3, [r7, #22]
 8008c38:	005a      	lsls	r2, r3, #1
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4413      	add	r3, r2
 8008c44:	b2ca      	uxtb	r2, r1
 8008c46:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8008c48:	7dbb      	ldrb	r3, [r7, #22]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	75bb      	strb	r3, [r7, #22]
 8008c4e:	7dbb      	ldrb	r3, [r7, #22]
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d9e5      	bls.n	8008c20 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 8008c54:	e030      	b.n	8008cb8 <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	b259      	sxtb	r1, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	4403      	add	r3, r0
 8008c76:	791b      	ldrb	r3, [r3, #4]
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	b25b      	sxtb	r3, r3
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	b259      	sxtb	r1, r3
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	4413      	add	r3, r2
 8008c86:	b2ca      	uxtb	r2, r1
 8008c88:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	4413      	add	r3, r2
 8008c90:	7819      	ldrb	r1, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	4403      	add	r3, r0
 8008ca8:	7a1a      	ldrb	r2, [r3, #8]
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	4403      	add	r3, r0
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	b2d2      	uxtb	r2, r2
 8008cb4:	701a      	strb	r2, [r3, #0]
      break;
 8008cb6:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	75fb      	strb	r3, [r7, #23]
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	f67f ae0a 	bls.w	80088da <_ZN5L6470I8shield_2E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 8008cc6:	bf00      	nop
 8008cc8:	bf00      	nop
 8008cca:	371c      	adds	r7, #28
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <_ZN5L6470I8shield_2E11L6470_roundEf>:
    int L6470_round(float f)
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 8008ce0:	edd7 7a00 	vldr	s15, [r7]
 8008ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cec:	db1e      	blt.n	8008d2c <_ZN5L6470I8shield_2E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 8008cee:	edd7 7a00 	vldr	s15, [r7]
 8008cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cf6:	ee17 2a90 	vmov	r2, s15
 8008cfa:	edd7 7a00 	vldr	s15, [r7]
 8008cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d06:	ed97 7a00 	vldr	s14, [r7]
 8008d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1a:	bf4c      	ite	mi
 8008d1c:	2301      	movmi	r3, #1
 8008d1e:	2300      	movpl	r3, #0
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	f083 0301 	eor.w	r3, r3, #1
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	4413      	add	r3, r2
 8008d2a:	e01a      	b.n	8008d62 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 8008d2c:	edd7 7a00 	vldr	s15, [r7]
 8008d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d34:	ee17 2a90 	vmov	r2, s15
 8008d38:	edd7 7a00 	vldr	s15, [r7]
 8008d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d44:	ed97 7a00 	vldr	s14, [r7]
 8008d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d4c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8008d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d58:	d501      	bpl.n	8008d5e <_ZN5L6470I8shield_2E11L6470_roundEf+0x8a>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <_ZN5L6470I8shield_2E11L6470_roundEf+0x8c>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	1ad3      	subs	r3, r2, r3
    }
 8008d62:	4618      	mov	r0, r3
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <_ZN5L6470I8shield_2E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6918      	ldr	r0, [r3, #16]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8a9b      	ldrh	r3, [r3, #20]
 8008d84:	2200      	movs	r2, #0
 8008d86:	4619      	mov	r1, r3
 8008d88:	f007 f9cc 	bl	8010124 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6998      	ldr	r0, [r3, #24]
 8008d90:	88fa      	ldrh	r2, [r7, #6]
 8008d92:	2364      	movs	r3, #100	; 0x64
 8008d94:	68b9      	ldr	r1, [r7, #8]
 8008d96:	f008 f98c 	bl	80110b2 <HAL_SPI_Receive>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6918      	ldr	r0, [r3, #16]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	8a9b      	ldrh	r3, [r3, #20]
 8008da6:	2201      	movs	r2, #1
 8008da8:	4619      	mov	r1, r3
 8008daa:	f007 f9bb 	bl	8010124 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <_ZN5L6470I8shield_2E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e000      	b.n	8008dba <_ZN5L6470I8shield_2E4ReadEPht+0x4c>
        return COMPONENT_OK;
 8008db8:	2300      	movs	r3, #0
    }
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <_ZN5L6470I8shield_2E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b086      	sub	sp, #24
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	60b9      	str	r1, [r7, #8]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6918      	ldr	r0, [r3, #16]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8a9b      	ldrh	r3, [r3, #20]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	4619      	mov	r1, r3
 8008ddc:	f007 f9a2 	bl	8010124 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6998      	ldr	r0, [r3, #24]
 8008de4:	88fa      	ldrh	r2, [r7, #6]
 8008de6:	2364      	movs	r3, #100	; 0x64
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	f008 f826 	bl	8010e3a <HAL_SPI_Transmit>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6918      	ldr	r0, [r3, #16]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8a9b      	ldrh	r3, [r3, #20]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f007 f991 	bl	8010124 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <_ZN5L6470I8shield_2E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e000      	b.n	8008e0e <_ZN5L6470I8shield_2E5WriteEPht+0x4c>
        return COMPONENT_OK;
 8008e0c:	2300      	movs	r3, #0
    }
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b088      	sub	sp, #32
 8008e1a:	af02      	add	r7, sp, #8
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	607a      	str	r2, [r7, #4]
 8008e22:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6918      	ldr	r0, [r3, #16]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8a9b      	ldrh	r3, [r3, #20]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4619      	mov	r1, r3
 8008e30:	f007 f978 	bl	8010124 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6998      	ldr	r0, [r3, #24]
 8008e38:	887b      	ldrh	r3, [r7, #2]
 8008e3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e3e:	9200      	str	r2, [sp, #0]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	f008 fa46 	bl	80112d4 <HAL_SPI_TransmitReceive>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6918      	ldr	r0, [r3, #16]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8a9b      	ldrh	r3, [r3, #20]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f007 f961 	bl	8010124 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e008      	b.n	8008e78 <_ZN5L6470I8shield_2E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6918      	ldr	r0, [r3, #16]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8a9b      	ldrh	r3, [r3, #20]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4619      	mov	r1, r3
 8008e72:	f007 f957 	bl	8010124 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 8008e76:	2300      	movs	r3, #0
    }
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <_ZN5L6470I8shield_2E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8008e80:	b590      	push	{r4, r7, lr}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8008e96:	681c      	ldr	r4, [r3, #0]
 8008e98:	887b      	ldrh	r3, [r7, #2]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	47a0      	blx	r4
    }
 8008ea2:	bf00      	nop
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd90      	pop	{r4, r7, pc}

08008eaa <_ZN5L6470I8shield_1E4initEPv>:
    virtual int init(void *init)
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
        return (int) L6470_Config((void *) init);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	4798      	blx	r3
 8008ec4:	4603      	mov	r3, r0
    }
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <_ZN5L6470I8shield_1E10get_statusEv>:
    virtual unsigned int get_status(void)
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
        return (unsigned int) L6470_GetStatus();
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
 8008ee4:	4603      	mov	r3, r0
    }
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <_ZN5L6470I8shield_1E13get_parameterEj>:
    virtual unsigned int get_parameter(unsigned int parameter)
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	6039      	str	r1, [r7, #0]
        return (unsigned int) L6470_GetParam((eL6470_RegId_t) parameter);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	b2d2      	uxtb	r2, r2
 8008f06:	4611      	mov	r1, r2
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	4798      	blx	r3
 8008f0c:	4603      	mov	r3, r0
    }
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <_ZN5L6470I8shield_1E12get_positionEv>:
    virtual signed int get_position(void)
 8008f16:	b590      	push	{r4, r7, lr}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8008f26:	681c      	ldr	r4, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2100      	movs	r1, #0
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	4798      	blx	r3
 8008f38:	4603      	mov	r3, r0
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	47a0      	blx	r4
 8008f40:	4603      	mov	r3, r0
    }
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd90      	pop	{r4, r7, pc}

08008f4a <_ZN5L6470I8shield_1E8get_markEv>:
    virtual signed int get_mark(void)
 8008f4a:	b590      	push	{r4, r7, lr}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
        return (signed int) L6470_AbsPos_2_Position((uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_MARK_ID));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8008f5a:	681c      	ldr	r4, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2102      	movs	r1, #2
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	47a0      	blx	r4
 8008f74:	4603      	mov	r3, r0
    }
 8008f76:	4618      	mov	r0, r3
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd90      	pop	{r4, r7, pc}

08008f7e <_ZN5L6470I8shield_1E9get_speedEv>:
    virtual unsigned int get_speed(void)
 8008f7e:	b5b0      	push	{r4, r5, r7, lr}
 8008f80:	b082      	sub	sp, #8
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Speed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_SPEED_ID)));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008f8e:	681c      	ldr	r4, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8008f98:	681d      	ldr	r5, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2103      	movs	r1, #3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	4798      	blx	r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	47a8      	blx	r5
 8008fb2:	eef0 7a40 	vmov.f32	s15, s0
 8008fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	47a0      	blx	r4
 8008fbe:	4603      	mov	r3, r0
    }
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bdb0      	pop	{r4, r5, r7, pc}

08008fc8 <_ZN5L6470I8shield_1E13get_max_speedEv>:
    virtual unsigned int get_max_speed(void)
 8008fc8:	b5b0      	push	{r4, r5, r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MaxSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID)));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8008fd8:	681c      	ldr	r4, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fe2:	681d      	ldr	r5, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2106      	movs	r1, #6
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	4798      	blx	r3
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	47a8      	blx	r5
 8008ffe:	eef0 7a40 	vmov.f32	s15, s0
 8009002:	eeb0 0a67 	vmov.f32	s0, s15
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	47a0      	blx	r4
 800900a:	4603      	mov	r3, r0
    }
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bdb0      	pop	{r4, r5, r7, pc}

08009014 <_ZN5L6470I8shield_1E13get_min_speedEv>:
    virtual unsigned int get_min_speed(void)
 8009014:	b5b0      	push	{r4, r5, r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_MinSpeed_2_Step_s((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID)));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009024:	681c      	ldr	r4, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800902e:	681d      	ldr	r5, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2107      	movs	r1, #7
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	4798      	blx	r3
 8009040:	4603      	mov	r3, r0
 8009042:	b29b      	uxth	r3, r3
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	47a8      	blx	r5
 800904a:	eef0 7a40 	vmov.f32	s15, s0
 800904e:	eeb0 0a67 	vmov.f32	s0, s15
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	47a0      	blx	r4
 8009056:	4603      	mov	r3, r0
    }
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bdb0      	pop	{r4, r5, r7, pc}

08009060 <_ZN5L6470I8shield_1E16get_accelerationEv>:
    virtual unsigned int get_acceleration(void)
 8009060:	b5b0      	push	{r4, r5, r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Acc_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_ACC_ID)));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009070:	681c      	ldr	r4, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800907a:	681d      	ldr	r5, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2104      	movs	r1, #4
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	4798      	blx	r3
 800908c:	4603      	mov	r3, r0
 800908e:	b29b      	uxth	r3, r3
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	47a8      	blx	r5
 8009096:	eef0 7a40 	vmov.f32	s15, s0
 800909a:	eeb0 0a67 	vmov.f32	s0, s15
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	47a0      	blx	r4
 80090a2:	4603      	mov	r3, r0
    }
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bdb0      	pop	{r4, r5, r7, pc}

080090ac <_ZN5L6470I8shield_1E16get_decelerationEv>:
    virtual unsigned int get_deceleration(void)
 80090ac:	b5b0      	push	{r4, r5, r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
        return L6470_round(L6470_Dec_2_Step_s2((unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_DEC_ID)));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80090bc:	681c      	ldr	r4, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80090c6:	681d      	ldr	r5, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2105      	movs	r1, #5
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	4798      	blx	r3
 80090d8:	4603      	mov	r3, r0
 80090da:	b29b      	uxth	r3, r3
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	47a8      	blx	r5
 80090e2:	eef0 7a40 	vmov.f32	s15, s0
 80090e6:	eeb0 0a67 	vmov.f32	s0, s15
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	47a0      	blx	r4
 80090ee:	4603      	mov	r3, r0
    }
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bdb0      	pop	{r4, r5, r7, pc}

080090f8 <_ZN5L6470I8shield_1E13get_directionEv>:
    virtual StepperMotor::direction_t get_direction(void)
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
        return (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2104      	movs	r1, #4
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	4798      	blx	r3
 8009110:	4603      	mov	r3, r0
 8009112:	2b01      	cmp	r3, #1
 8009114:	d101      	bne.n	800911a <_ZN5L6470I8shield_1E13get_directionEv+0x22>
 8009116:	2301      	movs	r3, #1
 8009118:	e000      	b.n	800911c <_ZN5L6470I8shield_1E13get_directionEv+0x24>
 800911a:	2300      	movs	r3, #0
    }
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <_ZN5L6470I8shield_1E13set_parameterEjj>:
    virtual void set_parameter(unsigned int parameter, unsigned int value)
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	b2d1      	uxtb	r1, r2
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	4798      	blx	r3
    }
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <_ZN5L6470I8shield_1E8set_homeEv>:
    virtual void set_home(void)
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
        L6470_ResetPos();
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	4798      	blx	r3
    }
 8009162:	bf00      	nop
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <_ZN5L6470I8shield_1E8set_markEv>:
    virtual void set_mark(void)
 800916a:	b590      	push	{r4, r7, lr}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_GetParam((eL6470_RegId_t) L6470_ABS_POS_ID));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800917a:	681c      	ldr	r4, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2100      	movs	r1, #0
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	4798      	blx	r3
 800918c:	4603      	mov	r3, r0
 800918e:	461a      	mov	r2, r3
 8009190:	2102      	movs	r1, #2
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	47a0      	blx	r4
    }
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	bd90      	pop	{r4, r7, pc}

0800919e <_ZN5L6470I8shield_1E8set_markEi>:
    virtual void set_mark(signed int position)
 800919e:	b590      	push	{r4, r7, lr}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80091b0:	681c      	ldr	r4, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4798      	blx	r3
 80091c2:	4603      	mov	r3, r0
 80091c4:	461a      	mov	r2, r3
 80091c6:	2102      	movs	r1, #2
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	47a0      	blx	r4
    }
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd90      	pop	{r4, r7, pc}

080091d4 <_ZN5L6470I8shield_1E13set_max_speedEj>:
    virtual bool set_max_speed(unsigned int speed)
 80091d4:	b590      	push	{r4, r7, lr}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80091e6:	681c      	ldr	r4, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	ee07 2a90 	vmov	s15, r2
 80091f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fc:	eeb0 0a67 	vmov.f32	s0, s15
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	4798      	blx	r3
 8009204:	4603      	mov	r3, r0
 8009206:	461a      	mov	r2, r3
 8009208:	2106      	movs	r1, #6
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	47a0      	blx	r4
        return true;
 800920e:	2301      	movs	r3, #1
    }
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	bd90      	pop	{r4, r7, pc}

08009218 <_ZN5L6470I8shield_1E13set_min_speedEj>:
    virtual bool set_min_speed(unsigned int speed)
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800922a:	681c      	ldr	r4, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	ee07 2a90 	vmov	s15, r2
 800923c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009240:	eeb0 0a67 	vmov.f32	s0, s15
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	4798      	blx	r3
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	2107      	movs	r1, #7
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	47a0      	blx	r4
        return true;
 8009252:	2301      	movs	r3, #1
    }
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	bd90      	pop	{r4, r7, pc}

0800925c <_ZN5L6470I8shield_1E16set_accelerationEj>:
    virtual bool set_acceleration(unsigned int acceleration)
 800925c:	b590      	push	{r4, r7, lr}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800926e:	681c      	ldr	r4, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	ee07 2a90 	vmov	s15, r2
 8009280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009284:	eeb0 0a67 	vmov.f32	s0, s15
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
 800928c:	4603      	mov	r3, r0
 800928e:	461a      	mov	r2, r3
 8009290:	2104      	movs	r1, #4
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	47a0      	blx	r4
        return true;
 8009296:	2301      	movs	r3, #1
    }
 8009298:	4618      	mov	r0, r3
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	bd90      	pop	{r4, r7, pc}

080092a0 <_ZN5L6470I8shield_1E16set_decelerationEj>:
    virtual bool set_deceleration(unsigned int deceleration)
 80092a0:	b590      	push	{r4, r7, lr}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
        L6470_SetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80092b2:	681c      	ldr	r4, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	ee07 2a90 	vmov	s15, r2
 80092c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c8:	eeb0 0a67 	vmov.f32	s0, s15
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	4798      	blx	r3
 80092d0:	4603      	mov	r3, r0
 80092d2:	461a      	mov	r2, r3
 80092d4:	2105      	movs	r1, #5
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	47a0      	blx	r4
        return true;
 80092da:	2301      	movs	r3, #1
    }
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd90      	pop	{r4, r7, pc}

080092e4 <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE>:
    virtual bool set_step_mode(step_mode_t step_mode)
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
        if ((eMotorStepMode_t) step_mode > MICROSTEP_1_128) {
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	2b07      	cmp	r3, #7
 80092f4:	d901      	bls.n	80092fa <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e00f      	b.n	800931a <_ZN5L6470I8shield_1E13set_step_modeEN12StepperMotor11step_mode_tE+0x36>
        soft_hiz();
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3380      	adds	r3, #128	; 0x80
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
        L6470_SetParam((eL6470_RegId_t) L6470_STEP_MODE_ID, (eMotorStepMode_t) step_mode);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	2115      	movs	r1, #21
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	4798      	blx	r3
        return true;
 8009318:	2301      	movs	r3, #1
    }
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <_ZN5L6470I8shield_1E5go_toEi>:
    virtual void go_to(signed int position)
 8009322:	b590      	push	{r4, r7, lr}
 8009324:	b083      	sub	sp, #12
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
        L6470_GoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8009334:	681c      	ldr	r4, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	4798      	blx	r3
 8009346:	4603      	mov	r3, r0
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	47a0      	blx	r4
    }
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	bd90      	pop	{r4, r7, pc}

08009356 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE>:
    virtual void go_to(signed int position, StepperMotor::direction_t direction)
 8009356:	b5b0      	push	{r4, r5, r7, lr}
 8009358:	b084      	sub	sp, #16
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	4613      	mov	r3, r2
 8009362:	71fb      	strb	r3, [r7, #7]
        L6470_GoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800936c:	681c      	ldr	r4, [r3, #0]
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d101      	bne.n	8009378 <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x22>
 8009374:	2501      	movs	r5, #1
 8009376:	e000      	b.n	800937a <_ZN5L6470I8shield_1E5go_toEiN12StepperMotor11direction_tE+0x24>
 8009378:	2500      	movs	r5, #0
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68b9      	ldr	r1, [r7, #8]
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	4798      	blx	r3
 800938a:	4603      	mov	r3, r0
 800938c:	461a      	mov	r2, r3
 800938e:	4629      	mov	r1, r5
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	47a0      	blx	r4
    }
 8009394:	bf00      	nop
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bdb0      	pop	{r4, r5, r7, pc}

0800939c <_ZN5L6470I8shield_1E7go_homeEv>:
    virtual void go_home(void)
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
        L6470_GoHome();
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	4798      	blx	r3
    }
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <_ZN5L6470I8shield_1E7go_markEv>:
    virtual void go_mark(void)
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
        L6470_GoMark();
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	4798      	blx	r3
    }
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void go_until(eL6470_ActId_t action, StepperMotor::direction_t direction, unsigned int speed)
 80093d8:	b5b0      	push	{r4, r5, r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	607b      	str	r3, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	72fb      	strb	r3, [r7, #11]
 80093e6:	4613      	mov	r3, r2
 80093e8:	72bb      	strb	r3, [r7, #10]
        L6470_GoUntil((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80093f2:	681c      	ldr	r4, [r3, #0]
 80093f4:	7abb      	ldrb	r3, [r7, #10]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d101      	bne.n	80093fe <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 80093fa:	2501      	movs	r5, #1
 80093fc:	e000      	b.n	8009400 <_ZN5L6470I8shield_1E8go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 80093fe:	2500      	movs	r5, #0
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	ee07 2a90 	vmov	s15, r2
 8009410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009414:	eeb0 0a67 	vmov.f32	s0, s15
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	4798      	blx	r3
 800941c:	4603      	mov	r3, r0
 800941e:	7af9      	ldrb	r1, [r7, #11]
 8009420:	462a      	mov	r2, r5
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	47a0      	blx	r4
    }
 8009426:	bf00      	nop
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bdb0      	pop	{r4, r5, r7, pc}

0800942e <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE>:
    virtual void run(StepperMotor::direction_t direction)
 800942e:	b5b0      	push	{r4, r5, r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	460b      	mov	r3, r1
 8009438:	70fb      	strb	r3, [r7, #3]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8009442:	681c      	ldr	r4, [r3, #0]
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d101      	bne.n	800944e <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x20>
 800944a:	2501      	movs	r5, #1
 800944c:	e000      	b.n	8009450 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tE+0x22>
 800944e:	2500      	movs	r5, #0
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2106      	movs	r1, #6
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	4629      	mov	r1, r5
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	47a0      	blx	r4
    }
 800946a:	bf00      	nop
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bdb0      	pop	{r4, r5, r7, pc}

08009472 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj>:
    virtual void run(StepperMotor::direction_t direction, unsigned int speed)
 8009472:	b5b0      	push	{r4, r5, r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	60f8      	str	r0, [r7, #12]
 800947a:	460b      	mov	r3, r1
 800947c:	607a      	str	r2, [r7, #4]
 800947e:	72fb      	strb	r3, [r7, #11]
        L6470_Run((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8009488:	681c      	ldr	r4, [r3, #0]
 800948a:	7afb      	ldrb	r3, [r7, #11]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x22>
 8009490:	2501      	movs	r5, #1
 8009492:	e000      	b.n	8009496 <_ZN5L6470I8shield_1E3runEN12StepperMotor11direction_tEj+0x24>
 8009494:	2500      	movs	r5, #0
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	ee07 2a90 	vmov	s15, r2
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eeb0 0a67 	vmov.f32	s0, s15
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	4798      	blx	r3
 80094b2:	4603      	mov	r3, r0
 80094b4:	461a      	mov	r2, r3
 80094b6:	4629      	mov	r1, r5
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	47a0      	blx	r4
    }
 80094bc:	bf00      	nop
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bdb0      	pop	{r4, r5, r7, pc}

080094c4 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj>:
    virtual void move(StepperMotor::direction_t direction, unsigned int steps)
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	460b      	mov	r3, r1
 80094ce:	607a      	str	r2, [r7, #4]
 80094d0:	72fb      	strb	r3, [r7, #11]
        L6470_Move((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	7afa      	ldrb	r2, [r7, #11]
 80094de:	2a01      	cmp	r2, #1
 80094e0:	d101      	bne.n	80094e6 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x22>
 80094e2:	2101      	movs	r1, #1
 80094e4:	e000      	b.n	80094e8 <_ZN5L6470I8shield_1E4moveEN12StepperMotor11direction_tEj+0x24>
 80094e6:	2100      	movs	r1, #0
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	4798      	blx	r3
    }
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <_ZN5L6470I8shield_1E9soft_stopEv>:
    virtual void soft_stop(void)
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b082      	sub	sp, #8
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
        L6470_SoftStop();
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	4798      	blx	r3
    }
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <_ZN5L6470I8shield_1E9hard_stopEv>:
    virtual void hard_stop(void)
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
        L6470_HardStop();
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	4798      	blx	r3
    }
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <_ZN5L6470I8shield_1E8soft_hizEv>:
    virtual void soft_hiz(void)
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
        L6470_SoftHiZ();
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
    }
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <_ZN5L6470I8shield_1E8hard_hizEv>:
    virtual void hard_hiz(void)
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
        L6470_HardHiZ();
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	4798      	blx	r3
    }
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <_ZN5L6470I8shield_1E17wait_while_activeEv>:
    virtual void wait_while_active(void)
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
        while (L6470_CheckStatusRegisterFlag(BUSY_ID) == 0);
 8009576:	bf00      	nop
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2101      	movs	r1, #1
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	4798      	blx	r3
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	bf0c      	ite	eq
 800958e:	2301      	moveq	r3, #1
 8009590:	2300      	movne	r3, #0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1ef      	bne.n	8009578 <_ZN5L6470I8shield_1E17wait_while_activeEv+0xa>
    }
 8009598:	bf00      	nop
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE>:
    virtual void step_clock(StepperMotor::direction_t direction)
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b082      	sub	sp, #8
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	460b      	mov	r3, r1
 80095ac:	70fb      	strb	r3, [r7, #3]
        soft_hiz();
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3380      	adds	r3, #128	; 0x80
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	4798      	blx	r3
        L6470_StepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	78fa      	ldrb	r2, [r7, #3]
 80095c6:	2a01      	cmp	r2, #1
 80095c8:	d101      	bne.n	80095ce <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2c>
 80095ca:	2201      	movs	r2, #1
 80095cc:	e000      	b.n	80095d0 <_ZN5L6470I8shield_1E10step_clockEN12StepperMotor11direction_tE+0x2e>
 80095ce:	2200      	movs	r2, #0
 80095d0:	4611      	mov	r1, r2
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	4798      	blx	r3
    }
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	460b      	mov	r3, r1
 80095e8:	70fb      	strb	r3, [r7, #3]
 80095ea:	4613      	mov	r3, r2
 80095ec:	70bb      	strb	r3, [r7, #2]
        L6470_ReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	78ba      	ldrb	r2, [r7, #2]
 80095fa:	2a01      	cmp	r2, #1
 80095fc:	d101      	bne.n	8009602 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 80095fe:	2201      	movs	r2, #1
 8009600:	e000      	b.n	8009604 <_ZN5L6470I8shield_1E10release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009602:	2200      	movs	r2, #0
 8009604:	78f9      	ldrb	r1, [r7, #3]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
    }
 800960a:	bf00      	nop
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <_ZN5L6470I8shield_1E12reset_deviceEv>:
    virtual void reset_device(void)
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
        L6470_ResetDevice();
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	4798      	blx	r3
    }
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <_ZN5L6470I8shield_1E18prepare_get_statusEv>:
    virtual void prepare_get_status(void)
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetStatus();
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800964e:	bf00      	nop
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <_ZN5L6470I8shield_1E21prepare_get_parameterEj>:
    virtual void prepare_get_parameter(unsigned int parameter)
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
        L6470_PrepareGetParam((eL6470_RegId_t) parameter);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	4611      	mov	r1, r2
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <_ZN5L6470I8shield_1E20prepare_get_positionEv>:
    virtual void prepare_get_position(void)
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ABS_POS_ID);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2100      	movs	r1, #0
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	4798      	blx	r3
        prepared_action = PREPARED_GET_POSITION;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <_ZN5L6470I8shield_1E16prepare_get_markEv>:
    virtual void prepare_get_mark(void)
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MARK_ID);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2102      	movs	r1, #2
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
        prepared_action = PREPARED_GET_MARK;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2202      	movs	r2, #2
 80096c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <_ZN5L6470I8shield_1E17prepare_get_speedEv>:
    virtual void prepare_get_speed(void)
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_SPEED_ID);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2103      	movs	r1, #3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	4798      	blx	r3
        prepared_action = PREPARED_GET_SPEED;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2203      	movs	r2, #3
 80096f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <_ZN5L6470I8shield_1E21prepare_get_max_speedEv>:
    virtual void prepare_get_max_speed(void)
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2106      	movs	r1, #6
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	4798      	blx	r3
        prepared_action = PREPARED_GET_MAX_SPEED;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2204      	movs	r2, #4
 8009718:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800971c:	bf00      	nop
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <_ZN5L6470I8shield_1E21prepare_get_min_speedEv>:
    virtual void prepare_get_min_speed(void)
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2107      	movs	r1, #7
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	4798      	blx	r3
        prepared_action = PREPARED_GET_MIN_SPEED;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2205      	movs	r2, #5
 8009740:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009744:	bf00      	nop
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <_ZN5L6470I8shield_1E24prepare_get_accelerationEv>:
    virtual void prepare_get_acceleration(void)
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_ACC_ID);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2104      	movs	r1, #4
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	4798      	blx	r3
        prepared_action = PREPARED_GET_ACCELERATION;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2206      	movs	r2, #6
 8009768:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <_ZN5L6470I8shield_1E24prepare_get_decelerationEv>:
    virtual void prepare_get_deceleration(void)
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
        L6470_PrepareGetParam((eL6470_RegId_t) L6470_DEC_ID);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2105      	movs	r1, #5
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4798      	blx	r3
        prepared_action = PREPARED_GET_DECELERATION;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2207      	movs	r2, #7
 8009790:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <_ZN5L6470I8shield_1E21prepare_get_directionEv>:
    virtual void prepare_get_direction(void)
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
        if (!L6470_DaisyChain_HalfPrepared) {
 80097a4:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x26>
            L6470_DaisyChain_HalfPrepared = ONE_F;
 80097ac:	4b09      	ldr	r3, [pc, #36]	; (80097d4 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x38>)
 80097ae:	2201      	movs	r2, #1
 80097b0:	701a      	strb	r2, [r3, #0]
            L6470_ResetAppCmdPkg(L6470_AppCmdPkg);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4906      	ldr	r1, [pc, #24]	; (80097d8 <_ZN5L6470I8shield_1E21prepare_get_directionEv+0x3c>)
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
        prepared_action = PREPARED_GET_DIRECTION;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2208      	movs	r2, #8
 80097c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80097ca:	bf00      	nop
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20000209 	.word	0x20000209
 80097d8:	2000020c 	.word	0x2000020c

080097dc <_ZN5L6470I8shield_1E21prepare_set_parameterEjj>:
    virtual void prepare_set_parameter(unsigned int parameter, unsigned int value)
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) parameter, (uint32_t) value);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	b2d1      	uxtb	r1, r2
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009804:	bf00      	nop
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <_ZN5L6470I8shield_1E16prepare_set_homeEv>:
    virtual void prepare_set_home(void)
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetPos();
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <_ZN5L6470I8shield_1E16prepare_set_markEv>:
    virtual void prepare_set_mark(void)
 8009832:	b580      	push	{r7, lr}
 8009834:	b082      	sub	sp, #8
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, 0);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2200      	movs	r2, #0
 8009846:	2102      	movs	r1, #2
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	4798      	blx	r3
        prepared_action = PREPARED_SET_MARK;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2209      	movs	r2, #9
 8009850:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009854:	bf00      	nop
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <_ZN5L6470I8shield_1E16prepare_set_markEi>:
    virtual void prepare_set_mark(signed int position)
 800985c:	b590      	push	{r4, r7, lr}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MARK_ID, (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800986e:	681c      	ldr	r4, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3
 8009880:	4603      	mov	r3, r0
 8009882:	461a      	mov	r2, r3
 8009884:	2102      	movs	r1, #2
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009892:	bf00      	nop
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	bd90      	pop	{r4, r7, pc}

0800989a <_ZN5L6470I8shield_1E17prepare_set_speedEj>:
    virtual void prepare_set_speed(unsigned int speed)
 800989a:	b590      	push	{r4, r7, lr}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_SPEED_ID, (uint32_t) L6470_Step_s_2_Speed((float) speed));
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80098ac:	681c      	ldr	r4, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	ee07 2a90 	vmov	s15, r2
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	eeb0 0a67 	vmov.f32	s0, s15
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
 80098ca:	4603      	mov	r3, r0
 80098cc:	461a      	mov	r2, r3
 80098ce:	2103      	movs	r1, #3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd90      	pop	{r4, r7, pc}

080098e4 <_ZN5L6470I8shield_1E21prepare_set_max_speedEj>:
    virtual void prepare_set_max_speed(unsigned int speed)
 80098e4:	b590      	push	{r4, r7, lr}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID, (uint32_t) L6470_Step_s_2_MaxSpeed((float) speed));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80098f6:	681c      	ldr	r4, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	ee07 2a90 	vmov	s15, r2
 8009908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990c:	eeb0 0a67 	vmov.f32	s0, s15
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	4798      	blx	r3
 8009914:	4603      	mov	r3, r0
 8009916:	461a      	mov	r2, r3
 8009918:	2106      	movs	r1, #6
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009926:	bf00      	nop
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	bd90      	pop	{r4, r7, pc}

0800992e <_ZN5L6470I8shield_1E21prepare_set_min_speedEj>:
    virtual void prepare_set_min_speed(unsigned int speed)
 800992e:	b590      	push	{r4, r7, lr}
 8009930:	b083      	sub	sp, #12
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_MIN_SPEED_ID, (uint32_t) L6470_Step_s_2_MinSpeed((float) speed));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009940:	681c      	ldr	r4, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	ee07 2a90 	vmov	s15, r2
 8009952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009956:	eeb0 0a67 	vmov.f32	s0, s15
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	4798      	blx	r3
 800995e:	4603      	mov	r3, r0
 8009960:	461a      	mov	r2, r3
 8009962:	2107      	movs	r1, #7
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	bd90      	pop	{r4, r7, pc}

08009978 <_ZN5L6470I8shield_1E24prepare_set_accelerationEj>:
    virtual void prepare_set_acceleration(unsigned int acceleration)
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_ACC_ID, (uint32_t) L6470_Step_s2_2_Acc((float) acceleration));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800998a:	681c      	ldr	r4, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	ee07 2a90 	vmov	s15, r2
 800999c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a0:	eeb0 0a67 	vmov.f32	s0, s15
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	4798      	blx	r3
 80099a8:	4603      	mov	r3, r0
 80099aa:	461a      	mov	r2, r3
 80099ac:	2104      	movs	r1, #4
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 80099ba:	bf00      	nop
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd90      	pop	{r4, r7, pc}

080099c2 <_ZN5L6470I8shield_1E24prepare_set_decelerationEj>:
    virtual void prepare_set_deceleration(unsigned int deceleration)
 80099c2:	b590      	push	{r4, r7, lr}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	6039      	str	r1, [r7, #0]
        L6470_PrepareSetParam((eL6470_RegId_t) L6470_DEC_ID, (uint32_t) L6470_Step_s2_2_Dec((float) deceleration));
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80099d4:	681c      	ldr	r4, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	ee07 2a90 	vmov	s15, r2
 80099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ea:	eeb0 0a67 	vmov.f32	s0, s15
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	4798      	blx	r3
 80099f2:	4603      	mov	r3, r0
 80099f4:	461a      	mov	r2, r3
 80099f6:	2105      	movs	r1, #5
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd90      	pop	{r4, r7, pc}

08009a0c <_ZN5L6470I8shield_1E13prepare_go_toEi>:
    virtual void prepare_go_to(signed int position)
 8009a0c:	b590      	push	{r4, r7, lr}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
        L6470_PrepareGoTo((uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009a1e:	681c      	ldr	r4, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	4798      	blx	r3
 8009a30:	4603      	mov	r3, r0
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd90      	pop	{r4, r7, pc}

08009a48 <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE>:
    virtual void prepare_go_to(signed int position, StepperMotor::direction_t direction)
 8009a48:	b5b0      	push	{r4, r5, r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	4613      	mov	r3, r2
 8009a54:	71fb      	strb	r3, [r7, #7]
        L6470_PrepareGoToDir((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (uint32_t) L6470_Position_2_AbsPos((int32_t) position));
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009a5e:	681c      	ldr	r4, [r3, #0]
 8009a60:	79fb      	ldrb	r3, [r7, #7]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d101      	bne.n	8009a6a <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x22>
 8009a66:	2501      	movs	r5, #1
 8009a68:	e000      	b.n	8009a6c <_ZN5L6470I8shield_1E13prepare_go_toEiN12StepperMotor11direction_tE+0x24>
 8009a6a:	2500      	movs	r5, #0
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	4798      	blx	r3
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	4629      	mov	r1, r5
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009a8e:	bf00      	nop
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bdb0      	pop	{r4, r5, r7, pc}

08009a96 <_ZN5L6470I8shield_1E15prepare_go_homeEv>:
    virtual void prepare_go_home(void)
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoHome();
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <_ZN5L6470I8shield_1E15prepare_go_markEv>:
    virtual void prepare_go_mark(void)
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
        L6470_PrepareGoMark();
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009ada:	bf00      	nop
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj>:
    virtual void prepare_go_until(eL6470_ActId_t L6470_ActId, StepperMotor::direction_t direction, unsigned int speed)
 8009ae2:	b5b0      	push	{r4, r5, r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	607b      	str	r3, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	72fb      	strb	r3, [r7, #11]
 8009af0:	4613      	mov	r3, r2
 8009af2:	72bb      	strb	r3, [r7, #10]
        L6470_PrepareGoUntil((eL6470_ActId_t) L6470_ActId, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009afc:	681c      	ldr	r4, [r3, #0]
 8009afe:	7abb      	ldrb	r3, [r7, #10]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d101      	bne.n	8009b08 <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x26>
 8009b04:	2501      	movs	r5, #1
 8009b06:	e000      	b.n	8009b0a <_ZN5L6470I8shield_1E16prepare_go_untilE14eL6470_ActId_tN12StepperMotor11direction_tEj+0x28>
 8009b08:	2500      	movs	r5, #0
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	ee07 2a90 	vmov	s15, r2
 8009b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	4798      	blx	r3
 8009b26:	4603      	mov	r3, r0
 8009b28:	7af9      	ldrb	r1, [r7, #11]
 8009b2a:	462a      	mov	r2, r5
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009b38:	bf00      	nop
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bdb0      	pop	{r4, r5, r7, pc}

08009b40 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE>:
    virtual void prepare_run(StepperMotor::direction_t direction)
 8009b40:	b5b0      	push	{r4, r5, r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_GetParam((eL6470_RegId_t) L6470_MAX_SPEED_ID));
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009b54:	681c      	ldr	r4, [r3, #0]
 8009b56:	78fb      	ldrb	r3, [r7, #3]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d101      	bne.n	8009b60 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x20>
 8009b5c:	2501      	movs	r5, #1
 8009b5e:	e000      	b.n	8009b62 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tE+0x22>
 8009b60:	2500      	movs	r5, #0
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2106      	movs	r1, #6
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	4798      	blx	r3
 8009b72:	4603      	mov	r3, r0
 8009b74:	461a      	mov	r2, r3
 8009b76:	4629      	mov	r1, r5
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bdb0      	pop	{r4, r5, r7, pc}

08009b8c <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj>:
    virtual void prepare_run(StepperMotor::direction_t direction, unsigned int speed)
 8009b8c:	b5b0      	push	{r4, r5, r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	460b      	mov	r3, r1
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareRun((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) L6470_Step_s_2_Speed((float) speed));
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009ba2:	681c      	ldr	r4, [r3, #0]
 8009ba4:	7afb      	ldrb	r3, [r7, #11]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d101      	bne.n	8009bae <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x22>
 8009baa:	2501      	movs	r5, #1
 8009bac:	e000      	b.n	8009bb0 <_ZN5L6470I8shield_1E11prepare_runEN12StepperMotor11direction_tEj+0x24>
 8009bae:	2500      	movs	r5, #0
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	ee07 2a90 	vmov	s15, r2
 8009bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	4798      	blx	r3
 8009bcc:	4603      	mov	r3, r0
 8009bce:	461a      	mov	r2, r3
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	47a0      	blx	r4
        prepared_action = PREPARED_NO_ACTION;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009bde:	bf00      	nop
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bdb0      	pop	{r4, r5, r7, pc}

08009be6 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj>:
    virtual void prepare_move(StepperMotor::direction_t direction, unsigned int steps)
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	460b      	mov	r3, r1
 8009bf0:	607a      	str	r2, [r7, #4]
 8009bf2:	72fb      	strb	r3, [r7, #11]
        L6470_PrepareMove((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID), (unsigned int) steps);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	7afa      	ldrb	r2, [r7, #11]
 8009c00:	2a01      	cmp	r2, #1
 8009c02:	d101      	bne.n	8009c08 <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x22>
 8009c04:	2101      	movs	r1, #1
 8009c06:	e000      	b.n	8009c0a <_ZN5L6470I8shield_1E12prepare_moveEN12StepperMotor11direction_tEj+0x24>
 8009c08:	2100      	movs	r1, #0
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009c18:	bf00      	nop
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <_ZN5L6470I8shield_1E17prepare_soft_stopEv>:
    virtual void prepare_soft_stop(void)
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftStop();
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009c3e:	bf00      	nop
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <_ZN5L6470I8shield_1E17prepare_hard_stopEv>:
    virtual void prepare_hard_stop(void)
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardStop();
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <_ZN5L6470I8shield_1E16prepare_soft_hizEv>:
    virtual void prepare_soft_hiz(void)
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
        L6470_PrepareSoftHiZ();
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <_ZN5L6470I8shield_1E16prepare_hard_hizEv>:
    virtual void prepare_hard_hiz(void)
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b082      	sub	sp, #8
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
        L6470_PrepareHardHiZ();
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE>:
    virtual void prepare_step_clock(StepperMotor::direction_t direction)
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
        L6470_PrepareStepClock((eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	78fa      	ldrb	r2, [r7, #3]
 8009cd0:	2a01      	cmp	r2, #1
 8009cd2:	d101      	bne.n	8009cd8 <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x20>
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	e000      	b.n	8009cda <_ZN5L6470I8shield_1E18prepare_step_clockEN12StepperMotor11direction_tE+0x22>
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4611      	mov	r1, r2
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE>:
    virtual void prepare_release_sw(eL6470_ActId_t action, StepperMotor::direction_t direction)
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	70fb      	strb	r3, [r7, #3]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	70bb      	strb	r3, [r7, #2]
        L6470_PrepareReleaseSW((eL6470_ActId_t) action, (eL6470_DirId_t) (direction == StepperMotor::FWD ? L6470_DIR_FWD_ID : L6470_DIR_REV_ID));
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	78ba      	ldrb	r2, [r7, #2]
 8009d0c:	2a01      	cmp	r2, #1
 8009d0e:	d101      	bne.n	8009d14 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x24>
 8009d10:	2201      	movs	r2, #1
 8009d12:	e000      	b.n	8009d16 <_ZN5L6470I8shield_1E18prepare_release_swE14eL6470_ActId_tN12StepperMotor11direction_tE+0x26>
 8009d14:	2200      	movs	r2, #0
 8009d16:	78f9      	ldrb	r1, [r7, #3]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <_ZN5L6470I8shield_1E20prepare_reset_deviceEv>:
    virtual void prepare_reset_device(void)
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
        L6470_PrepareResetDevice();
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	4798      	blx	r3
        prepared_action = PREPARED_NO_ACTION;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    }
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <_ZN5L6470I8shield_1E24perform_prepared_actionsEv>:
    uint8_t* perform_prepared_actions(void)
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b082      	sub	sp, #8
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
        return L6470_PerformPreparedApplicationCommand();
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	4798      	blx	r3
 8009d68:	4603      	mov	r3, r0
    }
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <_ZN5L6470I8shield_1E19get_prepared_actionEv>:
    prepared_action_t get_prepared_action(void)
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
        return prepared_action;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    }
 8009d80:	4618      	mov	r0, r3
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <_ZN5L6470I8shield_1E10get_resultEPh>:
    int32_t get_result(uint8_t *raw_data)
 8009d8c:	b5b0      	push	{r4, r5, r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
        switch (prepared_action) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	2b07      	cmp	r3, #7
 8009da0:	f200 80fe 	bhi.w	8009fa0 <_ZN5L6470I8shield_1E10get_resultEPh+0x214>
 8009da4:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <_ZN5L6470I8shield_1E10get_resultEPh+0x20>)
 8009da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009daa:	bf00      	nop
 8009dac:	08009dcd 	.word	0x08009dcd
 8009db0:	08009df9 	.word	0x08009df9
 8009db4:	08009e27 	.word	0x08009e27
 8009db8:	08009e6b 	.word	0x08009e6b
 8009dbc:	08009eb1 	.word	0x08009eb1
 8009dc0:	08009ef7 	.word	0x08009ef7
 8009dc4:	08009f3d 	.word	0x08009f3d
 8009dc8:	08009f83 	.word	0x08009f83
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ABS_POS_ID].LengthByte));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8009dd4:	681c      	ldr	r4, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6a12      	ldr	r2, [r2, #32]
 8009de4:	7b92      	ldrb	r2, [r2, #14]
 8009de6:	6839      	ldr	r1, [r7, #0]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	4798      	blx	r3
 8009dec:	4603      	mov	r3, r0
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	47a0      	blx	r4
 8009df4:	4603      	mov	r3, r0
 8009df6:	e0d4      	b.n	8009fa2 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_AbsPos_2_Position(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MARK_ID].LengthByte));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8009e00:	681c      	ldr	r4, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	6a12      	ldr	r2, [r2, #32]
 8009e10:	3228      	adds	r2, #40	; 0x28
 8009e12:	7b92      	ldrb	r2, [r2, #14]
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	4798      	blx	r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	47a0      	blx	r4
 8009e22:	4603      	mov	r3, r0
 8009e24:	e0bd      	b.n	8009fa2 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Speed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_SPEED_ID].LengthByte)));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009e2e:	681c      	ldr	r4, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009e38:	681d      	ldr	r5, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6a12      	ldr	r2, [r2, #32]
 8009e48:	323c      	adds	r2, #60	; 0x3c
 8009e4a:	7b92      	ldrb	r2, [r2, #14]
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	4798      	blx	r3
 8009e52:	4603      	mov	r3, r0
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	47a8      	blx	r5
 8009e5a:	eef0 7a40 	vmov.f32	s15, s0
 8009e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	47a0      	blx	r4
 8009e66:	4603      	mov	r3, r0
 8009e68:	e09b      	b.n	8009fa2 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MaxSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MAX_SPEED_ID].LengthByte)));
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009e72:	681c      	ldr	r4, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e7c:	681d      	ldr	r5, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	6a12      	ldr	r2, [r2, #32]
 8009e8c:	3278      	adds	r2, #120	; 0x78
 8009e8e:	7b92      	ldrb	r2, [r2, #14]
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	4798      	blx	r3
 8009e96:	4603      	mov	r3, r0
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	47a8      	blx	r5
 8009ea0:	eef0 7a40 	vmov.f32	s15, s0
 8009ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	47a0      	blx	r4
 8009eac:	4603      	mov	r3, r0
 8009eae:	e078      	b.n	8009fa2 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_MinSpeed_2_Step_s(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_MIN_SPEED_ID].LengthByte)));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009eb8:	681c      	ldr	r4, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ec2:	681d      	ldr	r5, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	6a12      	ldr	r2, [r2, #32]
 8009ed2:	328c      	adds	r2, #140	; 0x8c
 8009ed4:	7b92      	ldrb	r2, [r2, #14]
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	4798      	blx	r3
 8009edc:	4603      	mov	r3, r0
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	47a8      	blx	r5
 8009ee6:	eef0 7a40 	vmov.f32	s15, s0
 8009eea:	eeb0 0a67 	vmov.f32	s0, s15
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	47a0      	blx	r4
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	e055      	b.n	8009fa2 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Acc_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_ACC_ID].LengthByte)));
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009efe:	681c      	ldr	r4, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009f08:	681d      	ldr	r5, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	6a12      	ldr	r2, [r2, #32]
 8009f18:	3250      	adds	r2, #80	; 0x50
 8009f1a:	7b92      	ldrb	r2, [r2, #14]
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	4798      	blx	r3
 8009f22:	4603      	mov	r3, r0
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	47a8      	blx	r5
 8009f2c:	eef0 7a40 	vmov.f32	s15, s0
 8009f30:	eeb0 0a67 	vmov.f32	s0, s15
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	47a0      	blx	r4
 8009f38:	4603      	mov	r3, r0
 8009f3a:	e032      	b.n	8009fa2 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return L6470_round(L6470_Dec_2_Step_s2(L6470_ExtractReturnedData(raw_data, L6470_Register[L6470_DEC_ID].LengthByte)));
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009f44:	681c      	ldr	r4, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8009f4e:	681d      	ldr	r5, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	6a12      	ldr	r2, [r2, #32]
 8009f5e:	3264      	adds	r2, #100	; 0x64
 8009f60:	7b92      	ldrb	r2, [r2, #14]
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	4798      	blx	r3
 8009f68:	4603      	mov	r3, r0
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	47a8      	blx	r5
 8009f72:	eef0 7a40 	vmov.f32	s15, s0
 8009f76:	eeb0 0a67 	vmov.f32	s0, s15
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	47a0      	blx	r4
 8009f7e:	4603      	mov	r3, r0
 8009f80:	e00f      	b.n	8009fa2 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return (int32_t) (StepperMotor::direction_t) (L6470_CheckStatusRegisterFlag((eL6470_StatusRegisterFlagId_t) DIR_ID) == 1 ? StepperMotor::FWD : StepperMotor::BWD);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2104      	movs	r1, #4
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	4798      	blx	r3
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d101      	bne.n	8009f9c <_ZN5L6470I8shield_1E10get_resultEPh+0x210>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e002      	b.n	8009fa2 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e000      	b.n	8009fa2 <_ZN5L6470I8shield_1E10get_resultEPh+0x216>
                return 0;
 8009fa0:	2300      	movs	r3, #0
    }
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8009faa:	bf00      	nop

08009fac <_ZN5L6470I8shield_1E13L6470_DISABLEEv>:
    void L6470_DISABLE(void)
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
    	HAL_GPIO_WritePin(standby_reset_port, standby_reset_pin, GPIO_PinState::GPIO_PIN_RESET);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6898      	ldr	r0, [r3, #8]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	899b      	ldrh	r3, [r3, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	f006 f8b0 	bl	8010124 <HAL_GPIO_WritePin>
    }
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm>:
int32_t L6470<shield_x>::L6470_AbsPos_2_Position(uint32_t AbsPos)
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  if (AbsPos > L6470_MAX_POSITION)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fdc:	d303      	bcc.n	8009fe6 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1a>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8009fe4:	e000      	b.n	8009fe8 <_ZN5L6470I8shield_1E23L6470_AbsPos_2_PositionEm+0x1c>
    return AbsPos;
 8009fe6:	683b      	ldr	r3, [r7, #0]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl>:
uint32_t L6470<shield_x>::L6470_Position_2_AbsPos(int32_t Position)
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  if ((Position >= 0) && (Position <= L6470_MAX_POSITION))
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	db05      	blt.n	800a010 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a00a:	da01      	bge.n	800a010 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x1c>
    return Position;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	e00c      	b.n	800a02a <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
    if ((Position >= L6470_MIN_POSITION) && (Position < 0))
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
 800a016:	db06      	blt.n	800a026 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	da03      	bge.n	800a026 <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x32>
      return (Position + (L6470_POSITION_RANGE + 1));
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 800a024:	e001      	b.n	800a02a <_ZN5L6470I8shield_1E23L6470_Position_2_AbsPosEl+0x36>
      return (L6470_POSITION_RANGE + 1);        // OVF
 800a026:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
	...

0800a038 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm>:
float L6470<shield_x>::L6470_Speed_2_Step_s(uint32_t Speed)
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  return (Speed * ((float)14.9012e-3));
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	ee07 3a90 	vmov	s15, r3
 800a048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a04c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a064 <_ZN5L6470I8shield_1E20L6470_Speed_2_Step_sEm+0x2c>
 800a050:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a054:	eeb0 0a67 	vmov.f32	s0, s15
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	3c74242a 	.word	0x3c74242a

0800a068 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf>:
uint32_t L6470<shield_x>::L6470_Step_s_2_Speed(float Step_s)
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 800a074:	edd7 7a00 	vldr	s15, [r7]
 800a078:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a0ac <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x44>
 800a07c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a084:	d80a      	bhi.n	800a09c <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x34>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 800a086:	ed97 7a00 	vldr	s14, [r7]
 800a08a:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a0b0 <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x48>
 800a08e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a096:	ee17 3a90 	vmov	r3, s15
 800a09a:	e000      	b.n	800a09e <_ZN5L6470I8shield_1E20L6470_Step_s_2_SpeedEf+0x36>
    return 0;   // Warning
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	4674241b 	.word	0x4674241b
 800a0b0:	3c74242a 	.word	0x3c74242a

0800a0b4 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et>:
float L6470<shield_x>::L6470_Acc_2_Step_s2(uint16_t Acc)
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	807b      	strh	r3, [r7, #2]
  if (Acc <= L6470_MAX_ACC)
 800a0c0:	887b      	ldrh	r3, [r7, #2]
 800a0c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c6:	d209      	bcs.n	800a0dc <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x28>
    return (Acc * ((float)1.4552e1));
 800a0c8:	887b      	ldrh	r3, [r7, #2]
 800a0ca:	ee07 3a90 	vmov	s15, r3
 800a0ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0d2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a0f0 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x3c>
 800a0d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0da:	e001      	b.n	800a0e0 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a0dc:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a0f4 <_ZN5L6470I8shield_1E19L6470_Acc_2_Step_s2Et+0x40>
}
 800a0e0:	eeb0 0a67 	vmov.f32	s0, s15
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	4168d4fe 	.word	0x4168d4fe
 800a0f4:	00000000 	.word	0x00000000

0800a0f8 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Acc(float Step_s2)
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800a104:	edd7 7a00 	vldr	s15, [r7]
 800a108:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a13c <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x44>
 800a10c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a114:	d80b      	bhi.n	800a12e <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a116:	ed97 7a00 	vldr	s14, [r7]
 800a11a:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a140 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x48>
 800a11e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a126:	ee17 3a90 	vmov	r3, s15
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	e000      	b.n	800a130 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_AccEf+0x38>
    return 0;   // Warning
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	4768c671 	.word	0x4768c671
 800a140:	4168d4fe 	.word	0x4168d4fe

0800a144 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et>:
float L6470<shield_x>::L6470_Dec_2_Step_s2(uint16_t Dec)
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	807b      	strh	r3, [r7, #2]
  if (Dec <= L6470_MAX_DEC)
 800a150:	887b      	ldrh	r3, [r7, #2]
 800a152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a156:	d209      	bcs.n	800a16c <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x28>
    return (Dec * ((float)1.4552e1));
 800a158:	887b      	ldrh	r3, [r7, #2]
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a162:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a180 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x3c>
 800a166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a16a:	e001      	b.n	800a170 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x2c>
    return 0;   // Warning
 800a16c:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a184 <_ZN5L6470I8shield_1E19L6470_Dec_2_Step_s2Et+0x40>
}
 800a170:	eeb0 0a67 	vmov.f32	s0, s15
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	4168d4fe 	.word	0x4168d4fe
 800a184:	00000000 	.word	0x00000000

0800a188 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf>:
uint16_t L6470<shield_x>::L6470_Step_s2_2_Dec(float Step_s2)
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800a194:	edd7 7a00 	vldr	s15, [r7]
 800a198:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a1cc <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x44>
 800a19c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a4:	d80b      	bhi.n	800a1be <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800a1a6:	ed97 7a00 	vldr	s14, [r7]
 800a1aa:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a1d0 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x48>
 800a1ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a1b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1b6:	ee17 3a90 	vmov	r3, s15
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	e000      	b.n	800a1c0 <_ZN5L6470I8shield_1E19L6470_Step_s2_2_DecEf+0x38>
    return 0;   // Warning
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	4768c671 	.word	0x4768c671
 800a1d0:	4168d4fe 	.word	0x4168d4fe

0800a1d4 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MaxSpeed_2_Step_s(uint16_t MaxSpeed)
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	807b      	strh	r3, [r7, #2]
  if (MaxSpeed <= L6470_MAX_MAX_SPEED)
 800a1e0:	887b      	ldrh	r3, [r7, #2]
 800a1e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1e6:	d209      	bcs.n	800a1fc <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x28>
    return (MaxSpeed * ((float)15.2588));
 800a1e8:	887b      	ldrh	r3, [r7, #2]
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a210 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x3c>
 800a1f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1fa:	e001      	b.n	800a200 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a1fc:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a214 <_ZN5L6470I8shield_1E23L6470_MaxSpeed_2_Step_sEt+0x40>
}
 800a200:	eeb0 0a67 	vmov.f32	s0, s15
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	4174240b 	.word	0x4174240b
 800a214:	00000000 	.word	0x00000000

0800a218 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MaxSpeed(float Step_s)
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 800a224:	edd7 7a00 	vldr	s15, [r7]
 800a228:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a25c <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x44>
 800a22c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a234:	d80b      	bhi.n	800a24e <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 800a236:	ed97 7a00 	vldr	s14, [r7]
 800a23a:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a260 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x48>
 800a23e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a246:	ee17 3a90 	vmov	r3, s15
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	e000      	b.n	800a250 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MaxSpeedEf+0x38>
    return 0;   // Warning
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	4673e702 	.word	0x4673e702
 800a260:	4174240b 	.word	0x4174240b

0800a264 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_MinSpeed_2_Step_s(uint16_t MinSpeed)
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	807b      	strh	r3, [r7, #2]
  if (MinSpeed <= L6470_MAX_MIN_SPEED)
 800a270:	887b      	ldrh	r3, [r7, #2]
 800a272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a276:	d209      	bcs.n	800a28c <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x28>
    return (MinSpeed * ((float)238.4186e-3));
 800a278:	887b      	ldrh	r3, [r7, #2]
 800a27a:	ee07 3a90 	vmov	s15, r3
 800a27e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a282:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a2a0 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x3c>
 800a286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a28a:	e001      	b.n	800a290 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a28c:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a2a4 <_ZN5L6470I8shield_1E23L6470_MinSpeed_2_Step_sEt+0x40>
}
 800a290:	eeb0 0a67 	vmov.f32	s0, s15
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	3e742401 	.word	0x3e742401
 800a2a4:	00000000 	.word	0x00000000

0800a2a8 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_MinSpeed(float Step_s)
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 800a2b4:	edd7 7a00 	vldr	s15, [r7]
 800a2b8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a2ec <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x44>
 800a2bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c4:	d80b      	bhi.n	800a2de <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 800a2c6:	ed97 7a00 	vldr	s14, [r7]
 800a2ca:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a2f0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x48>
 800a2ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2d6:	ee17 3a90 	vmov	r3, s15
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	e000      	b.n	800a2e0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_MinSpeedEf+0x38>
    return 0;   // Warning
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	447414bf 	.word	0x447414bf
 800a2f0:	3e742401 	.word	0x3e742401

0800a2f4 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt>:
float L6470<shield_x>::L6470_FsSpd_2_Step_s(uint16_t FsSpd)
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	807b      	strh	r3, [r7, #2]
  if (FsSpd <= L6470_MAX_FS_SPD)
 800a300:	887b      	ldrh	r3, [r7, #2]
 800a302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a306:	d219      	bcs.n	800a33c <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x48>
    return ((FsSpd+0.5) * ((float)15.25));
 800a308:	887b      	ldrh	r3, [r7, #2]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7f6 f93a 	bl	8000584 <__aeabi_i2d>
 800a310:	f04f 0200 	mov.w	r2, #0
 800a314:	4b0e      	ldr	r3, [pc, #56]	; (800a350 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x5c>)
 800a316:	f7f5 ffe9 	bl	80002ec <__adddf3>
 800a31a:	4602      	mov	r2, r0
 800a31c:	460b      	mov	r3, r1
 800a31e:	4610      	mov	r0, r2
 800a320:	4619      	mov	r1, r3
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x60>)
 800a328:	f7f6 f996 	bl	8000658 <__aeabi_dmul>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	4610      	mov	r0, r2
 800a332:	4619      	mov	r1, r3
 800a334:	f7f6 fc68 	bl	8000c08 <__aeabi_d2f>
 800a338:	4603      	mov	r3, r0
 800a33a:	e001      	b.n	800a340 <_ZN5L6470I8shield_1E20L6470_FsSpd_2_Step_sEt+0x4c>
    return 0;   // Warning
 800a33c:	f04f 0300 	mov.w	r3, #0
}
 800a340:	ee07 3a90 	vmov	s15, r3
 800a344:	eeb0 0a67 	vmov.f32	s0, s15
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	3fe00000 	.word	0x3fe00000
 800a354:	402e8000 	.word	0x402e8000

0800a358 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_FsSpd(float Step_s)
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800a364:	edd7 7a00 	vldr	s15, [r7]
 800a368:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a3a4 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x4c>
 800a36c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a374:	d80f      	bhi.n	800a396 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 800a376:	ed97 7a00 	vldr	s14, [r7]
 800a37a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800a3a8 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x50>
 800a37e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a382:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a386:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a38e:	ee17 3a90 	vmov	r3, s15
 800a392:	b29b      	uxth	r3, r3
 800a394:	e000      	b.n	800a398 <_ZN5L6470I8shield_1E20L6470_Step_s_2_FsSpdEf+0x40>
    return 0;   // Warning
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	4673e180 	.word	0x4673e180
 800a3a8:	41740000 	.word	0x41740000

0800a3ac <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt>:
float L6470<shield_x>::L6470_IntSpeed_2_Step_s(uint16_t IntSpeed)
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	807b      	strh	r3, [r7, #2]
  if (IntSpeed <= L6470_MAX_INT_SPEED)
 800a3b8:	887b      	ldrh	r3, [r7, #2]
 800a3ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3be:	d209      	bcs.n	800a3d4 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x28>
    return (IntSpeed * ((float)59.6046e-3));
 800a3c0:	887b      	ldrh	r3, [r7, #2]
 800a3c2:	ee07 3a90 	vmov	s15, r3
 800a3c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3ca:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a3e8 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x3c>
 800a3ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3d2:	e001      	b.n	800a3d8 <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x2c>
    return 0;   // Warning
 800a3d4:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a3ec <_ZN5L6470I8shield_1E23L6470_IntSpeed_2_Step_sEt+0x40>
}
 800a3d8:	eeb0 0a67 	vmov.f32	s0, s15
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	3d7423f4 	.word	0x3d7423f4
 800a3ec:	00000000 	.word	0x00000000

0800a3f0 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf>:
uint16_t L6470<shield_x>::L6470_Step_s_2_IntSpeed(float Step_s)
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	ed87 0a00 	vstr	s0, [r7]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 800a3fc:	edd7 7a00 	vldr	s15, [r7]
 800a400:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a434 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x44>
 800a404:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40c:	d80b      	bhi.n	800a426 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 800a40e:	ed97 7a00 	vldr	s14, [r7]
 800a412:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a438 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x48>
 800a416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a41a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a41e:	ee17 3a90 	vmov	r3, s15
 800a422:	b29b      	uxth	r3, r3
 800a424:	e000      	b.n	800a428 <_ZN5L6470I8shield_1E23L6470_Step_s_2_IntSpeedEf+0x38>
    return 0;   // Warning
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	44742023 	.word	0x44742023
 800a438:	3d7423f4 	.word	0x3d7423f4

0800a43c <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh>:
float L6470<shield_x>::L6470_StSlp_2_s_Step(uint8_t StSlp)
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
    return (StSlp * ((float)1.5686e-5));
 800a448:	78fb      	ldrb	r3, [r7, #3]
 800a44a:	ee07 3a90 	vmov	s15, r3
 800a44e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a452:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a468 <_ZN5L6470I8shield_1E20L6470_StSlp_2_s_StepEh+0x2c>
 800a456:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a45a:	eeb0 0a67 	vmov.f32	s0, s15
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	3783956e 	.word	0x3783956e

0800a46c <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_StSlp(float s_Step)
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800a478:	edd7 7a02 	vldr	s15, [r7, #8]
 800a47c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a4b4 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x48>
 800a480:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a488:	d80c      	bhi.n	800a4a4 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a48a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a48e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800a4b8 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x4c>
 800a492:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a49a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a49e:	793b      	ldrb	r3, [r7, #4]
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	e000      	b.n	800a4a6 <_ZN5L6470I8shield_1E20L6470_s_Step_2_StSlpEf+0x3a>
    return 0;   // Warning
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	3b8311d9 	.word	0x3b8311d9
 800a4b8:	3783956e 	.word	0x3783956e

0800a4bc <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpAcc_2_s_Step(uint8_t FnSlpAcc)
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	70fb      	strb	r3, [r7, #3]
    return (FnSlpAcc * ((float)1.5686e-5));
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	ee07 3a90 	vmov	s15, r3
 800a4ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4d2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a4e8 <_ZN5L6470I8shield_1E23L6470_FnSlpAcc_2_s_StepEh+0x2c>
 800a4d6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a4da:	eeb0 0a67 	vmov.f32	s0, s15
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	3783956e 	.word	0x3783956e

0800a4ec <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpAcc(float s_Step)
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800a4f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a4fc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a534 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x48>
 800a500:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a508:	d80c      	bhi.n	800a524 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a50a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a50e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800a538 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x4c>
 800a512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a51a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a51e:	793b      	ldrb	r3, [r7, #4]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	e000      	b.n	800a526 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpAccEf+0x3a>
    return 0;   // Warning
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	3b8311d9 	.word	0x3b8311d9
 800a538:	3783956e 	.word	0x3783956e

0800a53c <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh>:
float L6470<shield_x>::L6470_FnSlpDec_2_s_Step(uint8_t FnSlpDec)
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
    return (FnSlpDec * ((float)1.5686e-5));
 800a548:	78fb      	ldrb	r3, [r7, #3]
 800a54a:	ee07 3a90 	vmov	s15, r3
 800a54e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a552:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a568 <_ZN5L6470I8shield_1E23L6470_FnSlpDec_2_s_StepEh+0x2c>
 800a556:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a55a:	eeb0 0a67 	vmov.f32	s0, s15
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	3783956e 	.word	0x3783956e

0800a56c <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf>:
uint8_t L6470<shield_x>::L6470_s_Step_2_FnSlpDec(float s_Step)
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	ed87 0a02 	vstr	s0, [r7, #8]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 800a578:	edd7 7a02 	vldr	s15, [r7, #8]
 800a57c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a5b4 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x48>
 800a580:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a588:	d80c      	bhi.n	800a5a4 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x38>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800a58a:	ed97 7a02 	vldr	s14, [r7, #8]
 800a58e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800a5b8 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x4c>
 800a592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a59a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a59e:	793b      	ldrb	r3, [r7, #4]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	e000      	b.n	800a5a6 <_ZN5L6470I8shield_1E23L6470_s_Step_2_FnSlpDecEf+0x3a>
    return 0;   // Warning
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	3b8311d9 	.word	0x3b8311d9
 800a5b8:	3783956e 	.word	0x3783956e

0800a5bc <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh>:
float L6470<shield_x>::L6470_OcdTh_2_mA(uint8_t OcdTh)
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	70fb      	strb	r3, [r7, #3]
  if (OcdTh <= L6470_MAX_OCD_TH)
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	2b0f      	cmp	r3, #15
 800a5cc:	d80a      	bhi.n	800a5e4 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x28>
    return ((OcdTh+1) * ((float)375));
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	ee07 3a90 	vmov	s15, r3
 800a5d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5da:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a5f8 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x3c>
 800a5de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a5e2:	e001      	b.n	800a5e8 <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x2c>
    return 0;   // Warning
 800a5e4:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a5fc <_ZN5L6470I8shield_1E16L6470_OcdTh_2_mAEh+0x40>
}
 800a5e8:	eeb0 0a67 	vmov.f32	s0, s15
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	43bb8000 	.word	0x43bb8000
 800a5fc:	00000000 	.word	0x00000000

0800a600 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_OcdTh(float mA)
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 800a60c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a610:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a69c <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x9c>
 800a614:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a61c:	d836      	bhi.n	800a68c <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8c>
    result = (mA / ((float)375));
 800a61e:	ed97 7a02 	vldr	s14, [r7, #8]
 800a622:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a6a0 <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0xa0>
 800a626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a62a:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a62e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a636:	edc7 7a01 	vstr	s15, [r7, #4]
 800a63a:	793b      	ldrb	r3, [r7, #4]
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	ee07 3a90 	vmov	s15, r3
 800a642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a646:	ed97 7a05 	vldr	s14, [r7, #20]
 800a64a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a64e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a652:	edd7 7a04 	vldr	s15, [r7, #16]
 800a656:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a65a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a662:	d50a      	bpl.n	800a67a <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x7a>
      return ((uint8_t)result - 1);
 800a664:	edd7 7a05 	vldr	s15, [r7, #20]
 800a668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a66c:	edc7 7a01 	vstr	s15, [r7, #4]
 800a670:	793b      	ldrb	r3, [r7, #4]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	3b01      	subs	r3, #1
 800a676:	b2db      	uxtb	r3, r3
 800a678:	e009      	b.n	800a68e <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
      return ((uint8_t)result);    
 800a67a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a67e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a682:	edc7 7a01 	vstr	s15, [r7, #4]
 800a686:	793b      	ldrb	r3, [r7, #4]
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	e000      	b.n	800a68e <_ZN5L6470I8shield_1E16L6470_mA_2_OcdThEf+0x8e>
    return 0;   // Warning
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	45bb8000 	.word	0x45bb8000
 800a6a0:	43bb8000 	.word	0x43bb8000

0800a6a4 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh>:
float L6470<shield_x>::L6470_StallTh_2_mA(uint8_t StallTh)
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  if (StallTh <= L6470_MAX_STALL_TH)
 800a6b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	db0a      	blt.n	800a6ce <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2a>
    return ((StallTh+1) * ((float)31.25));
 800a6b8:	78fb      	ldrb	r3, [r7, #3]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	ee07 3a90 	vmov	s15, r3
 800a6c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6c4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800a6e0 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x3c>
 800a6c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6cc:	e001      	b.n	800a6d2 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x2e>
    return 0;   // Warning
 800a6ce:	eddf 7a05 	vldr	s15, [pc, #20]	; 800a6e4 <_ZN5L6470I8shield_1E18L6470_StallTh_2_mAEh+0x40>
}
 800a6d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	41fa0000 	.word	0x41fa0000
 800a6e4:	00000000 	.word	0x00000000

0800a6e8 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf>:
uint8_t L6470<shield_x>::L6470_mA_2_StallTh(float mA)
 800a6e8:	b480      	push	{r7}
 800a6ea:	b087      	sub	sp, #28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	ed87 0a02 	vstr	s0, [r7, #8]
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 800a6f4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a6f8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a784 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x9c>
 800a6fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a704:	d836      	bhi.n	800a774 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8c>
    result = (mA / ((float)31.25));
 800a706:	ed97 7a02 	vldr	s14, [r7, #8]
 800a70a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a788 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0xa0>
 800a70e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a712:	edc7 7a05 	vstr	s15, [r7, #20]
    decimal = result - (uint8_t)result;
 800a716:	edd7 7a05 	vldr	s15, [r7, #20]
 800a71a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a71e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a722:	793b      	ldrb	r3, [r7, #4]
 800a724:	b2db      	uxtb	r3, r3
 800a726:	ee07 3a90 	vmov	s15, r3
 800a72a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a72e:	ed97 7a05 	vldr	s14, [r7, #20]
 800a732:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a736:	edc7 7a04 	vstr	s15, [r7, #16]
    if (decimal < (float)0.5)
 800a73a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a73e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a742:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74a:	d50a      	bpl.n	800a762 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x7a>
      return ((uint8_t)result - 1);
 800a74c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a754:	edc7 7a01 	vstr	s15, [r7, #4]
 800a758:	793b      	ldrb	r3, [r7, #4]
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	3b01      	subs	r3, #1
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	e009      	b.n	800a776 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
      return ((uint8_t)result);    
 800a762:	edd7 7a05 	vldr	s15, [r7, #20]
 800a766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a76a:	edc7 7a01 	vstr	s15, [r7, #4]
 800a76e:	793b      	ldrb	r3, [r7, #4]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	e000      	b.n	800a776 <_ZN5L6470I8shield_1E18L6470_mA_2_StallThEf+0x8e>
    return 0;   // Warning
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	371c      	adds	r7, #28
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	457a0000 	.word	0x457a0000
 800a788:	41fa0000 	.word	0x41fa0000

0800a78c <_ZN5L6470I8shield_1E12L6470_ConfigEPv>:
status_t L6470<shield_x>::L6470_Config(void *init)
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
  reset_device();
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3394      	adds	r3, #148	; 0x94
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	4798      	blx	r3
  get_status();
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	330c      	adds	r3, #12
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	4798      	blx	r3
  L6470_init_t *MotorParameterData = (L6470_init_t *) init;
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	617b      	str	r3, [r7, #20]
  StepperMotorRegister.ACCEL = L6470_Step_s2_2_Acc(MotorParameterData->acc);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	edd2 7a05 	vldr	s15, [r2, #20]
 800a7c2:	eeb0 0a67 	vmov.f32	s0, s15
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	4798      	blx	r3
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  StepperMotorRegister.DECEL = L6470_Step_s2_2_Dec(MotorParameterData->dec);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	edd2 7a06 	vldr	s15, [r2, #24]
 800a7e4:	eeb0 0a67 	vmov.f32	s0, s15
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	4798      	blx	r3
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  StepperMotorRegister.MAX_SPEED = L6470_Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	edd2 7a07 	vldr	s15, [r2, #28]
 800a806:	eeb0 0a67 	vmov.f32	s0, s15
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	4798      	blx	r3
 800a80e:	4603      	mov	r3, r0
 800a810:	461a      	mov	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  StepperMotorRegister.MIN_SPEED = L6470_Step_s_2_MinSpeed(MotorParameterData->minspeed);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	edd2 7a08 	vldr	s15, [r2, #32]
 800a828:	eeb0 0a67 	vmov.f32	s0, s15
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	4798      	blx	r3
 800a830:	4603      	mov	r3, r0
 800a832:	461a      	mov	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  StepperMotorRegister.FS_SPD = L6470_Step_s_2_FsSpd(MotorParameterData->fsspd);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800a84a:	eeb0 0a67 	vmov.f32	s0, s15
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	4798      	blx	r3
 800a852:	4603      	mov	r3, r0
 800a854:	461a      	mov	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  StepperMotorRegister.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a862:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800ab34 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a866:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	ed93 7a00 	vldr	s14, [r3]
 800a870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a878:	edc7 7a01 	vstr	s15, [r7, #4]
 800a87c:	793b      	ldrb	r3, [r7, #4]
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  StepperMotorRegister.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a88c:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800ab34 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a890:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	ed93 7a00 	vldr	s14, [r3]
 800a89a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a89e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8a2:	edc7 7a01 	vstr	s15, [r7, #4]
 800a8a6:	793b      	ldrb	r3, [r7, #4]
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  StepperMotorRegister.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800a8b6:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800ab34 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a8ba:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	ed93 7a00 	vldr	s14, [r3]
 800a8c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8cc:	edc7 7a01 	vstr	s15, [r7, #4]
 800a8d0:	793b      	ldrb	r3, [r7, #4]
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  StepperMotorRegister.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800a8e0:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800ab34 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3a8>
 800a8e4:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	ed93 7a00 	vldr	s14, [r3]
 800a8ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8f6:	edc7 7a01 	vstr	s15, [r7, #4]
 800a8fa:	793b      	ldrb	r3, [r7, #4]
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  StepperMotorRegister.INT_SPEED = L6470_Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a914:	eeb0 0a67 	vmov.f32	s0, s15
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	4798      	blx	r3
 800a91c:	4603      	mov	r3, r0
 800a91e:	461a      	mov	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  StepperMotorRegister.ST_SLP = L6470_s_Step_2_StSlp(MotorParameterData->stslp);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	697a      	ldr	r2, [r7, #20]
 800a932:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 800a936:	eeb0 0a67 	vmov.f32	s0, s15
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	4798      	blx	r3
 800a93e:	4603      	mov	r3, r0
 800a940:	461a      	mov	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  StepperMotorRegister.FN_SLP_ACC = L6470_s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	edd2 7a10 	vldr	s15, [r2, #64]	; 0x40
 800a958:	eeb0 0a67 	vmov.f32	s0, s15
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	4798      	blx	r3
 800a960:	4603      	mov	r3, r0
 800a962:	461a      	mov	r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  StepperMotorRegister.FN_SLP_DEC = L6470_s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800a97a:	eeb0 0a67 	vmov.f32	s0, s15
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	4798      	blx	r3
 800a982:	4603      	mov	r3, r0
 800a984:	461a      	mov	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  StepperMotorRegister.K_THERM = MotorParameterData->kterm;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  StepperMotorRegister.OCD_TH = L6470_mA_2_OcdTh(MotorParameterData->ocdth);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	edd2 7a13 	vldr	s15, [r2, #76]	; 0x4c
 800a9a8:	eeb0 0a67 	vmov.f32	s0, s15
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	4798      	blx	r3
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  StepperMotorRegister.STALL_TH = L6470_mA_2_StallTh(MotorParameterData->stallth);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	edd2 7a14 	vldr	s15, [r2, #80]	; 0x50
 800a9ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	4798      	blx	r3
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  StepperMotorRegister.ALARM_EN = MotorParameterData->alarmen;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  StepperMotorRegister.CONFIG = MotorParameterData->config;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  StepperMotorRegister.STEP_MODE = MotorParameterData->step_sel;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  L6470_SetParam(L6470_ACC_ID, StepperMotorRegister.ACCEL);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800aa10:	2104      	movs	r1, #4
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	4798      	blx	r3
  L6470_SetParam(L6470_DEC_ID, StepperMotorRegister.DECEL);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 800aa26:	2105      	movs	r1, #5
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	4798      	blx	r3
  L6470_SetParam(L6470_MAX_SPEED_ID, StepperMotorRegister.MAX_SPEED);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800aa3c:	2106      	movs	r1, #6
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	4798      	blx	r3
  L6470_SetParam(L6470_MIN_SPEED_ID, StepperMotorRegister.MIN_SPEED);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 800aa52:	2107      	movs	r1, #7
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	4798      	blx	r3
  L6470_SetParam(L6470_FS_SPD_ID, StepperMotorRegister.FS_SPD);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 800aa68:	2108      	movs	r1, #8
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_HOLD_ID, StepperMotorRegister.KVAL_HOLD);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800aa7e:	2109      	movs	r1, #9
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_RUN_ID, StepperMotorRegister.KVAL_RUN);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 800aa94:	210a      	movs	r1, #10
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_ACC_ID, StepperMotorRegister.KVAL_ACC);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800aaaa:	210b      	movs	r1, #11
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	4798      	blx	r3
  L6470_SetParam(L6470_KVAL_DEC_ID, StepperMotorRegister.KVAL_DEC);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800aac0:	210c      	movs	r1, #12
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	4798      	blx	r3
  L6470_SetParam(L6470_INT_SPEED_ID, StepperMotorRegister.INT_SPEED);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 800aad6:	210d      	movs	r1, #13
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	4798      	blx	r3
  L6470_SetParam(L6470_ST_SLP_ID, StepperMotorRegister.ST_SLP);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 800aaec:	210e      	movs	r1, #14
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_ACC_ID, StepperMotorRegister.FN_SLP_ACC);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 800ab02:	210f      	movs	r1, #15
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	4798      	blx	r3
  L6470_SetParam(L6470_FN_SLP_DEC_ID, StepperMotorRegister.FN_SLP_DEC);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800ab18:	2110      	movs	r1, #16
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	4798      	blx	r3
  L6470_SetParam(L6470_K_THERM_ID, StepperMotorRegister.K_THERM);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	f892 205b 	ldrb.w	r2, [r2, #91]	; 0x5b
 800ab2e:	2111      	movs	r1, #17
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	e001      	b.n	800ab38 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x3ac>
 800ab34:	43800000 	.word	0x43800000
 800ab38:	4798      	blx	r3
  L6470_SetParam(L6470_OCD_TH_ID, StepperMotorRegister.OCD_TH);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 800ab4a:	2113      	movs	r1, #19
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	4798      	blx	r3
  L6470_SetParam(L6470_STALL_TH_ID, StepperMotorRegister.STALL_TH);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	f892 205e 	ldrb.w	r2, [r2, #94]	; 0x5e
 800ab60:	2114      	movs	r1, #20
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	4798      	blx	r3
  L6470_SetParam(L6470_ALARM_EN_ID, StepperMotorRegister.ALARM_EN);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800ab76:	2116      	movs	r1, #22
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	4798      	blx	r3
  L6470_SetParam(L6470_CONFIG_ID, StepperMotorRegister.CONFIG);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 800ab8c:	2117      	movs	r1, #23
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	4798      	blx	r3
  if (!set_step_mode((StepperMotor::step_mode_t) StepperMotorRegister.STEP_MODE))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3354      	adds	r3, #84	; 0x54
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 800aba0:	4611      	mov	r1, r2
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	4798      	blx	r3
 800aba6:	4603      	mov	r3, r0
 800aba8:	f083 0301 	eor.w	r3, r3, #1
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d001      	beq.n	800abb6 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42a>
    return COMPONENT_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e000      	b.n	800abb8 <_ZN5L6470I8shield_1E12L6470_ConfigEPv+0x42c>
  return COMPONENT_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_SetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800abc0:	b590      	push	{r4, r7, lr}
 800abc2:	b087      	sub	sp, #28
 800abc4:	af02      	add	r7, sp, #8
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	460b      	mov	r3, r1
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800abd6:	681c      	ldr	r4, [r3, #0]
 800abd8:	7afa      	ldrb	r2, [r7, #11]
 800abda:	2300      	movs	r3, #0
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	4613      	mov	r3, r2
 800abe4:	2201      	movs	r2, #1
 800abe6:	490c      	ldr	r1, [pc, #48]	; (800ac18 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a09      	ldr	r2, [pc, #36]	; (800ac1c <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800abf8:	4907      	ldr	r1, [pc, #28]	; (800ac18 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x58>)
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a05      	ldr	r2, [pc, #20]	; (800ac20 <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x60>)
 800ac0a:	4904      	ldr	r1, [pc, #16]	; (800ac1c <_ZN5L6470I8shield_1E14L6470_SetParamE14eL6470_RegId_tm+0x5c>)
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	4798      	blx	r3
}
 800ac10:	bf00      	nop
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd90      	pop	{r4, r7, pc}
 800ac18:	2000020c 	.word	0x2000020c
 800ac1c:	2000022c 	.word	0x2000022c
 800ac20:	20000234 	.word	0x20000234

0800ac24 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t>:
uint32_t L6470<shield_x>::L6470_GetParam(eL6470_RegId_t L6470_RegId)
 800ac24:	b590      	push	{r4, r7, lr}
 800ac26:	b087      	sub	sp, #28
 800ac28:	af02      	add	r7, sp, #8
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ac38:	681c      	ldr	r4, [r3, #0]
 800ac3a:	78fb      	ldrb	r3, [r7, #3]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	9201      	str	r2, [sp, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	9200      	str	r2, [sp, #0]
 800ac44:	2202      	movs	r2, #2
 800ac46:	4917      	ldr	r1, [pc, #92]	; (800aca4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a14      	ldr	r2, [pc, #80]	; (800aca8 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ac58:	4912      	ldr	r1, [pc, #72]	; (800aca4 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x80>)
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a10      	ldr	r2, [pc, #64]	; (800acac <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ac6a:	490f      	ldr	r1, [pc, #60]	; (800aca8 <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x84>)
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	4798      	blx	r3
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a19      	ldr	r1, [r3, #32]
 800ac74:	78fa      	ldrb	r2, [r7, #3]
 800ac76:	4613      	mov	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	440b      	add	r3, r1
 800ac80:	7b9b      	ldrb	r3, [r3, #14]
 800ac82:	73fb      	strb	r3, [r7, #15]
  ReceivedValue = L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	7bfa      	ldrb	r2, [r7, #15]
 800ac90:	4906      	ldr	r1, [pc, #24]	; (800acac <_ZN5L6470I8shield_1E14L6470_GetParamE14eL6470_RegId_t+0x88>)
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
 800ac96:	4603      	mov	r3, r0
 800ac98:	60bb      	str	r3, [r7, #8]
  return ReceivedValue;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd90      	pop	{r4, r7, pc}
 800aca4:	2000020c 	.word	0x2000020c
 800aca8:	2000022c 	.word	0x2000022c
 800acac:	20000234 	.word	0x20000234

0800acb0 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Run(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800acb0:	b590      	push	{r4, r7, lr}
 800acb2:	b087      	sub	sp, #28
 800acb4:	af02      	add	r7, sp, #8
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	460b      	mov	r3, r1
 800acba:	607a      	str	r2, [r7, #4]
 800acbc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800acc6:	681c      	ldr	r4, [r3, #0]
 800acc8:	7afa      	ldrb	r2, [r7, #11]
 800acca:	2300      	movs	r3, #0
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	4613      	mov	r3, r2
 800acd4:	2203      	movs	r2, #3
 800acd6:	490c      	ldr	r1, [pc, #48]	; (800ad08 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a09      	ldr	r2, [pc, #36]	; (800ad0c <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800ace8:	4907      	ldr	r1, [pc, #28]	; (800ad08 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x58>)
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a05      	ldr	r2, [pc, #20]	; (800ad10 <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x60>)
 800acfa:	4904      	ldr	r1, [pc, #16]	; (800ad0c <_ZN5L6470I8shield_1E9L6470_RunE14eL6470_DirId_tm+0x5c>)
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	4798      	blx	r3
}
 800ad00:	bf00      	nop
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd90      	pop	{r4, r7, pc}
 800ad08:	2000020c 	.word	0x2000020c
 800ad0c:	2000022c 	.word	0x2000022c
 800ad10:	20000234 	.word	0x20000234

0800ad14 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_StepClock(eL6470_DirId_t L6470_DirId)
 800ad14:	b590      	push	{r4, r7, lr}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af02      	add	r7, sp, #8
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ad28:	681c      	ldr	r4, [r3, #0]
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	9201      	str	r2, [sp, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	9200      	str	r2, [sp, #0]
 800ad34:	2204      	movs	r2, #4
 800ad36:	490c      	ldr	r1, [pc, #48]	; (800ad68 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a09      	ldr	r2, [pc, #36]	; (800ad6c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800ad48:	4907      	ldr	r1, [pc, #28]	; (800ad68 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x54>)
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a05      	ldr	r2, [pc, #20]	; (800ad70 <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x5c>)
 800ad5a:	4904      	ldr	r1, [pc, #16]	; (800ad6c <_ZN5L6470I8shield_1E15L6470_StepClockE14eL6470_DirId_t+0x58>)
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	4798      	blx	r3
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd90      	pop	{r4, r7, pc}
 800ad68:	2000020c 	.word	0x2000020c
 800ad6c:	2000022c 	.word	0x2000022c
 800ad70:	20000234 	.word	0x20000234

0800ad74 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_Move(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800ad74:	b590      	push	{r4, r7, lr}
 800ad76:	b087      	sub	sp, #28
 800ad78:	af02      	add	r7, sp, #8
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ad8a:	681c      	ldr	r4, [r3, #0]
 800ad8c:	7afa      	ldrb	r2, [r7, #11]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	4613      	mov	r3, r2
 800ad98:	2205      	movs	r2, #5
 800ad9a:	490c      	ldr	r1, [pc, #48]	; (800adcc <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a09      	ldr	r2, [pc, #36]	; (800add0 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800adac:	4907      	ldr	r1, [pc, #28]	; (800adcc <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x58>)
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a05      	ldr	r2, [pc, #20]	; (800add4 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x60>)
 800adbe:	4904      	ldr	r1, [pc, #16]	; (800add0 <_ZN5L6470I8shield_1E10L6470_MoveE14eL6470_DirId_tm+0x5c>)
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	4798      	blx	r3
}
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd90      	pop	{r4, r7, pc}
 800adcc:	2000020c 	.word	0x2000020c
 800add0:	2000022c 	.word	0x2000022c
 800add4:	20000234 	.word	0x20000234

0800add8 <_ZN5L6470I8shield_1E10L6470_GoToEm>:
void L6470<shield_x>::L6470_GoTo(uint32_t AbsPos)
 800add8:	b590      	push	{r4, r7, lr}
 800adda:	b085      	sub	sp, #20
 800addc:	af02      	add	r7, sp, #8
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  if (AbsPos <= L6470_POSITION_RANGE)
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ade8:	d21f      	bcs.n	800ae2a <_ZN5L6470I8shield_1E10L6470_GoToEm+0x52>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800adf2:	681c      	ldr	r4, [r3, #0]
 800adf4:	2300      	movs	r3, #0
 800adf6:	9301      	str	r3, [sp, #4]
 800adf8:	2300      	movs	r3, #0
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2206      	movs	r2, #6
 800ae00:	490c      	ldr	r1, [pc, #48]	; (800ae34 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a09      	ldr	r2, [pc, #36]	; (800ae38 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800ae12:	4908      	ldr	r1, [pc, #32]	; (800ae34 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x5c>)
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a06      	ldr	r2, [pc, #24]	; (800ae3c <_ZN5L6470I8shield_1E10L6470_GoToEm+0x64>)
 800ae24:	4904      	ldr	r1, [pc, #16]	; (800ae38 <_ZN5L6470I8shield_1E10L6470_GoToEm+0x60>)
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
}
 800ae2a:	bf00      	nop
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd90      	pop	{r4, r7, pc}
 800ae32:	bf00      	nop
 800ae34:	2000020c 	.word	0x2000020c
 800ae38:	2000022c 	.word	0x2000022c
 800ae3c:	20000234 	.word	0x20000234

0800ae40 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800ae40:	b590      	push	{r4, r7, lr}
 800ae42:	b087      	sub	sp, #28
 800ae44:	af02      	add	r7, sp, #8
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	72fb      	strb	r3, [r7, #11]
  if (AbsPos <= L6470_POSITION_RANGE)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae54:	d220      	bcs.n	800ae98 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x58>
    L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ae5e:	681c      	ldr	r4, [r3, #0]
 800ae60:	7afa      	ldrb	r2, [r7, #11]
 800ae62:	2300      	movs	r3, #0
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	2207      	movs	r2, #7
 800ae6e:	490c      	ldr	r1, [pc, #48]	; (800aea0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	47a0      	blx	r4
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a09      	ldr	r2, [pc, #36]	; (800aea4 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800ae80:	4907      	ldr	r1, [pc, #28]	; (800aea0 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x60>)
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	4798      	blx	r3
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a05      	ldr	r2, [pc, #20]	; (800aea8 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x68>)
 800ae92:	4904      	ldr	r1, [pc, #16]	; (800aea4 <_ZN5L6470I8shield_1E13L6470_GoToDirE14eL6470_DirId_tm+0x64>)
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	4798      	blx	r3
}
 800ae98:	bf00      	nop
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd90      	pop	{r4, r7, pc}
 800aea0:	2000020c 	.word	0x2000020c
 800aea4:	2000022c 	.word	0x2000022c
 800aea8:	20000234 	.word	0x20000234

0800aeac <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_GoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800aeac:	b590      	push	{r4, r7, lr}
 800aeae:	b087      	sub	sp, #28
 800aeb0:	af02      	add	r7, sp, #8
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	607b      	str	r3, [r7, #4]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	72fb      	strb	r3, [r7, #11]
 800aeba:	4613      	mov	r3, r2
 800aebc:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aec6:	681c      	ldr	r4, [r3, #0]
 800aec8:	7af9      	ldrb	r1, [r7, #11]
 800aeca:	7abb      	ldrb	r3, [r7, #10]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	9201      	str	r2, [sp, #4]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	460b      	mov	r3, r1
 800aed4:	2208      	movs	r2, #8
 800aed6:	490c      	ldr	r1, [pc, #48]	; (800af08 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a09      	ldr	r2, [pc, #36]	; (800af0c <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800aee8:	4907      	ldr	r1, [pc, #28]	; (800af08 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x5c>)
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a05      	ldr	r2, [pc, #20]	; (800af10 <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x64>)
 800aefa:	4904      	ldr	r1, [pc, #16]	; (800af0c <_ZN5L6470I8shield_1E13L6470_GoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x60>)
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	4798      	blx	r3
}
 800af00:	bf00      	nop
 800af02:	3714      	adds	r7, #20
 800af04:	46bd      	mov	sp, r7
 800af06:	bd90      	pop	{r4, r7, pc}
 800af08:	2000020c 	.word	0x2000020c
 800af0c:	2000022c 	.word	0x2000022c
 800af10:	20000234 	.word	0x20000234

0800af14 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_ReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800af14:	b590      	push	{r4, r7, lr}
 800af16:	b085      	sub	sp, #20
 800af18:	af02      	add	r7, sp, #8
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	460b      	mov	r3, r1
 800af1e:	70fb      	strb	r3, [r7, #3]
 800af20:	4613      	mov	r3, r2
 800af22:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800af2c:	681c      	ldr	r4, [r3, #0]
 800af2e:	78fa      	ldrb	r2, [r7, #3]
 800af30:	78bb      	ldrb	r3, [r7, #2]
 800af32:	2100      	movs	r1, #0
 800af34:	9101      	str	r1, [sp, #4]
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	4613      	mov	r3, r2
 800af3a:	2209      	movs	r2, #9
 800af3c:	490c      	ldr	r1, [pc, #48]	; (800af70 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a09      	ldr	r2, [pc, #36]	; (800af74 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800af4e:	4908      	ldr	r1, [pc, #32]	; (800af70 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x5c>)
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a06      	ldr	r2, [pc, #24]	; (800af78 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x64>)
 800af60:	4904      	ldr	r1, [pc, #16]	; (800af74 <_ZN5L6470I8shield_1E15L6470_ReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x60>)
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	4798      	blx	r3
}
 800af66:	bf00      	nop
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd90      	pop	{r4, r7, pc}
 800af6e:	bf00      	nop
 800af70:	2000020c 	.word	0x2000020c
 800af74:	2000022c 	.word	0x2000022c
 800af78:	20000234 	.word	0x20000234

0800af7c <_ZN5L6470I8shield_1E12L6470_GoHomeEv>:
void L6470<shield_x>::L6470_GoHome(void)
 800af7c:	b590      	push	{r4, r7, lr}
 800af7e:	b085      	sub	sp, #20
 800af80:	af02      	add	r7, sp, #8
 800af82:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800af8c:	681c      	ldr	r4, [r3, #0]
 800af8e:	2300      	movs	r3, #0
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	2300      	movs	r3, #0
 800af94:	9300      	str	r3, [sp, #0]
 800af96:	2300      	movs	r3, #0
 800af98:	220a      	movs	r2, #10
 800af9a:	490c      	ldr	r1, [pc, #48]	; (800afcc <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a09      	ldr	r2, [pc, #36]	; (800afd0 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800afac:	4907      	ldr	r1, [pc, #28]	; (800afcc <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x50>)
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a05      	ldr	r2, [pc, #20]	; (800afd4 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x58>)
 800afbe:	4904      	ldr	r1, [pc, #16]	; (800afd0 <_ZN5L6470I8shield_1E12L6470_GoHomeEv+0x54>)
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	4798      	blx	r3
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd90      	pop	{r4, r7, pc}
 800afcc:	2000020c 	.word	0x2000020c
 800afd0:	2000022c 	.word	0x2000022c
 800afd4:	20000234 	.word	0x20000234

0800afd8 <_ZN5L6470I8shield_1E12L6470_GoMarkEv>:
void L6470<shield_x>::L6470_GoMark(void)
 800afd8:	b590      	push	{r4, r7, lr}
 800afda:	b085      	sub	sp, #20
 800afdc:	af02      	add	r7, sp, #8
 800afde:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800afe8:	681c      	ldr	r4, [r3, #0]
 800afea:	2300      	movs	r3, #0
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	2300      	movs	r3, #0
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	2300      	movs	r3, #0
 800aff4:	220b      	movs	r2, #11
 800aff6:	490c      	ldr	r1, [pc, #48]	; (800b028 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a09      	ldr	r2, [pc, #36]	; (800b02c <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b008:	4907      	ldr	r1, [pc, #28]	; (800b028 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x50>)
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a05      	ldr	r2, [pc, #20]	; (800b030 <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x58>)
 800b01a:	4904      	ldr	r1, [pc, #16]	; (800b02c <_ZN5L6470I8shield_1E12L6470_GoMarkEv+0x54>)
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	4798      	blx	r3
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	bd90      	pop	{r4, r7, pc}
 800b028:	2000020c 	.word	0x2000020c
 800b02c:	2000022c 	.word	0x2000022c
 800b030:	20000234 	.word	0x20000234

0800b034 <_ZN5L6470I8shield_1E14L6470_ResetPosEv>:
void L6470<shield_x>::L6470_ResetPos(void)
 800b034:	b590      	push	{r4, r7, lr}
 800b036:	b085      	sub	sp, #20
 800b038:	af02      	add	r7, sp, #8
 800b03a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b044:	681c      	ldr	r4, [r3, #0]
 800b046:	2300      	movs	r3, #0
 800b048:	9301      	str	r3, [sp, #4]
 800b04a:	2300      	movs	r3, #0
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	2300      	movs	r3, #0
 800b050:	220c      	movs	r2, #12
 800b052:	490c      	ldr	r1, [pc, #48]	; (800b084 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a09      	ldr	r2, [pc, #36]	; (800b088 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b064:	4907      	ldr	r1, [pc, #28]	; (800b084 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x50>)
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a05      	ldr	r2, [pc, #20]	; (800b08c <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x58>)
 800b076:	4904      	ldr	r1, [pc, #16]	; (800b088 <_ZN5L6470I8shield_1E14L6470_ResetPosEv+0x54>)
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	4798      	blx	r3
}
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	bd90      	pop	{r4, r7, pc}
 800b084:	2000020c 	.word	0x2000020c
 800b088:	2000022c 	.word	0x2000022c
 800b08c:	20000234 	.word	0x20000234

0800b090 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv>:
void L6470<shield_x>::L6470_ResetDevice(void)
 800b090:	b590      	push	{r4, r7, lr}
 800b092:	b085      	sub	sp, #20
 800b094:	af02      	add	r7, sp, #8
 800b096:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b0a0:	681c      	ldr	r4, [r3, #0]
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	220d      	movs	r2, #13
 800b0ae:	490c      	ldr	r1, [pc, #48]	; (800b0e0 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a09      	ldr	r2, [pc, #36]	; (800b0e4 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b0c0:	4907      	ldr	r1, [pc, #28]	; (800b0e0 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x50>)
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a05      	ldr	r2, [pc, #20]	; (800b0e8 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x58>)
 800b0d2:	4904      	ldr	r1, [pc, #16]	; (800b0e4 <_ZN5L6470I8shield_1E17L6470_ResetDeviceEv+0x54>)
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	4798      	blx	r3
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd90      	pop	{r4, r7, pc}
 800b0e0:	2000020c 	.word	0x2000020c
 800b0e4:	2000022c 	.word	0x2000022c
 800b0e8:	20000234 	.word	0x20000234

0800b0ec <_ZN5L6470I8shield_1E14L6470_SoftStopEv>:
void L6470<shield_x>::L6470_SoftStop(void)
 800b0ec:	b590      	push	{r4, r7, lr}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af02      	add	r7, sp, #8
 800b0f2:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b0fc:	681c      	ldr	r4, [r3, #0]
 800b0fe:	2300      	movs	r3, #0
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	2300      	movs	r3, #0
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	2300      	movs	r3, #0
 800b108:	220e      	movs	r2, #14
 800b10a:	490c      	ldr	r1, [pc, #48]	; (800b13c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a09      	ldr	r2, [pc, #36]	; (800b140 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b11c:	4907      	ldr	r1, [pc, #28]	; (800b13c <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x50>)
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a05      	ldr	r2, [pc, #20]	; (800b144 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x58>)
 800b12e:	4904      	ldr	r1, [pc, #16]	; (800b140 <_ZN5L6470I8shield_1E14L6470_SoftStopEv+0x54>)
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	4798      	blx	r3
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd90      	pop	{r4, r7, pc}
 800b13c:	2000020c 	.word	0x2000020c
 800b140:	2000022c 	.word	0x2000022c
 800b144:	20000234 	.word	0x20000234

0800b148 <_ZN5L6470I8shield_1E14L6470_HardStopEv>:
void L6470<shield_x>::L6470_HardStop(void)
 800b148:	b590      	push	{r4, r7, lr}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af02      	add	r7, sp, #8
 800b14e:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b158:	681c      	ldr	r4, [r3, #0]
 800b15a:	2300      	movs	r3, #0
 800b15c:	9301      	str	r3, [sp, #4]
 800b15e:	2300      	movs	r3, #0
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	2300      	movs	r3, #0
 800b164:	220f      	movs	r2, #15
 800b166:	490c      	ldr	r1, [pc, #48]	; (800b198 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a09      	ldr	r2, [pc, #36]	; (800b19c <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b178:	4907      	ldr	r1, [pc, #28]	; (800b198 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x50>)
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a05      	ldr	r2, [pc, #20]	; (800b1a0 <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x58>)
 800b18a:	4904      	ldr	r1, [pc, #16]	; (800b19c <_ZN5L6470I8shield_1E14L6470_HardStopEv+0x54>)
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	4798      	blx	r3
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	bd90      	pop	{r4, r7, pc}
 800b198:	2000020c 	.word	0x2000020c
 800b19c:	2000022c 	.word	0x2000022c
 800b1a0:	20000234 	.word	0x20000234

0800b1a4 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv>:
void L6470<shield_x>::L6470_SoftHiZ(void)
 800b1a4:	b590      	push	{r4, r7, lr}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af02      	add	r7, sp, #8
 800b1aa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b1b4:	681c      	ldr	r4, [r3, #0]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	2300      	movs	r3, #0
 800b1c0:	2210      	movs	r2, #16
 800b1c2:	490c      	ldr	r1, [pc, #48]	; (800b1f4 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a09      	ldr	r2, [pc, #36]	; (800b1f8 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b1d4:	4907      	ldr	r1, [pc, #28]	; (800b1f4 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x50>)
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a05      	ldr	r2, [pc, #20]	; (800b1fc <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x58>)
 800b1e6:	4904      	ldr	r1, [pc, #16]	; (800b1f8 <_ZN5L6470I8shield_1E13L6470_SoftHiZEv+0x54>)
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	4798      	blx	r3
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd90      	pop	{r4, r7, pc}
 800b1f4:	2000020c 	.word	0x2000020c
 800b1f8:	2000022c 	.word	0x2000022c
 800b1fc:	20000234 	.word	0x20000234

0800b200 <_ZN5L6470I8shield_1E13L6470_HardHiZEv>:
void L6470<shield_x>::L6470_HardHiZ(void)
 800b200:	b590      	push	{r4, r7, lr}
 800b202:	b085      	sub	sp, #20
 800b204:	af02      	add	r7, sp, #8
 800b206:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b210:	681c      	ldr	r4, [r3, #0]
 800b212:	2300      	movs	r3, #0
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	2300      	movs	r3, #0
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	2300      	movs	r3, #0
 800b21c:	2211      	movs	r2, #17
 800b21e:	490c      	ldr	r1, [pc, #48]	; (800b250 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a09      	ldr	r2, [pc, #36]	; (800b254 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b230:	4907      	ldr	r1, [pc, #28]	; (800b250 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x50>)
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a05      	ldr	r2, [pc, #20]	; (800b258 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x58>)
 800b242:	4904      	ldr	r1, [pc, #16]	; (800b254 <_ZN5L6470I8shield_1E13L6470_HardHiZEv+0x54>)
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	4798      	blx	r3
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd90      	pop	{r4, r7, pc}
 800b250:	2000020c 	.word	0x2000020c
 800b254:	2000022c 	.word	0x2000022c
 800b258:	20000234 	.word	0x20000234

0800b25c <_ZN5L6470I8shield_1E15L6470_GetStatusEv>:
uint16_t L6470<shield_x>::L6470_GetStatus(void)
 800b25c:	b590      	push	{r4, r7, lr}
 800b25e:	b087      	sub	sp, #28
 800b260:	af02      	add	r7, sp, #8
 800b262:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b26c:	681c      	ldr	r4, [r3, #0]
 800b26e:	2300      	movs	r3, #0
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	2300      	movs	r3, #0
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	2300      	movs	r3, #0
 800b278:	2212      	movs	r2, #18
 800b27a:	4912      	ldr	r1, [pc, #72]	; (800b2c4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	47a0      	blx	r4
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a0f      	ldr	r2, [pc, #60]	; (800b2c8 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b28c:	490d      	ldr	r1, [pc, #52]	; (800b2c4 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x68>)
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a0b      	ldr	r2, [pc, #44]	; (800b2cc <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b29e:	490a      	ldr	r1, [pc, #40]	; (800b2c8 <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x6c>)
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	4798      	blx	r3
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData((uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	4906      	ldr	r1, [pc, #24]	; (800b2cc <_ZN5L6470I8shield_1E15L6470_GetStatusEv+0x70>)
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	4798      	blx	r3
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	81fb      	strh	r3, [r7, #14]
  return ReceivedValue;
 800b2ba:	89fb      	ldrh	r3, [r7, #14]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd90      	pop	{r4, r7, pc}
 800b2c4:	2000020c 	.word	0x2000020c
 800b2c8:	2000022c 	.word	0x2000022c
 800b2cc:	20000234 	.word	0x20000234

0800b2d0 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm>:
void L6470<shield_x>::L6470_PrepareSetParam(eL6470_RegId_t L6470_RegId, uint32_t Value)
 800b2d0:	b590      	push	{r4, r7, lr}
 800b2d2:	b087      	sub	sp, #28
 800b2d4:	af02      	add	r7, sp, #8
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	607a      	str	r2, [r7, #4]
 800b2dc:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b2e6:	681c      	ldr	r4, [r3, #0]
 800b2e8:	7afa      	ldrb	r2, [r7, #11]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	9301      	str	r3, [sp, #4]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	4903      	ldr	r1, [pc, #12]	; (800b304 <_ZN5L6470I8shield_1E21L6470_PrepareSetParamE14eL6470_RegId_tm+0x34>)
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	47a0      	blx	r4
}
 800b2fc:	bf00      	nop
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	bd90      	pop	{r4, r7, pc}
 800b304:	2000020c 	.word	0x2000020c

0800b308 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t>:
void L6470<shield_x>::L6470_PrepareGetParam(eL6470_RegId_t L6470_RegId)
 800b308:	b590      	push	{r4, r7, lr}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	460b      	mov	r3, r1
 800b312:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b31c:	681c      	ldr	r4, [r3, #0]
 800b31e:	78fb      	ldrb	r3, [r7, #3]
 800b320:	2200      	movs	r2, #0
 800b322:	9201      	str	r2, [sp, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	9200      	str	r2, [sp, #0]
 800b328:	2202      	movs	r2, #2
 800b32a:	4903      	ldr	r1, [pc, #12]	; (800b338 <_ZN5L6470I8shield_1E21L6470_PrepareGetParamE14eL6470_RegId_t+0x30>)
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	47a0      	blx	r4
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	bd90      	pop	{r4, r7, pc}
 800b338:	2000020c 	.word	0x2000020c

0800b33c <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareRun(eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b33c:	b590      	push	{r4, r7, lr}
 800b33e:	b087      	sub	sp, #28
 800b340:	af02      	add	r7, sp, #8
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	460b      	mov	r3, r1
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b352:	681c      	ldr	r4, [r3, #0]
 800b354:	7afa      	ldrb	r2, [r7, #11]
 800b356:	2300      	movs	r3, #0
 800b358:	9301      	str	r3, [sp, #4]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	4613      	mov	r3, r2
 800b360:	2203      	movs	r2, #3
 800b362:	4903      	ldr	r1, [pc, #12]	; (800b370 <_ZN5L6470I8shield_1E16L6470_PrepareRunE14eL6470_DirId_tm+0x34>)
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	47a0      	blx	r4
}
 800b368:	bf00      	nop
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd90      	pop	{r4, r7, pc}
 800b370:	2000020c 	.word	0x2000020c

0800b374 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareStepClock(eL6470_DirId_t L6470_DirId)
 800b374:	b590      	push	{r4, r7, lr}
 800b376:	b085      	sub	sp, #20
 800b378:	af02      	add	r7, sp, #8
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	460b      	mov	r3, r1
 800b37e:	70fb      	strb	r3, [r7, #3]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b388:	681c      	ldr	r4, [r3, #0]
 800b38a:	78fb      	ldrb	r3, [r7, #3]
 800b38c:	2200      	movs	r2, #0
 800b38e:	9201      	str	r2, [sp, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	9200      	str	r2, [sp, #0]
 800b394:	2204      	movs	r2, #4
 800b396:	4903      	ldr	r1, [pc, #12]	; (800b3a4 <_ZN5L6470I8shield_1E22L6470_PrepareStepClockE14eL6470_DirId_t+0x30>)
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	47a0      	blx	r4
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd90      	pop	{r4, r7, pc}
 800b3a4:	2000020c 	.word	0x2000020c

0800b3a8 <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareMove(eL6470_DirId_t L6470_DirId, uint32_t N_Step)
 800b3a8:	b590      	push	{r4, r7, lr}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	607a      	str	r2, [r7, #4]
 800b3b4:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b3be:	681c      	ldr	r4, [r3, #0]
 800b3c0:	7afa      	ldrb	r2, [r7, #11]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	2205      	movs	r2, #5
 800b3ce:	4903      	ldr	r1, [pc, #12]	; (800b3dc <_ZN5L6470I8shield_1E17L6470_PrepareMoveE14eL6470_DirId_tm+0x34>)
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	47a0      	blx	r4
}
 800b3d4:	bf00      	nop
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd90      	pop	{r4, r7, pc}
 800b3dc:	2000020c 	.word	0x2000020c

0800b3e0 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm>:
void L6470<shield_x>::L6470_PrepareGoTo(uint32_t AbsPos)
 800b3e0:	b590      	push	{r4, r7, lr}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b3f2:	681c      	ldr	r4, [r3, #0]
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9301      	str	r3, [sp, #4]
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2206      	movs	r2, #6
 800b400:	4903      	ldr	r1, [pc, #12]	; (800b410 <_ZN5L6470I8shield_1E17L6470_PrepareGoToEm+0x30>)
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	47a0      	blx	r4
}
 800b406:	bf00      	nop
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd90      	pop	{r4, r7, pc}
 800b40e:	bf00      	nop
 800b410:	2000020c 	.word	0x2000020c

0800b414 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoToDir(eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
 800b414:	b590      	push	{r4, r7, lr}
 800b416:	b087      	sub	sp, #28
 800b418:	af02      	add	r7, sp, #8
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	460b      	mov	r3, r1
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	72fb      	strb	r3, [r7, #11]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b42a:	681c      	ldr	r4, [r3, #0]
 800b42c:	7afa      	ldrb	r2, [r7, #11]
 800b42e:	2300      	movs	r3, #0
 800b430:	9301      	str	r3, [sp, #4]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	4613      	mov	r3, r2
 800b438:	2207      	movs	r2, #7
 800b43a:	4903      	ldr	r1, [pc, #12]	; (800b448 <_ZN5L6470I8shield_1E20L6470_PrepareGoToDirE14eL6470_DirId_tm+0x34>)
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	47a0      	blx	r4
}
 800b440:	bf00      	nop
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	bd90      	pop	{r4, r7, pc}
 800b448:	2000020c 	.word	0x2000020c

0800b44c <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm>:
void L6470<shield_x>::L6470_PrepareGoUntil(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
 800b44c:	b590      	push	{r4, r7, lr}
 800b44e:	b087      	sub	sp, #28
 800b450:	af02      	add	r7, sp, #8
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	607b      	str	r3, [r7, #4]
 800b456:	460b      	mov	r3, r1
 800b458:	72fb      	strb	r3, [r7, #11]
 800b45a:	4613      	mov	r3, r2
 800b45c:	72bb      	strb	r3, [r7, #10]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b466:	681c      	ldr	r4, [r3, #0]
 800b468:	7af9      	ldrb	r1, [r7, #11]
 800b46a:	7abb      	ldrb	r3, [r7, #10]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	9201      	str	r2, [sp, #4]
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	460b      	mov	r3, r1
 800b474:	2208      	movs	r2, #8
 800b476:	4903      	ldr	r1, [pc, #12]	; (800b484 <_ZN5L6470I8shield_1E20L6470_PrepareGoUntilE14eL6470_ActId_t14eL6470_DirId_tm+0x38>)
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	47a0      	blx	r4
}
 800b47c:	bf00      	nop
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	bd90      	pop	{r4, r7, pc}
 800b484:	2000020c 	.word	0x2000020c

0800b488 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t>:
void L6470<shield_x>::L6470_PrepareReleaseSW(eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
 800b488:	b590      	push	{r4, r7, lr}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	70fb      	strb	r3, [r7, #3]
 800b494:	4613      	mov	r3, r2
 800b496:	70bb      	strb	r3, [r7, #2]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b4a0:	681c      	ldr	r4, [r3, #0]
 800b4a2:	78fa      	ldrb	r2, [r7, #3]
 800b4a4:	78bb      	ldrb	r3, [r7, #2]
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	9101      	str	r1, [sp, #4]
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	2209      	movs	r2, #9
 800b4b0:	4903      	ldr	r1, [pc, #12]	; (800b4c0 <_ZN5L6470I8shield_1E22L6470_PrepareReleaseSWE14eL6470_ActId_t14eL6470_DirId_t+0x38>)
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	47a0      	blx	r4
}
 800b4b6:	bf00      	nop
 800b4b8:	370c      	adds	r7, #12
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd90      	pop	{r4, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	2000020c 	.word	0x2000020c

0800b4c4 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv>:
void L6470<shield_x>::L6470_PrepareGoHome(void)
 800b4c4:	b590      	push	{r4, r7, lr}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b4d4:	681c      	ldr	r4, [r3, #0]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	220a      	movs	r2, #10
 800b4e2:	4903      	ldr	r1, [pc, #12]	; (800b4f0 <_ZN5L6470I8shield_1E19L6470_PrepareGoHomeEv+0x2c>)
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	47a0      	blx	r4
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd90      	pop	{r4, r7, pc}
 800b4f0:	2000020c 	.word	0x2000020c

0800b4f4 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv>:
void L6470<shield_x>::L6470_PrepareGoMark(void)
 800b4f4:	b590      	push	{r4, r7, lr}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af02      	add	r7, sp, #8
 800b4fa:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b504:	681c      	ldr	r4, [r3, #0]
 800b506:	2300      	movs	r3, #0
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	2300      	movs	r3, #0
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	2300      	movs	r3, #0
 800b510:	220b      	movs	r2, #11
 800b512:	4903      	ldr	r1, [pc, #12]	; (800b520 <_ZN5L6470I8shield_1E19L6470_PrepareGoMarkEv+0x2c>)
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	47a0      	blx	r4
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd90      	pop	{r4, r7, pc}
 800b520:	2000020c 	.word	0x2000020c

0800b524 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv>:
void L6470<shield_x>::L6470_PrepareResetPos(void)
 800b524:	b590      	push	{r4, r7, lr}
 800b526:	b085      	sub	sp, #20
 800b528:	af02      	add	r7, sp, #8
 800b52a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b534:	681c      	ldr	r4, [r3, #0]
 800b536:	2300      	movs	r3, #0
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	2300      	movs	r3, #0
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	2300      	movs	r3, #0
 800b540:	220c      	movs	r2, #12
 800b542:	4903      	ldr	r1, [pc, #12]	; (800b550 <_ZN5L6470I8shield_1E21L6470_PrepareResetPosEv+0x2c>)
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	47a0      	blx	r4
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd90      	pop	{r4, r7, pc}
 800b550:	2000020c 	.word	0x2000020c

0800b554 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv>:
void L6470<shield_x>::L6470_PrepareResetDevice(void)
 800b554:	b590      	push	{r4, r7, lr}
 800b556:	b085      	sub	sp, #20
 800b558:	af02      	add	r7, sp, #8
 800b55a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b564:	681c      	ldr	r4, [r3, #0]
 800b566:	2300      	movs	r3, #0
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	2300      	movs	r3, #0
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	2300      	movs	r3, #0
 800b570:	220d      	movs	r2, #13
 800b572:	4903      	ldr	r1, [pc, #12]	; (800b580 <_ZN5L6470I8shield_1E24L6470_PrepareResetDeviceEv+0x2c>)
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	47a0      	blx	r4
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd90      	pop	{r4, r7, pc}
 800b580:	2000020c 	.word	0x2000020c

0800b584 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv>:
void L6470<shield_x>::L6470_PrepareSoftStop(void)
 800b584:	b590      	push	{r4, r7, lr}
 800b586:	b085      	sub	sp, #20
 800b588:	af02      	add	r7, sp, #8
 800b58a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b594:	681c      	ldr	r4, [r3, #0]
 800b596:	2300      	movs	r3, #0
 800b598:	9301      	str	r3, [sp, #4]
 800b59a:	2300      	movs	r3, #0
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	220e      	movs	r2, #14
 800b5a2:	4903      	ldr	r1, [pc, #12]	; (800b5b0 <_ZN5L6470I8shield_1E21L6470_PrepareSoftStopEv+0x2c>)
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	47a0      	blx	r4
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd90      	pop	{r4, r7, pc}
 800b5b0:	2000020c 	.word	0x2000020c

0800b5b4 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv>:
void L6470<shield_x>::L6470_PrepareHardStop(void)
 800b5b4:	b590      	push	{r4, r7, lr}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af02      	add	r7, sp, #8
 800b5ba:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b5c4:	681c      	ldr	r4, [r3, #0]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	9301      	str	r3, [sp, #4]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	220f      	movs	r2, #15
 800b5d2:	4903      	ldr	r1, [pc, #12]	; (800b5e0 <_ZN5L6470I8shield_1E21L6470_PrepareHardStopEv+0x2c>)
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	47a0      	blx	r4
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd90      	pop	{r4, r7, pc}
 800b5e0:	2000020c 	.word	0x2000020c

0800b5e4 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv>:
void L6470<shield_x>::L6470_PrepareSoftHiZ(void)
 800b5e4:	b590      	push	{r4, r7, lr}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af02      	add	r7, sp, #8
 800b5ea:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b5f4:	681c      	ldr	r4, [r3, #0]
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	2300      	movs	r3, #0
 800b600:	2210      	movs	r2, #16
 800b602:	4903      	ldr	r1, [pc, #12]	; (800b610 <_ZN5L6470I8shield_1E20L6470_PrepareSoftHiZEv+0x2c>)
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	47a0      	blx	r4
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd90      	pop	{r4, r7, pc}
 800b610:	2000020c 	.word	0x2000020c

0800b614 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv>:
void L6470<shield_x>::L6470_PrepareHardHiZ(void)
 800b614:	b590      	push	{r4, r7, lr}
 800b616:	b085      	sub	sp, #20
 800b618:	af02      	add	r7, sp, #8
 800b61a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b624:	681c      	ldr	r4, [r3, #0]
 800b626:	2300      	movs	r3, #0
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	2300      	movs	r3, #0
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	2300      	movs	r3, #0
 800b630:	2211      	movs	r2, #17
 800b632:	4903      	ldr	r1, [pc, #12]	; (800b640 <_ZN5L6470I8shield_1E20L6470_PrepareHardHiZEv+0x2c>)
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	47a0      	blx	r4
}
 800b638:	bf00      	nop
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd90      	pop	{r4, r7, pc}
 800b640:	2000020c 	.word	0x2000020c

0800b644 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv>:
void L6470<shield_x>::L6470_PrepareGetStatus(void)
 800b644:	b590      	push	{r4, r7, lr}
 800b646:	b085      	sub	sp, #20
 800b648:	af02      	add	r7, sp, #8
 800b64a:	6078      	str	r0, [r7, #4]
  L6470_PrepareAppCmdPkg(L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b654:	681c      	ldr	r4, [r3, #0]
 800b656:	2300      	movs	r3, #0
 800b658:	9301      	str	r3, [sp, #4]
 800b65a:	2300      	movs	r3, #0
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	2300      	movs	r3, #0
 800b660:	2212      	movs	r2, #18
 800b662:	4903      	ldr	r1, [pc, #12]	; (800b670 <_ZN5L6470I8shield_1E22L6470_PrepareGetStatusEv+0x2c>)
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	47a0      	blx	r4
}
 800b668:	bf00      	nop
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd90      	pop	{r4, r7, pc}
 800b670:	2000020c 	.word	0x2000020c

0800b674 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv>:
uint8_t* L6470<shield_x>::L6470_PerformPreparedApplicationCommand(void)
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a09      	ldr	r2, [pc, #36]	; (800b6ac <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b688:	4909      	ldr	r1, [pc, #36]	; (800b6b0 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x3c>)
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a06      	ldr	r2, [pc, #24]	; (800b6b4 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
 800b69a:	4904      	ldr	r1, [pc, #16]	; (800b6ac <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x38>)
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	4798      	blx	r3
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 800b6a0:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <_ZN5L6470I8shield_1E39L6470_PerformPreparedApplicationCommandEv+0x40>)
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	2000022c 	.word	0x2000022c
 800b6b0:	2000020c 	.word	0x2000020c
 800b6b4:	20000234 	.word	0x20000234

0800b6b8 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_>:
void L6470<shield_x>::L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
 800b6b8:	b590      	push	{r4, r7, lr}
 800b6ba:	b089      	sub	sp, #36	; 0x24
 800b6bc:	af02      	add	r7, sp, #8
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800b6c4:	4b17      	ldr	r3, [pc, #92]	; (800b724 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x6c>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	75fb      	strb	r3, [r7, #23]
 800b6ce:	e020      	b.n	800b712 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x5a>
    L6470_SPI_Communication((pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b6d8:	681c      	ldr	r4, [r3, #0]
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	461a      	mov	r2, r3
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	1899      	adds	r1, r3, r2
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	441a      	add	r2, r3
 800b6ee:	230a      	movs	r3, #10
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	47a0      	blx	r4
    for (delay_cnt=0; delay_cnt<125; delay_cnt++) __NOP();   //!<Simply deselect time delay for SPI nCS
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	75bb      	strb	r3, [r7, #22]
 800b6fc:	e003      	b.n	800b706 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x4e>
 800b6fe:	bf00      	nop
 800b700:	7dbb      	ldrb	r3, [r7, #22]
 800b702:	3301      	adds	r3, #1
 800b704:	75bb      	strb	r3, [r7, #22]
 800b706:	7dbb      	ldrb	r3, [r7, #22]
 800b708:	2b7c      	cmp	r3, #124	; 0x7c
 800b70a:	d9f8      	bls.n	800b6fe <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x46>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	3301      	adds	r3, #1
 800b710:	75fb      	strb	r3, [r7, #23]
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	2b03      	cmp	r3, #3
 800b716:	d9db      	bls.n	800b6d0 <_ZN5L6470I8shield_1E23L6470_DaisyChainCommandEPhS2_+0x18>
  __NOP();
 800b718:	bf00      	nop
}
 800b71a:	bf00      	nop
 800b71c:	371c      	adds	r7, #28
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd90      	pop	{r4, r7, pc}
 800b722:	bf00      	nop
 800b724:	20000209 	.word	0x20000209

0800b728 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh>:
uint32_t L6470<shield_x>::L6470_ExtractReturnedData(uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
 800b728:	b480      	push	{r7}
 800b72a:	b087      	sub	sp, #28
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	4613      	mov	r3, r2
 800b734:	71fb      	strb	r3, [r7, #7]
  value = 0x000000;
 800b736:	2300      	movs	r3, #0
 800b738:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b73a:	2301      	movs	r3, #1
 800b73c:	74fb      	strb	r3, [r7, #19]
 800b73e:	e016      	b.n	800b76e <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x46>
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 800b740:	7cfb      	ldrb	r3, [r7, #19]
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	461a      	mov	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	7f1b      	ldrb	r3, [r3, #28]
 800b74a:	4413      	add	r3, r2
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	4413      	add	r3, r2
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	4619      	mov	r1, r3
 800b754:	79fa      	ldrb	r2, [r7, #7]
 800b756:	7cfb      	ldrb	r3, [r7, #19]
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	00db      	lsls	r3, r3, #3
 800b75c:	fa01 f303 	lsl.w	r3, r1, r3
 800b760:	461a      	mov	r2, r3
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	4313      	orrs	r3, r2
 800b766:	617b      	str	r3, [r7, #20]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800b768:	7cfb      	ldrb	r3, [r7, #19]
 800b76a:	3301      	adds	r3, #1
 800b76c:	74fb      	strb	r3, [r7, #19]
 800b76e:	7cfb      	ldrb	r3, [r7, #19]
 800b770:	2b03      	cmp	r3, #3
 800b772:	d9e5      	bls.n	800b740 <_ZN5L6470I8shield_1E25L6470_ExtractReturnedDataEPhh+0x18>
  return value;
 800b774:	697b      	ldr	r3, [r7, #20]
}
 800b776:	4618      	mov	r0, r3
 800b778:	371c      	adds	r7, #28
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
	...

0800b784 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh>:
uint8_t L6470<shield_x>::L6470_CheckStatusRegisterFlag(uint8_t L6470_StatusRegisterFlagId)
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	70fb      	strb	r3, [r7, #3]
  uint8_t state = 0;
 800b790:	2300      	movs	r3, #0
 800b792:	73fb      	strb	r3, [r7, #15]
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_STATUS_ID);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2118      	movs	r1, #24
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	4798      	blx	r3
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7aa:	b292      	uxth	r2, r2
 800b7ac:	801a      	strh	r2, [r3, #0]
  switch(L6470_StatusRegisterFlagId)
 800b7ae:	78fb      	ldrb	r3, [r7, #3]
 800b7b0:	2b0e      	cmp	r3, #14
 800b7b2:	f200 8099 	bhi.w	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
 800b7b6:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x38>)
 800b7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7bc:	0800b7f9 	.word	0x0800b7f9
 800b7c0:	0800b809 	.word	0x0800b809
 800b7c4:	0800b819 	.word	0x0800b819
 800b7c8:	0800b829 	.word	0x0800b829
 800b7cc:	0800b839 	.word	0x0800b839
 800b7d0:	0800b849 	.word	0x0800b849
 800b7d4:	0800b859 	.word	0x0800b859
 800b7d8:	0800b869 	.word	0x0800b869
 800b7dc:	0800b879 	.word	0x0800b879
 800b7e0:	0800b889 	.word	0x0800b889
 800b7e4:	0800b899 	.word	0x0800b899
 800b7e8:	0800b8a9 	.word	0x0800b8a9
 800b7ec:	0800b8b9 	.word	0x0800b8b9
 800b7f0:	0800b8c9 	.word	0x0800b8c9
 800b7f4:	0800b8d9 	.word	0x0800b8d9
      state = pL6470_StatusRegister->HiZ;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b802:	b2db      	uxtb	r3, r3
 800b804:	73fb      	strb	r3, [r7, #15]
      break;
 800b806:	e06f      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b812:	b2db      	uxtb	r3, r3
 800b814:	73fb      	strb	r3, [r7, #15]
      break;
 800b816:	e067      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_F;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b822:	b2db      	uxtb	r3, r3
 800b824:	73fb      	strb	r3, [r7, #15]
      break;
 800b826:	e05f      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SW_EVN;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b832:	b2db      	uxtb	r3, r3
 800b834:	73fb      	strb	r3, [r7, #15]
      break;
 800b836:	e057      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->DIR;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b842:	b2db      	uxtb	r3, r3
 800b844:	73fb      	strb	r3, [r7, #15]
      break;
 800b846:	e04f      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->MOT_STATUS;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800b852:	b2db      	uxtb	r3, r3
 800b854:	73fb      	strb	r3, [r7, #15]
      break;
 800b856:	e047      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->NOTPERF_CMD;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b862:	b2db      	uxtb	r3, r3
 800b864:	73fb      	strb	r3, [r7, #15]
      break;
 800b866:	e03f      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->WRONG_CMD;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b86c:	785b      	ldrb	r3, [r3, #1]
 800b86e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b872:	b2db      	uxtb	r3, r3
 800b874:	73fb      	strb	r3, [r7, #15]
      break;
 800b876:	e037      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->UVLO;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87c:	785b      	ldrb	r3, [r3, #1]
 800b87e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b882:	b2db      	uxtb	r3, r3
 800b884:	73fb      	strb	r3, [r7, #15]
      break;
 800b886:	e02f      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_WRN;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b88c:	785b      	ldrb	r3, [r3, #1]
 800b88e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b892:	b2db      	uxtb	r3, r3
 800b894:	73fb      	strb	r3, [r7, #15]
      break;
 800b896:	e027      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->TH_SD;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89c:	785b      	ldrb	r3, [r3, #1]
 800b89e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8a6:	e01f      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->OCD;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ac:	785b      	ldrb	r3, [r3, #1]
 800b8ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b6:	e017      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_A;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8bc:	785b      	ldrb	r3, [r3, #1]
 800b8be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8c6:	e00f      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->STEP_LOSS_B;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8cc:	785b      	ldrb	r3, [r3, #1]
 800b8ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8d6:	e007      	b.n	800b8e8 <_ZN5L6470I8shield_1E29L6470_CheckStatusRegisterFlagEh+0x164>
      state = pL6470_StatusRegister->SCK_MOD;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8dc:	785b      	ldrb	r3, [r3, #1]
 800b8de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e6:	bf00      	nop
  return state;
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop

0800b8f4 <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh>:
uint8_t *L6470<shield_x>::L6470_GetRegisterName(uint8_t id)
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	70fb      	strb	r3, [r7, #3]
  if (id < L6470REGIDSIZE)
 800b900:	78fb      	ldrb	r3, [r7, #3]
 800b902:	2b18      	cmp	r3, #24
 800b904:	d809      	bhi.n	800b91a <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x26>
    return (uint8_t*)L6470_Register[id].Name;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a19      	ldr	r1, [r3, #32]
 800b90a:	78fa      	ldrb	r2, [r7, #3]
 800b90c:	4613      	mov	r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4413      	add	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	440b      	add	r3, r1
 800b916:	3301      	adds	r3, #1
 800b918:	e000      	b.n	800b91c <_ZN5L6470I8shield_1E21L6470_GetRegisterNameEh+0x28>
    return NULL;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t>:
void L6470<shield_x>::L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800b932:	2300      	movs	r3, #0
 800b934:	73fb      	strb	r3, [r7, #15]
 800b936:	e01a      	b.n	800b96e <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x46>
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800b938:	7bfb      	ldrb	r3, [r7, #15]
 800b93a:	011b      	lsls	r3, r3, #4
 800b93c:	683a      	ldr	r2, [r7, #0]
 800b93e:	4413      	add	r3, r2
 800b940:	2200      	movs	r2, #0
 800b942:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800b944:	7bfb      	ldrb	r3, [r7, #15]
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	683a      	ldr	r2, [r7, #0]
 800b94a:	4413      	add	r3, r2
 800b94c:	2200      	movs	r2, #0
 800b94e:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 800b950:	7bfb      	ldrb	r3, [r7, #15]
 800b952:	011b      	lsls	r3, r3, #4
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	4413      	add	r3, r2
 800b958:	2200      	movs	r2, #0
 800b95a:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	011b      	lsls	r3, r3, #4
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	4413      	add	r3, r2
 800b964:	2200      	movs	r2, #0
 800b966:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800b968:	7bfb      	ldrb	r3, [r7, #15]
 800b96a:	3301      	adds	r3, #1
 800b96c:	73fb      	strb	r3, [r7, #15]
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d9e1      	bls.n	800b938 <_ZN5L6470I8shield_1E20L6470_ResetAppCmdPkgEP18sL6470_AppCmdPkg_t+0x10>
}
 800b974:	bf00      	nop
 800b976:	bf00      	nop
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <_ZN5L6470I8shield_1E19L6470_FillAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_FillAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800b982:	b480      	push	{r7}
 800b984:	b085      	sub	sp, #20
 800b986:	af00      	add	r7, sp, #0
 800b988:	60f8      	str	r0, [r7, #12]
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	603b      	str	r3, [r7, #0]
 800b98e:	4613      	mov	r3, r2
 800b990:	71fb      	strb	r3, [r7, #7]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	7f1b      	ldrb	r3, [r3, #28]
 800b996:	011b      	lsls	r3, r3, #4
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	4413      	add	r3, r2
 800b99c:	79fa      	ldrb	r2, [r7, #7]
 800b99e:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	7f1b      	ldrb	r3, [r3, #28]
 800b9a4:	011b      	lsls	r3, r3, #4
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	7f1b      	ldrb	r3, [r3, #28]
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	69ba      	ldr	r2, [r7, #24]
 800b9ba:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	7f1b      	ldrb	r3, [r3, #28]
 800b9c0:	011b      	lsls	r3, r3, #4
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	69fa      	ldr	r2, [r7, #28]
 800b9c8:	60da      	str	r2, [r3, #12]
}
 800b9ca:	bf00      	nop
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
	...

0800b9d8 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm>:
void L6470<shield_x>::L6470_PrepareAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
 800b9d8:	b590      	push	{r4, r7, lr}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af02      	add	r7, sp, #8
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	71fb      	strb	r3, [r7, #7]
  if(!L6470_DaisyChain_HalfPrepared)
 800b9e8:	4b10      	ldr	r3, [pc, #64]	; (800ba2c <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10a      	bne.n	800ba06 <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x2e>
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800b9f0:	4b0e      	ldr	r3, [pc, #56]	; (800ba2c <_ZN5L6470I8shield_1E22L6470_PrepareAppCmdPkgEP18sL6470_AppCmdPkg_t17eL6470_AppCmdId_tmmm+0x54>)
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68b9      	ldr	r1, [r7, #8]
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	4798      	blx	r3
  L6470_FillAppCmdPkg(pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800ba0e:	681c      	ldr	r4, [r3, #0]
 800ba10:	79fa      	ldrb	r2, [r7, #7]
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	9301      	str	r3, [sp, #4]
 800ba16:	6a3b      	ldr	r3, [r7, #32]
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68b9      	ldr	r1, [r7, #8]
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	47a0      	blx	r4
}
 800ba22:	bf00      	nop
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd90      	pop	{r4, r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20000209 	.word	0x20000209

0800ba30 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh>:
void L6470<shield_x>::L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
 800ba30:	b480      	push	{r7}
 800ba32:	b087      	sub	sp, #28
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  uint8_t i = 0;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	757b      	strb	r3, [r7, #21]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800ba40:	2300      	movs	r3, #0
 800ba42:	75bb      	strb	r3, [r7, #22]
 800ba44:	e013      	b.n	800ba6e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3e>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800ba46:	2300      	movs	r3, #0
 800ba48:	75fb      	strb	r3, [r7, #23]
 800ba4a:	e00a      	b.n	800ba62 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x32>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 800ba4c:	7d7b      	ldrb	r3, [r7, #21]
 800ba4e:	1c5a      	adds	r2, r3, #1
 800ba50:	757a      	strb	r2, [r7, #21]
 800ba52:	461a      	mov	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4413      	add	r3, r2
 800ba58:	2200      	movs	r2, #0
 800ba5a:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	75fb      	strb	r3, [r7, #23]
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d9f1      	bls.n	800ba4c <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1c>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800ba68:	7dbb      	ldrb	r3, [r7, #22]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	75bb      	strb	r3, [r7, #22]
 800ba6e:	7dbb      	ldrb	r3, [r7, #22]
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d9e8      	bls.n	800ba46 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x16>
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800ba74:	2300      	movs	r3, #0
 800ba76:	75fb      	strb	r3, [r7, #23]
 800ba78:	e1f1      	b.n	800be5e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x42e>
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
 800ba80:	011b      	lsls	r3, r3, #4
 800ba82:	68b9      	ldr	r1, [r7, #8]
 800ba84:	440b      	add	r3, r1
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	00db      	lsls	r3, r3, #3
 800ba8e:	1a5b      	subs	r3, r3, r1
 800ba90:	005b      	lsls	r3, r3, #1
 800ba92:	441a      	add	r2, r3
 800ba94:	7dfb      	ldrb	r3, [r7, #23]
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	440b      	add	r3, r1
 800ba9a:	7b12      	ldrb	r2, [r2, #12]
 800ba9c:	701a      	strb	r2, [r3, #0]
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
 800baa0:	011b      	lsls	r3, r3, #4
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	4413      	add	r3, r2
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	2b12      	cmp	r3, #18
 800baaa:	f200 81d5 	bhi.w	800be58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
 800baae:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x84>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800be59 	.word	0x0800be59
 800bab8:	0800bb01 	.word	0x0800bb01
 800babc:	0800bb89 	.word	0x0800bb89
 800bac0:	0800bbb9 	.word	0x0800bbb9
 800bac4:	0800bc21 	.word	0x0800bc21
 800bac8:	0800bc4f 	.word	0x0800bc4f
 800bacc:	0800bcb7 	.word	0x0800bcb7
 800bad0:	0800bcf3 	.word	0x0800bcf3
 800bad4:	0800bd5b 	.word	0x0800bd5b
 800bad8:	0800bdf7 	.word	0x0800bdf7
 800badc:	0800be59 	.word	0x0800be59
 800bae0:	0800be59 	.word	0x0800be59
 800bae4:	0800be59 	.word	0x0800be59
 800bae8:	0800be59 	.word	0x0800be59
 800baec:	0800be59 	.word	0x0800be59
 800baf0:	0800be59 	.word	0x0800be59
 800baf4:	0800be59 	.word	0x0800be59
 800baf8:	0800be59 	.word	0x0800be59
 800bafc:	0800be59 	.word	0x0800be59
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bb00:	7dfb      	ldrb	r3, [r7, #23]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	4413      	add	r3, r2
 800bb06:	7819      	ldrb	r1, [r3, #0]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6a18      	ldr	r0, [r3, #32]
 800bb0c:	7dfb      	ldrb	r3, [r7, #23]
 800bb0e:	011b      	lsls	r3, r3, #4
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	4413      	add	r3, r2
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	4613      	mov	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4403      	add	r3, r0
 800bb20:	781a      	ldrb	r2, [r3, #0]
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	4403      	add	r3, r0
 800bb28:	430a      	orrs	r2, r1
 800bb2a:	b2d2      	uxtb	r2, r2
 800bb2c:	701a      	strb	r2, [r3, #0]
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6a19      	ldr	r1, [r3, #32]
 800bb32:	7dfb      	ldrb	r3, [r7, #23]
 800bb34:	011b      	lsls	r3, r3, #4
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	4413      	add	r3, r2
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	440b      	add	r3, r1
 800bb46:	7b9b      	ldrb	r3, [r3, #14]
 800bb48:	753b      	strb	r3, [r7, #20]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	75bb      	strb	r3, [r7, #22]
 800bb4e:	e016      	b.n	800bb7e <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x14e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800bb50:	7dfb      	ldrb	r3, [r7, #23]
 800bb52:	011b      	lsls	r3, r3, #4
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	4413      	add	r3, r2
 800bb58:	689a      	ldr	r2, [r3, #8]
 800bb5a:	7d39      	ldrb	r1, [r7, #20]
 800bb5c:	7dbb      	ldrb	r3, [r7, #22]
 800bb5e:	1acb      	subs	r3, r1, r3
 800bb60:	00db      	lsls	r3, r3, #3
 800bb62:	fa22 f103 	lsr.w	r1, r2, r3
 800bb66:	7dbb      	ldrb	r3, [r7, #22]
 800bb68:	005a      	lsls	r2, r3, #1
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	461a      	mov	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4413      	add	r3, r2
 800bb74:	b2ca      	uxtb	r2, r1
 800bb76:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 800bb78:	7dbb      	ldrb	r3, [r7, #22]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	75bb      	strb	r3, [r7, #22]
 800bb7e:	7d3a      	ldrb	r2, [r7, #20]
 800bb80:	7dbb      	ldrb	r3, [r7, #22]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d2e4      	bcs.n	800bb50 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x120>
      break;
 800bb86:	e167      	b.n	800be58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	7819      	ldrb	r1, [r3, #0]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6a18      	ldr	r0, [r3, #32]
 800bb94:	7dfb      	ldrb	r3, [r7, #23]
 800bb96:	011b      	lsls	r3, r3, #4
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4413      	add	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	4403      	add	r3, r0
 800bba8:	781a      	ldrb	r2, [r3, #0]
 800bbaa:	7dfb      	ldrb	r3, [r7, #23]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	4403      	add	r3, r0
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	b2d2      	uxtb	r2, r2
 800bbb4:	701a      	strb	r2, [r3, #0]
      break;
 800bbb6:	e14f      	b.n	800be58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	7819      	ldrb	r1, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	011b      	lsls	r3, r3, #4
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	4413      	add	r3, r2
 800bbcc:	685a      	ldr	r2, [r3, #4]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	00db      	lsls	r3, r3, #3
 800bbd2:	4413      	add	r3, r2
 800bbd4:	4403      	add	r3, r0
 800bbd6:	7a1a      	ldrb	r2, [r3, #8]
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	4403      	add	r3, r0
 800bbde:	430a      	orrs	r2, r1
 800bbe0:	b2d2      	uxtb	r2, r2
 800bbe2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	75bb      	strb	r3, [r7, #22]
 800bbe8:	e016      	b.n	800bc18 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1e8>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	011b      	lsls	r3, r3, #4
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	689a      	ldr	r2, [r3, #8]
 800bbf4:	7dbb      	ldrb	r3, [r7, #22]
 800bbf6:	f1c3 0303 	rsb	r3, r3, #3
 800bbfa:	00db      	lsls	r3, r3, #3
 800bbfc:	fa22 f103 	lsr.w	r1, r2, r3
 800bc00:	7dbb      	ldrb	r3, [r7, #22]
 800bc02:	005a      	lsls	r2, r3, #1
 800bc04:	7dfb      	ldrb	r3, [r7, #23]
 800bc06:	4413      	add	r3, r2
 800bc08:	461a      	mov	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	b2ca      	uxtb	r2, r1
 800bc10:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bc12:	7dbb      	ldrb	r3, [r7, #22]
 800bc14:	3301      	adds	r3, #1
 800bc16:	75bb      	strb	r3, [r7, #22]
 800bc18:	7dbb      	ldrb	r3, [r7, #22]
 800bc1a:	2b03      	cmp	r3, #3
 800bc1c:	d9e5      	bls.n	800bbea <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x1ba>
      break;
 800bc1e:	e11b      	b.n	800be58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	4413      	add	r3, r2
 800bc26:	7819      	ldrb	r1, [r3, #0]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	4413      	add	r3, r2
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	4613      	mov	r3, r2
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	4413      	add	r3, r2
 800bc3c:	4403      	add	r3, r0
 800bc3e:	7a1a      	ldrb	r2, [r3, #8]
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	4403      	add	r3, r0
 800bc46:	430a      	orrs	r2, r1
 800bc48:	b2d2      	uxtb	r2, r2
 800bc4a:	701a      	strb	r2, [r3, #0]
      break;
 800bc4c:	e104      	b.n	800be58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bc4e:	7dfb      	ldrb	r3, [r7, #23]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	4413      	add	r3, r2
 800bc54:	7819      	ldrb	r1, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bc5a:	7dfb      	ldrb	r3, [r7, #23]
 800bc5c:	011b      	lsls	r3, r3, #4
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	4413      	add	r3, r2
 800bc62:	685a      	ldr	r2, [r3, #4]
 800bc64:	4613      	mov	r3, r2
 800bc66:	00db      	lsls	r3, r3, #3
 800bc68:	4413      	add	r3, r2
 800bc6a:	4403      	add	r3, r0
 800bc6c:	7a1a      	ldrb	r2, [r3, #8]
 800bc6e:	7dfb      	ldrb	r3, [r7, #23]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	4403      	add	r3, r0
 800bc74:	430a      	orrs	r2, r1
 800bc76:	b2d2      	uxtb	r2, r2
 800bc78:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	75bb      	strb	r3, [r7, #22]
 800bc7e:	e016      	b.n	800bcae <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x27e>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
 800bc82:	011b      	lsls	r3, r3, #4
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	4413      	add	r3, r2
 800bc88:	689a      	ldr	r2, [r3, #8]
 800bc8a:	7dbb      	ldrb	r3, [r7, #22]
 800bc8c:	f1c3 0303 	rsb	r3, r3, #3
 800bc90:	00db      	lsls	r3, r3, #3
 800bc92:	fa22 f103 	lsr.w	r1, r2, r3
 800bc96:	7dbb      	ldrb	r3, [r7, #22]
 800bc98:	005a      	lsls	r2, r3, #1
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	461a      	mov	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4413      	add	r3, r2
 800bca4:	b2ca      	uxtb	r2, r1
 800bca6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bca8:	7dbb      	ldrb	r3, [r7, #22]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	75bb      	strb	r3, [r7, #22]
 800bcae:	7dbb      	ldrb	r3, [r7, #22]
 800bcb0:	2b03      	cmp	r3, #3
 800bcb2:	d9e5      	bls.n	800bc80 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x250>
      break;
 800bcb4:	e0d0      	b.n	800be58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	75bb      	strb	r3, [r7, #22]
 800bcba:	e016      	b.n	800bcea <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2ba>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800bcbc:	7dfb      	ldrb	r3, [r7, #23]
 800bcbe:	011b      	lsls	r3, r3, #4
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	7dbb      	ldrb	r3, [r7, #22]
 800bcc8:	f1c3 0303 	rsb	r3, r3, #3
 800bccc:	00db      	lsls	r3, r3, #3
 800bcce:	fa22 f103 	lsr.w	r1, r2, r3
 800bcd2:	7dbb      	ldrb	r3, [r7, #22]
 800bcd4:	005a      	lsls	r2, r3, #1
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	4413      	add	r3, r2
 800bcda:	461a      	mov	r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4413      	add	r3, r2
 800bce0:	b2ca      	uxtb	r2, r1
 800bce2:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bce4:	7dbb      	ldrb	r3, [r7, #22]
 800bce6:	3301      	adds	r3, #1
 800bce8:	75bb      	strb	r3, [r7, #22]
 800bcea:	7dbb      	ldrb	r3, [r7, #22]
 800bcec:	2b03      	cmp	r3, #3
 800bcee:	d9e5      	bls.n	800bcbc <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x28c>
      break;
 800bcf0:	e0b2      	b.n	800be58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	7819      	ldrb	r1, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	011b      	lsls	r3, r3, #4
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	4413      	add	r3, r2
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	4613      	mov	r3, r2
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	4413      	add	r3, r2
 800bd0e:	4403      	add	r3, r0
 800bd10:	7a1a      	ldrb	r2, [r3, #8]
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	4403      	add	r3, r0
 800bd18:	430a      	orrs	r2, r1
 800bd1a:	b2d2      	uxtb	r2, r2
 800bd1c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bd1e:	2301      	movs	r3, #1
 800bd20:	75bb      	strb	r3, [r7, #22]
 800bd22:	e016      	b.n	800bd52 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x322>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800bd24:	7dfb      	ldrb	r3, [r7, #23]
 800bd26:	011b      	lsls	r3, r3, #4
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	689a      	ldr	r2, [r3, #8]
 800bd2e:	7dbb      	ldrb	r3, [r7, #22]
 800bd30:	f1c3 0303 	rsb	r3, r3, #3
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	fa22 f103 	lsr.w	r1, r2, r3
 800bd3a:	7dbb      	ldrb	r3, [r7, #22]
 800bd3c:	005a      	lsls	r2, r3, #1
 800bd3e:	7dfb      	ldrb	r3, [r7, #23]
 800bd40:	4413      	add	r3, r2
 800bd42:	461a      	mov	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4413      	add	r3, r2
 800bd48:	b2ca      	uxtb	r2, r1
 800bd4a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bd4c:	7dbb      	ldrb	r3, [r7, #22]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	75bb      	strb	r3, [r7, #22]
 800bd52:	7dbb      	ldrb	r3, [r7, #22]
 800bd54:	2b03      	cmp	r3, #3
 800bd56:	d9e5      	bls.n	800bd24 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x2f4>
      break;
 800bd58:	e07e      	b.n	800be58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	4413      	add	r3, r2
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	b259      	sxtb	r1, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
 800bd6a:	011b      	lsls	r3, r3, #4
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	4413      	add	r3, r2
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	4403      	add	r3, r0
 800bd7a:	791b      	ldrb	r3, [r3, #4]
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	b25b      	sxtb	r3, r3
 800bd80:	430b      	orrs	r3, r1
 800bd82:	b259      	sxtb	r1, r3
 800bd84:	7dfb      	ldrb	r3, [r7, #23]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	4413      	add	r3, r2
 800bd8a:	b2ca      	uxtb	r2, r1
 800bd8c:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	4413      	add	r3, r2
 800bd94:	7819      	ldrb	r1, [r3, #0]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bd9a:	7dfb      	ldrb	r3, [r7, #23]
 800bd9c:	011b      	lsls	r3, r3, #4
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	4413      	add	r3, r2
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	4613      	mov	r3, r2
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	4413      	add	r3, r2
 800bdaa:	4403      	add	r3, r0
 800bdac:	7a1a      	ldrb	r2, [r3, #8]
 800bdae:	7dfb      	ldrb	r3, [r7, #23]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	4403      	add	r3, r0
 800bdb4:	430a      	orrs	r2, r1
 800bdb6:	b2d2      	uxtb	r2, r2
 800bdb8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bdba:	2301      	movs	r3, #1
 800bdbc:	75bb      	strb	r3, [r7, #22]
 800bdbe:	e016      	b.n	800bdee <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x3be>
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800bdc0:	7dfb      	ldrb	r3, [r7, #23]
 800bdc2:	011b      	lsls	r3, r3, #4
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	68da      	ldr	r2, [r3, #12]
 800bdca:	7dbb      	ldrb	r3, [r7, #22]
 800bdcc:	f1c3 0303 	rsb	r3, r3, #3
 800bdd0:	00db      	lsls	r3, r3, #3
 800bdd2:	fa22 f103 	lsr.w	r1, r2, r3
 800bdd6:	7dbb      	ldrb	r3, [r7, #22]
 800bdd8:	005a      	lsls	r2, r3, #1
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
 800bddc:	4413      	add	r3, r2
 800bdde:	461a      	mov	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4413      	add	r3, r2
 800bde4:	b2ca      	uxtb	r2, r1
 800bde6:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800bde8:	7dbb      	ldrb	r3, [r7, #22]
 800bdea:	3301      	adds	r3, #1
 800bdec:	75bb      	strb	r3, [r7, #22]
 800bdee:	7dbb      	ldrb	r3, [r7, #22]
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	d9e5      	bls.n	800bdc0 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x390>
      break;
 800bdf4:	e030      	b.n	800be58 <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x428>
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	b259      	sxtb	r1, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800be04:	7dfb      	ldrb	r3, [r7, #23]
 800be06:	011b      	lsls	r3, r3, #4
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	4413      	add	r3, r2
 800be0c:	685a      	ldr	r2, [r3, #4]
 800be0e:	4613      	mov	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	4403      	add	r3, r0
 800be16:	791b      	ldrb	r3, [r3, #4]
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	b25b      	sxtb	r3, r3
 800be1c:	430b      	orrs	r3, r1
 800be1e:	b259      	sxtb	r1, r3
 800be20:	7dfb      	ldrb	r3, [r7, #23]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	4413      	add	r3, r2
 800be26:	b2ca      	uxtb	r2, r1
 800be28:	701a      	strb	r2, [r3, #0]
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	4413      	add	r3, r2
 800be30:	7819      	ldrb	r1, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800be36:	7dfb      	ldrb	r3, [r7, #23]
 800be38:	011b      	lsls	r3, r3, #4
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	4413      	add	r3, r2
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	4613      	mov	r3, r2
 800be42:	00db      	lsls	r3, r3, #3
 800be44:	4413      	add	r3, r2
 800be46:	4403      	add	r3, r0
 800be48:	7a1a      	ldrb	r2, [r3, #8]
 800be4a:	7dfb      	ldrb	r3, [r7, #23]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	4403      	add	r3, r0
 800be50:	430a      	orrs	r2, r1
 800be52:	b2d2      	uxtb	r2, r2
 800be54:	701a      	strb	r2, [r3, #0]
      break;
 800be56:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	3301      	adds	r3, #1
 800be5c:	75fb      	strb	r3, [r7, #23]
 800be5e:	7dfb      	ldrb	r3, [r7, #23]
 800be60:	2b01      	cmp	r3, #1
 800be62:	f67f ae0a 	bls.w	800ba7a <_ZN5L6470I8shield_1E30L6470_PrepareDaisyChainCommandEP18sL6470_AppCmdPkg_tPh+0x4a>
}
 800be66:	bf00      	nop
 800be68:	bf00      	nop
 800be6a:	371c      	adds	r7, #28
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <_ZN5L6470I8shield_1E11L6470_roundEf>:
    int L6470_round(float f)
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	ed87 0a00 	vstr	s0, [r7]
        if (f >= 0) {
 800be80:	edd7 7a00 	vldr	s15, [r7]
 800be84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be8c:	db1e      	blt.n	800becc <_ZN5L6470I8shield_1E11L6470_roundEf+0x58>
            return (int) f + (f - (int) f < 0.5f ? 0 : 1);
 800be8e:	edd7 7a00 	vldr	s15, [r7]
 800be92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be96:	ee17 2a90 	vmov	r2, s15
 800be9a:	edd7 7a00 	vldr	s15, [r7]
 800be9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bea6:	ed97 7a00 	vldr	s14, [r7]
 800beaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800beb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800beb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beba:	bf4c      	ite	mi
 800bebc:	2301      	movmi	r3, #1
 800bebe:	2300      	movpl	r3, #0
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	f083 0301 	eor.w	r3, r3, #1
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	4413      	add	r3, r2
 800beca:	e01a      	b.n	800bf02 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8e>
            return (int) f - (f - (int) f < -0.5f ? 1 : 0);
 800becc:	edd7 7a00 	vldr	s15, [r7]
 800bed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bed4:	ee17 2a90 	vmov	r2, s15
 800bed8:	edd7 7a00 	vldr	s15, [r7]
 800bedc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bee4:	ed97 7a00 	vldr	s14, [r7]
 800bee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beec:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800bef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef8:	d501      	bpl.n	800befe <_ZN5L6470I8shield_1E11L6470_roundEf+0x8a>
 800befa:	2301      	movs	r3, #1
 800befc:	e000      	b.n	800bf00 <_ZN5L6470I8shield_1E11L6470_roundEf+0x8c>
 800befe:	2300      	movs	r3, #0
 800bf00:	1ad3      	subs	r3, r2, r3
    }
 800bf02:	4618      	mov	r0, r3
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <_ZN5L6470I8shield_1E4ReadEPht>:
    status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead)
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b086      	sub	sp, #24
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6918      	ldr	r0, [r3, #16]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	8a9b      	ldrh	r3, [r3, #20]
 800bf24:	2200      	movs	r2, #0
 800bf26:	4619      	mov	r1, r3
 800bf28:	f004 f8fc 	bl	8010124 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Receive(spi, (uint8_t *)pBuffer, NumBytesToRead, 100);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6998      	ldr	r0, [r3, #24]
 800bf30:	88fa      	ldrh	r2, [r7, #6]
 800bf32:	2364      	movs	r3, #100	; 0x64
 800bf34:	68b9      	ldr	r1, [r7, #8]
 800bf36:	f005 f8bc 	bl	80110b2 <HAL_SPI_Receive>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6918      	ldr	r0, [r3, #16]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	8a9b      	ldrh	r3, [r3, #20]
 800bf46:	2201      	movs	r2, #1
 800bf48:	4619      	mov	r1, r3
 800bf4a:	f004 f8eb 	bl	8010124 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <_ZN5L6470I8shield_1E4ReadEPht+0x4a>
        	return COMPONENT_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	e000      	b.n	800bf5a <_ZN5L6470I8shield_1E4ReadEPht+0x4c>
        return COMPONENT_OK;
 800bf58:	2300      	movs	r3, #0
    }
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <_ZN5L6470I8shield_1E5WriteEPht>:
    status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite)
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b086      	sub	sp, #24
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	60f8      	str	r0, [r7, #12]
 800bf6a:	60b9      	str	r1, [r7, #8]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6918      	ldr	r0, [r3, #16]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	8a9b      	ldrh	r3, [r3, #20]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	f004 f8d2 	bl	8010124 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, (uint8_t *)pBuffer, NumBytesToWrite, 100);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6998      	ldr	r0, [r3, #24]
 800bf84:	88fa      	ldrh	r2, [r7, #6]
 800bf86:	2364      	movs	r3, #100	; 0x64
 800bf88:	68b9      	ldr	r1, [r7, #8]
 800bf8a:	f004 ff56 	bl	8010e3a <HAL_SPI_Transmit>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6918      	ldr	r0, [r3, #16]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	8a9b      	ldrh	r3, [r3, #20]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	f004 f8c1 	bl	8010124 <HAL_GPIO_WritePin>
        if( status != HAL_StatusTypeDef::HAL_OK)
 800bfa2:	7dfb      	ldrb	r3, [r7, #23]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d001      	beq.n	800bfac <_ZN5L6470I8shield_1E5WriteEPht+0x4a>
        	return COMPONENT_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e000      	b.n	800bfae <_ZN5L6470I8shield_1E5WriteEPht+0x4c>
        return COMPONENT_OK;
 800bfac:	2300      	movs	r3, #0
    }
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t>:
    status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b088      	sub	sp, #32
 800bfba:	af02      	add	r7, sp, #8
 800bfbc:	60f8      	str	r0, [r7, #12]
 800bfbe:	60b9      	str	r1, [r7, #8]
 800bfc0:	607a      	str	r2, [r7, #4]
 800bfc2:	807b      	strh	r3, [r7, #2]
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_RESET);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6918      	ldr	r0, [r3, #16]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	8a9b      	ldrh	r3, [r3, #20]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4619      	mov	r1, r3
 800bfd0:	f004 f8a8 	bl	8010124 <HAL_GPIO_WritePin>
        HAL_StatusTypeDef status_transmit = HAL_SPI_TransmitReceive(spi, pBufferToWrite, pBufferToRead , NumBytes, 1000);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6998      	ldr	r0, [r3, #24]
 800bfd8:	887b      	ldrh	r3, [r7, #2]
 800bfda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bfde:	9200      	str	r2, [sp, #0]
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	6879      	ldr	r1, [r7, #4]
 800bfe4:	f005 f976 	bl	80112d4 <HAL_SPI_TransmitReceive>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	75fb      	strb	r3, [r7, #23]
        if( status_transmit != HAL_StatusTypeDef::HAL_OK)
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d009      	beq.n	800c006 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x50>
        	HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6918      	ldr	r0, [r3, #16]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	8a9b      	ldrh	r3, [r3, #20]
 800bffa:	2201      	movs	r2, #1
 800bffc:	4619      	mov	r1, r3
 800bffe:	f004 f891 	bl	8010124 <HAL_GPIO_WritePin>
        	return COMPONENT_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e008      	b.n	800c018 <_ZN5L6470I8shield_1E9ReadWriteEPhS2_t+0x62>
        HAL_GPIO_WritePin(ssel_port, ssel_pin, GPIO_PinState::GPIO_PIN_SET);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6918      	ldr	r0, [r3, #16]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	8a9b      	ldrh	r3, [r3, #20]
 800c00e:	2201      	movs	r2, #1
 800c010:	4619      	mov	r1, r3
 800c012:	f004 f887 	bl	8010124 <HAL_GPIO_WritePin>
        return COMPONENT_OK;
 800c016:	2300      	movs	r3, #0
    }
 800c018:	4618      	mov	r0, r3
 800c01a:	3718      	adds	r7, #24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZN5L6470I8shield_1E23L6470_SPI_CommunicationEPhS2_tm>:
    void L6470_SPI_Communication(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
 800c02c:	807b      	strh	r3, [r7, #2]
        ReadWrite(pRxData, pTxData, Size);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800c036:	681c      	ldr	r4, [r3, #0]
 800c038:	887b      	ldrh	r3, [r7, #2]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	6879      	ldr	r1, [r7, #4]
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	47a0      	blx	r4
    }
 800c042:	bf00      	nop
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	bd90      	pop	{r4, r7, pc}
	...

0800c04c <_ZN13abstractL6470C1Ev>:

uint8_t shield_1::count = 0;
uint8_t shield_2::count = 0;
uint8_t shield_3::count = 0;

abstractL6470::abstractL6470()
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	4a04      	ldr	r2, [pc, #16]	; (800c068 <_ZN13abstractL6470C1Ev+0x1c>)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	601a      	str	r2, [r3, #0]
{

}
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4618      	mov	r0, r3
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	08017fcc 	.word	0x08017fcc

0800c06c <_ZN13abstractL6470D1Ev>:

abstractL6470::~abstractL6470()
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	4a04      	ldr	r2, [pc, #16]	; (800c088 <_ZN13abstractL6470D1Ev+0x1c>)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	601a      	str	r2, [r3, #0]
{

}
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4618      	mov	r0, r3
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr
 800c088:	08017fcc 	.word	0x08017fcc

0800c08c <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f805 	bl	800c0a4 <_ZNSt8__detail17_List_node_header7_M_initEv>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	605a      	str	r2, [r3, #4]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	609a      	str	r2, [r3, #8]
#endif
      }
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	1e5a      	subs	r2, r3, #1
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	605a      	str	r2, [r3, #4]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	bf0c      	ite	eq
 800c0e6:	2301      	moveq	r3, #1
 800c0e8:	2300      	movne	r3, #0
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d019      	beq.n	800c124 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3308      	adds	r3, #8
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	1e5a      	subs	r2, r3, #1
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	609a      	str	r2, [r3, #8]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	bf0c      	ite	eq
 800c10e:	2301      	moveq	r3, #1
 800c110:	2300      	movne	r3, #0
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b00      	cmp	r3, #0
 800c116:	d005      	beq.n	800c124 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	330c      	adds	r3, #12
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	4798      	blx	r3
        }
    }
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <_ZN11AbstractMsgD1Ev>:

class AbstractMsg
{
	public:
		AbstractMsg() = default;
		virtual ~AbstractMsg() {};
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	4a04      	ldr	r2, [pc, #16]	; (800c148 <_ZN11AbstractMsgD1Ev+0x1c>)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	08018288 	.word	0x08018288

0800c14c <_ZN11AbstractMsgD0Ev>:
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7ff ffe9 	bl	800c12c <_ZN11AbstractMsgD1Ev>
 800c15a:	2104      	movs	r1, #4
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f007 f91f 	bl	80133a0 <_ZdlPvj>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4618      	mov	r0, r3
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <_ZN11AbstractMsgC1Ev>:
		AbstractMsg() = default;
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	4a04      	ldr	r2, [pc, #16]	; (800c188 <_ZN11AbstractMsgC1Ev+0x1c>)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4618      	mov	r0, r3
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	08018288 	.word	0x08018288

0800c18c <_ZN11HeaderClassC1Ehh>:
{
	static const msg_type header_msg_type = header;
	static const uint8_t header_size = 3;
	public:
		HeaderClass() = delete;
		HeaderClass(uint8_t msg_id, uint8_t msg_len): _data(new uint8_t[HeaderClass::header_msg_type])
 800c18c:	b590      	push	{r4, r7, lr}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	70fb      	strb	r3, [r7, #3]
 800c198:	4613      	mov	r3, r2
 800c19a:	70bb      	strb	r3, [r7, #2]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7ff ffe4 	bl	800c16c <_ZN11AbstractMsgC1Ev>
 800c1a4:	4a19      	ldr	r2, [pc, #100]	; (800c20c <_ZN11HeaderClassC1Ehh+0x80>)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	601a      	str	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	1d1c      	adds	r4, r3, #4
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	f007 fd66 	bl	8013c80 <_Znaj>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	f000 fc64 	bl	800ca86 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
		{
			_data[0] = SerialID::MSG_START;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 fc8c 	bl	800cae2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	22fe      	movs	r2, #254	; 0xfe
 800c1ce:	701a      	strb	r2, [r3, #0]
			_data[1] = msg_id;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 fc83 	bl	800cae2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	78fb      	ldrb	r3, [r7, #3]
 800c1e0:	7013      	strb	r3, [r2, #0]
			_data[2] = msg_len;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	2102      	movs	r1, #2
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f000 fc7a 	bl	800cae2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	78bb      	ldrb	r3, [r7, #2]
 800c1f2:	7013      	strb	r3, [r2, #0]
		};
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	e005      	b.n	800c204 <_ZN11HeaderClassC1Ehh+0x78>
		HeaderClass(uint8_t msg_id, uint8_t msg_len): _data(new uint8_t[HeaderClass::header_msg_type])
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7ff ff96 	bl	800c12c <_ZN11AbstractMsgD1Ev>
 800c200:	f007 f966 	bl	80134d0 <__cxa_end_cleanup>
		};
 800c204:	4618      	mov	r0, r3
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd90      	pop	{r4, r7, pc}
 800c20c:	0801826c 	.word	0x0801826c

0800c210 <_ZNK11HeaderClass8get_dataEv>:
		~HeaderClass() = default;
		uint8_t* get_data() const noexcept override {return _data.get();};
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3304      	adds	r3, #4
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 fc71 	bl	800cb04 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800c222:	4603      	mov	r3, r0
 800c224:	4618      	mov	r0, r3
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <_ZNK11HeaderClass8get_typeEv>:
		msg_type get_type() const noexcept override {return HeaderClass::header_msg_type;}
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	2300      	movs	r3, #0
 800c236:	4618      	mov	r0, r3
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <_ZNK11HeaderClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return HeaderClass::header_size;}
 800c242:	b480      	push	{r7}
 800c244:	b083      	sub	sp, #12
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	2303      	movs	r3, #3
 800c24c:	4618      	mov	r0, r3
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <_ZN6AckMsgC1Ev>:
class AckMsg : public AbstractMsg
{
	static const msg_type incoming_msg_type = acknowledge;
	static const uint8_t incoming_msg_size = 3;
	public:
		AckMsg(): _data(new uint8_t[AckMsg::incoming_msg_size])
 800c258:	b590      	push	{r4, r7, lr}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff ff82 	bl	800c16c <_ZN11AbstractMsgC1Ev>
 800c268:	4a19      	ldr	r2, [pc, #100]	; (800c2d0 <_ZN6AckMsgC1Ev+0x78>)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	1d1c      	adds	r4, r3, #4
 800c272:	2003      	movs	r0, #3
 800c274:	f007 fd04 	bl	8013c80 <_Znaj>
 800c278:	4603      	mov	r3, r0
 800c27a:	4619      	mov	r1, r3
 800c27c:	4620      	mov	r0, r4
 800c27e:	f000 fc02 	bl	800ca86 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
		{
			_data[0] = SerialID::MSG_NO_ACK;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3304      	adds	r3, #4
 800c286:	2100      	movs	r1, #0
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 fc2a 	bl	800cae2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800c28e:	4603      	mov	r3, r0
 800c290:	22fc      	movs	r2, #252	; 0xfc
 800c292:	701a      	strb	r2, [r3, #0]
			_data[1] = SerialID::MSG_NO_ID;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3304      	adds	r3, #4
 800c298:	2101      	movs	r1, #1
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 fc21 	bl	800cae2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	22fb      	movs	r2, #251	; 0xfb
 800c2a4:	701a      	strb	r2, [r3, #0]
			_data[2] = SerialID::MSG_NO_SIZE;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	2102      	movs	r1, #2
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f000 fc18 	bl	800cae2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	22fa      	movs	r2, #250	; 0xfa
 800c2b6:	701a      	strb	r2, [r3, #0]
		};
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	e005      	b.n	800c2c8 <_ZN6AckMsgC1Ev+0x70>
		AckMsg(): _data(new uint8_t[AckMsg::incoming_msg_size])
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7ff ff34 	bl	800c12c <_ZN11AbstractMsgD1Ev>
 800c2c4:	f007 f904 	bl	80134d0 <__cxa_end_cleanup>
		};
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd90      	pop	{r4, r7, pc}
 800c2d0:	08018250 	.word	0x08018250

0800c2d4 <_ZNK6AckMsg8get_dataEv>:

			}
			return *this;

		}
		uint8_t* get_data() const noexcept override {return _data.get();}
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3304      	adds	r3, #4
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f000 fc0f 	bl	800cb04 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <_ZNK6AckMsg8get_typeEv>:
		msg_type get_type() const noexcept override {return AckMsg::incoming_msg_type;}
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	370c      	adds	r7, #12
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr

0800c306 <_ZNK6AckMsg13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return AckMsg::incoming_msg_size;}
 800c306:	b480      	push	{r7}
 800c308:	b083      	sub	sp, #12
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
 800c30e:	2303      	movs	r3, #3
 800c310:	4618      	mov	r0, r3
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fc0a 	bl	800cb3e <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4618      	mov	r0, r3
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 fbed 	bl	800cb1e <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implC1Ev>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4618      	mov	r0, r3
 800c348:	3708      	adds	r7, #8
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 800c34e:	b580      	push	{r7, lr}
 800c350:	b082      	sub	sp, #8
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff ffeb 	bl	800c334 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4618      	mov	r0, r3
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4618      	mov	r0, r3
 800c374:	f000 fbef 	bl	800cb56 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4618      	mov	r0, r3
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800c382:	b580      	push	{r7, lr}
 800c384:	b082      	sub	sp, #8
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	3304      	adds	r3, #4
 800c38e:	4618      	mov	r0, r3
 800c390:	f000 fbfe 	bl	800cb90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4618      	mov	r0, r3
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <_ZNSt10shared_ptrI11AbstractMsgED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7ff ffea 	bl	800c382 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>:


class MsgHandler
{
	public:
		MsgHandler(UART_HandleTypeDef *huart2) : huart(huart2),received_motor_speeds(false) ,ongoing_fetch(false),register_ongoing_fetch(false), rxHeader(SerialID::MSG_NO_ID,3)
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	601a      	str	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	711a      	strb	r2, [r3, #4]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	715a      	strb	r2, [r3, #5]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	719a      	strb	r2, [r3, #6]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	3308      	adds	r3, #8
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff ff3a 	bl	800c258 <_ZN6AckMsgC1Ev>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	3310      	adds	r3, #16
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7ff ff35 	bl	800c258 <_ZN6AckMsgC1Ev>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	3318      	adds	r3, #24
 800c3f2:	2203      	movs	r2, #3
 800c3f4:	21fb      	movs	r1, #251	; 0xfb
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff fec8 	bl	800c18c <_ZN11HeaderClassC1Ehh>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3324      	adds	r3, #36	; 0x24
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff ffa4 	bl	800c34e <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EEC1Ev>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	3330      	adds	r3, #48	; 0x30
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 fbb3 	bl	800cb76 <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>
		{
			motor_speeds = new float[4];
 800c410:	2010      	movs	r0, #16
 800c412:	f007 fc35 	bl	8013c80 <_Znaj>
 800c416:	4603      	mov	r3, r0
 800c418:	461a      	mov	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	639a      	str	r2, [r3, #56]	; 0x38
			launched = false;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	e01c      	b.n	800c464 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef+0xac>
		MsgHandler(UART_HandleTypeDef *huart2) : huart(huart2),received_motor_speeds(false) ,ongoing_fetch(false),register_ongoing_fetch(false), rxHeader(SerialID::MSG_NO_ID,3)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3330      	adds	r3, #48	; 0x30
 800c42e:	4618      	mov	r0, r3
 800c430:	f7ff ffb5 	bl	800c39e <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3324      	adds	r3, #36	; 0x24
 800c438:	4618      	mov	r0, r3
 800c43a:	f7ff ff95 	bl	800c368 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	3318      	adds	r3, #24
 800c442:	4618      	mov	r0, r3
 800c444:	f000 fde8 	bl	800d018 <_ZN11HeaderClassD1Ev>
 800c448:	e7ff      	b.n	800c44a <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef+0x92>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	3310      	adds	r3, #16
 800c44e:	4618      	mov	r0, r3
 800c450:	f000 fdba 	bl	800cfc8 <_ZN6AckMsgD1Ev>
 800c454:	e7ff      	b.n	800c456 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef+0x9e>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3308      	adds	r3, #8
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 fdb4 	bl	800cfc8 <_ZN6AckMsgD1Ev>
 800c460:	f007 f836 	bl	80134d0 <__cxa_end_cleanup>
		}
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <_ZN10MsgHandlerD1Ev>:
		~MsgHandler() { delete [] motor_speeds;}
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <_ZN10MsgHandlerD1Ev+0x1a>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c480:	4618      	mov	r0, r3
 800c482:	f006 ff8f 	bl	80133a4 <_ZdaPv>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	3330      	adds	r3, #48	; 0x30
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7ff ff87 	bl	800c39e <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3324      	adds	r3, #36	; 0x24
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff ff67 	bl	800c368 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	3318      	adds	r3, #24
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 fdba 	bl	800d018 <_ZN11HeaderClassD1Ev>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	3310      	adds	r3, #16
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f000 fd8d 	bl	800cfc8 <_ZN6AckMsgD1Ev>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3308      	adds	r3, #8
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fd88 	bl	800cfc8 <_ZN6AckMsgD1Ev>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3708      	adds	r7, #8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <_ZN10MsgHandler14launch_handlerEv>:
		void process_txclpt_callback();
		void send_print(const char* msg);
		void send_motor_speeds(float* motor_speeds);
		void process_timeout(void);
		bool get_received_motor_speeds(float* to_fill_motor_speeds);
		void launch_handler() { if( launched == false){launched=true; receive_data_header();}};
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b082      	sub	sp, #8
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d106      	bne.n	800c4e2 <_ZN10MsgHandler14launch_handlerEv+0x20>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f001 f9cb 	bl	800d878 <_ZN10MsgHandler19receive_data_headerEv>
 800c4e2:	bf00      	nop
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	0000      	movs	r0, r0
 800c4ec:	0000      	movs	r0, r0
	...

0800c4f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c4f0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800c4f4:	b087      	sub	sp, #28
 800c4f6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c4f8:	f003 fa3a 	bl	800f970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c4fc:	f000 f8b8 	bl	800c670 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c500:	f000 f9f4 	bl	800c8ec <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800c504:	f000 f9c2 	bl	800c88c <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 800c508:	f000 f964 	bl	800c7d4 <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 800c50c:	f000 f926 	bl	800c75c <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800c510:	484d      	ldr	r0, [pc, #308]	; (800c648 <main+0x158>)
 800c512:	f005 fa01 	bl	8011918 <HAL_TIM_Base_Start_IT>

  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800c516:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800c51a:	f007 fba0 	bl	8013c5e <_Znwj>
 800c51e:	4603      	mov	r3, r0
 800c520:	461c      	mov	r4, r3
 800c522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c526:	9305      	str	r3, [sp, #20]
 800c528:	4b48      	ldr	r3, [pc, #288]	; (800c64c <main+0x15c>)
 800c52a:	9304      	str	r3, [sp, #16]
 800c52c:	2310      	movs	r3, #16
 800c52e:	9303      	str	r3, [sp, #12]
 800c530:	4b47      	ldr	r3, [pc, #284]	; (800c650 <main+0x160>)
 800c532:	9302      	str	r3, [sp, #8]
 800c534:	2310      	movs	r3, #16
 800c536:	9301      	str	r3, [sp, #4]
 800c538:	4b44      	ldr	r3, [pc, #272]	; (800c64c <main+0x15c>)
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	2320      	movs	r3, #32
 800c53e:	4a44      	ldr	r2, [pc, #272]	; (800c650 <main+0x160>)
 800c540:	4944      	ldr	r1, [pc, #272]	; (800c654 <main+0x164>)
 800c542:	4620      	mov	r0, r4
 800c544:	f7f5 fe6e 	bl	8002224 <_ZN11BlocMoteursC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tS3_t>
  moteurs = new BlocMoteurs(&hspi1, reset_shield_1_GPIO_Port, reset_shield_1_Pin, ssel1_GPIO_Port, ssel1_Pin,
 800c548:	4b43      	ldr	r3, [pc, #268]	; (800c658 <main+0x168>)
 800c54a:	601c      	str	r4, [r3, #0]

  msg_handler.launch_handler();
 800c54c:	4843      	ldr	r0, [pc, #268]	; (800c65c <main+0x16c>)
 800c54e:	f7ff ffb8 	bl	800c4c2 <_ZN10MsgHandler14launch_handlerEv>
  moteurs->motors_on();
 800c552:	4b41      	ldr	r3, [pc, #260]	; (800c658 <main+0x168>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4618      	mov	r0, r3
 800c558:	f7f6 f861 	bl	800261e <_ZN11BlocMoteurs9motors_onEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timer_timeout_count = 0;
 800c55c:	4b40      	ldr	r3, [pc, #256]	; (800c660 <main+0x170>)
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
	  while(1)
	  {

			if( msg_handler.get_received_motor_speeds(input_motor_speeds) != true)
 800c562:	4940      	ldr	r1, [pc, #256]	; (800c664 <main+0x174>)
 800c564:	483d      	ldr	r0, [pc, #244]	; (800c65c <main+0x16c>)
 800c566:	f001 fac5 	bl	800daf4 <_ZN10MsgHandler25get_received_motor_speedsEPf>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	bf14      	ite	ne
 800c570:	2301      	movne	r3, #1
 800c572:	2300      	moveq	r3, #0
 800c574:	b2db      	uxtb	r3, r3
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00c      	beq.n	800c594 <main+0xa4>
			{
				if( timer_timeout_count >= MS_500)
 800c57a:	4b39      	ldr	r3, [pc, #228]	; (800c660 <main+0x170>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b63      	cmp	r3, #99	; 0x63
 800c580:	ddef      	ble.n	800c562 <main+0x72>
				{
					moteurs->motors_stop_soft_hiz();
 800c582:	4b35      	ldr	r3, [pc, #212]	; (800c658 <main+0x168>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4618      	mov	r0, r3
 800c588:	f7f6 f856 	bl	8002638 <_ZN11BlocMoteurs20motors_stop_soft_hizEv>
					timeout_moteurs = true;
 800c58c:	4b36      	ldr	r3, [pc, #216]	; (800c668 <main+0x178>)
 800c58e:	2201      	movs	r2, #1
 800c590:	701a      	strb	r2, [r3, #0]
					//msg_handler.send_print("Moteurs Timeout");
					break;
 800c592:	e007      	b.n	800c5a4 <main+0xb4>
				}
			}
			else
			{
				moteurs->motors_on();
 800c594:	4b30      	ldr	r3, [pc, #192]	; (800c658 <main+0x168>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4618      	mov	r0, r3
 800c59a:	f7f6 f840 	bl	800261e <_ZN11BlocMoteurs9motors_onEv>
				if(timeout_moteurs == true)
				{
					//msg_handler.send_print("Moteurs exited timeout");
				}
				timeout_moteurs = false;
 800c59e:	4b32      	ldr	r3, [pc, #200]	; (800c668 <main+0x178>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	701a      	strb	r2, [r3, #0]
				break;
			}

	  }
	  if(timeout_moteurs == false)
 800c5a4:	4b30      	ldr	r3, [pc, #192]	; (800c668 <main+0x178>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1d7      	bne.n	800c55c <main+0x6c>
	  {
		  moteurs->commande_vitesses_normalisees(input_motor_speeds[front_left], input_motor_speeds[front_right], input_motor_speeds[back_left], input_motor_speeds[back_right]);
 800c5ac:	4b2a      	ldr	r3, [pc, #168]	; (800c658 <main+0x168>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a2c      	ldr	r2, [pc, #176]	; (800c664 <main+0x174>)
 800c5b2:	edd2 7a00 	vldr	s15, [r2]
 800c5b6:	4a2b      	ldr	r2, [pc, #172]	; (800c664 <main+0x174>)
 800c5b8:	ed92 7a01 	vldr	s14, [r2, #4]
 800c5bc:	4a29      	ldr	r2, [pc, #164]	; (800c664 <main+0x174>)
 800c5be:	edd2 6a02 	vldr	s13, [r2, #8]
 800c5c2:	4a28      	ldr	r2, [pc, #160]	; (800c664 <main+0x174>)
 800c5c4:	ed92 6a03 	vldr	s12, [r2, #12]
 800c5c8:	eef0 1a46 	vmov.f32	s3, s12
 800c5cc:	eeb0 1a66 	vmov.f32	s2, s13
 800c5d0:	eef0 0a47 	vmov.f32	s1, s14
 800c5d4:	eeb0 0a67 	vmov.f32	s0, s15
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7f5 fec9 	bl	8002370 <_ZN11BlocMoteurs29commande_vitesses_normaliseesEffff>
		  if( fabs(input_motor_speeds[front_left]-0.5) < 0.01)
 800c5de:	4b21      	ldr	r3, [pc, #132]	; (800c664 <main+0x174>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7f3 ffe0 	bl	80005a8 <__aeabi_f2d>
 800c5e8:	f04f 0200 	mov.w	r2, #0
 800c5ec:	4b1f      	ldr	r3, [pc, #124]	; (800c66c <main+0x17c>)
 800c5ee:	f7f3 fe7b 	bl	80002e8 <__aeabi_dsub>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	4690      	mov	r8, r2
 800c5f8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800c5fc:	a310      	add	r3, pc, #64	; (adr r3, 800c640 <main+0x150>)
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	4640      	mov	r0, r8
 800c604:	4649      	mov	r1, r9
 800c606:	f7f4 fa99 	bl	8000b3c <__aeabi_dcmplt>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d005      	beq.n	800c61c <main+0x12c>
		  {
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PinState::GPIO_PIN_SET);
 800c610:	2201      	movs	r2, #1
 800c612:	2120      	movs	r1, #32
 800c614:	480d      	ldr	r0, [pc, #52]	; (800c64c <main+0x15c>)
 800c616:	f003 fd85 	bl	8010124 <HAL_GPIO_WritePin>
 800c61a:	e004      	b.n	800c626 <main+0x136>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PinState::GPIO_PIN_RESET);
 800c61c:	2200      	movs	r2, #0
 800c61e:	2120      	movs	r1, #32
 800c620:	480a      	ldr	r0, [pc, #40]	; (800c64c <main+0x15c>)
 800c622:	f003 fd7f 	bl	8010124 <HAL_GPIO_WritePin>
		  }
		  moteurs->mesure_vitesses_rad();
 800c626:	4b0c      	ldr	r3, [pc, #48]	; (800c658 <main+0x168>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7f6 f834 	bl	8002698 <_ZN11BlocMoteurs19mesure_vitesses_radEv>
	  timer_timeout_count = 0;
 800c630:	e794      	b.n	800c55c <main+0x6c>
		  	  	  	  	  	  	    reset_shield_2_GPIO_Port, reset_shield_2_Pin, ssel2_GPIO_Port, ssel2_Pin);
 800c632:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800c636:	4620      	mov	r0, r4
 800c638:	f006 feb2 	bl	80133a0 <_ZdlPvj>
 800c63c:	f006 ff48 	bl	80134d0 <__cxa_end_cleanup>
 800c640:	47ae147b 	.word	0x47ae147b
 800c644:	3f847ae1 	.word	0x3f847ae1
 800c648:	20000300 	.word	0x20000300
 800c64c:	40020000 	.word	0x40020000
 800c650:	40020400 	.word	0x40020400
 800c654:	200002a8 	.word	0x200002a8
 800c658:	200003e4 	.word	0x200003e4
 800c65c:	2000038c 	.word	0x2000038c
 800c660:	200003cc 	.word	0x200003cc
 800c664:	200003d0 	.word	0x200003d0
 800c668:	200003e0 	.word	0x200003e0
 800c66c:	3fe00000 	.word	0x3fe00000

0800c670 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b094      	sub	sp, #80	; 0x50
 800c674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c676:	f107 031c 	add.w	r3, r7, #28
 800c67a:	2234      	movs	r2, #52	; 0x34
 800c67c:	2100      	movs	r1, #0
 800c67e:	4618      	mov	r0, r3
 800c680:	f008 fb6d 	bl	8014d5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c684:	f107 0308 	add.w	r3, r7, #8
 800c688:	2200      	movs	r2, #0
 800c68a:	601a      	str	r2, [r3, #0]
 800c68c:	605a      	str	r2, [r3, #4]
 800c68e:	609a      	str	r2, [r3, #8]
 800c690:	60da      	str	r2, [r3, #12]
 800c692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c694:	2300      	movs	r3, #0
 800c696:	607b      	str	r3, [r7, #4]
 800c698:	4b2e      	ldr	r3, [pc, #184]	; (800c754 <_Z18SystemClock_Configv+0xe4>)
 800c69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c69c:	4a2d      	ldr	r2, [pc, #180]	; (800c754 <_Z18SystemClock_Configv+0xe4>)
 800c69e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6a2:	6413      	str	r3, [r2, #64]	; 0x40
 800c6a4:	4b2b      	ldr	r3, [pc, #172]	; (800c754 <_Z18SystemClock_Configv+0xe4>)
 800c6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6ac:	607b      	str	r3, [r7, #4]
 800c6ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	603b      	str	r3, [r7, #0]
 800c6b4:	4b28      	ldr	r3, [pc, #160]	; (800c758 <_Z18SystemClock_Configv+0xe8>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a27      	ldr	r2, [pc, #156]	; (800c758 <_Z18SystemClock_Configv+0xe8>)
 800c6ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	4b25      	ldr	r3, [pc, #148]	; (800c758 <_Z18SystemClock_Configv+0xe8>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c6c8:	603b      	str	r3, [r7, #0]
 800c6ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c6d4:	2310      	movs	r3, #16
 800c6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c6d8:	2302      	movs	r3, #2
 800c6da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 156;
 800c6e4:	239c      	movs	r3, #156	; 0x9c
 800c6e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c6f4:	f107 031c 	add.w	r3, r7, #28
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f004 f877 	bl	80107ec <HAL_RCC_OscConfig>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	bf14      	ite	ne
 800c704:	2301      	movne	r3, #1
 800c706:	2300      	moveq	r3, #0
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800c70e:	f000 f9a5 	bl	800ca5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c712:	230f      	movs	r3, #15
 800c714:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c716:	2302      	movs	r3, #2
 800c718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c71a:	2300      	movs	r3, #0
 800c71c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c71e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800c724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c728:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c72a:	f107 0308 	add.w	r3, r7, #8
 800c72e:	2105      	movs	r1, #5
 800c730:	4618      	mov	r0, r3
 800c732:	f003 fd11 	bl	8010158 <HAL_RCC_ClockConfig>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	bf14      	ite	ne
 800c73c:	2301      	movne	r3, #1
 800c73e:	2300      	moveq	r3, #0
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d001      	beq.n	800c74a <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800c746:	f000 f989 	bl	800ca5c <Error_Handler>
  }
}
 800c74a:	bf00      	nop
 800c74c:	3750      	adds	r7, #80	; 0x50
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	40023800 	.word	0x40023800
 800c758:	40007000 	.word	0x40007000

0800c75c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c760:	4b1a      	ldr	r3, [pc, #104]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c762:	4a1b      	ldr	r2, [pc, #108]	; (800c7d0 <_ZL12MX_SPI1_Initv+0x74>)
 800c764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c766:	4b19      	ldr	r3, [pc, #100]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c76c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c76e:	4b17      	ldr	r3, [pc, #92]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c770:	2200      	movs	r2, #0
 800c772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c774:	4b15      	ldr	r3, [pc, #84]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c776:	2200      	movs	r2, #0
 800c778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c77a:	4b14      	ldr	r3, [pc, #80]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c77c:	2202      	movs	r2, #2
 800c77e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c780:	4b12      	ldr	r3, [pc, #72]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c782:	2201      	movs	r2, #1
 800c784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c786:	4b11      	ldr	r3, [pc, #68]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c78c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c78e:	4b0f      	ldr	r3, [pc, #60]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c790:	2210      	movs	r2, #16
 800c792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c794:	4b0d      	ldr	r3, [pc, #52]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c796:	2200      	movs	r2, #0
 800c798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c79a:	4b0c      	ldr	r3, [pc, #48]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c7a0:	4b0a      	ldr	r3, [pc, #40]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c7a6:	4b09      	ldr	r3, [pc, #36]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c7a8:	220a      	movs	r2, #10
 800c7aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c7ac:	4807      	ldr	r0, [pc, #28]	; (800c7cc <_ZL12MX_SPI1_Initv+0x70>)
 800c7ae:	f004 fabb 	bl	8010d28 <HAL_SPI_Init>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	bf14      	ite	ne
 800c7b8:	2301      	movne	r3, #1
 800c7ba:	2300      	moveq	r3, #0
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d001      	beq.n	800c7c6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800c7c2:	f000 f94b 	bl	800ca5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c7c6:	bf00      	nop
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	200002a8 	.word	0x200002a8
 800c7d0:	40013000 	.word	0x40013000

0800c7d4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c7da:	f107 0308 	add.w	r3, r7, #8
 800c7de:	2200      	movs	r2, #0
 800c7e0:	601a      	str	r2, [r3, #0]
 800c7e2:	605a      	str	r2, [r3, #4]
 800c7e4:	609a      	str	r2, [r3, #8]
 800c7e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c7e8:	463b      	mov	r3, r7
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c7f0:	4b24      	ldr	r3, [pc, #144]	; (800c884 <_ZL12MX_TIM2_Initv+0xb0>)
 800c7f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c7f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c7f8:	4b22      	ldr	r3, [pc, #136]	; (800c884 <_ZL12MX_TIM2_Initv+0xb0>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c7fe:	4b21      	ldr	r3, [pc, #132]	; (800c884 <_ZL12MX_TIM2_Initv+0xb0>)
 800c800:	2200      	movs	r2, #0
 800c802:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 390000;
 800c804:	4b1f      	ldr	r3, [pc, #124]	; (800c884 <_ZL12MX_TIM2_Initv+0xb0>)
 800c806:	4a20      	ldr	r2, [pc, #128]	; (800c888 <_ZL12MX_TIM2_Initv+0xb4>)
 800c808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c80a:	4b1e      	ldr	r3, [pc, #120]	; (800c884 <_ZL12MX_TIM2_Initv+0xb0>)
 800c80c:	2200      	movs	r2, #0
 800c80e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c810:	4b1c      	ldr	r3, [pc, #112]	; (800c884 <_ZL12MX_TIM2_Initv+0xb0>)
 800c812:	2280      	movs	r2, #128	; 0x80
 800c814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c816:	481b      	ldr	r0, [pc, #108]	; (800c884 <_ZL12MX_TIM2_Initv+0xb0>)
 800c818:	f005 f82e 	bl	8011878 <HAL_TIM_Base_Init>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	bf14      	ite	ne
 800c822:	2301      	movne	r3, #1
 800c824:	2300      	moveq	r3, #0
 800c826:	b2db      	uxtb	r3, r3
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d001      	beq.n	800c830 <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 800c82c:	f000 f916 	bl	800ca5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c836:	f107 0308 	add.w	r3, r7, #8
 800c83a:	4619      	mov	r1, r3
 800c83c:	4811      	ldr	r0, [pc, #68]	; (800c884 <_ZL12MX_TIM2_Initv+0xb0>)
 800c83e:	f005 f9e3 	bl	8011c08 <HAL_TIM_ConfigClockSource>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	bf14      	ite	ne
 800c848:	2301      	movne	r3, #1
 800c84a:	2300      	moveq	r3, #0
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d001      	beq.n	800c856 <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 800c852:	f000 f903 	bl	800ca5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c856:	2300      	movs	r3, #0
 800c858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c85a:	2300      	movs	r3, #0
 800c85c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c85e:	463b      	mov	r3, r7
 800c860:	4619      	mov	r1, r3
 800c862:	4808      	ldr	r0, [pc, #32]	; (800c884 <_ZL12MX_TIM2_Initv+0xb0>)
 800c864:	f005 fbfa 	bl	801205c <HAL_TIMEx_MasterConfigSynchronization>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	bf14      	ite	ne
 800c86e:	2301      	movne	r3, #1
 800c870:	2300      	moveq	r3, #0
 800c872:	b2db      	uxtb	r3, r3
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 800c878:	f000 f8f0 	bl	800ca5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800c87c:	bf00      	nop
 800c87e:	3718      	adds	r7, #24
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	20000300 	.word	0x20000300
 800c888:	0005f370 	.word	0x0005f370

0800c88c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c890:	4b13      	ldr	r3, [pc, #76]	; (800c8e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c892:	4a14      	ldr	r2, [pc, #80]	; (800c8e4 <_ZL19MX_USART2_UART_Initv+0x58>)
 800c894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1152000;
 800c896:	4b12      	ldr	r3, [pc, #72]	; (800c8e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c898:	4a13      	ldr	r2, [pc, #76]	; (800c8e8 <_ZL19MX_USART2_UART_Initv+0x5c>)
 800c89a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c89c:	4b10      	ldr	r3, [pc, #64]	; (800c8e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c8a2:	4b0f      	ldr	r3, [pc, #60]	; (800c8e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c8a8:	4b0d      	ldr	r3, [pc, #52]	; (800c8e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c8ae:	4b0c      	ldr	r3, [pc, #48]	; (800c8e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c8b0:	220c      	movs	r2, #12
 800c8b2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c8b4:	4b0a      	ldr	r3, [pc, #40]	; (800c8e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c8ba:	4b09      	ldr	r3, [pc, #36]	; (800c8e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c8c0:	4807      	ldr	r0, [pc, #28]	; (800c8e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800c8c2:	f005 fc5b 	bl	801217c <HAL_UART_Init>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	bf14      	ite	ne
 800c8cc:	2301      	movne	r3, #1
 800c8ce:	2300      	moveq	r3, #0
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d001      	beq.n	800c8da <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 800c8d6:	f000 f8c1 	bl	800ca5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c8da:	bf00      	nop
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	20000348 	.word	0x20000348
 800c8e4:	40004400 	.word	0x40004400
 800c8e8:	00119400 	.word	0x00119400

0800c8ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08a      	sub	sp, #40	; 0x28
 800c8f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8f2:	f107 0314 	add.w	r3, r7, #20
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	605a      	str	r2, [r3, #4]
 800c8fc:	609a      	str	r2, [r3, #8]
 800c8fe:	60da      	str	r2, [r3, #12]
 800c900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c902:	2300      	movs	r3, #0
 800c904:	613b      	str	r3, [r7, #16]
 800c906:	4b38      	ldr	r3, [pc, #224]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90a:	4a37      	ldr	r2, [pc, #220]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c90c:	f043 0304 	orr.w	r3, r3, #4
 800c910:	6313      	str	r3, [r2, #48]	; 0x30
 800c912:	4b35      	ldr	r3, [pc, #212]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c916:	f003 0304 	and.w	r3, r3, #4
 800c91a:	613b      	str	r3, [r7, #16]
 800c91c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c91e:	2300      	movs	r3, #0
 800c920:	60fb      	str	r3, [r7, #12]
 800c922:	4b31      	ldr	r3, [pc, #196]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c926:	4a30      	ldr	r2, [pc, #192]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c92c:	6313      	str	r3, [r2, #48]	; 0x30
 800c92e:	4b2e      	ldr	r3, [pc, #184]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c93a:	2300      	movs	r3, #0
 800c93c:	60bb      	str	r3, [r7, #8]
 800c93e:	4b2a      	ldr	r3, [pc, #168]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c942:	4a29      	ldr	r2, [pc, #164]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c944:	f043 0301 	orr.w	r3, r3, #1
 800c948:	6313      	str	r3, [r2, #48]	; 0x30
 800c94a:	4b27      	ldr	r3, [pc, #156]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	60bb      	str	r3, [r7, #8]
 800c954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c956:	2300      	movs	r3, #0
 800c958:	607b      	str	r3, [r7, #4]
 800c95a:	4b23      	ldr	r3, [pc, #140]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95e:	4a22      	ldr	r2, [pc, #136]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c960:	f043 0302 	orr.w	r3, r3, #2
 800c964:	6313      	str	r3, [r2, #48]	; 0x30
 800c966:	4b20      	ldr	r3, [pc, #128]	; (800c9e8 <_ZL12MX_GPIO_Initv+0xfc>)
 800c968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c96a:	f003 0302 	and.w	r3, r3, #2
 800c96e:	607b      	str	r3, [r7, #4]
 800c970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ssel1_Pin|LD2_Pin|ssel2_Pin, GPIO_PIN_RESET);
 800c972:	2200      	movs	r2, #0
 800c974:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800c978:	481c      	ldr	r0, [pc, #112]	; (800c9ec <_ZL12MX_GPIO_Initv+0x100>)
 800c97a:	f003 fbd3 	bl	8010124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, reset_shield_2_Pin|reset_shield_1_Pin, GPIO_PIN_RESET);
 800c97e:	2200      	movs	r2, #0
 800c980:	2130      	movs	r1, #48	; 0x30
 800c982:	481b      	ldr	r0, [pc, #108]	; (800c9f0 <_ZL12MX_GPIO_Initv+0x104>)
 800c984:	f003 fbce 	bl	8010124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800c988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c98c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c98e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800c992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c994:	2300      	movs	r3, #0
 800c996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c998:	f107 0314 	add.w	r3, r7, #20
 800c99c:	4619      	mov	r1, r3
 800c99e:	4815      	ldr	r0, [pc, #84]	; (800c9f4 <_ZL12MX_GPIO_Initv+0x108>)
 800c9a0:	f003 fa2c 	bl	800fdfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ssel1_Pin LD2_Pin ssel2_Pin */
  GPIO_InitStruct.Pin = ssel1_Pin|LD2_Pin|ssel2_Pin;
 800c9a4:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800c9a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9b6:	f107 0314 	add.w	r3, r7, #20
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	480b      	ldr	r0, [pc, #44]	; (800c9ec <_ZL12MX_GPIO_Initv+0x100>)
 800c9be:	f003 fa1d 	bl	800fdfc <HAL_GPIO_Init>

  /*Configure GPIO pins : reset_shield_2_Pin reset_shield_1_Pin */
  GPIO_InitStruct.Pin = reset_shield_2_Pin|reset_shield_1_Pin;
 800c9c2:	2330      	movs	r3, #48	; 0x30
 800c9c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9d2:	f107 0314 	add.w	r3, r7, #20
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	4805      	ldr	r0, [pc, #20]	; (800c9f0 <_ZL12MX_GPIO_Initv+0x104>)
 800c9da:	f003 fa0f 	bl	800fdfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800c9de:	bf00      	nop
 800c9e0:	3728      	adds	r7, #40	; 0x28
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	40023800 	.word	0x40023800
 800c9ec:	40020000 	.word	0x40020000
 800c9f0:	40020400 	.word	0x40020400
 800c9f4:	40020800 	.word	0x40020800

0800c9f8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a05      	ldr	r2, [pc, #20]	; (800ca18 <HAL_UART_TxCpltCallback+0x20>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d102      	bne.n	800ca0e <HAL_UART_TxCpltCallback+0x16>
	{
		msg_handler.process_txclpt_callback();
 800ca08:	4804      	ldr	r0, [pc, #16]	; (800ca1c <HAL_UART_TxCpltCallback+0x24>)
 800ca0a:	f000 fc08 	bl	800d21e <_ZN10MsgHandler23process_txclpt_callbackEv>
	}


}
 800ca0e:	bf00      	nop
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	20000348 	.word	0x20000348
 800ca1c:	2000038c 	.word	0x2000038c

0800ca20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
	if( huart == &huart2)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a05      	ldr	r2, [pc, #20]	; (800ca40 <HAL_UART_RxCpltCallback+0x20>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d102      	bne.n	800ca36 <HAL_UART_RxCpltCallback+0x16>
	{
		msg_handler.process_rxclpt_callback();
 800ca30:	4804      	ldr	r0, [pc, #16]	; (800ca44 <HAL_UART_RxCpltCallback+0x24>)
 800ca32:	f000 fc7b 	bl	800d32c <_ZN10MsgHandler23process_rxclpt_callbackEv>
	}

}
 800ca36:	bf00      	nop
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	20000348 	.word	0x20000348
 800ca44:	2000038c 	.word	0x2000038c

0800ca48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
		  timer_timeout_count++;
	  }
	  msg_handler.process_timeout();
	  */
  }
}
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ca60:	b672      	cpsid	i
}
 800ca62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ca64:	e7fe      	b.n	800ca64 <Error_Handler+0x8>

0800ca66 <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b082      	sub	sp, #8
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	6039      	str	r1, [r7, #0]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	4611      	mov	r1, r2
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 f89c 	bl	800cbb4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b082      	sub	sp, #8
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6839      	ldr	r1, [r7, #0]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7ff ffe6 	bl	800ca66 <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>
        { }
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 f894 	bl	800cbdc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800cab4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d009      	beq.n	800cad2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f899 	bl	800cbf6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE11get_deleterEv>
 800cac4:	4602      	mov	r2, r0
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4619      	mov	r1, r3
 800cacc:	4610      	mov	r0, r2
 800cace:	f000 f89f 	bl	800cc10 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>
	__ptr = pointer();
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]
      }
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:

      // Observers.

      /// Access an element of owned array.
      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b082      	sub	sp, #8
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_assert(get() != pointer());
 800caec:	2300      	movs	r3, #0
 800caee:	2b00      	cmp	r3, #0
	return get()[__i];
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f807 	bl	800cb04 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800caf6:	4602      	mov	r2, r0
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	4413      	add	r3, r2
      }
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:

      /// Return the stored pointer.
      pointer
      get() const noexcept
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f000 f88d 	bl	800cc2e <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800cb14:	4603      	mov	r3, r0
 800cb16:	4618      	mov	r0, r3
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b082      	sub	sp, #8
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 f88f 	bl	800cc4a <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7ff faac 	bl	800c08c <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4618      	mov	r0, r3
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b082      	sub	sp, #8
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 f88b 	bl	800cc62 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3708      	adds	r7, #8
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b082      	sub	sp, #8
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 f88a 	bl	800cc78 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7ff fbd8 	bl	800c31c <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE10_List_implD1Ev>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <_ZNSt10shared_ptrI11AbstractMsgEC1Ev>:
#endif
      /**
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 f89f 	bl	800ccc4 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d004      	beq.n	800cbaa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7ff fa91 	bl	800c0cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4618      	mov	r0, r3
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 f890 	bl	800cce6 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f808 	bl	800cbdc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	6013      	str	r3, [r2, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3708      	adds	r7, #8
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 f88a 	bl	800cd00 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cbec:	4603      	mov	r3, r0
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b082      	sub	sp, #8
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 f88a 	bl	800cd1a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>
 800cc06:	4603      	mov	r3, r0
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>:
	operator()(_Up* __ptr) const
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d002      	beq.n	800cc26 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_+0x16>
 800cc20:	6838      	ldr	r0, [r7, #0]
 800cc22:	f006 fbbf 	bl	80133a4 <_ZdaPv>
	}
 800cc26:	bf00      	nop
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b082      	sub	sp, #8
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f000 f87b 	bl	800cd34 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <_ZNSaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b082      	sub	sp, #8
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 f87b 	bl	800cd4e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800cc62:	b480      	push	{r7}
 800cc64:	b083      	sub	sp, #12
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 800cc86:	e014      	b.n	800ccb2 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv+0x3a>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 800cc92:	6938      	ldr	r0, [r7, #16]
 800cc94:	f000 f866 	bl	800cd64 <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 800cc98:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f870 	bl	800cd80 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 800cca0:	4603      	mov	r3, r0
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 f876 	bl	800cd96 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 800ccaa:	6939      	ldr	r1, [r7, #16]
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 f87f 	bl	800cdb0 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      while (__cur != &_M_impl._M_node)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d1e6      	bne.n	800cc88 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_clearEv+0x10>
	}
    }
 800ccba:	bf00      	nop
 800ccbc:	bf00      	nop
 800ccbe:	3718      	adds	r7, #24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 f879 	bl	800cdce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b082      	sub	sp, #8
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f000 f87a 	bl	800cdea <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f000 f87d 	bl	800ce0a <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800cd10:	4603      	mov	r3, r0
 800cd12:	4618      	mov	r0, r3
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b082      	sub	sp, #8
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 f87c 	bl	800ce22 <_ZSt3getILj1EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f000 f87b 	bl	800ce3a <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800cd44:	4603      	mov	r3, r0
 800cd46:	4618      	mov	r0, r3
 800cd48:	3708      	adds	r7, #8
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800cd4e:	b480      	push	{r7}
 800cd50:	b083      	sub	sp, #12
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	3308      	adds	r3, #8
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 f86e 	bl	800ce52 <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE6_M_ptrEv>
 800cd76:	4603      	mov	r3, r0
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	370c      	adds	r7, #12
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 800cda0:	6839      	ldr	r1, [r7, #0]
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f861 	bl	800ce6a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE7destroyIS4_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	6839      	ldr	r1, [r7, #0]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 f85e 	bl	800ce82 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>
 800cdc6:	bf00      	nop
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800cdce:	b480      	push	{r7}
 800cdd0:	b083      	sub	sp, #12
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	601a      	str	r2, [r3, #0]
      { }
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4618      	mov	r0, r3
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b082      	sub	sp, #8
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f854 	bl	800cea0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f000 f85c 	bl	800ceb8 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4618      	mov	r0, r3
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b082      	sub	sp, #8
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 f85e 	bl	800ced4 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <_ZSt3getILj1EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b082      	sub	sp, #8
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f85f 	bl	800ceee <_ZSt12__get_helperILj1ESt14default_deleteIA_hEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800ce30:	4603      	mov	r3, r0
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b082      	sub	sp, #8
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f85f 	bl	800cf06 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b082      	sub	sp, #8
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f860 	bl	800cf20 <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE7_M_addrEv>
 800ce60:	4603      	mov	r3, r0
 800ce62:	4618      	mov	r0, r3
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE7destroyIS4_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800ce74:	6838      	ldr	r0, [r7, #0]
 800ce76:	f7ff fa92 	bl	800c39e <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800ce7a:	bf00      	nop
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b084      	sub	sp, #16
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	60f8      	str	r0, [r7, #12]
 800ce8a:	60b9      	str	r1, [r7, #8]
 800ce8c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	68b9      	ldr	r1, [r7, #8]
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f000 f84f 	bl	800cf36 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE10deallocateEPS5_j>
 800ce98:	bf00      	nop
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      _Tuple_impl()
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f854 	bl	800cf56 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4618      	mov	r0, r3
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4618      	mov	r0, r3
 800cee0:	f000 f844 	bl	800cf6c <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 800cee4:	4603      	mov	r3, r0
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <_ZSt12__get_helperILj1ESt14default_deleteIA_hEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f843 	bl	800cf82 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEE7_M_headERS3_>
 800cefc:	4603      	mov	r3, r0
 800cefe:	4618      	mov	r0, r3
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b082      	sub	sp, #8
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 f842 	bl	800cf9a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800cf16:	4603      	mov	r3, r0
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <_ZN9__gnu_cxx16__aligned_membufISt10shared_ptrI11AbstractMsgEE7_M_addrEv>:
      _M_addr() noexcept
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b084      	sub	sp, #16
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	60b9      	str	r1, [r7, #8]
 800cf40:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	011b      	lsls	r3, r3, #4
 800cf46:	4619      	mov	r1, r3
 800cf48:	68b8      	ldr	r0, [r7, #8]
 800cf4a:	f006 fa29 	bl	80133a0 <_ZdlPvj>
      }
 800cf4e:	bf00      	nop
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 800cf56:	b480      	push	{r7}
 800cf58:	b083      	sub	sp, #12
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4618      	mov	r0, r3
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4618      	mov	r0, r3
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b082      	sub	sp, #8
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 f810 	bl	800cfb0 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EE7_M_headERS3_>
 800cf90:	4603      	mov	r3, r0
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800cf9a:	b480      	push	{r7}
 800cf9c:	b083      	sub	sp, #12
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	370c      	adds	r7, #12
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
	...

0800cfc8 <_ZN6AckMsgD1Ev>:
		~AckMsg() = default;
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	4a08      	ldr	r2, [pc, #32]	; (800cff4 <_ZN6AckMsgD1Ev+0x2c>)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3304      	adds	r3, #4
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7ff fd62 	bl	800caa4 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7ff f8a2 	bl	800c12c <_ZN11AbstractMsgD1Ev>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	08018250 	.word	0x08018250

0800cff8 <_ZN6AckMsgD0Ev>:
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7ff ffe1 	bl	800cfc8 <_ZN6AckMsgD1Ev>
 800d006:	2108      	movs	r1, #8
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f006 f9c9 	bl	80133a0 <_ZdlPvj>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4618      	mov	r0, r3
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <_ZN11HeaderClassD1Ev>:
		~HeaderClass() = default;
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	4a08      	ldr	r2, [pc, #32]	; (800d044 <_ZN11HeaderClassD1Ev+0x2c>)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	601a      	str	r2, [r3, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	3304      	adds	r3, #4
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff fd3a 	bl	800caa4 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4618      	mov	r0, r3
 800d034:	f7ff f87a 	bl	800c12c <_ZN11AbstractMsgD1Ev>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4618      	mov	r0, r3
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	0801826c 	.word	0x0801826c

0800d048 <_ZN11HeaderClassD0Ev>:
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7ff ffe1 	bl	800d018 <_ZN11HeaderClassD1Ev>
 800d056:	2108      	movs	r1, #8
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f006 f9a1 	bl	80133a0 <_ZdlPvj>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4618      	mov	r0, r3
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d108      	bne.n	800d08a <_Z41__static_initialization_and_destruction_0ii+0x22>
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d07e:	4293      	cmp	r3, r2
 800d080:	d103      	bne.n	800d08a <_Z41__static_initialization_and_destruction_0ii+0x22>
MsgHandler msg_handler(&huart2);
 800d082:	4909      	ldr	r1, [pc, #36]	; (800d0a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800d084:	4809      	ldr	r0, [pc, #36]	; (800d0ac <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800d086:	f7ff f997 	bl	800c3b8 <_ZN10MsgHandlerC1EP20__UART_HandleTypeDef>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d107      	bne.n	800d0a0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d096:	4293      	cmp	r3, r2
 800d098:	d102      	bne.n	800d0a0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800d09a:	4804      	ldr	r0, [pc, #16]	; (800d0ac <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800d09c:	f7ff f9e6 	bl	800c46c <_ZN10MsgHandlerD1Ev>
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	20000348 	.word	0x20000348
 800d0ac:	2000038c 	.word	0x2000038c

0800d0b0 <_GLOBAL__sub_I_hspi1>:
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	f7ff ffd5 	bl	800d068 <_Z41__static_initialization_and_destruction_0ii>
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <_GLOBAL__sub_D_hspi1>:
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	f7ff ffcd 	bl	800d068 <_Z41__static_initialization_and_destruction_0ii>
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <_ZdlPvS_>:
_GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
 800d0f2:	bf00      	nop
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
	...

0800d100 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 800d100:	b480      	push	{r7}
 800d102:	af00      	add	r7, sp, #0
      return reinterpret_cast<const type_info&>(__tag);
 800d104:	4b02      	ldr	r3, [pc, #8]	; (800d110 <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 800d106:	4618      	mov	r0, r3
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	080182e4 	.word	0x080182e4

0800d114 <_ZN12PayloadClassD1Ev>:
		~PayloadClass()
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
		{
 800d11c:	4a09      	ldr	r2, [pc, #36]	; (800d144 <_ZN12PayloadClassD1Ev+0x30>)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	601a      	str	r2, [r3, #0]
			delete _data;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d003      	beq.n	800d132 <_ZN12PayloadClassD1Ev+0x1e>
 800d12a:	2101      	movs	r1, #1
 800d12c:	4618      	mov	r0, r3
 800d12e:	f006 f937 	bl	80133a0 <_ZdlPvj>
		{
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4618      	mov	r0, r3
 800d136:	f7fe fff9 	bl	800c12c <_ZN11AbstractMsgD1Ev>
		}
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4618      	mov	r0, r3
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	08018330 	.word	0x08018330

0800d148 <_ZN12PayloadClassD0Ev>:
		~PayloadClass()
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
		}
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7ff ffdf 	bl	800d114 <_ZN12PayloadClassD1Ev>
 800d156:	210c      	movs	r1, #12
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f006 f921 	bl	80133a0 <_ZdlPvj>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4618      	mov	r0, r3
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <_ZNK12PayloadClass8get_dataEv>:
		uint8_t* get_data() const noexcept override {return _data;}
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	4618      	mov	r0, r3
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr

0800d180 <_ZNK12PayloadClass8get_typeEv>:
		msg_type get_type() const noexcept override {return PayloadClass::payload_msg_type;}
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	2301      	movs	r3, #1
 800d18a:	4618      	mov	r0, r3
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <_ZNK12PayloadClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return _data_size;}
 800d196:	b480      	push	{r7}
 800d198:	b083      	sub	sp, #12
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	791b      	ldrb	r3, [r3, #4]
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	370c      	adds	r7, #12
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <_ZN6AckMsgaSERKS_>:
		AckMsg& operator=(const AckMsg& to_copy)
 800d1ae:	b590      	push	{r4, r7, lr}
 800d1b0:	b085      	sub	sp, #20
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
 800d1b6:	6039      	str	r1, [r7, #0]
			if (this != &to_copy)
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d029      	beq.n	800d214 <_ZN6AckMsgaSERKS_+0x66>
				if(to_copy._data)
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 fd2e 	bl	800dc26 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEcvbEv>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d01b      	beq.n	800d208 <_ZN6AckMsgaSERKS_+0x5a>
					for(int i = 0; i< AckMsg::incoming_msg_size; i ++)
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	e014      	b.n	800d200 <_ZN6AckMsgaSERKS_+0x52>
						_data[i] = to_copy._data[i];
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	3304      	adds	r3, #4
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	4611      	mov	r1, r2
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7ff fc7f 	bl	800cae2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	4611      	mov	r1, r2
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7ff fc77 	bl	800cae2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	7822      	ldrb	r2, [r4, #0]
 800d1f8:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i< AckMsg::incoming_msg_size; i ++)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	60fb      	str	r3, [r7, #12]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b02      	cmp	r3, #2
 800d204:	dde7      	ble.n	800d1d6 <_ZN6AckMsgaSERKS_+0x28>
 800d206:	e005      	b.n	800d214 <_ZN6AckMsgaSERKS_+0x66>
					_data.reset();
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	3304      	adds	r3, #4
 800d20c:	2100      	movs	r1, #0
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 fd1a 	bl	800dc48 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetEDn>
			return *this;
 800d214:	687b      	ldr	r3, [r7, #4]
		}
 800d216:	4618      	mov	r0, r3
 800d218:	3714      	adds	r7, #20
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd90      	pop	{r4, r7, pc}

0800d21e <_ZN10MsgHandler23process_txclpt_callbackEv>:
#include "msg_handler.hpp"

void MsgHandler::process_txclpt_callback()
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b082      	sub	sp, #8
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]

	if ( !tx_msg_list.empty() && ongoing_fetch == false)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	3324      	adds	r3, #36	; 0x24
 800d22a:	4618      	mov	r0, r3
 800d22c:	f000 fd19 	bl	800dc62 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800d230:	4603      	mov	r3, r0
 800d232:	f083 0301 	eor.w	r3, r3, #1
 800d236:	b2db      	uxtb	r3, r3
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d005      	beq.n	800d248 <_ZN10MsgHandler23process_txclpt_callbackEv+0x2a>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	795b      	ldrb	r3, [r3, #5]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <_ZN10MsgHandler23process_txclpt_callbackEv+0x2a>
 800d244:	2301      	movs	r3, #1
 800d246:	e000      	b.n	800d24a <_ZN10MsgHandler23process_txclpt_callbackEv+0x2c>
 800d248:	2300      	movs	r3, #0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d002      	beq.n	800d254 <_ZN10MsgHandler23process_txclpt_callbackEv+0x36>
	{
		check_tx_list();
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 f804 	bl	800d25c <_ZN10MsgHandler13check_tx_listEv>
	}

}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <_ZN10MsgHandler13check_tx_listEv>:

void MsgHandler::check_tx_list()
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	if( tx_msg_list.front()->get_type() == msg_type::payload)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3324      	adds	r3, #36	; 0x24
 800d268:	4618      	mov	r0, r3
 800d26a:	f000 fd0c 	bl	800dc86 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d26e:	4603      	mov	r3, r0
 800d270:	4618      	mov	r0, r3
 800d272:	f000 fd1b 	bl	800dcac <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d276:	4603      	mov	r3, r0
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	320c      	adds	r2, #12
 800d27c:	6812      	ldr	r2, [r2, #0]
 800d27e:	4618      	mov	r0, r3
 800d280:	4790      	blx	r2
 800d282:	4603      	mov	r3, r0
 800d284:	2b01      	cmp	r3, #1
 800d286:	bf0c      	ite	eq
 800d288:	2301      	moveq	r3, #1
 800d28a:	2300      	movne	r3, #0
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d02e      	beq.n	800d2f0 <_ZN10MsgHandler13check_tx_listEv+0x94>
	{
		tx_msg_list.pop_front();
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	3324      	adds	r3, #36	; 0x24
 800d296:	4618      	mov	r0, r3
 800d298:	f000 fd14 	bl	800dcc4 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>
		if ( !tx_msg_list.empty())
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	3324      	adds	r3, #36	; 0x24
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f000 fcde 	bl	800dc62 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	f083 0301 	eor.w	r3, r3, #1
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d01a      	beq.n	800d2e8 <_ZN10MsgHandler13check_tx_listEv+0x8c>
		{
			if(tx_msg_list.front()->get_type() == msg_type::header)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	3324      	adds	r3, #36	; 0x24
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 fce5 	bl	800dc86 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 fcf4 	bl	800dcac <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	320c      	adds	r2, #12
 800d2ca:	6812      	ldr	r2, [r2, #0]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	4790      	blx	r2
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	bf0c      	ite	eq
 800d2d6:	2301      	moveq	r3, #1
 800d2d8:	2300      	movne	r3, #0
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d021      	beq.n	800d324 <_ZN10MsgHandler13check_tx_listEv+0xc8>
			{
				transmit_front_msg();
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fa73 	bl	800d7cc <_ZN10MsgHandler18transmit_front_msgEv>
	}
	else if ( tx_msg_list.front()->get_type() == msg_type::header)
	{
		receive_ack();
	}
}
 800d2e6:	e01d      	b.n	800d324 <_ZN10MsgHandler13check_tx_listEv+0xc8>
			receive_data_header();
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fac5 	bl	800d878 <_ZN10MsgHandler19receive_data_headerEv>
}
 800d2ee:	e019      	b.n	800d324 <_ZN10MsgHandler13check_tx_listEv+0xc8>
	else if ( tx_msg_list.front()->get_type() == msg_type::header)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3324      	adds	r3, #36	; 0x24
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f000 fcc6 	bl	800dc86 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f000 fcd5 	bl	800dcac <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d302:	4603      	mov	r3, r0
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	320c      	adds	r2, #12
 800d308:	6812      	ldr	r2, [r2, #0]
 800d30a:	4618      	mov	r0, r3
 800d30c:	4790      	blx	r2
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	bf0c      	ite	eq
 800d314:	2301      	moveq	r3, #1
 800d316:	2300      	movne	r3, #0
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d002      	beq.n	800d324 <_ZN10MsgHandler13check_tx_listEv+0xc8>
		receive_ack();
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fa89 	bl	800d836 <_ZN10MsgHandler11receive_ackEv>
}
 800d324:	bf00      	nop
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <_ZN10MsgHandler23process_rxclpt_callbackEv>:


void MsgHandler::process_rxclpt_callback()
{
 800d32c:	b590      	push	{r4, r7, lr}
 800d32e:	b089      	sub	sp, #36	; 0x24
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PinState::GPIO_PIN_RESET);
	if ( !tx_msg_list.empty() && ongoing_fetch == false)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	3324      	adds	r3, #36	; 0x24
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 fc92 	bl	800dc62 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800d33e:	4603      	mov	r3, r0
 800d340:	f083 0301 	eor.w	r3, r3, #1
 800d344:	b2db      	uxtb	r3, r3
 800d346:	2b00      	cmp	r3, #0
 800d348:	d005      	beq.n	800d356 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	795b      	ldrb	r3, [r3, #5]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a>
 800d352:	2301      	movs	r3, #1
 800d354:	e000      	b.n	800d358 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2c>
 800d356:	2300      	movs	r3, #0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	f000 8091 	beq.w	800d480 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x154>
	{
		if(rxSingleack.get_data()[0] == SerialID::MSG_ACK)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3308      	adds	r3, #8
 800d362:	4618      	mov	r0, r3
 800d364:	f7fe ffb6 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800d368:	4603      	mov	r3, r0
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	2bff      	cmp	r3, #255	; 0xff
 800d36e:	bf0c      	ite	eq
 800d370:	2301      	moveq	r3, #1
 800d372:	2300      	movne	r3, #0
 800d374:	b2db      	uxtb	r3, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	f000 815d 	beq.w	800d636 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		{
			if( tx_msg_list.front()->get_type() == msg_type::header
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	3324      	adds	r3, #36	; 0x24
 800d380:	4618      	mov	r0, r3
 800d382:	f000 fc80 	bl	800dc86 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d386:	4603      	mov	r3, r0
 800d388:	4618      	mov	r0, r3
 800d38a:	f000 fc8f 	bl	800dcac <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d38e:	4603      	mov	r3, r0
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	320c      	adds	r2, #12
 800d394:	6812      	ldr	r2, [r2, #0]
 800d396:	4618      	mov	r0, r3
 800d398:	4790      	blx	r2
 800d39a:	4603      	mov	r3, r0
				&& tx_msg_list.front()->get_data()[1] == rxSingleack.get_data()[1]
				&& tx_msg_list.front()->get_data()[2] == rxSingleack.get_data()[2]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d139      	bne.n	800d414 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
				&& tx_msg_list.front()->get_data()[1] == rxSingleack.get_data()[1]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	3324      	adds	r3, #36	; 0x24
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f000 fc6e 	bl	800dc86 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f000 fc7d 	bl	800dcac <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	3208      	adds	r2, #8
 800d3b8:	6812      	ldr	r2, [r2, #0]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	4790      	blx	r2
 800d3be:	4603      	mov	r3, r0
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	781c      	ldrb	r4, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3308      	adds	r3, #8
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe ff83 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	429c      	cmp	r4, r3
 800d3d6:	d11d      	bne.n	800d414 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
				&& tx_msg_list.front()->get_data()[2] == rxSingleack.get_data()[2]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	3324      	adds	r3, #36	; 0x24
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 fc52 	bl	800dc86 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 fc61 	bl	800dcac <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	3208      	adds	r2, #8
 800d3f0:	6812      	ldr	r2, [r2, #0]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	4790      	blx	r2
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	3302      	adds	r3, #2
 800d3fa:	781c      	ldrb	r4, [r3, #0]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	3308      	adds	r3, #8
 800d400:	4618      	mov	r0, r3
 800d402:	f7fe ff67 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800d406:	4603      	mov	r3, r0
 800d408:	3302      	adds	r3, #2
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	429c      	cmp	r4, r3
 800d40e:	d101      	bne.n	800d414 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xe8>
 800d410:	2301      	movs	r3, #1
 800d412:	e000      	b.n	800d416 <_ZN10MsgHandler23process_rxclpt_callbackEv+0xea>
 800d414:	2300      	movs	r3, #0
			if( tx_msg_list.front()->get_type() == msg_type::header
 800d416:	2b00      	cmp	r3, #0
 800d418:	d01e      	beq.n	800d458 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x12c>
			)
			{
				tx_msg_list.pop_front();
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	3324      	adds	r3, #36	; 0x24
 800d41e:	4618      	mov	r0, r3
 800d420:	f000 fc50 	bl	800dcc4 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>
				if( tx_msg_list.front()->get_type() == msg_type::payload)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	3324      	adds	r3, #36	; 0x24
 800d428:	4618      	mov	r0, r3
 800d42a:	f000 fc2c 	bl	800dc86 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d42e:	4603      	mov	r3, r0
 800d430:	4618      	mov	r0, r3
 800d432:	f000 fc3b 	bl	800dcac <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d436:	4603      	mov	r3, r0
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	320c      	adds	r2, #12
 800d43c:	6812      	ldr	r2, [r2, #0]
 800d43e:	4618      	mov	r0, r3
 800d440:	4790      	blx	r2
 800d442:	4603      	mov	r3, r0
 800d444:	2b01      	cmp	r3, #1
 800d446:	bf0c      	ite	eq
 800d448:	2301      	moveq	r3, #1
 800d44a:	2300      	movne	r3, #0
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d002      	beq.n	800d458 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x12c>
				{
					transmit_front_msg();
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f9ba 	bl	800d7cc <_ZN10MsgHandler18transmit_front_msgEv>
				}

			}
			rxSingleack = AckMsg();
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f103 0408 	add.w	r4, r3, #8
 800d45e:	f107 030c 	add.w	r3, r7, #12
 800d462:	4618      	mov	r0, r3
 800d464:	f7fe fef8 	bl	800c258 <_ZN6AckMsgC1Ev>
 800d468:	f107 030c 	add.w	r3, r7, #12
 800d46c:	4619      	mov	r1, r3
 800d46e:	4620      	mov	r0, r4
 800d470:	f7ff fe9d 	bl	800d1ae <_ZN6AckMsgaSERKS_>
 800d474:	f107 030c 	add.w	r3, r7, #12
 800d478:	4618      	mov	r0, r3
 800d47a:	f7ff fda5 	bl	800cfc8 <_ZN6AckMsgD1Ev>
			return;
 800d47e:	e0da      	b.n	800d636 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		}
	}
	else if (rxHeader.get_data()[0] == SerialID::MSG_START && ongoing_fetch == false)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	3318      	adds	r3, #24
 800d484:	4618      	mov	r0, r3
 800d486:	f7fe fec3 	bl	800c210 <_ZNK11HeaderClass8get_dataEv>
 800d48a:	4603      	mov	r3, r0
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	2bfe      	cmp	r3, #254	; 0xfe
 800d490:	d105      	bne.n	800d49e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x172>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	795b      	ldrb	r3, [r3, #5]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x172>
 800d49a:	2301      	movs	r3, #1
 800d49c:	e000      	b.n	800d4a0 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x174>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d05a      	beq.n	800d55a <_ZN10MsgHandler23process_rxclpt_callbackEv+0x22e>
	{
		uint8_t msg_id = rxHeader.get_data()[1];
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3318      	adds	r3, #24
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7fe feb1 	bl	800c210 <_ZNK11HeaderClass8get_dataEv>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	785b      	ldrb	r3, [r3, #1]
 800d4b2:	777b      	strb	r3, [r7, #29]
		uint8_t msg_len = rxHeader.get_data()[2];
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	3318      	adds	r3, #24
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7fe fea9 	bl	800c210 <_ZNK11HeaderClass8get_dataEv>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	789b      	ldrb	r3, [r3, #2]
 800d4c2:	773b      	strb	r3, [r7, #28]
		switch (msg_id) {
 800d4c4:	7f7b      	ldrb	r3, [r7, #29]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d002      	beq.n	800d4d0 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1a4>
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d009      	beq.n	800d4e2 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1b6>
					ongoing_fetch = true;
					ack_msg_motor_speeds();
				}
				break;
			default:
				break;
 800d4ce:	e012      	b.n	800d4f6 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1ca>
				ongoing_fetch = true;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	715a      	strb	r2, [r3, #5]
				ack_msg_print(msg_len);
 800d4d6:	7f3b      	ldrb	r3, [r7, #28]
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 fa6c 	bl	800d9b8 <_ZN10MsgHandler13ack_msg_printEh>
				break;
 800d4e0:	e009      	b.n	800d4f6 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1ca>
				if(msg_len == 4*sizeof(float))
 800d4e2:	7f3b      	ldrb	r3, [r7, #28]
 800d4e4:	2b10      	cmp	r3, #16
 800d4e6:	d105      	bne.n	800d4f4 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x1c8>
					ongoing_fetch = true;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	715a      	strb	r2, [r3, #5]
					ack_msg_motor_speeds();
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f9e3 	bl	800d8ba <_ZN10MsgHandler20ack_msg_motor_speedsEv>
				break;
 800d4f4:	bf00      	nop
		}
		rxHeader.get_data()[0] = SerialID::MSG_NO_START;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	3318      	adds	r3, #24
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fe fe88 	bl	800c210 <_ZNK11HeaderClass8get_dataEv>
 800d500:	4603      	mov	r3, r0
 800d502:	22fd      	movs	r2, #253	; 0xfd
 800d504:	701a      	strb	r2, [r3, #0]
		rxHeader.get_data()[1] = SerialID::MSG_NO_ID;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	3318      	adds	r3, #24
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fe fe80 	bl	800c210 <_ZNK11HeaderClass8get_dataEv>
 800d510:	4603      	mov	r3, r0
 800d512:	3301      	adds	r3, #1
 800d514:	22fb      	movs	r2, #251	; 0xfb
 800d516:	701a      	strb	r2, [r3, #0]
		rxHeader.get_data()[2] = SerialID::MSG_NO_SIZE;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	3318      	adds	r3, #24
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7fe fe77 	bl	800c210 <_ZNK11HeaderClass8get_dataEv>
 800d522:	4603      	mov	r3, r0
 800d524:	3302      	adds	r3, #2
 800d526:	22fa      	movs	r2, #250	; 0xfa
 800d528:	701a      	strb	r2, [r3, #0]
		if( ongoing_fetch == false)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	795b      	ldrb	r3, [r3, #5]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f040 8081 	bne.w	800d636 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		{
			if( !tx_msg_list.empty() )
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	3324      	adds	r3, #36	; 0x24
 800d538:	4618      	mov	r0, r3
 800d53a:	f000 fb92 	bl	800dc62 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800d53e:	4603      	mov	r3, r0
 800d540:	f083 0301 	eor.w	r3, r3, #1
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	d003      	beq.n	800d552 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x226>
			{
				check_tx_list();
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7ff fe86 	bl	800d25c <_ZN10MsgHandler13check_tx_listEv>
 800d550:	e071      	b.n	800d636 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
			}
			else
			{
				receive_data_header();
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f990 	bl	800d878 <_ZN10MsgHandler19receive_data_headerEv>
 800d558:	e06d      	b.n	800d636 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
			}
		}
	}
	else if ( ongoing_fetch == true)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	795b      	ldrb	r3, [r3, #5]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d15a      	bne.n	800d618 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2ec>
	{
		uint8_t msg_id = txSingleack.get_data()[1];
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	3310      	adds	r3, #16
 800d566:	4618      	mov	r0, r3
 800d568:	f7fe feb4 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800d56c:	4603      	mov	r3, r0
 800d56e:	785b      	ldrb	r3, [r3, #1]
 800d570:	77fb      	strb	r3, [r7, #31]
		uint8_t msg_len = txSingleack.get_data()[2];
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3310      	adds	r3, #16
 800d576:	4618      	mov	r0, r3
 800d578:	f7fe feac 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800d57c:	4603      	mov	r3, r0
 800d57e:	789b      	ldrb	r3, [r3, #2]
 800d580:	77bb      	strb	r3, [r7, #30]
		switch (msg_id) {
 800d582:	7ffb      	ldrb	r3, [r7, #31]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <_ZN10MsgHandler23process_rxclpt_callbackEv+0x262>
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d010      	beq.n	800d5ae <_ZN10MsgHandler23process_rxclpt_callbackEv+0x282>
				break;
			case SerialID::MSG_MOTOR_SPEEDS:
				process_received_msg_motor_speeds(incoming_data->get_data());
				break;
			default:
				break;
 800d58c:	e01e      	b.n	800d5cc <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a0>
				process_received_msg_print(incoming_data->get_data(),msg_len);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6a1a      	ldr	r2, [r3, #32]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6a1b      	ldr	r3, [r3, #32]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	3308      	adds	r3, #8
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4610      	mov	r0, r2
 800d59e:	4798      	blx	r3
 800d5a0:	4601      	mov	r1, r0
 800d5a2:	7fbb      	ldrb	r3, [r7, #30]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fad6 	bl	800db58 <_ZN10MsgHandler26process_received_msg_printEPhh>
				break;
 800d5ac:	e00e      	b.n	800d5cc <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2a0>
				process_received_msg_motor_speeds(incoming_data->get_data());
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a1a      	ldr	r2, [r3, #32]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a1b      	ldr	r3, [r3, #32]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	3308      	adds	r3, #8
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4610      	mov	r0, r2
 800d5be:	4798      	blx	r3
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 fa82 	bl	800dace <_ZN10MsgHandler33process_received_msg_motor_speedsEPh>
				break;
 800d5ca:	bf00      	nop
		}
		ongoing_fetch = false;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	715a      	strb	r2, [r3, #5]
		txSingleack = AckMsg();
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f103 0410 	add.w	r4, r3, #16
 800d5d8:	f107 0314 	add.w	r3, r7, #20
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fe fe3b 	bl	800c258 <_ZN6AckMsgC1Ev>
 800d5e2:	f107 0314 	add.w	r3, r7, #20
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f7ff fde0 	bl	800d1ae <_ZN6AckMsgaSERKS_>
 800d5ee:	f107 0314 	add.w	r3, r7, #20
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7ff fce8 	bl	800cfc8 <_ZN6AckMsgD1Ev>
		if( tx_msg_list.empty())
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3324      	adds	r3, #36	; 0x24
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f000 fb30 	bl	800dc62 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d003      	beq.n	800d610 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x2e4>
		{
			receive_data_header();
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f935 	bl	800d878 <_ZN10MsgHandler19receive_data_headerEv>
 800d60e:	e012      	b.n	800d636 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		}
		else
		{
			check_tx_list();
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7ff fe23 	bl	800d25c <_ZN10MsgHandler13check_tx_listEv>
 800d616:	e00e      	b.n	800d636 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		}

	}
	else
	{
		if( tx_msg_list.empty())
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3324      	adds	r3, #36	; 0x24
 800d61c:	4618      	mov	r0, r3
 800d61e:	f000 fb20 	bl	800dc62 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d003      	beq.n	800d630 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x304>
		{
			receive_data_header();
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f925 	bl	800d878 <_ZN10MsgHandler19receive_data_headerEv>
 800d62e:	e002      	b.n	800d636 <_ZN10MsgHandler23process_rxclpt_callbackEv+0x30a>
		}
		else
		{
			check_tx_list();
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7ff fe13 	bl	800d25c <_ZN10MsgHandler13check_tx_listEv>
		}
	}


}
 800d636:	3724      	adds	r7, #36	; 0x24
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd90      	pop	{r4, r7, pc}

0800d63c <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	3304      	adds	r3, #4
 800d648:	4618      	mov	r0, r3
 800d64a:	f7ff faa1 	bl	800cb90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4618      	mov	r0, r3
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <_ZNSt10shared_ptrI11HeaderClassED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff ffea 	bl	800d63c <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800d672:	b580      	push	{r7, lr}
 800d674:	b082      	sub	sp, #8
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	3304      	adds	r3, #4
 800d67e:	4618      	mov	r0, r3
 800d680:	f7ff fa86 	bl	800cb90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4618      	mov	r0, r3
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <_ZNSt10shared_ptrI12PayloadClassED1Ev>:
 800d68e:	b580      	push	{r7, lr}
 800d690:	b082      	sub	sp, #8
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	4618      	mov	r0, r3
 800d69a:	f7ff ffea 	bl	800d672 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <_ZN10MsgHandler10send_printEPKc>:


void MsgHandler::send_print(const char* msg)
{
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b08d      	sub	sp, #52	; 0x34
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
	if( strlen(msg) < UINT8_MAX)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7f2 fe0b 	bl	80002d0 <strlen>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2bfe      	cmp	r3, #254	; 0xfe
 800d6be:	d87e      	bhi.n	800d7be <_ZN10MsgHandler10send_printEPKc+0x116>
	{
		tx_msg_list.push_back(std::make_shared<HeaderClass>(SerialID::MSG_PRINT,strlen(msg)));
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7f2 fe01 	bl	80002d0 <strlen>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	61bb      	str	r3, [r7, #24]
 800d6d2:	f107 0310 	add.w	r3, r7, #16
 800d6d6:	f107 0218 	add.w	r2, r7, #24
 800d6da:	493b      	ldr	r1, [pc, #236]	; (800d7c8 <_ZN10MsgHandler10send_printEPKc+0x120>)
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f000 fb01 	bl	800dce4 <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_>
 800d6e2:	f107 0210 	add.w	r2, r7, #16
 800d6e6:	f107 0308 	add.w	r3, r7, #8
 800d6ea:	4611      	mov	r1, r2
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f000 fb24 	bl	800dd3a <_ZNSt10shared_ptrI11AbstractMsgEC1I11HeaderClassvEEOS_IT_E>
 800d6f2:	f107 0308 	add.w	r3, r7, #8
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f000 fb31 	bl	800dd60 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>
 800d6fe:	f107 0308 	add.w	r3, r7, #8
 800d702:	4618      	mov	r0, r3
 800d704:	f7fe fe4b 	bl	800c39e <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800d708:	f107 0310 	add.w	r3, r7, #16
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7ff ffa3 	bl	800d658 <_ZNSt10shared_ptrI11HeaderClassED1Ev>
		tx_msg_list.push_back(std::make_shared<PayloadClass>(msg,strlen(msg)));
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7f2 fdd8 	bl	80002d0 <strlen>
 800d720:	4603      	mov	r3, r0
 800d722:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d728:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d72c:	4639      	mov	r1, r7
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 fb2c 	bl	800dd8c <_ZSt11make_sharedI12PayloadClassJRPKcjEESt10shared_ptrIT_EDpOT0_>
 800d734:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d738:	f107 031c 	add.w	r3, r7, #28
 800d73c:	4611      	mov	r1, r2
 800d73e:	4618      	mov	r0, r3
 800d740:	f000 fb4f 	bl	800dde2 <_ZNSt10shared_ptrI11AbstractMsgEC1I12PayloadClassvEEOS_IT_E>
 800d744:	f107 031c 	add.w	r3, r7, #28
 800d748:	4619      	mov	r1, r3
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 fb08 	bl	800dd60 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>
 800d750:	f107 031c 	add.w	r3, r7, #28
 800d754:	4618      	mov	r0, r3
 800d756:	f7fe fe22 	bl	800c39e <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800d75a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d75e:	4618      	mov	r0, r3
 800d760:	f7ff ff95 	bl	800d68e <_ZNSt10shared_ptrI12PayloadClassED1Ev>
		if( tx_msg_list.size() == 2 && ongoing_fetch == false)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	3324      	adds	r3, #36	; 0x24
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 fb4d 	bl	800de08 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE4sizeEv>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b02      	cmp	r3, #2
 800d772:	d105      	bne.n	800d780 <_ZN10MsgHandler10send_printEPKc+0xd8>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	795b      	ldrb	r3, [r3, #5]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d101      	bne.n	800d780 <_ZN10MsgHandler10send_printEPKc+0xd8>
 800d77c:	2301      	movs	r3, #1
 800d77e:	e000      	b.n	800d782 <_ZN10MsgHandler10send_printEPKc+0xda>
 800d780:	2300      	movs	r3, #0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d01b      	beq.n	800d7be <_ZN10MsgHandler10send_printEPKc+0x116>
		{
			transmit_front_msg();
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f820 	bl	800d7cc <_ZN10MsgHandler18transmit_front_msgEv>
		}
	}

}
 800d78c:	e017      	b.n	800d7be <_ZN10MsgHandler10send_printEPKc+0x116>
		tx_msg_list.push_back(std::make_shared<HeaderClass>(SerialID::MSG_PRINT,strlen(msg)));
 800d78e:	f107 0308 	add.w	r3, r7, #8
 800d792:	4618      	mov	r0, r3
 800d794:	f7fe fe03 	bl	800c39e <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800d798:	f107 0310 	add.w	r3, r7, #16
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7ff ff5b 	bl	800d658 <_ZNSt10shared_ptrI11HeaderClassED1Ev>
 800d7a2:	f005 fe95 	bl	80134d0 <__cxa_end_cleanup>
		tx_msg_list.push_back(std::make_shared<PayloadClass>(msg,strlen(msg)));
 800d7a6:	f107 031c 	add.w	r3, r7, #28
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fe fdf7 	bl	800c39e <_ZNSt10shared_ptrI11AbstractMsgED1Ev>
 800d7b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7ff ff6a 	bl	800d68e <_ZNSt10shared_ptrI12PayloadClassED1Ev>
 800d7ba:	f005 fe89 	bl	80134d0 <__cxa_end_cleanup>
}
 800d7be:	bf00      	nop
 800d7c0:	3734      	adds	r7, #52	; 0x34
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd90      	pop	{r4, r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	080182ec 	.word	0x080182ec

0800d7cc <_ZN10MsgHandler18transmit_front_msgEv>:
	}

}

void MsgHandler::transmit_front_msg()
{
 800d7cc:	b5b0      	push	{r4, r5, r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Abort(huart);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f004 fd91 	bl	8012300 <HAL_UART_Abort>
	HAL_UART_Transmit_IT(huart, (uint8_t*)tx_msg_list.front()->get_data(), tx_msg_list.front()->get_data_size());
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681c      	ldr	r4, [r3, #0]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	3324      	adds	r3, #36	; 0x24
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f000 fa4d 	bl	800dc86 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f000 fa5c 	bl	800dcac <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	3208      	adds	r2, #8
 800d7fa:	6812      	ldr	r2, [r2, #0]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	4790      	blx	r2
 800d800:	4605      	mov	r5, r0
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	3324      	adds	r3, #36	; 0x24
 800d806:	4618      	mov	r0, r3
 800d808:	f000 fa3d 	bl	800dc86 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>
 800d80c:	4603      	mov	r3, r0
 800d80e:	4618      	mov	r0, r3
 800d810:	f000 fa4c 	bl	800dcac <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800d814:	4603      	mov	r3, r0
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	3210      	adds	r2, #16
 800d81a:	6812      	ldr	r2, [r2, #0]
 800d81c:	4618      	mov	r0, r3
 800d81e:	4790      	blx	r2
 800d820:	4603      	mov	r3, r0
 800d822:	b29b      	uxth	r3, r3
 800d824:	461a      	mov	r2, r3
 800d826:	4629      	mov	r1, r5
 800d828:	4620      	mov	r0, r4
 800d82a:	f004 fcf4 	bl	8012216 <HAL_UART_Transmit_IT>
}
 800d82e:	bf00      	nop
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bdb0      	pop	{r4, r5, r7, pc}

0800d836 <_ZN10MsgHandler11receive_ackEv>:

void MsgHandler::receive_ack()
{
 800d836:	b5b0      	push	{r4, r5, r7, lr}
 800d838:	b082      	sub	sp, #8
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
	HAL_UART_Abort(huart);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4618      	mov	r0, r3
 800d844:	f004 fd5c 	bl	8012300 <HAL_UART_Abort>
	HAL_UART_Receive_IT(huart, rxSingleack.get_data(), rxSingleack.get_data_size());
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681c      	ldr	r4, [r3, #0]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3308      	adds	r3, #8
 800d850:	4618      	mov	r0, r3
 800d852:	f7fe fd3f 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800d856:	4605      	mov	r5, r0
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	3308      	adds	r3, #8
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fe fd52 	bl	800c306 <_ZNK6AckMsg13get_data_sizeEv>
 800d862:	4603      	mov	r3, r0
 800d864:	b29b      	uxth	r3, r3
 800d866:	461a      	mov	r2, r3
 800d868:	4629      	mov	r1, r5
 800d86a:	4620      	mov	r0, r4
 800d86c:	f004 fd18 	bl	80122a0 <HAL_UART_Receive_IT>
}
 800d870:	bf00      	nop
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bdb0      	pop	{r4, r5, r7, pc}

0800d878 <_ZN10MsgHandler19receive_data_headerEv>:
void MsgHandler::receive_data_header()
{
 800d878:	b5b0      	push	{r4, r5, r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PinState::GPIO_PIN_SET);
	HAL_UART_Abort(huart);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4618      	mov	r0, r3
 800d886:	f004 fd3b 	bl	8012300 <HAL_UART_Abort>
	HAL_UART_Receive_IT(huart, rxHeader.get_data(), rxHeader.get_data_size());
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681c      	ldr	r4, [r3, #0]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	3318      	adds	r3, #24
 800d892:	4618      	mov	r0, r3
 800d894:	f7fe fcbc 	bl	800c210 <_ZNK11HeaderClass8get_dataEv>
 800d898:	4605      	mov	r5, r0
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	3318      	adds	r3, #24
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fe fccf 	bl	800c242 <_ZNK11HeaderClass13get_data_sizeEv>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	f004 fcf7 	bl	80122a0 <HAL_UART_Receive_IT>
}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bdb0      	pop	{r4, r5, r7, pc}

0800d8ba <_ZN10MsgHandler20ack_msg_motor_speedsEv>:
void MsgHandler::ack_msg_motor_speeds()
{
 800d8ba:	b5b0      	push	{r4, r5, r7, lr}
 800d8bc:	b086      	sub	sp, #24
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
	float  dummy_data_1[4] = {0.0,0.0,0.0,0.0};
 800d8c2:	f107 0308 	add.w	r3, r7, #8
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	601a      	str	r2, [r3, #0]
 800d8ca:	605a      	str	r2, [r3, #4]
 800d8cc:	609a      	str	r2, [r3, #8]
 800d8ce:	60da      	str	r2, [r3, #12]
	if( incoming_data != NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6a1b      	ldr	r3, [r3, #32]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d008      	beq.n	800d8ea <_ZN10MsgHandler20ack_msg_motor_speedsEv+0x30>
	{
		delete incoming_data;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a1b      	ldr	r3, [r3, #32]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d004      	beq.n	800d8ea <_ZN10MsgHandler20ack_msg_motor_speedsEv+0x30>
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	3204      	adds	r2, #4
 800d8e4:	6812      	ldr	r2, [r2, #0]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	4790      	blx	r2
	}
	incoming_data = new PayloadClass(&dummy_data_1,4*sizeof(float));
 800d8ea:	200c      	movs	r0, #12
 800d8ec:	f006 f9b7 	bl	8013c5e <_Znwj>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	461c      	mov	r4, r3
 800d8f4:	f107 0308 	add.w	r3, r7, #8
 800d8f8:	2210      	movs	r2, #16
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f000 fa8f 	bl	800de20 <_ZN12PayloadClassC1IA4_fEEPT_h>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	621c      	str	r4, [r3, #32]
	txSingleack.get_data()[0] = SerialID::MSG_ACK;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	3310      	adds	r3, #16
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fe fce2 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800d910:	4603      	mov	r3, r0
 800d912:	22ff      	movs	r2, #255	; 0xff
 800d914:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[1] = SerialID::MSG_MOTOR_SPEEDS;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	3310      	adds	r3, #16
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fe fcda 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800d920:	4603      	mov	r3, r0
 800d922:	3301      	adds	r3, #1
 800d924:	2201      	movs	r2, #1
 800d926:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[2] = 4*sizeof(float);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	3310      	adds	r3, #16
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fe fcd1 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800d932:	4603      	mov	r3, r0
 800d934:	3302      	adds	r3, #2
 800d936:	2210      	movs	r2, #16
 800d938:	701a      	strb	r2, [r3, #0]
	HAL_UART_Abort(huart);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4618      	mov	r0, r3
 800d940:	f004 fcde 	bl	8012300 <HAL_UART_Abort>
	HAL_UART_Receive_IT(huart, incoming_data->get_data(), incoming_data->get_data_size());
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681c      	ldr	r4, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6a1a      	ldr	r2, [r3, #32]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a1b      	ldr	r3, [r3, #32]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	3308      	adds	r3, #8
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4610      	mov	r0, r2
 800d958:	4798      	blx	r3
 800d95a:	4605      	mov	r5, r0
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6a1a      	ldr	r2, [r3, #32]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a1b      	ldr	r3, [r3, #32]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	3310      	adds	r3, #16
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4610      	mov	r0, r2
 800d96c:	4798      	blx	r3
 800d96e:	4603      	mov	r3, r0
 800d970:	b29b      	uxth	r3, r3
 800d972:	461a      	mov	r2, r3
 800d974:	4629      	mov	r1, r5
 800d976:	4620      	mov	r0, r4
 800d978:	f004 fc92 	bl	80122a0 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(huart, txSingleack.get_data(), txSingleack.get_data_size());
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681c      	ldr	r4, [r3, #0]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	3310      	adds	r3, #16
 800d984:	4618      	mov	r0, r3
 800d986:	f7fe fca5 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800d98a:	4605      	mov	r5, r0
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3310      	adds	r3, #16
 800d990:	4618      	mov	r0, r3
 800d992:	f7fe fcb8 	bl	800c306 <_ZNK6AckMsg13get_data_sizeEv>
 800d996:	4603      	mov	r3, r0
 800d998:	b29b      	uxth	r3, r3
 800d99a:	461a      	mov	r2, r3
 800d99c:	4629      	mov	r1, r5
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f004 fc39 	bl	8012216 <HAL_UART_Transmit_IT>

}
 800d9a4:	e005      	b.n	800d9b2 <_ZN10MsgHandler20ack_msg_motor_speedsEv+0xf8>
	incoming_data = new PayloadClass(&dummy_data_1,4*sizeof(float));
 800d9a6:	210c      	movs	r1, #12
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f005 fcf9 	bl	80133a0 <_ZdlPvj>
 800d9ae:	f005 fd8f 	bl	80134d0 <__cxa_end_cleanup>
}
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bdb0      	pop	{r4, r5, r7, pc}

0800d9b8 <_ZN10MsgHandler13ack_msg_printEh>:
void MsgHandler::ack_msg_print(uint8_t msg_len)
{
 800d9b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9bc:	b087      	sub	sp, #28
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	70fb      	strb	r3, [r7, #3]
	txSingleack.get_data()[1] = SerialID::MSG_PRINT;
	txSingleack.get_data()[2] = msg_len;
	HAL_UART_Abort(huart);
	HAL_UART_Transmit_IT(huart, txSingleack.get_data(), txSingleack.get_data_size());

}
 800d9c6:	466b      	mov	r3, sp
 800d9c8:	461e      	mov	r6, r3
	char dummy_print_msg[msg_len];
 800d9ca:	78f9      	ldrb	r1, [r7, #3]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	617b      	str	r3, [r7, #20]
 800d9d2:	b2cb      	uxtb	r3, r1
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	4698      	mov	r8, r3
 800d9d8:	4691      	mov	r9, r2
 800d9da:	f04f 0200 	mov.w	r2, #0
 800d9de:	f04f 0300 	mov.w	r3, #0
 800d9e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d9e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d9ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d9ee:	b2cb      	uxtb	r3, r1
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	461c      	mov	r4, r3
 800d9f4:	4615      	mov	r5, r2
 800d9f6:	f04f 0200 	mov.w	r2, #0
 800d9fa:	f04f 0300 	mov.w	r3, #0
 800d9fe:	00eb      	lsls	r3, r5, #3
 800da00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800da04:	00e2      	lsls	r2, r4, #3
 800da06:	460b      	mov	r3, r1
 800da08:	3307      	adds	r3, #7
 800da0a:	08db      	lsrs	r3, r3, #3
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	ebad 0d03 	sub.w	sp, sp, r3
 800da12:	466b      	mov	r3, sp
 800da14:	3300      	adds	r3, #0
 800da16:	613b      	str	r3, [r7, #16]
	char *dummy_print_msg_ptr = dummy_print_msg;
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	60fb      	str	r3, [r7, #12]
	if( incoming_data != NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6a1b      	ldr	r3, [r3, #32]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d008      	beq.n	800da36 <_ZN10MsgHandler13ack_msg_printEh+0x7e>
		delete incoming_data;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6a1b      	ldr	r3, [r3, #32]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d004      	beq.n	800da36 <_ZN10MsgHandler13ack_msg_printEh+0x7e>
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	3204      	adds	r2, #4
 800da30:	6812      	ldr	r2, [r2, #0]
 800da32:	4618      	mov	r0, r3
 800da34:	4790      	blx	r2
	incoming_data = new PayloadClass(dummy_print_msg_ptr,msg_len);
 800da36:	200c      	movs	r0, #12
 800da38:	f006 f911 	bl	8013c5e <_Znwj>
 800da3c:	4603      	mov	r3, r0
 800da3e:	461c      	mov	r4, r3
 800da40:	78fb      	ldrb	r3, [r7, #3]
 800da42:	461a      	mov	r2, r3
 800da44:	68f9      	ldr	r1, [r7, #12]
 800da46:	4620      	mov	r0, r4
 800da48:	f000 fa28 	bl	800de9c <_ZN12PayloadClassC1IcEEPT_h>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	621c      	str	r4, [r3, #32]
	txSingleack.get_data()[0] = SerialID::MSG_ACK;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	3310      	adds	r3, #16
 800da54:	4618      	mov	r0, r3
 800da56:	f7fe fc3d 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800da5a:	4603      	mov	r3, r0
 800da5c:	22ff      	movs	r2, #255	; 0xff
 800da5e:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[1] = SerialID::MSG_PRINT;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	3310      	adds	r3, #16
 800da64:	4618      	mov	r0, r3
 800da66:	f7fe fc35 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800da6a:	4603      	mov	r3, r0
 800da6c:	3301      	adds	r3, #1
 800da6e:	2200      	movs	r2, #0
 800da70:	701a      	strb	r2, [r3, #0]
	txSingleack.get_data()[2] = msg_len;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	3310      	adds	r3, #16
 800da76:	4618      	mov	r0, r3
 800da78:	f7fe fc2c 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800da7c:	4603      	mov	r3, r0
 800da7e:	3302      	adds	r3, #2
 800da80:	78fa      	ldrb	r2, [r7, #3]
 800da82:	701a      	strb	r2, [r3, #0]
	HAL_UART_Abort(huart);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4618      	mov	r0, r3
 800da8a:	f004 fc39 	bl	8012300 <HAL_UART_Abort>
	HAL_UART_Transmit_IT(huart, txSingleack.get_data(), txSingleack.get_data_size());
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681c      	ldr	r4, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	3310      	adds	r3, #16
 800da96:	4618      	mov	r0, r3
 800da98:	f7fe fc1c 	bl	800c2d4 <_ZNK6AckMsg8get_dataEv>
 800da9c:	4605      	mov	r5, r0
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	3310      	adds	r3, #16
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fe fc2f 	bl	800c306 <_ZNK6AckMsg13get_data_sizeEv>
 800daa8:	4603      	mov	r3, r0
 800daaa:	b29b      	uxth	r3, r3
 800daac:	461a      	mov	r2, r3
 800daae:	4629      	mov	r1, r5
 800dab0:	4620      	mov	r0, r4
 800dab2:	f004 fbb0 	bl	8012216 <HAL_UART_Transmit_IT>
 800dab6:	46b5      	mov	sp, r6
}
 800dab8:	e005      	b.n	800dac6 <_ZN10MsgHandler13ack_msg_printEh+0x10e>
	incoming_data = new PayloadClass(dummy_print_msg_ptr,msg_len);
 800daba:	210c      	movs	r1, #12
 800dabc:	4620      	mov	r0, r4
 800dabe:	f005 fc6f 	bl	80133a0 <_ZdlPvj>
 800dac2:	f005 fd05 	bl	80134d0 <__cxa_end_cleanup>
}
 800dac6:	371c      	adds	r7, #28
 800dac8:	46bd      	mov	sp, r7
 800daca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800dace <_ZN10MsgHandler33process_received_msg_motor_speedsEPh>:
	HAL_UART_Abort(huart);
	HAL_UART_Receive_IT(huart, incoming_data->get_data(), incoming_data->get_data_size());
}

void MsgHandler::process_received_msg_motor_speeds(uint8_t * data)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b082      	sub	sp, #8
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
 800dad6:	6039      	str	r1, [r7, #0]
	memcpy(motor_speeds,data,4*sizeof(float));
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dadc:	2210      	movs	r2, #16
 800dade:	6839      	ldr	r1, [r7, #0]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f007 fa10 	bl	8014f06 <memcpy>
	received_motor_speeds = true;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2201      	movs	r2, #1
 800daea:	711a      	strb	r2, [r3, #4]
}
 800daec:	bf00      	nop
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <_ZN10MsgHandler25get_received_motor_speedsEPf>:

bool MsgHandler::get_received_motor_speeds(float* to_fill_motor_speeds)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
	if( received_motor_speeds )
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	791b      	ldrb	r3, [r3, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00f      	beq.n	800db26 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x32>
	{
		if( motor_speeds != NULL)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00b      	beq.n	800db26 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x32>
		{
			memcpy(to_fill_motor_speeds,motor_speeds,4*sizeof(float));
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db12:	2210      	movs	r2, #16
 800db14:	4619      	mov	r1, r3
 800db16:	6838      	ldr	r0, [r7, #0]
 800db18:	f007 f9f5 	bl	8014f06 <memcpy>
			received_motor_speeds = false;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	711a      	strb	r2, [r3, #4]
			return true;
 800db22:	2301      	movs	r3, #1
 800db24:	e000      	b.n	800db28 <_ZN10MsgHandler25get_received_motor_speedsEPf+0x34>
		}
	}
	return false;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	429a      	cmp	r2, r3
 800db44:	da01      	bge.n	800db4a <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	e000      	b.n	800db4c <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 800db4a:	687b      	ldr	r3, [r7, #4]
    }
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <_ZN10MsgHandler26process_received_msg_printEPhh>:


void MsgHandler::process_received_msg_print(uint8_t * data, uint8_t msg_len)
{
 800db58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db5c:	b08b      	sub	sp, #44	; 0x2c
 800db5e:	af00      	add	r7, sp, #0
 800db60:	60f8      	str	r0, [r7, #12]
 800db62:	60b9      	str	r1, [r7, #8]
 800db64:	4613      	mov	r3, r2
 800db66:	71fb      	strb	r3, [r7, #7]
 	uint8_t max_len = std::min(UINT8_MAX, 50+msg_len);
	char msg[max_len];
	sprintf(msg,"received : %s",charPtr);
	send_print(msg);

}
 800db68:	466b      	mov	r3, sp
 800db6a:	461e      	mov	r6, r3
    char* charPtr = reinterpret_cast<char*>(data);
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	627b      	str	r3, [r7, #36]	; 0x24
 	uint8_t max_len = std::min(UINT8_MAX, 50+msg_len);
 800db70:	23ff      	movs	r3, #255	; 0xff
 800db72:	613b      	str	r3, [r7, #16]
 800db74:	79fb      	ldrb	r3, [r7, #7]
 800db76:	3332      	adds	r3, #50	; 0x32
 800db78:	617b      	str	r3, [r7, #20]
 800db7a:	f107 0214 	add.w	r2, r7, #20
 800db7e:	f107 0310 	add.w	r3, r7, #16
 800db82:	4611      	mov	r1, r2
 800db84:	4618      	mov	r0, r3
 800db86:	f7ff ffd3 	bl	800db30 <_ZSt3minIiERKT_S2_S2_>
 800db8a:	4603      	mov	r3, r0
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char msg[max_len];
 800db92:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800db96:	460b      	mov	r3, r1
 800db98:	3b01      	subs	r3, #1
 800db9a:	61fb      	str	r3, [r7, #28]
 800db9c:	b2cb      	uxtb	r3, r1
 800db9e:	2200      	movs	r2, #0
 800dba0:	4698      	mov	r8, r3
 800dba2:	4691      	mov	r9, r2
 800dba4:	f04f 0200 	mov.w	r2, #0
 800dba8:	f04f 0300 	mov.w	r3, #0
 800dbac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dbb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dbb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dbb8:	b2cb      	uxtb	r3, r1
 800dbba:	2200      	movs	r2, #0
 800dbbc:	461c      	mov	r4, r3
 800dbbe:	4615      	mov	r5, r2
 800dbc0:	f04f 0200 	mov.w	r2, #0
 800dbc4:	f04f 0300 	mov.w	r3, #0
 800dbc8:	00eb      	lsls	r3, r5, #3
 800dbca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dbce:	00e2      	lsls	r2, r4, #3
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	3307      	adds	r3, #7
 800dbd4:	08db      	lsrs	r3, r3, #3
 800dbd6:	00db      	lsls	r3, r3, #3
 800dbd8:	ebad 0d03 	sub.w	sp, sp, r3
 800dbdc:	466b      	mov	r3, sp
 800dbde:	3300      	adds	r3, #0
 800dbe0:	61bb      	str	r3, [r7, #24]
	sprintf(msg,"received : %s",charPtr);
 800dbe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbe4:	4906      	ldr	r1, [pc, #24]	; (800dc00 <_ZN10MsgHandler26process_received_msg_printEPhh+0xa8>)
 800dbe6:	69b8      	ldr	r0, [r7, #24]
 800dbe8:	f007 f83c 	bl	8014c64 <siprintf>
	send_print(msg);
 800dbec:	69b9      	ldr	r1, [r7, #24]
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f7ff fd5a 	bl	800d6a8 <_ZN10MsgHandler10send_printEPKc>
 800dbf4:	46b5      	mov	sp, r6
}
 800dbf6:	bf00      	nop
 800dbf8:	372c      	adds	r7, #44	; 0x2c
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc00:	08016eb0 	.word	0x08016eb0

0800dc04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
      { delete this; }
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d005      	beq.n	800dc1e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3304      	adds	r3, #4
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	4798      	blx	r3
 800dc1e:	bf00      	nop
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEcvbEv>:
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }

      /// Return @c true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b082      	sub	sp, #8
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7fe ff68 	bl	800cb04 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	bf14      	ite	ne
 800dc3a:	2301      	movne	r3, #1
 800dc3c:	2300      	moveq	r3, #0
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	4618      	mov	r0, r3
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetEDn>:
               >>
      void
      reset(_Up __p) noexcept
      { _M_t.reset(std::move(__p)); }

      void reset(nullptr_t = nullptr) noexcept
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
      { reset(pointer()); }
 800dc52:	2100      	movs	r1, #0
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f98b 	bl	800df70 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetIPhvEEvT_>
 800dc5a:	bf00      	nop
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 800dc62:	b480      	push	{r7}
 800dc64:	b083      	sub	sp, #12
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	bf0c      	ite	eq
 800dc74:	2301      	moveq	r3, #1
 800dc76:	2300      	movne	r3, #0
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b084      	sub	sp, #16
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f982 	bl	800df98 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>
 800dc94:	4603      	mov	r3, r0
 800dc96:	60fb      	str	r3, [r7, #12]
 800dc98:	f107 030c 	add.w	r3, r7, #12
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 f98c 	bl	800dfba <_ZNKSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEdeEv>
 800dca2:	4603      	mov	r3, r0
 800dca4:	4618      	mov	r0, r3
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
	return _M_get();
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 f98e 	bl	800dfd6 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800dcba:	4603      	mov	r3, r0
      }
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 f963 	bl	800df98 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f989 	bl	800dfee <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 800dce4:	b590      	push	{r4, r7, lr}
 800dce6:	b087      	sub	sp, #28
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
    {
      typedef typename std::remove_cv<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800dcf0:	f107 0314 	add.w	r3, r7, #20
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 f9a0 	bl	800e03a <_ZNSaI11HeaderClassEC1Ev>
				       std::forward<_Args>(__args)...);
 800dcfa:	68b8      	ldr	r0, [r7, #8]
 800dcfc:	f000 f9b5 	bl	800e06a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800dd00:	4604      	mov	r4, r0
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 f9bc 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f107 0114 	add.w	r1, r7, #20
 800dd10:	4622      	mov	r2, r4
 800dd12:	f000 f9c0 	bl	800e096 <_ZSt15allocate_sharedI11HeaderClassSaIS0_EJRKhjEESt10shared_ptrIT_ERKT0_DpOT1_>
 800dd16:	bf00      	nop
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800dd18:	f107 0314 	add.w	r3, r7, #20
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 f998 	bl	800e052 <_ZNSaI11HeaderClassED1Ev>
				       std::forward<_Args>(__args)...);
 800dd22:	e006      	b.n	800dd32 <_ZSt11make_sharedI11HeaderClassJRKhjEESt10shared_ptrIT_EDpOT0_+0x4e>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800dd24:	f107 0314 	add.w	r3, r7, #20
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 f992 	bl	800e052 <_ZNSaI11HeaderClassED1Ev>
 800dd2e:	f005 fbcf 	bl	80134d0 <__cxa_end_cleanup>
    }
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	371c      	adds	r7, #28
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd90      	pop	{r4, r7, pc}

0800dd3a <_ZNSt10shared_ptrI11AbstractMsgEC1I11HeaderClassvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800dd3a:	b590      	push	{r4, r7, lr}
 800dd3c:	b083      	sub	sp, #12
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800dd44:	687c      	ldr	r4, [r7, #4]
 800dd46:	6838      	ldr	r0, [r7, #0]
 800dd48:	f000 f9be 	bl	800e0c8 <_ZSt4moveIRSt10shared_ptrI11HeaderClassEEONSt16remove_referenceIT_E4typeEOS5_>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	4619      	mov	r1, r3
 800dd50:	4620      	mov	r0, r4
 800dd52:	f000 f9c4 	bl	800e0de <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassvEEOS_IT_LS2_0EE>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	370c      	adds	r7, #12
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd90      	pop	{r4, r7, pc}

0800dd60 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9push_backEOS3_>:
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800dd60:	b590      	push	{r4, r7, lr}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), std::move(__x)); }
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f9d5 	bl	800e11a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE3endEv>
 800dd70:	4604      	mov	r4, r0
 800dd72:	6838      	ldr	r0, [r7, #0]
 800dd74:	f000 f9e1 	bl	800e13a <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f9e6 	bl	800e150 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9_M_insertIJS3_EEEvSt14_List_iteratorIS3_EDpOT_>
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd90      	pop	{r4, r7, pc}

0800dd8c <_ZSt11make_sharedI12PayloadClassJRPKcjEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800dd8c:	b590      	push	{r4, r7, lr}
 800dd8e:	b087      	sub	sp, #28
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800dd98:	f107 0314 	add.w	r3, r7, #20
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 f9f6 	bl	800e18e <_ZNSaI12PayloadClassEC1Ev>
				       std::forward<_Args>(__args)...);
 800dda2:	68b8      	ldr	r0, [r7, #8]
 800dda4:	f000 fa0b 	bl	800e1be <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800dda8:	4604      	mov	r4, r0
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 f968 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f107 0114 	add.w	r1, r7, #20
 800ddb8:	4622      	mov	r2, r4
 800ddba:	f000 fa0b 	bl	800e1d4 <_ZSt15allocate_sharedI12PayloadClassSaIS0_EJRPKcjEESt10shared_ptrIT_ERKT0_DpOT1_>
 800ddbe:	bf00      	nop
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800ddc0:	f107 0314 	add.w	r3, r7, #20
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f000 f9ee 	bl	800e1a6 <_ZNSaI12PayloadClassED1Ev>
				       std::forward<_Args>(__args)...);
 800ddca:	e006      	b.n	800ddda <_ZSt11make_sharedI12PayloadClassJRPKcjEESt10shared_ptrIT_EDpOT0_+0x4e>
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 800ddcc:	f107 0314 	add.w	r3, r7, #20
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 f9e8 	bl	800e1a6 <_ZNSaI12PayloadClassED1Ev>
 800ddd6:	f005 fb7b 	bl	80134d0 <__cxa_end_cleanup>
    }
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	371c      	adds	r7, #28
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd90      	pop	{r4, r7, pc}

0800dde2 <_ZNSt10shared_ptrI11AbstractMsgEC1I12PayloadClassvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800dde2:	b590      	push	{r4, r7, lr}
 800dde4:	b083      	sub	sp, #12
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
 800ddea:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800ddec:	687c      	ldr	r4, [r7, #4]
 800ddee:	6838      	ldr	r0, [r7, #0]
 800ddf0:	f000 fa09 	bl	800e206 <_ZSt4moveIRSt10shared_ptrI12PayloadClassEEONSt16remove_referenceIT_E4typeEOS5_>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f000 fa0f 	bl	800e21c <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassvEEOS_IT_LS2_0EE>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	4618      	mov	r0, r3
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	bd90      	pop	{r4, r7, pc}

0800de08 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 fa21 	bl	800e258 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE13_M_node_countEv>
 800de16:	4603      	mov	r3, r0
 800de18:	4618      	mov	r0, r3
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <_ZN12PayloadClassC1IA4_fEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	4613      	mov	r3, r2
 800de2c:	71fb      	strb	r3, [r7, #7]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	4618      	mov	r0, r3
 800de32:	f7fe f99b 	bl	800c16c <_ZN11AbstractMsgC1Ev>
 800de36:	4a18      	ldr	r2, [pc, #96]	; (800de98 <_ZN12PayloadClassC1IA4_fEEPT_h+0x78>)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	79fa      	ldrb	r2, [r7, #7]
 800de40:	711a      	strb	r2, [r3, #4]
 800de42:	79fb      	ldrb	r3, [r7, #7]
 800de44:	4618      	mov	r0, r3
 800de46:	f005 ff1b 	bl	8013c80 <_Znaj>
 800de4a:	4603      	mov	r3, r0
 800de4c:	461a      	mov	r2, r3
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	609a      	str	r2, [r3, #8]
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 800de56:	2300      	movs	r3, #0
 800de58:	75fb      	strb	r3, [r7, #23]
 800de5a:	e00b      	b.n	800de74 <_ZN12PayloadClassC1IA4_fEEPT_h+0x54>
				_data[i] = data_ptr[i];
 800de5c:	7dfb      	ldrb	r3, [r7, #23]
 800de5e:	693a      	ldr	r2, [r7, #16]
 800de60:	441a      	add	r2, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6899      	ldr	r1, [r3, #8]
 800de66:	7dfb      	ldrb	r3, [r7, #23]
 800de68:	440b      	add	r3, r1
 800de6a:	7812      	ldrb	r2, [r2, #0]
 800de6c:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 800de6e:	7dfb      	ldrb	r3, [r7, #23]
 800de70:	3301      	adds	r3, #1
 800de72:	75fb      	strb	r3, [r7, #23]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	791b      	ldrb	r3, [r3, #4]
 800de78:	7dfa      	ldrb	r2, [r7, #23]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d3ee      	bcc.n	800de5c <_ZN12PayloadClassC1IA4_fEEPT_h+0x3c>
		};
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	e005      	b.n	800de8e <_ZN12PayloadClassC1IA4_fEEPT_h+0x6e>
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	4618      	mov	r0, r3
 800de86:	f7fe f951 	bl	800c12c <_ZN11AbstractMsgD1Ev>
 800de8a:	f005 fb21 	bl	80134d0 <__cxa_end_cleanup>
		};
 800de8e:	4618      	mov	r0, r3
 800de90:	3718      	adds	r7, #24
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	08018330 	.word	0x08018330

0800de9c <_ZN12PayloadClassC1IcEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	4613      	mov	r3, r2
 800dea8:	71fb      	strb	r3, [r7, #7]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	4618      	mov	r0, r3
 800deae:	f7fe f95d 	bl	800c16c <_ZN11AbstractMsgC1Ev>
 800deb2:	4a18      	ldr	r2, [pc, #96]	; (800df14 <_ZN12PayloadClassC1IcEEPT_h+0x78>)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	601a      	str	r2, [r3, #0]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	79fa      	ldrb	r2, [r7, #7]
 800debc:	711a      	strb	r2, [r3, #4]
 800debe:	79fb      	ldrb	r3, [r7, #7]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f005 fedd 	bl	8013c80 <_Znaj>
 800dec6:	4603      	mov	r3, r0
 800dec8:	461a      	mov	r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	609a      	str	r2, [r3, #8]
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 800ded2:	2300      	movs	r3, #0
 800ded4:	75fb      	strb	r3, [r7, #23]
 800ded6:	e00b      	b.n	800def0 <_ZN12PayloadClassC1IcEEPT_h+0x54>
				_data[i] = data_ptr[i];
 800ded8:	7dfb      	ldrb	r3, [r7, #23]
 800deda:	693a      	ldr	r2, [r7, #16]
 800dedc:	441a      	add	r2, r3
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6899      	ldr	r1, [r3, #8]
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	440b      	add	r3, r1
 800dee6:	7812      	ldrb	r2, [r2, #0]
 800dee8:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 800deea:	7dfb      	ldrb	r3, [r7, #23]
 800deec:	3301      	adds	r3, #1
 800deee:	75fb      	strb	r3, [r7, #23]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	791b      	ldrb	r3, [r3, #4]
 800def4:	7dfa      	ldrb	r2, [r7, #23]
 800def6:	429a      	cmp	r2, r3
 800def8:	d3ee      	bcc.n	800ded8 <_ZN12PayloadClassC1IcEEPT_h+0x3c>
		};
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	e005      	b.n	800df0a <_ZN12PayloadClassC1IcEEPT_h+0x6e>
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	4618      	mov	r0, r3
 800df02:	f7fe f913 	bl	800c12c <_ZN11AbstractMsgD1Ev>
 800df06:	f005 fae3 	bl	80134d0 <__cxa_end_cleanup>
		};
 800df0a:	4618      	mov	r0, r3
 800df0c:	3718      	adds	r7, #24
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	08018330 	.word	0x08018330

0800df18 <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4618      	mov	r0, r3
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
      { }
 800df38:	4a04      	ldr	r2, [pc, #16]	; (800df4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4618      	mov	r0, r3
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	0801834c 	.word	0x0801834c

0800df50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
      { }
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7ff ffe9 	bl	800df30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800df5e:	210c      	movs	r1, #12
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f005 fa1d 	bl	80133a0 <_ZdlPvj>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4618      	mov	r0, r3
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE5resetIPhvEEvT_>:
      reset(_Up __p) noexcept
 800df70:	b590      	push	{r4, r7, lr}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
      { _M_t.reset(std::move(__p)); }
 800df7a:	687c      	ldr	r4, [r7, #4]
 800df7c:	463b      	mov	r3, r7
 800df7e:	4618      	mov	r0, r3
 800df80:	f000 f977 	bl	800e272 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800df84:	4603      	mov	r3, r0
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4619      	mov	r1, r3
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 f97c 	bl	800e288 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh>
 800df90:	bf00      	nop
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	bd90      	pop	{r4, r7, pc}

0800df98 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	f107 030c 	add.w	r3, r7, #12
 800dfa8:	4611      	mov	r1, r2
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f000 f98c 	bl	800e2c8 <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <_ZNKSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b082      	sub	sp, #8
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fe fecc 	bl	800cd64 <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <_ZNKSt19__shared_ptr_accessI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b082      	sub	sp, #8
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff ff9a 	bl	800df18 <_ZNKSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3708      	adds	r7, #8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 800dfee:	b590      	push	{r4, r7, lr}
 800dff0:	b085      	sub	sp, #20
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2101      	movs	r1, #1
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 f972 	bl	800e2e6 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	4618      	mov	r0, r3
 800e006:	f005 fedc 	bl	8013dc2 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4618      	mov	r0, r3
 800e012:	f7fe feb5 	bl	800cd80 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 800e016:	4604      	mov	r4, r0
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f7fe fea3 	bl	800cd64 <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 800e01e:	4603      	mov	r3, r0
 800e020:	4619      	mov	r1, r3
 800e022:	4620      	mov	r0, r4
 800e024:	f7fe feb7 	bl	800cd96 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE7destroyIS3_EEvRS5_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	68f9      	ldr	r1, [r7, #12]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe febf 	bl	800cdb0 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      }
 800e032:	bf00      	nop
 800e034:	3714      	adds	r7, #20
 800e036:	46bd      	mov	sp, r7
 800e038:	bd90      	pop	{r4, r7, pc}

0800e03a <_ZNSaI11HeaderClassEC1Ev>:
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b082      	sub	sp, #8
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f960 	bl	800e308 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1Ev>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4618      	mov	r0, r3
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <_ZNSaI11HeaderClassED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e052:	b580      	push	{r7, lr}
 800e054:	b082      	sub	sp, #8
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f95f 	bl	800e31e <_ZN9__gnu_cxx13new_allocatorI11HeaderClassED1Ev>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4618      	mov	r0, r3
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e06a:	b480      	push	{r7}
 800e06c:	b083      	sub	sp, #12
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	4618      	mov	r0, r3
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4618      	mov	r0, r3
 800e08c:	370c      	adds	r7, #12
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <_ZSt15allocate_sharedI11HeaderClassSaIS0_EJRKhjEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800e096:	b5b0      	push	{r4, r5, r7, lr}
 800e098:	b084      	sub	sp, #16
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	60f8      	str	r0, [r7, #12]
 800e09e:	60b9      	str	r1, [r7, #8]
 800e0a0:	607a      	str	r2, [r7, #4]
 800e0a2:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800e0a4:	68bc      	ldr	r4, [r7, #8]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7ff ffdf 	bl	800e06a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	6838      	ldr	r0, [r7, #0]
 800e0b0:	f7ff ffe6 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	462a      	mov	r2, r5
 800e0b8:	4621      	mov	r1, r4
 800e0ba:	68f8      	ldr	r0, [r7, #12]
 800e0bc:	f000 f93a 	bl	800e334 <_ZNSt10shared_ptrI11HeaderClassEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bdb0      	pop	{r4, r5, r7, pc}

0800e0c8 <_ZSt4moveIRSt10shared_ptrI11HeaderClassEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	370c      	adds	r7, #12
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassvEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b082      	sub	sp, #8
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	601a      	str	r2, [r3, #0]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	3304      	adds	r3, #4
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fe fe6a 	bl	800cdce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	1d1a      	adds	r2, r3, #4
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	3304      	adds	r3, #4
 800e102:	4619      	mov	r1, r3
 800e104:	4610      	mov	r0, r2
 800e106:	f000 f92f 	bl	800e368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2200      	movs	r2, #0
 800e10e:	601a      	str	r2, [r3, #0]
	}
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b084      	sub	sp, #16
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	f107 030c 	add.w	r3, r7, #12
 800e128:	4611      	mov	r1, r2
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 f8cc 	bl	800e2c8 <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800e13a:	b480      	push	{r7}
 800e13c:	b083      	sub	sp, #12
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4618      	mov	r0, r3
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE9_M_insertIJS3_EEEvSt14_List_iteratorIS3_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 f918 	bl	800e392 <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e162:	4603      	mov	r3, r0
 800e164:	4619      	mov	r1, r3
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 f91e 	bl	800e3a8 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE14_M_create_nodeIJS3_EEEPSt10_List_nodeIS3_EDpOT_>
 800e16c:	4603      	mov	r3, r0
 800e16e:	617b      	str	r3, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	68ba      	ldr	r2, [r7, #8]
 800e174:	4611      	mov	r1, r2
 800e176:	4618      	mov	r0, r3
 800e178:	f005 fe1c 	bl	8013db4 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2101      	movs	r1, #1
 800e180:	4618      	mov	r0, r3
 800e182:	f000 f946 	bl	800e412 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_inc_sizeEj>
       }
 800e186:	bf00      	nop
 800e188:	3718      	adds	r7, #24
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <_ZNSaI12PayloadClassEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800e18e:	b580      	push	{r7, lr}
 800e190:	b082      	sub	sp, #8
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 f94c 	bl	800e434 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1Ev>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <_ZNSaI12PayloadClassED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b082      	sub	sp, #8
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f94b 	bl	800e44a <_ZN9__gnu_cxx13new_allocatorI12PayloadClassED1Ev>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e1be:	b480      	push	{r7}
 800e1c0:	b083      	sub	sp, #12
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <_ZSt15allocate_sharedI12PayloadClassSaIS0_EJRPKcjEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800e1d4:	b5b0      	push	{r4, r5, r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800e1e2:	68bc      	ldr	r4, [r7, #8]
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7ff ffea 	bl	800e1be <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	6838      	ldr	r0, [r7, #0]
 800e1ee:	f7ff ff47 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	462a      	mov	r2, r5
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f000 f931 	bl	800e460 <_ZNSt10shared_ptrI12PayloadClassEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bdb0      	pop	{r4, r5, r7, pc}

0800e206 <_ZSt4moveIRSt10shared_ptrI12PayloadClassEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800e206:	b480      	push	{r7}
 800e208:	b083      	sub	sp, #12
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4618      	mov	r0, r3
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr

0800e21c <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassvEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	3304      	adds	r3, #4
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe fdcb 	bl	800cdce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	1d1a      	adds	r2, r3, #4
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	3304      	adds	r3, #4
 800e240:	4619      	mov	r1, r3
 800e242:	4610      	mov	r0, r2
 800e244:	f000 f890 	bl	800e368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]
	}
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	4618      	mov	r0, r3
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <_ZNKSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE13_M_node_countEv>:
      _M_node_count() const
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4618      	mov	r0, r3
 800e264:	f000 f916 	bl	800e494 <_ZNKSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_sizeEv>
 800e268:	4603      	mov	r3, r0
 800e26a:	4618      	mov	r0, r3
 800e26c:	3708      	adds	r7, #8
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800e272:	b480      	push	{r7}
 800e274:	b083      	sub	sp, #12
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4618      	mov	r0, r3
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh>:
      void reset(pointer __p) noexcept
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7fe fca2 	bl	800cbdc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800e298:	4603      	mov	r3, r0
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7fe fc9c 	bl	800cbdc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d007      	beq.n	800e2c0 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE5resetEPh+0x38>
	  _M_deleter()(__old_p);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7fe fd32 	bl	800cd1a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	68f9      	ldr	r1, [r7, #12]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fe fca8 	bl	800cc10 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>
      }
 800e2c0:	bf00      	nop
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <_ZNSt14_List_iteratorISt10shared_ptrI11AbstractMsgEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	601a      	str	r2, [r3, #0]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800e2e6:	b480      	push	{r7}
 800e2e8:	b083      	sub	sp, #12
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
 800e2ee:	6039      	str	r1, [r7, #0]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	689a      	ldr	r2, [r3, #8]
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	1ad2      	subs	r2, r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	609a      	str	r2, [r3, #8]
 800e2fc:	bf00      	nop
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4618      	mov	r0, r3
 800e314:	370c      	adds	r7, #12
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr

0800e31e <_ZN9__gnu_cxx13new_allocatorI11HeaderClassED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e31e:	b480      	push	{r7}
 800e320:	b083      	sub	sp, #12
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4618      	mov	r0, r3
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <_ZNSt10shared_ptrI11HeaderClassEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800e334:	b5b0      	push	{r4, r5, r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	607a      	str	r2, [r7, #4]
 800e340:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800e342:	68fc      	ldr	r4, [r7, #12]
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7ff fe90 	bl	800e06a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e34a:	4605      	mov	r5, r0
 800e34c:	6838      	ldr	r0, [r7, #0]
 800e34e:	f7ff fe97 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e352:	4603      	mov	r3, r0
 800e354:	462a      	mov	r2, r5
 800e356:	68b9      	ldr	r1, [r7, #8]
 800e358:	4620      	mov	r0, r4
 800e35a:	f000 f8c5 	bl	800e4e8 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	4618      	mov	r0, r3
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bdb0      	pop	{r4, r5, r7, pc}

0800e368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	601a      	str	r2, [r3, #0]
      }
 800e386:	bf00      	nop
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr

0800e392 <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e392:	b480      	push	{r7}
 800e394:	b083      	sub	sp, #12
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4618      	mov	r0, r3
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <_ZNSt7__cxx114listISt10shared_ptrI11AbstractMsgESaIS3_EE14_M_create_nodeIJS3_EEEPSt10_List_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800e3a8:	b590      	push	{r4, r7, lr}
 800e3aa:	b087      	sub	sp, #28
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f000 f8be 	bl	800e536 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_nodeEv>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	617b      	str	r3, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fe fcdd 	bl	800cd80 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE21_M_get_Node_allocatorEv>
 800e3c6:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800e3c8:	f107 0308 	add.w	r3, r7, #8
 800e3cc:	697a      	ldr	r2, [r7, #20]
 800e3ce:	6939      	ldr	r1, [r7, #16]
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f000 f8be 	bl	800e552 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEC1ERS5_PS4_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 800e3d6:	6978      	ldr	r0, [r7, #20]
 800e3d8:	f7fe fcc4 	bl	800cd64 <_ZNSt10_List_nodeISt10shared_ptrI11AbstractMsgEE9_M_valptrEv>
 800e3dc:	4604      	mov	r4, r0
 800e3de:	6838      	ldr	r0, [r7, #0]
 800e3e0:	f7ff ffd7 	bl	800e392 <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	4621      	mov	r1, r4
 800e3ea:	6938      	ldr	r0, [r7, #16]
 800e3ec:	f000 f8da 	bl	800e5a4 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE9constructIS3_JS3_EEEvRS5_PT_DpOT0_>
	  __guard = nullptr;
 800e3f0:	f107 0308 	add.w	r3, r7, #8
 800e3f4:	2100      	movs	r1, #0
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f000 f8e7 	bl	800e5ca <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEaSEDn>
	  return __p;
 800e3fc:	697c      	ldr	r4, [r7, #20]
	}
 800e3fe:	f107 0308 	add.w	r3, r7, #8
 800e402:	4618      	mov	r0, r3
 800e404:	f000 f8b9 	bl	800e57a <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev>
	  return __p;
 800e408:	4623      	mov	r3, r4
	}
 800e40a:	4618      	mov	r0, r3
 800e40c:	371c      	adds	r7, #28
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd90      	pop	{r4, r7, pc}

0800e412 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800e412:	b480      	push	{r7}
 800e414:	b083      	sub	sp, #12
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	6039      	str	r1, [r7, #0]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	689a      	ldr	r2, [r3, #8]
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	441a      	add	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	609a      	str	r2, [r3, #8]
 800e428:	bf00      	nop
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4618      	mov	r0, r3
 800e440:	370c      	adds	r7, #12
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr

0800e44a <_ZN9__gnu_cxx13new_allocatorI12PayloadClassED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e44a:	b480      	push	{r7}
 800e44c:	b083      	sub	sp, #12
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4618      	mov	r0, r3
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <_ZNSt10shared_ptrI12PayloadClassEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800e460:	b5b0      	push	{r4, r5, r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800e46e:	68fc      	ldr	r4, [r7, #12]
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f7ff fea4 	bl	800e1be <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e476:	4605      	mov	r5, r0
 800e478:	6838      	ldr	r0, [r7, #0]
 800e47a:	f7ff fe01 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e47e:	4603      	mov	r3, r0
 800e480:	462a      	mov	r2, r5
 800e482:	68b9      	ldr	r1, [r7, #8]
 800e484:	4620      	mov	r0, r4
 800e486:	f000 f8af 	bl	800e5e8 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bdb0      	pop	{r4, r5, r7, pc}

0800e494 <_ZNKSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	681a      	ldr	r2, [r3, #0]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	601a      	str	r2, [r3, #0]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fe fc83 	bl	800cdce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	1d1a      	adds	r2, r3, #4
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	3304      	adds	r3, #4
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	f7ff ff48 	bl	800e368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	601a      	str	r2, [r3, #0]
      }
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRKhjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800e4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4ea:	b087      	sub	sp, #28
 800e4ec:	af02      	add	r7, sp, #8
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	601a      	str	r2, [r3, #0]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	1d1c      	adds	r4, r3, #4
 800e500:	68fd      	ldr	r5, [r7, #12]
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7ff fdb1 	bl	800e06a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e508:	4606      	mov	r6, r0
 800e50a:	6838      	ldr	r0, [r7, #0]
 800e50c:	f7ff fdb8 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e510:	4603      	mov	r3, r0
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	4633      	mov	r3, r6
 800e516:	68ba      	ldr	r2, [r7, #8]
 800e518:	4629      	mov	r1, r5
 800e51a:	4620      	mov	r0, r4
 800e51c:	f000 f88b 	bl	800e636 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4619      	mov	r1, r3
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f000 f8fb 	bl	800e722 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	4618      	mov	r0, r3
 800e530:	3714      	adds	r7, #20
 800e532:	46bd      	mov	sp, r7
 800e534:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e536 <_ZNSt7__cxx1110_List_baseISt10shared_ptrI11AbstractMsgESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 800e536:	b580      	push	{r7, lr}
 800e538:	b082      	sub	sp, #8
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2101      	movs	r1, #1
 800e542:	4618      	mov	r0, r3
 800e544:	f000 f8f8 	bl	800e738 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE8allocateERS5_j>
 800e548:	4603      	mov	r3, r0
 800e54a:	4618      	mov	r0, r3
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEC1ERS5_PS4_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800e552:	b580      	push	{r7, lr}
 800e554:	b084      	sub	sp, #16
 800e556:	af00      	add	r7, sp, #0
 800e558:	60f8      	str	r0, [r7, #12]
 800e55a:	60b9      	str	r1, [r7, #8]
 800e55c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800e55e:	68b8      	ldr	r0, [r7, #8]
 800e560:	f000 f8f9 	bl	800e756 <_ZSt11__addressofISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEPT_RS6_>
 800e564:	4602      	mov	r2, r0
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	601a      	str	r2, [r3, #0]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	605a      	str	r2, [r3, #4]
      { }
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b082      	sub	sp, #8
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d007      	beq.n	800e59a <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6818      	ldr	r0, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	4619      	mov	r1, r3
 800e596:	f7fe fc74 	bl	800ce82 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE10deallocateERS5_PS4_j>
      }
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4618      	mov	r0, r3
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE9constructIS3_JS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f7ff feee 	bl	800e392 <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	68b9      	ldr	r1, [r7, #8]
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f000 f8d5 	bl	800e76c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE9constructIS4_JS4_EEEvPT_DpOT0_>
	}
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 800e5ca:	b480      	push	{r7}
 800e5cc:	b083      	sub	sp, #12
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	605a      	str	r2, [r3, #4]
	return *this;
 800e5da:	687b      	ldr	r3, [r7, #4]
      }
 800e5dc:	4618      	mov	r0, r3
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EEC1ISaIS0_EJRPKcjEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800e5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ea:	b087      	sub	sp, #28
 800e5ec:	af02      	add	r7, sp, #8
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	607a      	str	r2, [r7, #4]
 800e5f4:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	601a      	str	r2, [r3, #0]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	1d1c      	adds	r4, r3, #4
 800e600:	68fd      	ldr	r5, [r7, #12]
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f7ff fddb 	bl	800e1be <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e608:	4606      	mov	r6, r0
 800e60a:	6838      	ldr	r0, [r7, #0]
 800e60c:	f7ff fd38 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e610:	4603      	mov	r3, r0
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	4633      	mov	r3, r6
 800e616:	68ba      	ldr	r2, [r7, #8]
 800e618:	4629      	mov	r1, r5
 800e61a:	4620      	mov	r0, r4
 800e61c:	f000 f8be 	bl	800e79c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4619      	mov	r1, r3
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 f92e 	bl	800e888 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	4618      	mov	r0, r3
 800e630:	3714      	adds	r7, #20
 800e632:	46bd      	mov	sp, r7
 800e634:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e636 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800e636:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e63a:	b08b      	sub	sp, #44	; 0x2c
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
 800e644:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	f107 0318 	add.w	r3, r7, #24
 800e64c:	4611      	mov	r1, r2
 800e64e:	4618      	mov	r0, r3
 800e650:	f000 f925 	bl	800e89e <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800e654:	f107 0310 	add.w	r3, r7, #16
 800e658:	f107 0218 	add.w	r2, r7, #24
 800e65c:	4611      	mov	r1, r2
 800e65e:	4618      	mov	r0, r3
 800e660:	f000 f936 	bl	800e8d0 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800e664:	f107 0310 	add.w	r3, r7, #16
 800e668:	4618      	mov	r0, r3
 800e66a:	f000 f959 	bl	800e920 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800e66e:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	f107 031c 	add.w	r3, r7, #28
 800e676:	4611      	mov	r1, r2
 800e678:	4618      	mov	r0, r3
 800e67a:	f000 f95f 	bl	800e93c <_ZNSaI11HeaderClassEC1ERKS0_>
 800e67e:	f107 061c 	add.w	r6, r7, #28
	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 800e682:	6838      	ldr	r0, [r7, #0]
 800e684:	f7ff fcf1 	bl	800e06a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e688:	4680      	mov	r8, r0
 800e68a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e68c:	f7ff fcf8 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e690:	4681      	mov	r9, r0
	  auto __pi = ::new (__mem)
 800e692:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800e694:	4629      	mov	r1, r5
 800e696:	2014      	movs	r0, #20
 800e698:	f7fe fd1a 	bl	800d0d0 <_ZnwjPv>
 800e69c:	4604      	mov	r4, r0
 800e69e:	464b      	mov	r3, r9
 800e6a0:	4642      	mov	r2, r8
 800e6a2:	4631      	mov	r1, r6
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f000 f96f 	bl	800e988 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_>
 800e6aa:	623c      	str	r4, [r7, #32]
 800e6ac:	f107 031c 	add.w	r3, r7, #28
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7ff fcce 	bl	800e052 <_ZNSaI11HeaderClassED1Ev>
	  __guard = nullptr;
 800e6b6:	f107 0310 	add.w	r3, r7, #16
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f000 f9a9 	bl	800ea14 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6a3a      	ldr	r2, [r7, #32]
 800e6c6:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800e6c8:	6a38      	ldr	r0, [r7, #32]
 800e6ca:	f000 f9b2 	bl	800ea32 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	601a      	str	r2, [r3, #0]
	}
 800e6d4:	f107 0310 	add.w	r3, r7, #16
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f000 f90c 	bl	800e8f6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800e6de:	f107 0318 	add.w	r3, r7, #24
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 f8e8 	bl	800e8b8 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	e015      	b.n	800e718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_+0xe2>
	  auto __pi = ::new (__mem)
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	f7fe fcfa 	bl	800d0e8 <_ZdlPvS_>
 800e6f4:	f107 031c 	add.w	r3, r7, #28
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7ff fcaa 	bl	800e052 <_ZNSaI11HeaderClassED1Ev>
	}
 800e6fe:	f107 0310 	add.w	r3, r7, #16
 800e702:	4618      	mov	r0, r3
 800e704:	f000 f8f7 	bl	800e8f6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800e708:	e7ff      	b.n	800e70a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I11HeaderClassSaIS4_EJRKhjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_+0xd4>
 800e70a:	f107 0318 	add.w	r3, r7, #24
 800e70e:	4618      	mov	r0, r3
 800e710:	f000 f8d2 	bl	800e8b8 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e714:	f004 fedc 	bl	80134d0 <__cxa_end_cleanup>
 800e718:	4618      	mov	r0, r3
 800e71a:	372c      	adds	r7, #44	; 0x2c
 800e71c:	46bd      	mov	sp, r7
 800e71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e722 <_ZNSt12__shared_ptrI11HeaderClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800e722:	b480      	push	{r7}
 800e724:	b083      	sub	sp, #12
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
 800e72a:	6039      	str	r1, [r7, #0]
	{ }
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e742:	2200      	movs	r2, #0
 800e744:	6839      	ldr	r1, [r7, #0]
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f98d 	bl	800ea66 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv>
 800e74c:	4603      	mov	r3, r0
 800e74e:	4618      	mov	r0, r3
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <_ZSt11__addressofISaISt10_List_nodeISt10shared_ptrI11AbstractMsgEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e756:	b480      	push	{r7}
 800e758:	b083      	sub	sp, #12
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4618      	mov	r0, r3
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE9constructIS4_JS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800e76c:	b590      	push	{r4, r7, lr}
 800e76e:	b085      	sub	sp, #20
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7ff fe0a 	bl	800e392 <_ZSt7forwardISt10shared_ptrI11AbstractMsgEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e77e:	4604      	mov	r4, r0
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	4619      	mov	r1, r3
 800e784:	2008      	movs	r0, #8
 800e786:	f7fe fca3 	bl	800d0d0 <_ZnwjPv>
 800e78a:	4603      	mov	r3, r0
 800e78c:	4621      	mov	r1, r4
 800e78e:	4618      	mov	r0, r3
 800e790:	f000 f992 	bl	800eab8 <_ZNSt10shared_ptrI11AbstractMsgEC1EOS1_>
 800e794:	bf00      	nop
 800e796:	3714      	adds	r7, #20
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd90      	pop	{r4, r7, pc}

0800e79c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800e79c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7a0:	b08b      	sub	sp, #44	; 0x2c
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	60f8      	str	r0, [r7, #12]
 800e7a6:	60b9      	str	r1, [r7, #8]
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	f107 0318 	add.w	r3, r7, #24
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f000 f992 	bl	800eade <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800e7ba:	f107 0310 	add.w	r3, r7, #16
 800e7be:	f107 0218 	add.w	r2, r7, #24
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f000 f9a3 	bl	800eb10 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800e7ca:	f107 0310 	add.w	r3, r7, #16
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f000 f9c6 	bl	800eb60 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800e7d4:	6278      	str	r0, [r7, #36]	; 0x24
	  auto __pi = ::new (__mem)
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	f107 031c 	add.w	r3, r7, #28
 800e7dc:	4611      	mov	r1, r2
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f000 f9cc 	bl	800eb7c <_ZNSaI12PayloadClassEC1ERKS0_>
 800e7e4:	f107 061c 	add.w	r6, r7, #28
	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 800e7e8:	6838      	ldr	r0, [r7, #0]
 800e7ea:	f7ff fce8 	bl	800e1be <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e7ee:	4680      	mov	r8, r0
 800e7f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e7f2:	f7ff fc45 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e7f6:	4681      	mov	r9, r0
	  auto __pi = ::new (__mem)
 800e7f8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800e7fa:	4629      	mov	r1, r5
 800e7fc:	2018      	movs	r0, #24
 800e7fe:	f7fe fc67 	bl	800d0d0 <_ZnwjPv>
 800e802:	4604      	mov	r4, r0
 800e804:	464b      	mov	r3, r9
 800e806:	4642      	mov	r2, r8
 800e808:	4631      	mov	r1, r6
 800e80a:	4620      	mov	r0, r4
 800e80c:	f000 f9dc 	bl	800ebc8 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_>
 800e810:	623c      	str	r4, [r7, #32]
 800e812:	f107 031c 	add.w	r3, r7, #28
 800e816:	4618      	mov	r0, r3
 800e818:	f7ff fcc5 	bl	800e1a6 <_ZNSaI12PayloadClassED1Ev>
	  __guard = nullptr;
 800e81c:	f107 0310 	add.w	r3, r7, #16
 800e820:	2100      	movs	r1, #0
 800e822:	4618      	mov	r0, r3
 800e824:	f000 fa16 	bl	800ec54 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6a3a      	ldr	r2, [r7, #32]
 800e82c:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800e82e:	6a38      	ldr	r0, [r7, #32]
 800e830:	f000 fa1f 	bl	800ec72 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800e834:	4602      	mov	r2, r0
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	601a      	str	r2, [r3, #0]
	}
 800e83a:	f107 0310 	add.w	r3, r7, #16
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 f979 	bl	800eb36 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800e844:	f107 0318 	add.w	r3, r7, #24
 800e848:	4618      	mov	r0, r3
 800e84a:	f000 f955 	bl	800eaf8 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	e015      	b.n	800e87e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_+0xe2>
	  auto __pi = ::new (__mem)
 800e852:	4629      	mov	r1, r5
 800e854:	4620      	mov	r0, r4
 800e856:	f7fe fc47 	bl	800d0e8 <_ZdlPvS_>
 800e85a:	f107 031c 	add.w	r3, r7, #28
 800e85e:	4618      	mov	r0, r3
 800e860:	f7ff fca1 	bl	800e1a6 <_ZNSaI12PayloadClassED1Ev>
	}
 800e864:	f107 0310 	add.w	r3, r7, #16
 800e868:	4618      	mov	r0, r3
 800e86a:	f000 f964 	bl	800eb36 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800e86e:	e7ff      	b.n	800e870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12PayloadClassSaIS4_EJRPKcjEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_+0xd4>
 800e870:	f107 0318 	add.w	r3, r7, #24
 800e874:	4618      	mov	r0, r3
 800e876:	f000 f93f 	bl	800eaf8 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e87a:	f004 fe29 	bl	80134d0 <__cxa_end_cleanup>
 800e87e:	4618      	mov	r0, r3
 800e880:	372c      	adds	r7, #44	; 0x2c
 800e882:	46bd      	mov	sp, r7
 800e884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e888 <_ZNSt12__shared_ptrI12PayloadClassLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
	{ }
 800e892:	bf00      	nop
 800e894:	370c      	adds	r7, #12
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr

0800e89e <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b082      	sub	sp, #8
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
 800e8a6:	6039      	str	r1, [r7, #0]
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 f9f0 	bl	800ec8e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f000 f9ef 	bl	800eca4 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800e8da:	2101      	movs	r1, #1
 800e8dc:	6838      	ldr	r0, [r7, #0]
 800e8de:	f000 f9ec 	bl	800ecba <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	6839      	ldr	r1, [r7, #0]
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 f9f5 	bl	800ecd8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	3708      	adds	r7, #8
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b082      	sub	sp, #8
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d007      	beq.n	800e916 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6818      	ldr	r0, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	4619      	mov	r1, r3
 800e912:	f000 f9f5 	bl	800ed00 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4618      	mov	r0, r3
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f000 f9f6 	bl	800ed1e <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800e932:	4603      	mov	r3, r0
 800e934:	4618      	mov	r0, r3
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <_ZNSaI11HeaderClassEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 f9f3 	bl	800ed34 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1ERKS2_>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4618      	mov	r0, r3
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7ff fb76 	bl	800e052 <_ZNSaI11HeaderClassED1Ev>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4618      	mov	r0, r3
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7ff ffed 	bl	800e958 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EED1Ev>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4618      	mov	r0, r3
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800e988:	b5b0      	push	{r4, r5, r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
 800e994:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	4618      	mov	r0, r3
 800e99a:	f000 f9d7 	bl	800ed4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800e99e:	4a1c      	ldr	r2, [pc, #112]	; (800ea10 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_+0x88>)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	601a      	str	r2, [r3, #0]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f103 040c 	add.w	r4, r3, #12
 800e9aa:	f107 0314 	add.w	r3, r7, #20
 800e9ae:	68b9      	ldr	r1, [r7, #8]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7ff ffc3 	bl	800e93c <_ZNSaI11HeaderClassEC1ERKS0_>
 800e9b6:	f107 0314 	add.w	r3, r7, #20
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f000 f9db 	bl	800ed78 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 800e9c2:	f107 0314 	add.w	r3, r7, #20
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7ff fb43 	bl	800e052 <_ZNSaI11HeaderClassED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f000 f830 	bl	800ea32 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7ff fb48 	bl	800e06a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e9da:	4605      	mov	r5, r0
 800e9dc:	6838      	ldr	r0, [r7, #0]
 800e9de:	f7ff fb4f 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	462a      	mov	r2, r5
 800e9e6:	4621      	mov	r1, r4
 800e9e8:	68b8      	ldr	r0, [r7, #8]
 800e9ea:	f000 f9d3 	bl	800ed94 <_ZNSt16allocator_traitsISaI11HeaderClassEE9constructIS0_JRKhjEEEvRS1_PT_DpOT0_>
	}
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	e00a      	b.n	800ea08 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRKhjEEES1_DpOT_+0x80>
	: _M_impl(__a)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	330c      	adds	r3, #12
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7ff ffba 	bl	800e970 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7ff fa96 	bl	800df30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ea04:	f004 fd64 	bl	80134d0 <__cxa_end_cleanup>
	}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3718      	adds	r7, #24
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bdb0      	pop	{r4, r5, r7, pc}
 800ea10:	08018314 	.word	0x08018314

0800ea14 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	605a      	str	r2, [r3, #4]
	return *this;
 800ea24:	687b      	ldr	r3, [r7, #4]
      }
 800ea26:	4618      	mov	r0, r3
 800ea28:	370c      	adds	r7, #12
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b082      	sub	sp, #8
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	330c      	adds	r3, #12
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f000 f9c0 	bl	800edc4 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE6_M_ptrEv>
 800ea44:	4603      	mov	r3, r0
 800ea46:	4618      	mov	r0, r3
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ea4e:	b480      	push	{r7}
 800ea50:	b083      	sub	sp, #12
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ea56:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b084      	sub	sp, #16
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	60f8      	str	r0, [r7, #12]
 800ea6e:	60b9      	str	r1, [r7, #8]
 800ea70:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ea72:	68f8      	ldr	r0, [r7, #12]
 800ea74:	f7ff ffeb 	bl	800ea4e <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE11_M_max_sizeEv>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	bf8c      	ite	hi
 800ea80:	2301      	movhi	r3, #1
 800ea82:	2300      	movls	r3, #0
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	bf14      	ite	ne
 800ea8a:	2301      	movne	r3, #1
 800ea8c:	2300      	moveq	r3, #0
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d007      	beq.n	800eaa4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea9a:	d301      	bcc.n	800eaa0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10shared_ptrI11AbstractMsgEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ea9c:	f005 fa5d 	bl	8013f5a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800eaa0:	f005 fa58 	bl	8013f54 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	011b      	lsls	r3, r3, #4
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f005 f8d8 	bl	8013c5e <_Znwj>
 800eaae:	4603      	mov	r3, r0
      }
 800eab0:	4618      	mov	r0, r3
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <_ZNSt10shared_ptrI11AbstractMsgEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800eab8:	b590      	push	{r4, r7, lr}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 800eac2:	687c      	ldr	r4, [r7, #4]
 800eac4:	6838      	ldr	r0, [r7, #0]
 800eac6:	f7ff fb38 	bl	800e13a <_ZSt4moveIRSt10shared_ptrI11AbstractMsgEEONSt16remove_referenceIT_E4typeEOS5_>
 800eaca:	4603      	mov	r3, r0
 800eacc:	4619      	mov	r1, r3
 800eace:	4620      	mov	r0, r4
 800ead0:	f7ff fcec 	bl	800e4ac <_ZNSt12__shared_ptrI11AbstractMsgLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	4618      	mov	r0, r3
 800ead8:	370c      	adds	r7, #12
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd90      	pop	{r4, r7, pc}

0800eade <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800eade:	b580      	push	{r7, lr}
 800eae0:	b082      	sub	sp, #8
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
 800eae6:	6039      	str	r1, [r7, #0]
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 f977 	bl	800eddc <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3708      	adds	r7, #8
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 f976 	bl	800edf2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800eb1a:	2101      	movs	r1, #1
 800eb1c:	6838      	ldr	r0, [r7, #0]
 800eb1e:	f000 f973 	bl	800ee08 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800eb22:	4603      	mov	r3, r0
 800eb24:	461a      	mov	r2, r3
 800eb26:	6839      	ldr	r1, [r7, #0]
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 f97c 	bl	800ee26 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	3708      	adds	r7, #8
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b082      	sub	sp, #8
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d007      	beq.n	800eb56 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6818      	ldr	r0, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	4619      	mov	r1, r3
 800eb52:	f000 f97c 	bl	800ee4e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3708      	adds	r7, #8
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f000 f97d 	bl	800ee6c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800eb72:	4603      	mov	r3, r0
 800eb74:	4618      	mov	r0, r3
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <_ZNSaI12PayloadClassEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800eb86:	6839      	ldr	r1, [r7, #0]
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f000 f97a 	bl	800ee82 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1ERKS2_>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4618      	mov	r0, r3
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7ff fb00 	bl	800e1a6 <_ZNSaI12PayloadClassED1Ev>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Alloc>
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7ff ffed 	bl	800eb98 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EED1Ev>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3708      	adds	r7, #8
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800ebc8:	b5b0      	push	{r4, r5, r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
 800ebd4:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f000 f8b7 	bl	800ed4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ebde:	4a1c      	ldr	r2, [pc, #112]	; (800ec50 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_+0x88>)
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	601a      	str	r2, [r3, #0]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f103 040c 	add.w	r4, r3, #12
 800ebea:	f107 0314 	add.w	r3, r7, #20
 800ebee:	68b9      	ldr	r1, [r7, #8]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff ffc3 	bl	800eb7c <_ZNSaI12PayloadClassEC1ERKS0_>
 800ebf6:	f107 0314 	add.w	r3, r7, #20
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f000 f94c 	bl	800ee9a <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
 800ec02:	f107 0314 	add.w	r3, r7, #20
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7ff facd 	bl	800e1a6 <_ZNSaI12PayloadClassED1Ev>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800ec0c:	68f8      	ldr	r0, [r7, #12]
 800ec0e:	f000 f830 	bl	800ec72 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800ec12:	4604      	mov	r4, r0
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7ff fad2 	bl	800e1be <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	6838      	ldr	r0, [r7, #0]
 800ec1e:	f7ff fa2f 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ec22:	4603      	mov	r3, r0
 800ec24:	462a      	mov	r2, r5
 800ec26:	4621      	mov	r1, r4
 800ec28:	68b8      	ldr	r0, [r7, #8]
 800ec2a:	f000 f944 	bl	800eeb6 <_ZNSt16allocator_traitsISaI12PayloadClassEE9constructIS0_JRPKcjEEEvRS1_PT_DpOT0_>
	}
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	e00a      	b.n	800ec48 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcjEEES1_DpOT_+0x80>
	: _M_impl(__a)
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	330c      	adds	r3, #12
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7ff ffba 	bl	800ebb0 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7ff f976 	bl	800df30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ec44:	f004 fc44 	bl	80134d0 <__cxa_end_cleanup>
	}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3718      	adds	r7, #24
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ec50:	080182f8 	.word	0x080182f8

0800ec54 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800ec54:	b480      	push	{r7}
 800ec56:	b083      	sub	sp, #12
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	605a      	str	r2, [r3, #4]
	return *this;
 800ec64:	687b      	ldr	r3, [r7, #4]
      }
 800ec66:	4618      	mov	r0, r3
 800ec68:	370c      	adds	r7, #12
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b082      	sub	sp, #8
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	330c      	adds	r3, #12
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f000 f931 	bl	800eee6 <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE6_M_ptrEv>
 800ec84:	4603      	mov	r3, r0
 800ec86:	4618      	mov	r0, r3
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ec8e:	b480      	push	{r7}
 800ec90:	b083      	sub	sp, #12
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	370c      	adds	r7, #12
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr

0800ecba <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	b082      	sub	sp, #8
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
 800ecc2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	6839      	ldr	r1, [r7, #0]
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 f927 	bl	800ef1c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800ece4:	68b8      	ldr	r0, [r7, #8]
 800ece6:	f000 f947 	bl	800ef78 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800ecea:	4602      	mov	r2, r0
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	601a      	str	r2, [r3, #0]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	605a      	str	r2, [r3, #4]
      { }
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	68b9      	ldr	r1, [r7, #8]
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f000 f93c 	bl	800ef8e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
 800ed16:	bf00      	nop
 800ed18:	3710      	adds	r7, #16
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800ed1e:	b480      	push	{r7}
 800ed20:	b083      	sub	sp, #12
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800ed26:	687b      	ldr	r3, [r7, #4]
    }
 800ed28:	4618      	mov	r0, r3
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4618      	mov	r0, r3
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800ed54:	4a07      	ldr	r2, [pc, #28]	; (800ed74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	605a      	str	r2, [r3, #4]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	609a      	str	r2, [r3, #8]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr
 800ed74:	0801834c 	.word	0x0801834c

0800ed78 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
 800ed82:	6839      	ldr	r1, [r7, #0]
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 f915 	bl	800efb4 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EEC1ERKS1_>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <_ZNSt16allocator_traitsISaI11HeaderClassEE9constructIS0_JRKhjEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800ed94:	b590      	push	{r4, r7, lr}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7ff f961 	bl	800e06a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800eda8:	4604      	mov	r4, r0
 800edaa:	6838      	ldr	r0, [r7, #0]
 800edac:	f7ff f968 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800edb0:	4603      	mov	r3, r0
 800edb2:	4622      	mov	r2, r4
 800edb4:	68b9      	ldr	r1, [r7, #8]
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f000 f90a 	bl	800efd0 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE9constructIS1_JRKhjEEEvPT_DpOT0_>
	}
 800edbc:	bf00      	nop
 800edbe:	3714      	adds	r7, #20
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd90      	pop	{r4, r7, pc}

0800edc4 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f929 	bl	800f024 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE7_M_addrEv>
 800edd2:	4603      	mov	r3, r0
 800edd4:	4618      	mov	r0, r3
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	4618      	mov	r0, r3
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr

0800edf2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800edf2:	b480      	push	{r7}
 800edf4:	b083      	sub	sp, #12
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4618      	mov	r0, r3
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ee12:	2200      	movs	r2, #0
 800ee14:	6839      	ldr	r1, [r7, #0]
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 f91e 	bl	800f058 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3708      	adds	r7, #8
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b084      	sub	sp, #16
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	60f8      	str	r0, [r7, #12]
 800ee2e:	60b9      	str	r1, [r7, #8]
 800ee30:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800ee32:	68b8      	ldr	r0, [r7, #8]
 800ee34:	f000 f93e 	bl	800f0b4 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800ee38:	4602      	mov	r2, r0
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	601a      	str	r2, [r3, #0]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	605a      	str	r2, [r3, #4]
      { }
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	4618      	mov	r0, r3
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b084      	sub	sp, #16
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	60f8      	str	r0, [r7, #12]
 800ee56:	60b9      	str	r1, [r7, #8]
 800ee58:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	68b9      	ldr	r1, [r7, #8]
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f000 f933 	bl	800f0ca <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>
 800ee64:	bf00      	nop
 800ee66:	3710      	adds	r7, #16
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
      return __ptr;
 800ee74:	687b      	ldr	r3, [r7, #4]
    }
 800ee76:	4618      	mov	r0, r3
 800ee78:	370c      	adds	r7, #12
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr

0800ee82 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800ee82:	b480      	push	{r7}
 800ee84:	b083      	sub	sp, #12
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
 800ee8a:	6039      	str	r1, [r7, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	370c      	adds	r7, #12
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr

0800ee9a <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b082      	sub	sp, #8
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
 800eea2:	6039      	str	r1, [r7, #0]
 800eea4:	6839      	ldr	r1, [r7, #0]
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 f922 	bl	800f0f0 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EEC1ERKS1_>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3708      	adds	r7, #8
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <_ZNSt16allocator_traitsISaI12PayloadClassEE9constructIS0_JRPKcjEEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800eeb6:	b590      	push	{r4, r7, lr}
 800eeb8:	b085      	sub	sp, #20
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	60f8      	str	r0, [r7, #12]
 800eebe:	60b9      	str	r1, [r7, #8]
 800eec0:	607a      	str	r2, [r7, #4]
 800eec2:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f7ff f97a 	bl	800e1be <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800eeca:	4604      	mov	r4, r0
 800eecc:	6838      	ldr	r0, [r7, #0]
 800eece:	f7ff f8d7 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800eed2:	4603      	mov	r3, r0
 800eed4:	4622      	mov	r2, r4
 800eed6:	68b9      	ldr	r1, [r7, #8]
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f000 f917 	bl	800f10c <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JRPKcjEEEvPT_DpOT0_>
	}
 800eede:	bf00      	nop
 800eee0:	3714      	adds	r7, #20
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd90      	pop	{r4, r7, pc}

0800eee6 <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE6_M_ptrEv>:
      _M_ptr() noexcept
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b082      	sub	sp, #8
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 f936 	bl	800f160 <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE7_M_addrEv>
 800eef4:	4603      	mov	r3, r0
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
	...

0800ef00 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ef08:	4b03      	ldr	r3, [pc, #12]	; (800ef18 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	370c      	adds	r7, #12
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	06666666 	.word	0x06666666

0800ef1c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f7ff ffe9 	bl	800ef00 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	4293      	cmp	r3, r2
 800ef34:	bf8c      	ite	hi
 800ef36:	2301      	movhi	r3, #1
 800ef38:	2300      	movls	r3, #0
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	bf14      	ite	ne
 800ef40:	2301      	movne	r3, #1
 800ef42:	2300      	moveq	r3, #0
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d007      	beq.n	800ef5a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	4a09      	ldr	r2, [pc, #36]	; (800ef74 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d901      	bls.n	800ef56 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ef52:	f005 f802 	bl	8013f5a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ef56:	f004 fffd 	bl	8013f54 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ef5a:	68ba      	ldr	r2, [r7, #8]
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	4413      	add	r3, r2
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	4618      	mov	r0, r3
 800ef66:	f004 fe7a 	bl	8013c5e <_Znwj>
 800ef6a:	4603      	mov	r3, r0
      }
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	0ccccccc 	.word	0x0ccccccc

0800ef78 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4618      	mov	r0, r3
 800ef84:	370c      	adds	r7, #12
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr

0800ef8e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b084      	sub	sp, #16
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	60f8      	str	r0, [r7, #12]
 800ef96:	60b9      	str	r1, [r7, #8]
 800ef98:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	009b      	lsls	r3, r3, #2
 800efa0:	4413      	add	r3, r2
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	4619      	mov	r1, r3
 800efa6:	68b8      	ldr	r0, [r7, #8]
 800efa8:	f004 f9fa 	bl	80133a0 <_ZdlPvj>
      }
 800efac:	bf00      	nop
 800efae:	3710      	adds	r7, #16
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EEC1ERKS1_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
 800efbe:	6839      	ldr	r1, [r7, #0]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff fcbb 	bl	800e93c <_ZNSaI11HeaderClassEC1ERKS0_>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4618      	mov	r0, r3
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE9constructIS1_JRKhjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800efd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd4:	b084      	sub	sp, #16
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	60f8      	str	r0, [r7, #12]
 800efda:	60b9      	str	r1, [r7, #8]
 800efdc:	607a      	str	r2, [r7, #4]
 800efde:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f7ff f842 	bl	800e06a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800efe6:	4603      	mov	r3, r0
 800efe8:	781e      	ldrb	r6, [r3, #0]
 800efea:	6838      	ldr	r0, [r7, #0]
 800efec:	f7ff f848 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800eff0:	4603      	mov	r3, r0
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	fa5f f883 	uxtb.w	r8, r3
 800eff8:	68bc      	ldr	r4, [r7, #8]
 800effa:	4621      	mov	r1, r4
 800effc:	2008      	movs	r0, #8
 800effe:	f7fe f867 	bl	800d0d0 <_ZnwjPv>
 800f002:	4605      	mov	r5, r0
 800f004:	4642      	mov	r2, r8
 800f006:	4631      	mov	r1, r6
 800f008:	4628      	mov	r0, r5
 800f00a:	f7fd f8bf 	bl	800c18c <_ZN11HeaderClassC1Ehh>
 800f00e:	e005      	b.n	800f01c <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE9constructIS1_JRKhjEEEvPT_DpOT0_+0x4c>
 800f010:	4621      	mov	r1, r4
 800f012:	4628      	mov	r0, r5
 800f014:	f7fe f868 	bl	800d0e8 <_ZdlPvS_>
 800f018:	f004 fa5a 	bl	80134d0 <__cxa_end_cleanup>
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f024 <_ZN9__gnu_cxx16__aligned_bufferI11HeaderClassE7_M_addrEv>:
      _M_addr() noexcept
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800f02c:	687b      	ldr	r3, [r7, #4]
      }
 800f02e:	4618      	mov	r0, r3
 800f030:	370c      	adds	r7, #12
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr
	...

0800f03c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800f044:	4b03      	ldr	r3, [pc, #12]	; (800f054 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 800f046:	4618      	mov	r0, r3
 800f048:	370c      	adds	r7, #12
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop
 800f054:	05555555 	.word	0x05555555

0800f058 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f7ff ffe9 	bl	800f03c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE11_M_max_sizeEv>
 800f06a:	4602      	mov	r2, r0
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	4293      	cmp	r3, r2
 800f070:	bf8c      	ite	hi
 800f072:	2301      	movhi	r3, #1
 800f074:	2300      	movls	r3, #0
 800f076:	b2db      	uxtb	r3, r3
 800f078:	2b00      	cmp	r3, #0
 800f07a:	bf14      	ite	ne
 800f07c:	2301      	movne	r3, #1
 800f07e:	2300      	moveq	r3, #0
 800f080:	b2db      	uxtb	r3, r3
 800f082:	2b00      	cmp	r3, #0
 800f084:	d007      	beq.n	800f096 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	4a09      	ldr	r2, [pc, #36]	; (800f0b0 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d901      	bls.n	800f092 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800f08e:	f004 ff64 	bl	8013f5a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800f092:	f004 ff5f 	bl	8013f54 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f096:	68ba      	ldr	r2, [r7, #8]
 800f098:	4613      	mov	r3, r2
 800f09a:	005b      	lsls	r3, r3, #1
 800f09c:	4413      	add	r3, r2
 800f09e:	00db      	lsls	r3, r3, #3
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f004 fddc 	bl	8013c5e <_Znwj>
 800f0a6:	4603      	mov	r3, r0
      }
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3710      	adds	r7, #16
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	0aaaaaaa 	.word	0x0aaaaaaa

0800f0b4 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	370c      	adds	r7, #12
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS2_ELNS_12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b084      	sub	sp, #16
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	60f8      	str	r0, [r7, #12]
 800f0d2:	60b9      	str	r1, [r7, #8]
 800f0d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	4613      	mov	r3, r2
 800f0da:	005b      	lsls	r3, r3, #1
 800f0dc:	4413      	add	r3, r2
 800f0de:	00db      	lsls	r3, r3, #3
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	68b8      	ldr	r0, [r7, #8]
 800f0e4:	f004 f95c 	bl	80133a0 <_ZdlPvj>
      }
 800f0e8:	bf00      	nop
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EEC1ERKS1_>:
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
 800f0fa:	6839      	ldr	r1, [r7, #0]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f7ff fd3d 	bl	800eb7c <_ZNSaI12PayloadClassEC1ERKS0_>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4618      	mov	r0, r3
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JRPKcjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800f10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f110:	b084      	sub	sp, #16
 800f112:	af00      	add	r7, sp, #0
 800f114:	60f8      	str	r0, [r7, #12]
 800f116:	60b9      	str	r1, [r7, #8]
 800f118:	607a      	str	r2, [r7, #4]
 800f11a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7ff f84e 	bl	800e1be <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800f122:	4603      	mov	r3, r0
 800f124:	681e      	ldr	r6, [r3, #0]
 800f126:	6838      	ldr	r0, [r7, #0]
 800f128:	f7fe ffaa 	bl	800e080 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f12c:	4603      	mov	r3, r0
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	fa5f f883 	uxtb.w	r8, r3
 800f134:	68bc      	ldr	r4, [r7, #8]
 800f136:	4621      	mov	r1, r4
 800f138:	200c      	movs	r0, #12
 800f13a:	f7fd ffc9 	bl	800d0d0 <_ZnwjPv>
 800f13e:	4605      	mov	r5, r0
 800f140:	4642      	mov	r2, r8
 800f142:	4631      	mov	r1, r6
 800f144:	4628      	mov	r0, r5
 800f146:	f000 f817 	bl	800f178 <_ZN12PayloadClassC1IKcEEPT_h>
 800f14a:	e005      	b.n	800f158 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE9constructIS1_JRPKcjEEEvPT_DpOT0_+0x4c>
 800f14c:	4621      	mov	r1, r4
 800f14e:	4628      	mov	r0, r5
 800f150:	f7fd ffca 	bl	800d0e8 <_ZdlPvS_>
 800f154:	f004 f9bc 	bl	80134d0 <__cxa_end_cleanup>
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f160 <_ZN9__gnu_cxx16__aligned_bufferI12PayloadClassE7_M_addrEv>:
      _M_addr() noexcept
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800f168:	687b      	ldr	r3, [r7, #4]
      }
 800f16a:	4618      	mov	r0, r3
 800f16c:	370c      	adds	r7, #12
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr
	...

0800f178 <_ZN12PayloadClassC1IKcEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	4613      	mov	r3, r2
 800f184:	71fb      	strb	r3, [r7, #7]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	4618      	mov	r0, r3
 800f18a:	f7fc ffef 	bl	800c16c <_ZN11AbstractMsgC1Ev>
 800f18e:	4a18      	ldr	r2, [pc, #96]	; (800f1f0 <_ZN12PayloadClassC1IKcEEPT_h+0x78>)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	601a      	str	r2, [r3, #0]
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	79fa      	ldrb	r2, [r7, #7]
 800f198:	711a      	strb	r2, [r3, #4]
 800f19a:	79fb      	ldrb	r3, [r7, #7]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f004 fd6f 	bl	8013c80 <_Znaj>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	609a      	str	r2, [r3, #8]
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	75fb      	strb	r3, [r7, #23]
 800f1b2:	e00b      	b.n	800f1cc <_ZN12PayloadClassC1IKcEEPT_h+0x54>
				_data[i] = data_ptr[i];
 800f1b4:	7dfb      	ldrb	r3, [r7, #23]
 800f1b6:	693a      	ldr	r2, [r7, #16]
 800f1b8:	441a      	add	r2, r3
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6899      	ldr	r1, [r3, #8]
 800f1be:	7dfb      	ldrb	r3, [r7, #23]
 800f1c0:	440b      	add	r3, r1
 800f1c2:	7812      	ldrb	r2, [r2, #0]
 800f1c4:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 800f1c6:	7dfb      	ldrb	r3, [r7, #23]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	75fb      	strb	r3, [r7, #23]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	791b      	ldrb	r3, [r3, #4]
 800f1d0:	7dfa      	ldrb	r2, [r7, #23]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d3ee      	bcc.n	800f1b4 <_ZN12PayloadClassC1IKcEEPT_h+0x3c>
		};
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	e005      	b.n	800f1e6 <_ZN12PayloadClassC1IKcEEPT_h+0x6e>
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7fc ffa5 	bl	800c12c <_ZN11AbstractMsgD1Ev>
 800f1e2:	f004 f975 	bl	80134d0 <__cxa_end_cleanup>
		};
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3718      	adds	r7, #24
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	08018330 	.word	0x08018330

0800f1f4 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	4a08      	ldr	r2, [pc, #32]	; (800f220 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	601a      	str	r2, [r3, #0]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	330c      	adds	r3, #12
 800f206:	4618      	mov	r0, r3
 800f208:	f7ff fcd2 	bl	800ebb0 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fe fe8e 	bl	800df30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4618      	mov	r0, r3
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	080182f8 	.word	0x080182f8

0800f224 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f7ff ffe1 	bl	800f1f4 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f232:	2118      	movs	r1, #24
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f004 f8b3 	bl	80133a0 <_ZdlPvj>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4618      	mov	r0, r3
 800f23e:	3708      	adds	r7, #8
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800f244:	b590      	push	{r4, r7, lr}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	330c      	adds	r3, #12
 800f250:	4618      	mov	r0, r3
 800f252:	f000 f8e3 	bl	800f41c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800f256:	4604      	mov	r4, r0
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff fd0a 	bl	800ec72 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800f25e:	4603      	mov	r3, r0
 800f260:	4619      	mov	r1, r3
 800f262:	4620      	mov	r0, r4
 800f264:	f000 f8e6 	bl	800f434 <_ZNSt16allocator_traitsISaI12PayloadClassEE7destroyIS0_EEvRS1_PT_>
      }
 800f268:	bf00      	nop
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd90      	pop	{r4, r7, pc}

0800f270 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800f270:	b580      	push	{r7, lr}
 800f272:	b086      	sub	sp, #24
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	330c      	adds	r3, #12
 800f27c:	4618      	mov	r0, r3
 800f27e:	f000 f8cd 	bl	800f41c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800f282:	4602      	mov	r2, r0
 800f284:	f107 0314 	add.w	r3, r7, #20
 800f288:	4611      	mov	r1, r2
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7ff fc27 	bl	800eade <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f290:	f107 0114 	add.w	r1, r7, #20
 800f294:	f107 030c 	add.w	r3, r7, #12
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7ff fdc3 	bl	800ee26 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7ff ffa7 	bl	800f1f4 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800f2a6:	f107 030c 	add.w	r3, r7, #12
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7ff fc43 	bl	800eb36 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800f2b0:	f107 0314 	add.w	r3, r7, #20
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7ff fc1f 	bl	800eaf8 <_ZNSaISt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f2ba:	3718      	adds	r7, #24
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff fcd1 	bl	800ec72 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800f2d0:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800f2d2:	f7fd ff15 	bl	800d100 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800f2d6:	4602      	mov	r2, r0
	    ||
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d006      	beq.n	800f2ec <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2c>
	    __ti == typeid(_Sp_make_shared_tag)
 800f2de:	4909      	ldr	r1, [pc, #36]	; (800f304 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x44>)
 800f2e0:	6838      	ldr	r0, [r7, #0]
 800f2e2:	f004 fd51 	bl	8013d88 <_ZNKSt9type_infoeqERKS_>
 800f2e6:	4603      	mov	r3, r0
	    ||
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d001      	beq.n	800f2f0 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e000      	b.n	800f2f2 <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x32>
 800f2f0:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	  return __ptr;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	e000      	b.n	800f2fc <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3c>
	return nullptr;
 800f2fa:	2300      	movs	r3, #0
      }
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	08018474 	.word	0x08018474

0800f308 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	4a08      	ldr	r2, [pc, #32]	; (800f334 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x2c>)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	601a      	str	r2, [r3, #0]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	330c      	adds	r3, #12
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7ff fb28 	bl	800e970 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_ImplD1Ev>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4618      	mov	r0, r3
 800f324:	f7fe fe04 	bl	800df30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4618      	mov	r0, r3
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	08018314 	.word	0x08018314

0800f338 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f7ff ffe1 	bl	800f308 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f346:	2114      	movs	r1, #20
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f004 f829 	bl	80133a0 <_ZdlPvj>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4618      	mov	r0, r3
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800f358:	b590      	push	{r4, r7, lr}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	330c      	adds	r3, #12
 800f364:	4618      	mov	r0, r3
 800f366:	f000 f872 	bl	800f44e <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800f36a:	4604      	mov	r4, r0
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff fb60 	bl	800ea32 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800f372:	4603      	mov	r3, r0
 800f374:	4619      	mov	r1, r3
 800f376:	4620      	mov	r0, r4
 800f378:	f000 f875 	bl	800f466 <_ZNSt16allocator_traitsISaI11HeaderClassEE7destroyIS0_EEvRS1_PT_>
      }
 800f37c:	bf00      	nop
 800f37e:	370c      	adds	r7, #12
 800f380:	46bd      	mov	sp, r7
 800f382:	bd90      	pop	{r4, r7, pc}

0800f384 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800f384:	b580      	push	{r7, lr}
 800f386:	b086      	sub	sp, #24
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	330c      	adds	r3, #12
 800f390:	4618      	mov	r0, r3
 800f392:	f000 f85c 	bl	800f44e <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800f396:	4602      	mov	r2, r0
 800f398:	f107 0314 	add.w	r3, r7, #20
 800f39c:	4611      	mov	r1, r2
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff fa7d 	bl	800e89e <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEEC1IS0_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f3a4:	f107 0114 	add.w	r1, r7, #20
 800f3a8:	f107 030c 	add.w	r3, r7, #12
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7ff fc92 	bl	800ecd8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f7ff ffa7 	bl	800f308 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800f3ba:	f107 030c 	add.w	r3, r7, #12
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7ff fa99 	bl	800e8f6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS1_ELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800f3c4:	f107 0314 	add.w	r3, r7, #20
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7ff fa75 	bl	800e8b8 <_ZNSaISt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f3ce:	3718      	adds	r7, #24
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7ff fb27 	bl	800ea32 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800f3e4:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800f3e6:	f7fd fe8b 	bl	800d100 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800f3ea:	4602      	mov	r2, r0
	    ||
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d006      	beq.n	800f400 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2c>
	    __ti == typeid(_Sp_make_shared_tag)
 800f3f2:	4909      	ldr	r1, [pc, #36]	; (800f418 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x44>)
 800f3f4:	6838      	ldr	r0, [r7, #0]
 800f3f6:	f004 fcc7 	bl	8013d88 <_ZNKSt9type_infoeqERKS_>
 800f3fa:	4603      	mov	r3, r0
	    ||
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d001      	beq.n	800f404 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800f400:	2301      	movs	r3, #1
 800f402:	e000      	b.n	800f406 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x32>
 800f404:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800f406:	2b00      	cmp	r3, #0
 800f408:	d001      	beq.n	800f40e <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	  return __ptr;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	e000      	b.n	800f410 <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3c>
	return nullptr;
 800f40e:	2300      	movs	r3, #0
      }
 800f410:	4618      	mov	r0, r3
 800f412:	3710      	adds	r7, #16
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}
 800f418:	08018474 	.word	0x08018474

0800f41c <_ZNSt23_Sp_counted_ptr_inplaceI12PayloadClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 f82b 	bl	800f480 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EE6_S_getERS2_>
 800f42a:	4603      	mov	r3, r0
 800f42c:	4618      	mov	r0, r3
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <_ZNSt16allocator_traitsISaI12PayloadClassEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 f828 	bl	800f496 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE7destroyIS1_EEvPT_>
	}
 800f446:	bf00      	nop
 800f448:	3708      	adds	r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <_ZNSt23_Sp_counted_ptr_inplaceI11HeaderClassSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
 800f44e:	b580      	push	{r7, lr}
 800f450:	b082      	sub	sp, #8
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 f82b 	bl	800f4b2 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EE6_S_getERS2_>
 800f45c:	4603      	mov	r3, r0
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <_ZNSt16allocator_traitsISaI11HeaderClassEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800f466:	b580      	push	{r7, lr}
 800f468:	b082      	sub	sp, #8
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
 800f46e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800f470:	6839      	ldr	r1, [r7, #0]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 f828 	bl	800f4c8 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE7destroyIS1_EEvPT_>
	}
 800f478:	bf00      	nop
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <_ZNSt14_Sp_ebo_helperILi0ESaI12PayloadClassELb1EE6_S_getERS2_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f480:	b480      	push	{r7}
 800f482:	b083      	sub	sp, #12
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4618      	mov	r0, r3
 800f48c:	370c      	adds	r7, #12
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr

0800f496 <_ZN9__gnu_cxx13new_allocatorI12PayloadClassE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 800f496:	b580      	push	{r7, lr}
 800f498:	b082      	sub	sp, #8
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6838      	ldr	r0, [r7, #0]
 800f4a8:	4798      	blx	r3
 800f4aa:	bf00      	nop
 800f4ac:	3708      	adds	r7, #8
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}

0800f4b2 <_ZNSt14_Sp_ebo_helperILi0ESaI11HeaderClassELb1EE6_S_getERS2_>:
 800f4b2:	b480      	push	{r7}
 800f4b4:	b083      	sub	sp, #12
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	6078      	str	r0, [r7, #4]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <_ZN9__gnu_cxx13new_allocatorI11HeaderClassE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	6838      	ldr	r0, [r7, #0]
 800f4da:	4798      	blx	r3
 800f4dc:	bf00      	nop
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	607b      	str	r3, [r7, #4]
 800f4ee:	4b10      	ldr	r3, [pc, #64]	; (800f530 <HAL_MspInit+0x4c>)
 800f4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4f2:	4a0f      	ldr	r2, [pc, #60]	; (800f530 <HAL_MspInit+0x4c>)
 800f4f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f4f8:	6453      	str	r3, [r2, #68]	; 0x44
 800f4fa:	4b0d      	ldr	r3, [pc, #52]	; (800f530 <HAL_MspInit+0x4c>)
 800f4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f502:	607b      	str	r3, [r7, #4]
 800f504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f506:	2300      	movs	r3, #0
 800f508:	603b      	str	r3, [r7, #0]
 800f50a:	4b09      	ldr	r3, [pc, #36]	; (800f530 <HAL_MspInit+0x4c>)
 800f50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f50e:	4a08      	ldr	r2, [pc, #32]	; (800f530 <HAL_MspInit+0x4c>)
 800f510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f514:	6413      	str	r3, [r2, #64]	; 0x40
 800f516:	4b06      	ldr	r3, [pc, #24]	; (800f530 <HAL_MspInit+0x4c>)
 800f518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f51a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f51e:	603b      	str	r3, [r7, #0]
 800f520:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800f522:	2007      	movs	r0, #7
 800f524:	f000 fb8a 	bl	800fc3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f528:	bf00      	nop
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	40023800 	.word	0x40023800

0800f534 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b08a      	sub	sp, #40	; 0x28
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f53c:	f107 0314 	add.w	r3, r7, #20
 800f540:	2200      	movs	r2, #0
 800f542:	601a      	str	r2, [r3, #0]
 800f544:	605a      	str	r2, [r3, #4]
 800f546:	609a      	str	r2, [r3, #8]
 800f548:	60da      	str	r2, [r3, #12]
 800f54a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a28      	ldr	r2, [pc, #160]	; (800f5f4 <HAL_SPI_MspInit+0xc0>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d149      	bne.n	800f5ea <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f556:	2300      	movs	r3, #0
 800f558:	613b      	str	r3, [r7, #16]
 800f55a:	4b27      	ldr	r3, [pc, #156]	; (800f5f8 <HAL_SPI_MspInit+0xc4>)
 800f55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f55e:	4a26      	ldr	r2, [pc, #152]	; (800f5f8 <HAL_SPI_MspInit+0xc4>)
 800f560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f564:	6453      	str	r3, [r2, #68]	; 0x44
 800f566:	4b24      	ldr	r3, [pc, #144]	; (800f5f8 <HAL_SPI_MspInit+0xc4>)
 800f568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f56a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f56e:	613b      	str	r3, [r7, #16]
 800f570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f572:	2300      	movs	r3, #0
 800f574:	60fb      	str	r3, [r7, #12]
 800f576:	4b20      	ldr	r3, [pc, #128]	; (800f5f8 <HAL_SPI_MspInit+0xc4>)
 800f578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f57a:	4a1f      	ldr	r2, [pc, #124]	; (800f5f8 <HAL_SPI_MspInit+0xc4>)
 800f57c:	f043 0301 	orr.w	r3, r3, #1
 800f580:	6313      	str	r3, [r2, #48]	; 0x30
 800f582:	4b1d      	ldr	r3, [pc, #116]	; (800f5f8 <HAL_SPI_MspInit+0xc4>)
 800f584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f586:	f003 0301 	and.w	r3, r3, #1
 800f58a:	60fb      	str	r3, [r7, #12]
 800f58c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f58e:	2300      	movs	r3, #0
 800f590:	60bb      	str	r3, [r7, #8]
 800f592:	4b19      	ldr	r3, [pc, #100]	; (800f5f8 <HAL_SPI_MspInit+0xc4>)
 800f594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f596:	4a18      	ldr	r2, [pc, #96]	; (800f5f8 <HAL_SPI_MspInit+0xc4>)
 800f598:	f043 0302 	orr.w	r3, r3, #2
 800f59c:	6313      	str	r3, [r2, #48]	; 0x30
 800f59e:	4b16      	ldr	r3, [pc, #88]	; (800f5f8 <HAL_SPI_MspInit+0xc4>)
 800f5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5a2:	f003 0302 	and.w	r3, r3, #2
 800f5a6:	60bb      	str	r3, [r7, #8]
 800f5a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f5aa:	23c0      	movs	r3, #192	; 0xc0
 800f5ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5b6:	2303      	movs	r3, #3
 800f5b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f5ba:	2305      	movs	r3, #5
 800f5bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5be:	f107 0314 	add.w	r3, r7, #20
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	480d      	ldr	r0, [pc, #52]	; (800f5fc <HAL_SPI_MspInit+0xc8>)
 800f5c6:	f000 fc19 	bl	800fdfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f5ca:	2308      	movs	r3, #8
 800f5cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f5da:	2305      	movs	r3, #5
 800f5dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f5de:	f107 0314 	add.w	r3, r7, #20
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	4806      	ldr	r0, [pc, #24]	; (800f600 <HAL_SPI_MspInit+0xcc>)
 800f5e6:	f000 fc09 	bl	800fdfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800f5ea:	bf00      	nop
 800f5ec:	3728      	adds	r7, #40	; 0x28
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	40013000 	.word	0x40013000
 800f5f8:	40023800 	.word	0x40023800
 800f5fc:	40020000 	.word	0x40020000
 800f600:	40020400 	.word	0x40020400

0800f604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f614:	d115      	bne.n	800f642 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800f616:	2300      	movs	r3, #0
 800f618:	60fb      	str	r3, [r7, #12]
 800f61a:	4b0c      	ldr	r3, [pc, #48]	; (800f64c <HAL_TIM_Base_MspInit+0x48>)
 800f61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f61e:	4a0b      	ldr	r2, [pc, #44]	; (800f64c <HAL_TIM_Base_MspInit+0x48>)
 800f620:	f043 0301 	orr.w	r3, r3, #1
 800f624:	6413      	str	r3, [r2, #64]	; 0x40
 800f626:	4b09      	ldr	r3, [pc, #36]	; (800f64c <HAL_TIM_Base_MspInit+0x48>)
 800f628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f62a:	f003 0301 	and.w	r3, r3, #1
 800f62e:	60fb      	str	r3, [r7, #12]
 800f630:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800f632:	2200      	movs	r2, #0
 800f634:	2100      	movs	r1, #0
 800f636:	201c      	movs	r0, #28
 800f638:	f000 fb0b 	bl	800fc52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800f63c:	201c      	movs	r0, #28
 800f63e:	f000 fb24 	bl	800fc8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800f642:	bf00      	nop
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	40023800 	.word	0x40023800

0800f650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b08a      	sub	sp, #40	; 0x28
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f658:	f107 0314 	add.w	r3, r7, #20
 800f65c:	2200      	movs	r2, #0
 800f65e:	601a      	str	r2, [r3, #0]
 800f660:	605a      	str	r2, [r3, #4]
 800f662:	609a      	str	r2, [r3, #8]
 800f664:	60da      	str	r2, [r3, #12]
 800f666:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a1d      	ldr	r2, [pc, #116]	; (800f6e4 <HAL_UART_MspInit+0x94>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d133      	bne.n	800f6da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800f672:	2300      	movs	r3, #0
 800f674:	613b      	str	r3, [r7, #16]
 800f676:	4b1c      	ldr	r3, [pc, #112]	; (800f6e8 <HAL_UART_MspInit+0x98>)
 800f678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f67a:	4a1b      	ldr	r2, [pc, #108]	; (800f6e8 <HAL_UART_MspInit+0x98>)
 800f67c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f680:	6413      	str	r3, [r2, #64]	; 0x40
 800f682:	4b19      	ldr	r3, [pc, #100]	; (800f6e8 <HAL_UART_MspInit+0x98>)
 800f684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f68a:	613b      	str	r3, [r7, #16]
 800f68c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f68e:	2300      	movs	r3, #0
 800f690:	60fb      	str	r3, [r7, #12]
 800f692:	4b15      	ldr	r3, [pc, #84]	; (800f6e8 <HAL_UART_MspInit+0x98>)
 800f694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f696:	4a14      	ldr	r2, [pc, #80]	; (800f6e8 <HAL_UART_MspInit+0x98>)
 800f698:	f043 0301 	orr.w	r3, r3, #1
 800f69c:	6313      	str	r3, [r2, #48]	; 0x30
 800f69e:	4b12      	ldr	r3, [pc, #72]	; (800f6e8 <HAL_UART_MspInit+0x98>)
 800f6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	60fb      	str	r3, [r7, #12]
 800f6a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800f6aa:	230c      	movs	r3, #12
 800f6ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6ae:	2302      	movs	r3, #2
 800f6b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6b6:	2303      	movs	r3, #3
 800f6b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f6ba:	2307      	movs	r3, #7
 800f6bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6be:	f107 0314 	add.w	r3, r7, #20
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	4809      	ldr	r0, [pc, #36]	; (800f6ec <HAL_UART_MspInit+0x9c>)
 800f6c6:	f000 fb99 	bl	800fdfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	2026      	movs	r0, #38	; 0x26
 800f6d0:	f000 fabf 	bl	800fc52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f6d4:	2026      	movs	r0, #38	; 0x26
 800f6d6:	f000 fad8 	bl	800fc8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800f6da:	bf00      	nop
 800f6dc:	3728      	adds	r7, #40	; 0x28
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	40004400 	.word	0x40004400
 800f6e8:	40023800 	.word	0x40023800
 800f6ec:	40020000 	.word	0x40020000

0800f6f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800f6f4:	e7fe      	b.n	800f6f4 <NMI_Handler+0x4>

0800f6f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f6f6:	b480      	push	{r7}
 800f6f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f6fa:	e7fe      	b.n	800f6fa <HardFault_Handler+0x4>

0800f6fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f700:	e7fe      	b.n	800f700 <MemManage_Handler+0x4>

0800f702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f702:	b480      	push	{r7}
 800f704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f706:	e7fe      	b.n	800f706 <BusFault_Handler+0x4>

0800f708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f708:	b480      	push	{r7}
 800f70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f70c:	e7fe      	b.n	800f70c <UsageFault_Handler+0x4>

0800f70e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f70e:	b480      	push	{r7}
 800f710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f712:	bf00      	nop
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f71c:	b480      	push	{r7}
 800f71e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f720:	bf00      	nop
 800f722:	46bd      	mov	sp, r7
 800f724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f728:	4770      	bx	lr

0800f72a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f72a:	b480      	push	{r7}
 800f72c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f72e:	bf00      	nop
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f73c:	f000 f96a 	bl	800fa14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f740:	bf00      	nop
 800f742:	bd80      	pop	{r7, pc}

0800f744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800f748:	4802      	ldr	r0, [pc, #8]	; (800f754 <TIM2_IRQHandler+0x10>)
 800f74a:	f002 f955 	bl	80119f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800f74e:	bf00      	nop
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	20000300 	.word	0x20000300

0800f758 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800f75c:	4802      	ldr	r0, [pc, #8]	; (800f768 <USART2_IRQHandler+0x10>)
 800f75e:	f002 febb 	bl	80124d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800f762:	bf00      	nop
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	20000348 	.word	0x20000348

0800f76c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f76c:	b480      	push	{r7}
 800f76e:	af00      	add	r7, sp, #0
  return 1;
 800f770:	2301      	movs	r3, #1
}
 800f772:	4618      	mov	r0, r3
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <_kill>:

int _kill(int pid, int sig)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800f786:	f005 fb91 	bl	8014eac <__errno>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2216      	movs	r2, #22
 800f78e:	601a      	str	r2, [r3, #0]
  return -1;
 800f790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f794:	4618      	mov	r0, r3
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <_exit>:

void _exit (int status)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800f7a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f7ff ffe7 	bl	800f77c <_kill>
  while (1) {}    /* Make sure we hang here */
 800f7ae:	e7fe      	b.n	800f7ae <_exit+0x12>

0800f7b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f7bc:	2300      	movs	r3, #0
 800f7be:	617b      	str	r3, [r7, #20]
 800f7c0:	e00a      	b.n	800f7d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800f7c2:	f3af 8000 	nop.w
 800f7c6:	4601      	mov	r1, r0
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	1c5a      	adds	r2, r3, #1
 800f7cc:	60ba      	str	r2, [r7, #8]
 800f7ce:	b2ca      	uxtb	r2, r1
 800f7d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	617b      	str	r3, [r7, #20]
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	dbf0      	blt.n	800f7c2 <_read+0x12>
  }

  return len;
 800f7e0:	687b      	ldr	r3, [r7, #4]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3718      	adds	r7, #24
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b086      	sub	sp, #24
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	60f8      	str	r0, [r7, #12]
 800f7f2:	60b9      	str	r1, [r7, #8]
 800f7f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	617b      	str	r3, [r7, #20]
 800f7fa:	e009      	b.n	800f810 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	1c5a      	adds	r2, r3, #1
 800f800:	60ba      	str	r2, [r7, #8]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	4618      	mov	r0, r3
 800f806:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	3301      	adds	r3, #1
 800f80e:	617b      	str	r3, [r7, #20]
 800f810:	697a      	ldr	r2, [r7, #20]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	429a      	cmp	r2, r3
 800f816:	dbf1      	blt.n	800f7fc <_write+0x12>
  }
  return len;
 800f818:	687b      	ldr	r3, [r7, #4]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3718      	adds	r7, #24
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <_close>:

int _close(int file)
{
 800f822:	b480      	push	{r7}
 800f824:	b083      	sub	sp, #12
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800f82a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f82e:	4618      	mov	r0, r3
 800f830:	370c      	adds	r7, #12
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr

0800f83a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f83a:	b480      	push	{r7}
 800f83c:	b083      	sub	sp, #12
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
 800f842:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f84a:	605a      	str	r2, [r3, #4]
  return 0;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	370c      	adds	r7, #12
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr

0800f85a <_isatty>:

int _isatty(int file)
{
 800f85a:	b480      	push	{r7}
 800f85c:	b083      	sub	sp, #12
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800f862:	2301      	movs	r3, #1
}
 800f864:	4618      	mov	r0, r3
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f870:	b480      	push	{r7}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3714      	adds	r7, #20
 800f882:	46bd      	mov	sp, r7
 800f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f888:	4770      	bx	lr
	...

0800f88c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b086      	sub	sp, #24
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f894:	4a14      	ldr	r2, [pc, #80]	; (800f8e8 <_sbrk+0x5c>)
 800f896:	4b15      	ldr	r3, [pc, #84]	; (800f8ec <_sbrk+0x60>)
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f8a0:	4b13      	ldr	r3, [pc, #76]	; (800f8f0 <_sbrk+0x64>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d102      	bne.n	800f8ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f8a8:	4b11      	ldr	r3, [pc, #68]	; (800f8f0 <_sbrk+0x64>)
 800f8aa:	4a12      	ldr	r2, [pc, #72]	; (800f8f4 <_sbrk+0x68>)
 800f8ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f8ae:	4b10      	ldr	r3, [pc, #64]	; (800f8f0 <_sbrk+0x64>)
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	693a      	ldr	r2, [r7, #16]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d207      	bcs.n	800f8cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f8bc:	f005 faf6 	bl	8014eac <__errno>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	220c      	movs	r2, #12
 800f8c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f8c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8ca:	e009      	b.n	800f8e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f8cc:	4b08      	ldr	r3, [pc, #32]	; (800f8f0 <_sbrk+0x64>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f8d2:	4b07      	ldr	r3, [pc, #28]	; (800f8f0 <_sbrk+0x64>)
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4413      	add	r3, r2
 800f8da:	4a05      	ldr	r2, [pc, #20]	; (800f8f0 <_sbrk+0x64>)
 800f8dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f8de:	68fb      	ldr	r3, [r7, #12]
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3718      	adds	r7, #24
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	20020000 	.word	0x20020000
 800f8ec:	00000400 	.word	0x00000400
 800f8f0:	200003e8 	.word	0x200003e8
 800f8f4:	20000570 	.word	0x20000570

0800f8f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f8fc:	4b06      	ldr	r3, [pc, #24]	; (800f918 <SystemInit+0x20>)
 800f8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f902:	4a05      	ldr	r2, [pc, #20]	; (800f918 <SystemInit+0x20>)
 800f904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f90c:	bf00      	nop
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	e000ed00 	.word	0xe000ed00

0800f91c <Reset_Handler>:
 800f91c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f954 <LoopFillZerobss+0x12>
 800f920:	480d      	ldr	r0, [pc, #52]	; (800f958 <LoopFillZerobss+0x16>)
 800f922:	490e      	ldr	r1, [pc, #56]	; (800f95c <LoopFillZerobss+0x1a>)
 800f924:	4a0e      	ldr	r2, [pc, #56]	; (800f960 <LoopFillZerobss+0x1e>)
 800f926:	2300      	movs	r3, #0
 800f928:	e002      	b.n	800f930 <LoopCopyDataInit>

0800f92a <CopyDataInit>:
 800f92a:	58d4      	ldr	r4, [r2, r3]
 800f92c:	50c4      	str	r4, [r0, r3]
 800f92e:	3304      	adds	r3, #4

0800f930 <LoopCopyDataInit>:
 800f930:	18c4      	adds	r4, r0, r3
 800f932:	428c      	cmp	r4, r1
 800f934:	d3f9      	bcc.n	800f92a <CopyDataInit>
 800f936:	4a0b      	ldr	r2, [pc, #44]	; (800f964 <LoopFillZerobss+0x22>)
 800f938:	4c0b      	ldr	r4, [pc, #44]	; (800f968 <LoopFillZerobss+0x26>)
 800f93a:	2300      	movs	r3, #0
 800f93c:	e001      	b.n	800f942 <LoopFillZerobss>

0800f93e <FillZerobss>:
 800f93e:	6013      	str	r3, [r2, #0]
 800f940:	3204      	adds	r2, #4

0800f942 <LoopFillZerobss>:
 800f942:	42a2      	cmp	r2, r4
 800f944:	d3fb      	bcc.n	800f93e <FillZerobss>
 800f946:	f7ff ffd7 	bl	800f8f8 <SystemInit>
 800f94a:	f005 fab5 	bl	8014eb8 <__libc_init_array>
 800f94e:	f7fc fdcf 	bl	800c4f0 <main>
 800f952:	4770      	bx	lr
 800f954:	20020000 	.word	0x20020000
 800f958:	20000000 	.word	0x20000000
 800f95c:	200001dc 	.word	0x200001dc
 800f960:	0801af6c 	.word	0x0801af6c
 800f964:	200001dc 	.word	0x200001dc
 800f968:	2000056c 	.word	0x2000056c

0800f96c <ADC_IRQHandler>:
 800f96c:	e7fe      	b.n	800f96c <ADC_IRQHandler>
	...

0800f970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f974:	4b0e      	ldr	r3, [pc, #56]	; (800f9b0 <HAL_Init+0x40>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4a0d      	ldr	r2, [pc, #52]	; (800f9b0 <HAL_Init+0x40>)
 800f97a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f97e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f980:	4b0b      	ldr	r3, [pc, #44]	; (800f9b0 <HAL_Init+0x40>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a0a      	ldr	r2, [pc, #40]	; (800f9b0 <HAL_Init+0x40>)
 800f986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f98a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f98c:	4b08      	ldr	r3, [pc, #32]	; (800f9b0 <HAL_Init+0x40>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a07      	ldr	r2, [pc, #28]	; (800f9b0 <HAL_Init+0x40>)
 800f992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f998:	2003      	movs	r0, #3
 800f99a:	f000 f94f 	bl	800fc3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f99e:	2000      	movs	r0, #0
 800f9a0:	f000 f808 	bl	800f9b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f9a4:	f7ff fd9e 	bl	800f4e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f9a8:	2300      	movs	r3, #0
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	40023c00 	.word	0x40023c00

0800f9b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f9bc:	4b12      	ldr	r3, [pc, #72]	; (800fa08 <HAL_InitTick+0x54>)
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	4b12      	ldr	r3, [pc, #72]	; (800fa0c <HAL_InitTick+0x58>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f9ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f000 f967 	bl	800fca6 <HAL_SYSTICK_Config>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d001      	beq.n	800f9e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	e00e      	b.n	800fa00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2b0f      	cmp	r3, #15
 800f9e6:	d80a      	bhi.n	800f9fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	6879      	ldr	r1, [r7, #4]
 800f9ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9f0:	f000 f92f 	bl	800fc52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f9f4:	4a06      	ldr	r2, [pc, #24]	; (800fa10 <HAL_InitTick+0x5c>)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	e000      	b.n	800fa00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800f9fe:	2301      	movs	r3, #1
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3708      	adds	r7, #8
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	20000000 	.word	0x20000000
 800fa0c:	20000008 	.word	0x20000008
 800fa10:	20000004 	.word	0x20000004

0800fa14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fa14:	b480      	push	{r7}
 800fa16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800fa18:	4b06      	ldr	r3, [pc, #24]	; (800fa34 <HAL_IncTick+0x20>)
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <HAL_IncTick+0x24>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4413      	add	r3, r2
 800fa24:	4a04      	ldr	r2, [pc, #16]	; (800fa38 <HAL_IncTick+0x24>)
 800fa26:	6013      	str	r3, [r2, #0]
}
 800fa28:	bf00      	nop
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	20000008 	.word	0x20000008
 800fa38:	200003ec 	.word	0x200003ec

0800fa3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	af00      	add	r7, sp, #0
  return uwTick;
 800fa40:	4b03      	ldr	r3, [pc, #12]	; (800fa50 <HAL_GetTick+0x14>)
 800fa42:	681b      	ldr	r3, [r3, #0]
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr
 800fa4e:	bf00      	nop
 800fa50:	200003ec 	.word	0x200003ec

0800fa54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800fa5c:	f7ff ffee 	bl	800fa3c <HAL_GetTick>
 800fa60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa6c:	d005      	beq.n	800fa7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800fa6e:	4b0a      	ldr	r3, [pc, #40]	; (800fa98 <HAL_Delay+0x44>)
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	4413      	add	r3, r2
 800fa78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800fa7a:	bf00      	nop
 800fa7c:	f7ff ffde 	bl	800fa3c <HAL_GetTick>
 800fa80:	4602      	mov	r2, r0
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	1ad3      	subs	r3, r2, r3
 800fa86:	68fa      	ldr	r2, [r7, #12]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d8f7      	bhi.n	800fa7c <HAL_Delay+0x28>
  {
  }
}
 800fa8c:	bf00      	nop
 800fa8e:	bf00      	nop
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	20000008 	.word	0x20000008

0800fa9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b085      	sub	sp, #20
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f003 0307 	and.w	r3, r3, #7
 800faaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800faac:	4b0c      	ldr	r3, [pc, #48]	; (800fae0 <__NVIC_SetPriorityGrouping+0x44>)
 800faae:	68db      	ldr	r3, [r3, #12]
 800fab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800fab2:	68ba      	ldr	r2, [r7, #8]
 800fab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800fab8:	4013      	ands	r3, r2
 800faba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800fac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800fac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800facc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800face:	4a04      	ldr	r2, [pc, #16]	; (800fae0 <__NVIC_SetPriorityGrouping+0x44>)
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	60d3      	str	r3, [r2, #12]
}
 800fad4:	bf00      	nop
 800fad6:	3714      	adds	r7, #20
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr
 800fae0:	e000ed00 	.word	0xe000ed00

0800fae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800fae4:	b480      	push	{r7}
 800fae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800fae8:	4b04      	ldr	r3, [pc, #16]	; (800fafc <__NVIC_GetPriorityGrouping+0x18>)
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	0a1b      	lsrs	r3, r3, #8
 800faee:	f003 0307 	and.w	r3, r3, #7
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr
 800fafc:	e000ed00 	.word	0xe000ed00

0800fb00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	4603      	mov	r3, r0
 800fb08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fb0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	db0b      	blt.n	800fb2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fb12:	79fb      	ldrb	r3, [r7, #7]
 800fb14:	f003 021f 	and.w	r2, r3, #31
 800fb18:	4907      	ldr	r1, [pc, #28]	; (800fb38 <__NVIC_EnableIRQ+0x38>)
 800fb1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb1e:	095b      	lsrs	r3, r3, #5
 800fb20:	2001      	movs	r0, #1
 800fb22:	fa00 f202 	lsl.w	r2, r0, r2
 800fb26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800fb2a:	bf00      	nop
 800fb2c:	370c      	adds	r7, #12
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop
 800fb38:	e000e100 	.word	0xe000e100

0800fb3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	4603      	mov	r3, r0
 800fb44:	6039      	str	r1, [r7, #0]
 800fb46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fb48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	db0a      	blt.n	800fb66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	b2da      	uxtb	r2, r3
 800fb54:	490c      	ldr	r1, [pc, #48]	; (800fb88 <__NVIC_SetPriority+0x4c>)
 800fb56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb5a:	0112      	lsls	r2, r2, #4
 800fb5c:	b2d2      	uxtb	r2, r2
 800fb5e:	440b      	add	r3, r1
 800fb60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800fb64:	e00a      	b.n	800fb7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	b2da      	uxtb	r2, r3
 800fb6a:	4908      	ldr	r1, [pc, #32]	; (800fb8c <__NVIC_SetPriority+0x50>)
 800fb6c:	79fb      	ldrb	r3, [r7, #7]
 800fb6e:	f003 030f 	and.w	r3, r3, #15
 800fb72:	3b04      	subs	r3, #4
 800fb74:	0112      	lsls	r2, r2, #4
 800fb76:	b2d2      	uxtb	r2, r2
 800fb78:	440b      	add	r3, r1
 800fb7a:	761a      	strb	r2, [r3, #24]
}
 800fb7c:	bf00      	nop
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr
 800fb88:	e000e100 	.word	0xe000e100
 800fb8c:	e000ed00 	.word	0xe000ed00

0800fb90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b089      	sub	sp, #36	; 0x24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f003 0307 	and.w	r3, r3, #7
 800fba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	f1c3 0307 	rsb	r3, r3, #7
 800fbaa:	2b04      	cmp	r3, #4
 800fbac:	bf28      	it	cs
 800fbae:	2304      	movcs	r3, #4
 800fbb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800fbb2:	69fb      	ldr	r3, [r7, #28]
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	2b06      	cmp	r3, #6
 800fbb8:	d902      	bls.n	800fbc0 <NVIC_EncodePriority+0x30>
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	3b03      	subs	r3, #3
 800fbbe:	e000      	b.n	800fbc2 <NVIC_EncodePriority+0x32>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fbc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	fa02 f303 	lsl.w	r3, r2, r3
 800fbce:	43da      	mvns	r2, r3
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	401a      	ands	r2, r3
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800fbd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	fa01 f303 	lsl.w	r3, r1, r3
 800fbe2:	43d9      	mvns	r1, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fbe8:	4313      	orrs	r3, r2
         );
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3724      	adds	r7, #36	; 0x24
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr
	...

0800fbf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	3b01      	subs	r3, #1
 800fc04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fc08:	d301      	bcc.n	800fc0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e00f      	b.n	800fc2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fc0e:	4a0a      	ldr	r2, [pc, #40]	; (800fc38 <SysTick_Config+0x40>)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	3b01      	subs	r3, #1
 800fc14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fc16:	210f      	movs	r1, #15
 800fc18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc1c:	f7ff ff8e 	bl	800fb3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fc20:	4b05      	ldr	r3, [pc, #20]	; (800fc38 <SysTick_Config+0x40>)
 800fc22:	2200      	movs	r2, #0
 800fc24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fc26:	4b04      	ldr	r3, [pc, #16]	; (800fc38 <SysTick_Config+0x40>)
 800fc28:	2207      	movs	r2, #7
 800fc2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3708      	adds	r7, #8
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	e000e010 	.word	0xe000e010

0800fc3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7ff ff29 	bl	800fa9c <__NVIC_SetPriorityGrouping>
}
 800fc4a:	bf00      	nop
 800fc4c:	3708      	adds	r7, #8
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}

0800fc52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fc52:	b580      	push	{r7, lr}
 800fc54:	b086      	sub	sp, #24
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	4603      	mov	r3, r0
 800fc5a:	60b9      	str	r1, [r7, #8]
 800fc5c:	607a      	str	r2, [r7, #4]
 800fc5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800fc60:	2300      	movs	r3, #0
 800fc62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800fc64:	f7ff ff3e 	bl	800fae4 <__NVIC_GetPriorityGrouping>
 800fc68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	68b9      	ldr	r1, [r7, #8]
 800fc6e:	6978      	ldr	r0, [r7, #20]
 800fc70:	f7ff ff8e 	bl	800fb90 <NVIC_EncodePriority>
 800fc74:	4602      	mov	r2, r0
 800fc76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc7a:	4611      	mov	r1, r2
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7ff ff5d 	bl	800fb3c <__NVIC_SetPriority>
}
 800fc82:	bf00      	nop
 800fc84:	3718      	adds	r7, #24
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b082      	sub	sp, #8
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	4603      	mov	r3, r0
 800fc92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800fc94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7ff ff31 	bl	800fb00 <__NVIC_EnableIRQ>
}
 800fc9e:	bf00      	nop
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}

0800fca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b082      	sub	sp, #8
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f7ff ffa2 	bl	800fbf8 <SysTick_Config>
 800fcb4:	4603      	mov	r3, r0
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b084      	sub	sp, #16
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800fccc:	f7ff feb6 	bl	800fa3c <HAL_GetTick>
 800fcd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	d008      	beq.n	800fcf0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2280      	movs	r2, #128	; 0x80
 800fce2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800fcec:	2301      	movs	r3, #1
 800fcee:	e052      	b.n	800fd96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f022 0216 	bic.w	r2, r2, #22
 800fcfe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	695a      	ldr	r2, [r3, #20]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fd0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d103      	bne.n	800fd20 <HAL_DMA_Abort+0x62>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d007      	beq.n	800fd30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f022 0208 	bic.w	r2, r2, #8
 800fd2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f022 0201 	bic.w	r2, r2, #1
 800fd3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fd40:	e013      	b.n	800fd6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800fd42:	f7ff fe7b 	bl	800fa3c <HAL_GetTick>
 800fd46:	4602      	mov	r2, r0
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	2b05      	cmp	r3, #5
 800fd4e:	d90c      	bls.n	800fd6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2220      	movs	r2, #32
 800fd54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2203      	movs	r2, #3
 800fd5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800fd66:	2303      	movs	r3, #3
 800fd68:	e015      	b.n	800fd96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f003 0301 	and.w	r3, r3, #1
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1e4      	bne.n	800fd42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd7c:	223f      	movs	r2, #63	; 0x3f
 800fd7e:	409a      	lsls	r2, r3
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2201      	movs	r2, #1
 800fd88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800fd94:	2300      	movs	r3, #0
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}

0800fd9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fd9e:	b480      	push	{r7}
 800fda0:	b083      	sub	sp, #12
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d004      	beq.n	800fdbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2280      	movs	r2, #128	; 0x80
 800fdb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800fdb8:	2301      	movs	r3, #1
 800fdba:	e00c      	b.n	800fdd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2205      	movs	r2, #5
 800fdc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f022 0201 	bic.w	r2, r2, #1
 800fdd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	370c      	adds	r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr

0800fde2 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800fde2:	b480      	push	{r7}
 800fde4:	b083      	sub	sp, #12
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	370c      	adds	r7, #12
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr
	...

0800fdfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b089      	sub	sp, #36	; 0x24
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800fe06:	2300      	movs	r3, #0
 800fe08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fe12:	2300      	movs	r3, #0
 800fe14:	61fb      	str	r3, [r7, #28]
 800fe16:	e165      	b.n	80100e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800fe18:	2201      	movs	r2, #1
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	697a      	ldr	r2, [r7, #20]
 800fe28:	4013      	ands	r3, r2
 800fe2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800fe2c:	693a      	ldr	r2, [r7, #16]
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	f040 8154 	bne.w	80100de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	f003 0303 	and.w	r3, r3, #3
 800fe3e:	2b01      	cmp	r3, #1
 800fe40:	d005      	beq.n	800fe4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fe4a:	2b02      	cmp	r3, #2
 800fe4c:	d130      	bne.n	800feb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	689b      	ldr	r3, [r3, #8]
 800fe52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fe54:	69fb      	ldr	r3, [r7, #28]
 800fe56:	005b      	lsls	r3, r3, #1
 800fe58:	2203      	movs	r2, #3
 800fe5a:	fa02 f303 	lsl.w	r3, r2, r3
 800fe5e:	43db      	mvns	r3, r3
 800fe60:	69ba      	ldr	r2, [r7, #24]
 800fe62:	4013      	ands	r3, r2
 800fe64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	68da      	ldr	r2, [r3, #12]
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	005b      	lsls	r3, r3, #1
 800fe6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe72:	69ba      	ldr	r2, [r7, #24]
 800fe74:	4313      	orrs	r3, r2
 800fe76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	69ba      	ldr	r2, [r7, #24]
 800fe7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fe84:	2201      	movs	r2, #1
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	fa02 f303 	lsl.w	r3, r2, r3
 800fe8c:	43db      	mvns	r3, r3
 800fe8e:	69ba      	ldr	r2, [r7, #24]
 800fe90:	4013      	ands	r3, r2
 800fe92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	091b      	lsrs	r3, r3, #4
 800fe9a:	f003 0201 	and.w	r2, r3, #1
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	fa02 f303 	lsl.w	r3, r2, r3
 800fea4:	69ba      	ldr	r2, [r7, #24]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	69ba      	ldr	r2, [r7, #24]
 800feae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	f003 0303 	and.w	r3, r3, #3
 800feb8:	2b03      	cmp	r3, #3
 800feba:	d017      	beq.n	800feec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	005b      	lsls	r3, r3, #1
 800fec6:	2203      	movs	r2, #3
 800fec8:	fa02 f303 	lsl.w	r3, r2, r3
 800fecc:	43db      	mvns	r3, r3
 800fece:	69ba      	ldr	r2, [r7, #24]
 800fed0:	4013      	ands	r3, r2
 800fed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	689a      	ldr	r2, [r3, #8]
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	005b      	lsls	r3, r3, #1
 800fedc:	fa02 f303 	lsl.w	r3, r2, r3
 800fee0:	69ba      	ldr	r2, [r7, #24]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	69ba      	ldr	r2, [r7, #24]
 800feea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	f003 0303 	and.w	r3, r3, #3
 800fef4:	2b02      	cmp	r3, #2
 800fef6:	d123      	bne.n	800ff40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	08da      	lsrs	r2, r3, #3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	3208      	adds	r2, #8
 800ff00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	f003 0307 	and.w	r3, r3, #7
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	220f      	movs	r2, #15
 800ff10:	fa02 f303 	lsl.w	r3, r2, r3
 800ff14:	43db      	mvns	r3, r3
 800ff16:	69ba      	ldr	r2, [r7, #24]
 800ff18:	4013      	ands	r3, r2
 800ff1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	691a      	ldr	r2, [r3, #16]
 800ff20:	69fb      	ldr	r3, [r7, #28]
 800ff22:	f003 0307 	and.w	r3, r3, #7
 800ff26:	009b      	lsls	r3, r3, #2
 800ff28:	fa02 f303 	lsl.w	r3, r2, r3
 800ff2c:	69ba      	ldr	r2, [r7, #24]
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	08da      	lsrs	r2, r3, #3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	3208      	adds	r2, #8
 800ff3a:	69b9      	ldr	r1, [r7, #24]
 800ff3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ff46:	69fb      	ldr	r3, [r7, #28]
 800ff48:	005b      	lsls	r3, r3, #1
 800ff4a:	2203      	movs	r2, #3
 800ff4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff50:	43db      	mvns	r3, r3
 800ff52:	69ba      	ldr	r2, [r7, #24]
 800ff54:	4013      	ands	r3, r2
 800ff56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	f003 0203 	and.w	r2, r3, #3
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	005b      	lsls	r3, r3, #1
 800ff64:	fa02 f303 	lsl.w	r3, r2, r3
 800ff68:	69ba      	ldr	r2, [r7, #24]
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	69ba      	ldr	r2, [r7, #24]
 800ff72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f000 80ae 	beq.w	80100de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ff82:	2300      	movs	r3, #0
 800ff84:	60fb      	str	r3, [r7, #12]
 800ff86:	4b5d      	ldr	r3, [pc, #372]	; (80100fc <HAL_GPIO_Init+0x300>)
 800ff88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff8a:	4a5c      	ldr	r2, [pc, #368]	; (80100fc <HAL_GPIO_Init+0x300>)
 800ff8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ff90:	6453      	str	r3, [r2, #68]	; 0x44
 800ff92:	4b5a      	ldr	r3, [pc, #360]	; (80100fc <HAL_GPIO_Init+0x300>)
 800ff94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff9a:	60fb      	str	r3, [r7, #12]
 800ff9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ff9e:	4a58      	ldr	r2, [pc, #352]	; (8010100 <HAL_GPIO_Init+0x304>)
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	089b      	lsrs	r3, r3, #2
 800ffa4:	3302      	adds	r3, #2
 800ffa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	f003 0303 	and.w	r3, r3, #3
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	220f      	movs	r2, #15
 800ffb6:	fa02 f303 	lsl.w	r3, r2, r3
 800ffba:	43db      	mvns	r3, r3
 800ffbc:	69ba      	ldr	r2, [r7, #24]
 800ffbe:	4013      	ands	r3, r2
 800ffc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	4a4f      	ldr	r2, [pc, #316]	; (8010104 <HAL_GPIO_Init+0x308>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d025      	beq.n	8010016 <HAL_GPIO_Init+0x21a>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4a4e      	ldr	r2, [pc, #312]	; (8010108 <HAL_GPIO_Init+0x30c>)
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	d01f      	beq.n	8010012 <HAL_GPIO_Init+0x216>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	4a4d      	ldr	r2, [pc, #308]	; (801010c <HAL_GPIO_Init+0x310>)
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d019      	beq.n	801000e <HAL_GPIO_Init+0x212>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4a4c      	ldr	r2, [pc, #304]	; (8010110 <HAL_GPIO_Init+0x314>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d013      	beq.n	801000a <HAL_GPIO_Init+0x20e>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4a4b      	ldr	r2, [pc, #300]	; (8010114 <HAL_GPIO_Init+0x318>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d00d      	beq.n	8010006 <HAL_GPIO_Init+0x20a>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4a4a      	ldr	r2, [pc, #296]	; (8010118 <HAL_GPIO_Init+0x31c>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d007      	beq.n	8010002 <HAL_GPIO_Init+0x206>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4a49      	ldr	r2, [pc, #292]	; (801011c <HAL_GPIO_Init+0x320>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d101      	bne.n	800fffe <HAL_GPIO_Init+0x202>
 800fffa:	2306      	movs	r3, #6
 800fffc:	e00c      	b.n	8010018 <HAL_GPIO_Init+0x21c>
 800fffe:	2307      	movs	r3, #7
 8010000:	e00a      	b.n	8010018 <HAL_GPIO_Init+0x21c>
 8010002:	2305      	movs	r3, #5
 8010004:	e008      	b.n	8010018 <HAL_GPIO_Init+0x21c>
 8010006:	2304      	movs	r3, #4
 8010008:	e006      	b.n	8010018 <HAL_GPIO_Init+0x21c>
 801000a:	2303      	movs	r3, #3
 801000c:	e004      	b.n	8010018 <HAL_GPIO_Init+0x21c>
 801000e:	2302      	movs	r3, #2
 8010010:	e002      	b.n	8010018 <HAL_GPIO_Init+0x21c>
 8010012:	2301      	movs	r3, #1
 8010014:	e000      	b.n	8010018 <HAL_GPIO_Init+0x21c>
 8010016:	2300      	movs	r3, #0
 8010018:	69fa      	ldr	r2, [r7, #28]
 801001a:	f002 0203 	and.w	r2, r2, #3
 801001e:	0092      	lsls	r2, r2, #2
 8010020:	4093      	lsls	r3, r2
 8010022:	69ba      	ldr	r2, [r7, #24]
 8010024:	4313      	orrs	r3, r2
 8010026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010028:	4935      	ldr	r1, [pc, #212]	; (8010100 <HAL_GPIO_Init+0x304>)
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	089b      	lsrs	r3, r3, #2
 801002e:	3302      	adds	r3, #2
 8010030:	69ba      	ldr	r2, [r7, #24]
 8010032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010036:	4b3a      	ldr	r3, [pc, #232]	; (8010120 <HAL_GPIO_Init+0x324>)
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	43db      	mvns	r3, r3
 8010040:	69ba      	ldr	r2, [r7, #24]
 8010042:	4013      	ands	r3, r2
 8010044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801004e:	2b00      	cmp	r3, #0
 8010050:	d003      	beq.n	801005a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8010052:	69ba      	ldr	r2, [r7, #24]
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	4313      	orrs	r3, r2
 8010058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801005a:	4a31      	ldr	r2, [pc, #196]	; (8010120 <HAL_GPIO_Init+0x324>)
 801005c:	69bb      	ldr	r3, [r7, #24]
 801005e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010060:	4b2f      	ldr	r3, [pc, #188]	; (8010120 <HAL_GPIO_Init+0x324>)
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	43db      	mvns	r3, r3
 801006a:	69ba      	ldr	r2, [r7, #24]
 801006c:	4013      	ands	r3, r2
 801006e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010078:	2b00      	cmp	r3, #0
 801007a:	d003      	beq.n	8010084 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 801007c:	69ba      	ldr	r2, [r7, #24]
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	4313      	orrs	r3, r2
 8010082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010084:	4a26      	ldr	r2, [pc, #152]	; (8010120 <HAL_GPIO_Init+0x324>)
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801008a:	4b25      	ldr	r3, [pc, #148]	; (8010120 <HAL_GPIO_Init+0x324>)
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	43db      	mvns	r3, r3
 8010094:	69ba      	ldr	r2, [r7, #24]
 8010096:	4013      	ands	r3, r2
 8010098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d003      	beq.n	80100ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80100a6:	69ba      	ldr	r2, [r7, #24]
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80100ae:	4a1c      	ldr	r2, [pc, #112]	; (8010120 <HAL_GPIO_Init+0x324>)
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80100b4:	4b1a      	ldr	r3, [pc, #104]	; (8010120 <HAL_GPIO_Init+0x324>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	43db      	mvns	r3, r3
 80100be:	69ba      	ldr	r2, [r7, #24]
 80100c0:	4013      	ands	r3, r2
 80100c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d003      	beq.n	80100d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80100d0:	69ba      	ldr	r2, [r7, #24]
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	4313      	orrs	r3, r2
 80100d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80100d8:	4a11      	ldr	r2, [pc, #68]	; (8010120 <HAL_GPIO_Init+0x324>)
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	3301      	adds	r3, #1
 80100e2:	61fb      	str	r3, [r7, #28]
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	2b0f      	cmp	r3, #15
 80100e8:	f67f ae96 	bls.w	800fe18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80100ec:	bf00      	nop
 80100ee:	bf00      	nop
 80100f0:	3724      	adds	r7, #36	; 0x24
 80100f2:	46bd      	mov	sp, r7
 80100f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f8:	4770      	bx	lr
 80100fa:	bf00      	nop
 80100fc:	40023800 	.word	0x40023800
 8010100:	40013800 	.word	0x40013800
 8010104:	40020000 	.word	0x40020000
 8010108:	40020400 	.word	0x40020400
 801010c:	40020800 	.word	0x40020800
 8010110:	40020c00 	.word	0x40020c00
 8010114:	40021000 	.word	0x40021000
 8010118:	40021400 	.word	0x40021400
 801011c:	40021800 	.word	0x40021800
 8010120:	40013c00 	.word	0x40013c00

08010124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	460b      	mov	r3, r1
 801012e:	807b      	strh	r3, [r7, #2]
 8010130:	4613      	mov	r3, r2
 8010132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010134:	787b      	ldrb	r3, [r7, #1]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d003      	beq.n	8010142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801013a:	887a      	ldrh	r2, [r7, #2]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010140:	e003      	b.n	801014a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010142:	887b      	ldrh	r3, [r7, #2]
 8010144:	041a      	lsls	r2, r3, #16
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	619a      	str	r2, [r3, #24]
}
 801014a:	bf00      	nop
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr
	...

08010158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d101      	bne.n	801016c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010168:	2301      	movs	r3, #1
 801016a:	e0cc      	b.n	8010306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801016c:	4b68      	ldr	r3, [pc, #416]	; (8010310 <HAL_RCC_ClockConfig+0x1b8>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f003 030f 	and.w	r3, r3, #15
 8010174:	683a      	ldr	r2, [r7, #0]
 8010176:	429a      	cmp	r2, r3
 8010178:	d90c      	bls.n	8010194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801017a:	4b65      	ldr	r3, [pc, #404]	; (8010310 <HAL_RCC_ClockConfig+0x1b8>)
 801017c:	683a      	ldr	r2, [r7, #0]
 801017e:	b2d2      	uxtb	r2, r2
 8010180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010182:	4b63      	ldr	r3, [pc, #396]	; (8010310 <HAL_RCC_ClockConfig+0x1b8>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f003 030f 	and.w	r3, r3, #15
 801018a:	683a      	ldr	r2, [r7, #0]
 801018c:	429a      	cmp	r2, r3
 801018e:	d001      	beq.n	8010194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010190:	2301      	movs	r3, #1
 8010192:	e0b8      	b.n	8010306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f003 0302 	and.w	r3, r3, #2
 801019c:	2b00      	cmp	r3, #0
 801019e:	d020      	beq.n	80101e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f003 0304 	and.w	r3, r3, #4
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d005      	beq.n	80101b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80101ac:	4b59      	ldr	r3, [pc, #356]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80101ae:	689b      	ldr	r3, [r3, #8]
 80101b0:	4a58      	ldr	r2, [pc, #352]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80101b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80101b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f003 0308 	and.w	r3, r3, #8
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d005      	beq.n	80101d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80101c4:	4b53      	ldr	r3, [pc, #332]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80101c6:	689b      	ldr	r3, [r3, #8]
 80101c8:	4a52      	ldr	r2, [pc, #328]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80101ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80101ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80101d0:	4b50      	ldr	r3, [pc, #320]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80101d2:	689b      	ldr	r3, [r3, #8]
 80101d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	689b      	ldr	r3, [r3, #8]
 80101dc:	494d      	ldr	r1, [pc, #308]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80101de:	4313      	orrs	r3, r2
 80101e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f003 0301 	and.w	r3, r3, #1
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d044      	beq.n	8010278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d107      	bne.n	8010206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80101f6:	4b47      	ldr	r3, [pc, #284]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d119      	bne.n	8010236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010202:	2301      	movs	r3, #1
 8010204:	e07f      	b.n	8010306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	2b02      	cmp	r3, #2
 801020c:	d003      	beq.n	8010216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010212:	2b03      	cmp	r3, #3
 8010214:	d107      	bne.n	8010226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010216:	4b3f      	ldr	r3, [pc, #252]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801021e:	2b00      	cmp	r3, #0
 8010220:	d109      	bne.n	8010236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010222:	2301      	movs	r3, #1
 8010224:	e06f      	b.n	8010306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010226:	4b3b      	ldr	r3, [pc, #236]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f003 0302 	and.w	r3, r3, #2
 801022e:	2b00      	cmp	r3, #0
 8010230:	d101      	bne.n	8010236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010232:	2301      	movs	r3, #1
 8010234:	e067      	b.n	8010306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010236:	4b37      	ldr	r3, [pc, #220]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 8010238:	689b      	ldr	r3, [r3, #8]
 801023a:	f023 0203 	bic.w	r2, r3, #3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	4934      	ldr	r1, [pc, #208]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 8010244:	4313      	orrs	r3, r2
 8010246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010248:	f7ff fbf8 	bl	800fa3c <HAL_GetTick>
 801024c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801024e:	e00a      	b.n	8010266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010250:	f7ff fbf4 	bl	800fa3c <HAL_GetTick>
 8010254:	4602      	mov	r2, r0
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	1ad3      	subs	r3, r2, r3
 801025a:	f241 3288 	movw	r2, #5000	; 0x1388
 801025e:	4293      	cmp	r3, r2
 8010260:	d901      	bls.n	8010266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010262:	2303      	movs	r3, #3
 8010264:	e04f      	b.n	8010306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010266:	4b2b      	ldr	r3, [pc, #172]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	f003 020c 	and.w	r2, r3, #12
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	429a      	cmp	r2, r3
 8010276:	d1eb      	bne.n	8010250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010278:	4b25      	ldr	r3, [pc, #148]	; (8010310 <HAL_RCC_ClockConfig+0x1b8>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	f003 030f 	and.w	r3, r3, #15
 8010280:	683a      	ldr	r2, [r7, #0]
 8010282:	429a      	cmp	r2, r3
 8010284:	d20c      	bcs.n	80102a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010286:	4b22      	ldr	r3, [pc, #136]	; (8010310 <HAL_RCC_ClockConfig+0x1b8>)
 8010288:	683a      	ldr	r2, [r7, #0]
 801028a:	b2d2      	uxtb	r2, r2
 801028c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801028e:	4b20      	ldr	r3, [pc, #128]	; (8010310 <HAL_RCC_ClockConfig+0x1b8>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f003 030f 	and.w	r3, r3, #15
 8010296:	683a      	ldr	r2, [r7, #0]
 8010298:	429a      	cmp	r2, r3
 801029a:	d001      	beq.n	80102a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801029c:	2301      	movs	r3, #1
 801029e:	e032      	b.n	8010306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	f003 0304 	and.w	r3, r3, #4
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d008      	beq.n	80102be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80102ac:	4b19      	ldr	r3, [pc, #100]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80102ae:	689b      	ldr	r3, [r3, #8]
 80102b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	4916      	ldr	r1, [pc, #88]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80102ba:	4313      	orrs	r3, r2
 80102bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f003 0308 	and.w	r3, r3, #8
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d009      	beq.n	80102de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80102ca:	4b12      	ldr	r3, [pc, #72]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	691b      	ldr	r3, [r3, #16]
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	490e      	ldr	r1, [pc, #56]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80102da:	4313      	orrs	r3, r2
 80102dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80102de:	f000 f855 	bl	801038c <HAL_RCC_GetSysClockFreq>
 80102e2:	4602      	mov	r2, r0
 80102e4:	4b0b      	ldr	r3, [pc, #44]	; (8010314 <HAL_RCC_ClockConfig+0x1bc>)
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	091b      	lsrs	r3, r3, #4
 80102ea:	f003 030f 	and.w	r3, r3, #15
 80102ee:	490a      	ldr	r1, [pc, #40]	; (8010318 <HAL_RCC_ClockConfig+0x1c0>)
 80102f0:	5ccb      	ldrb	r3, [r1, r3]
 80102f2:	fa22 f303 	lsr.w	r3, r2, r3
 80102f6:	4a09      	ldr	r2, [pc, #36]	; (801031c <HAL_RCC_ClockConfig+0x1c4>)
 80102f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80102fa:	4b09      	ldr	r3, [pc, #36]	; (8010320 <HAL_RCC_ClockConfig+0x1c8>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4618      	mov	r0, r3
 8010300:	f7ff fb58 	bl	800f9b4 <HAL_InitTick>

  return HAL_OK;
 8010304:	2300      	movs	r3, #0
}
 8010306:	4618      	mov	r0, r3
 8010308:	3710      	adds	r7, #16
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	40023c00 	.word	0x40023c00
 8010314:	40023800 	.word	0x40023800
 8010318:	080184cc 	.word	0x080184cc
 801031c:	20000000 	.word	0x20000000
 8010320:	20000004 	.word	0x20000004

08010324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010324:	b480      	push	{r7}
 8010326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010328:	4b03      	ldr	r3, [pc, #12]	; (8010338 <HAL_RCC_GetHCLKFreq+0x14>)
 801032a:	681b      	ldr	r3, [r3, #0]
}
 801032c:	4618      	mov	r0, r3
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop
 8010338:	20000000 	.word	0x20000000

0801033c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010340:	f7ff fff0 	bl	8010324 <HAL_RCC_GetHCLKFreq>
 8010344:	4602      	mov	r2, r0
 8010346:	4b05      	ldr	r3, [pc, #20]	; (801035c <HAL_RCC_GetPCLK1Freq+0x20>)
 8010348:	689b      	ldr	r3, [r3, #8]
 801034a:	0a9b      	lsrs	r3, r3, #10
 801034c:	f003 0307 	and.w	r3, r3, #7
 8010350:	4903      	ldr	r1, [pc, #12]	; (8010360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010352:	5ccb      	ldrb	r3, [r1, r3]
 8010354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010358:	4618      	mov	r0, r3
 801035a:	bd80      	pop	{r7, pc}
 801035c:	40023800 	.word	0x40023800
 8010360:	080184dc 	.word	0x080184dc

08010364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010368:	f7ff ffdc 	bl	8010324 <HAL_RCC_GetHCLKFreq>
 801036c:	4602      	mov	r2, r0
 801036e:	4b05      	ldr	r3, [pc, #20]	; (8010384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010370:	689b      	ldr	r3, [r3, #8]
 8010372:	0b5b      	lsrs	r3, r3, #13
 8010374:	f003 0307 	and.w	r3, r3, #7
 8010378:	4903      	ldr	r1, [pc, #12]	; (8010388 <HAL_RCC_GetPCLK2Freq+0x24>)
 801037a:	5ccb      	ldrb	r3, [r1, r3]
 801037c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010380:	4618      	mov	r0, r3
 8010382:	bd80      	pop	{r7, pc}
 8010384:	40023800 	.word	0x40023800
 8010388:	080184dc 	.word	0x080184dc

0801038c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801038c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010390:	b0ae      	sub	sp, #184	; 0xb8
 8010392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8010394:	2300      	movs	r3, #0
 8010396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 801039a:	2300      	movs	r3, #0
 801039c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80103a0:	2300      	movs	r3, #0
 80103a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80103a6:	2300      	movs	r3, #0
 80103a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80103ac:	2300      	movs	r3, #0
 80103ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80103b2:	4bcb      	ldr	r3, [pc, #812]	; (80106e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80103b4:	689b      	ldr	r3, [r3, #8]
 80103b6:	f003 030c 	and.w	r3, r3, #12
 80103ba:	2b0c      	cmp	r3, #12
 80103bc:	f200 8206 	bhi.w	80107cc <HAL_RCC_GetSysClockFreq+0x440>
 80103c0:	a201      	add	r2, pc, #4	; (adr r2, 80103c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80103c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c6:	bf00      	nop
 80103c8:	080103fd 	.word	0x080103fd
 80103cc:	080107cd 	.word	0x080107cd
 80103d0:	080107cd 	.word	0x080107cd
 80103d4:	080107cd 	.word	0x080107cd
 80103d8:	08010405 	.word	0x08010405
 80103dc:	080107cd 	.word	0x080107cd
 80103e0:	080107cd 	.word	0x080107cd
 80103e4:	080107cd 	.word	0x080107cd
 80103e8:	0801040d 	.word	0x0801040d
 80103ec:	080107cd 	.word	0x080107cd
 80103f0:	080107cd 	.word	0x080107cd
 80103f4:	080107cd 	.word	0x080107cd
 80103f8:	080105fd 	.word	0x080105fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80103fc:	4bb9      	ldr	r3, [pc, #740]	; (80106e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80103fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8010402:	e1e7      	b.n	80107d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010404:	4bb8      	ldr	r3, [pc, #736]	; (80106e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8010406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 801040a:	e1e3      	b.n	80107d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801040c:	4bb4      	ldr	r3, [pc, #720]	; (80106e0 <HAL_RCC_GetSysClockFreq+0x354>)
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010418:	4bb1      	ldr	r3, [pc, #708]	; (80106e0 <HAL_RCC_GetSysClockFreq+0x354>)
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010420:	2b00      	cmp	r3, #0
 8010422:	d071      	beq.n	8010508 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010424:	4bae      	ldr	r3, [pc, #696]	; (80106e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	099b      	lsrs	r3, r3, #6
 801042a:	2200      	movs	r2, #0
 801042c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010430:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801043c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010440:	2300      	movs	r3, #0
 8010442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801044a:	4622      	mov	r2, r4
 801044c:	462b      	mov	r3, r5
 801044e:	f04f 0000 	mov.w	r0, #0
 8010452:	f04f 0100 	mov.w	r1, #0
 8010456:	0159      	lsls	r1, r3, #5
 8010458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801045c:	0150      	lsls	r0, r2, #5
 801045e:	4602      	mov	r2, r0
 8010460:	460b      	mov	r3, r1
 8010462:	4621      	mov	r1, r4
 8010464:	1a51      	subs	r1, r2, r1
 8010466:	6439      	str	r1, [r7, #64]	; 0x40
 8010468:	4629      	mov	r1, r5
 801046a:	eb63 0301 	sbc.w	r3, r3, r1
 801046e:	647b      	str	r3, [r7, #68]	; 0x44
 8010470:	f04f 0200 	mov.w	r2, #0
 8010474:	f04f 0300 	mov.w	r3, #0
 8010478:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 801047c:	4649      	mov	r1, r9
 801047e:	018b      	lsls	r3, r1, #6
 8010480:	4641      	mov	r1, r8
 8010482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010486:	4641      	mov	r1, r8
 8010488:	018a      	lsls	r2, r1, #6
 801048a:	4641      	mov	r1, r8
 801048c:	1a51      	subs	r1, r2, r1
 801048e:	63b9      	str	r1, [r7, #56]	; 0x38
 8010490:	4649      	mov	r1, r9
 8010492:	eb63 0301 	sbc.w	r3, r3, r1
 8010496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010498:	f04f 0200 	mov.w	r2, #0
 801049c:	f04f 0300 	mov.w	r3, #0
 80104a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80104a4:	4649      	mov	r1, r9
 80104a6:	00cb      	lsls	r3, r1, #3
 80104a8:	4641      	mov	r1, r8
 80104aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80104ae:	4641      	mov	r1, r8
 80104b0:	00ca      	lsls	r2, r1, #3
 80104b2:	4610      	mov	r0, r2
 80104b4:	4619      	mov	r1, r3
 80104b6:	4603      	mov	r3, r0
 80104b8:	4622      	mov	r2, r4
 80104ba:	189b      	adds	r3, r3, r2
 80104bc:	633b      	str	r3, [r7, #48]	; 0x30
 80104be:	462b      	mov	r3, r5
 80104c0:	460a      	mov	r2, r1
 80104c2:	eb42 0303 	adc.w	r3, r2, r3
 80104c6:	637b      	str	r3, [r7, #52]	; 0x34
 80104c8:	f04f 0200 	mov.w	r2, #0
 80104cc:	f04f 0300 	mov.w	r3, #0
 80104d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80104d4:	4629      	mov	r1, r5
 80104d6:	024b      	lsls	r3, r1, #9
 80104d8:	4621      	mov	r1, r4
 80104da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80104de:	4621      	mov	r1, r4
 80104e0:	024a      	lsls	r2, r1, #9
 80104e2:	4610      	mov	r0, r2
 80104e4:	4619      	mov	r1, r3
 80104e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104ea:	2200      	movs	r2, #0
 80104ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80104f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80104f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80104f8:	f7f0 fbd6 	bl	8000ca8 <__aeabi_uldivmod>
 80104fc:	4602      	mov	r2, r0
 80104fe:	460b      	mov	r3, r1
 8010500:	4613      	mov	r3, r2
 8010502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010506:	e067      	b.n	80105d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010508:	4b75      	ldr	r3, [pc, #468]	; (80106e0 <HAL_RCC_GetSysClockFreq+0x354>)
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	099b      	lsrs	r3, r3, #6
 801050e:	2200      	movs	r2, #0
 8010510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010514:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8010518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801051c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010520:	67bb      	str	r3, [r7, #120]	; 0x78
 8010522:	2300      	movs	r3, #0
 8010524:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010526:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801052a:	4622      	mov	r2, r4
 801052c:	462b      	mov	r3, r5
 801052e:	f04f 0000 	mov.w	r0, #0
 8010532:	f04f 0100 	mov.w	r1, #0
 8010536:	0159      	lsls	r1, r3, #5
 8010538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801053c:	0150      	lsls	r0, r2, #5
 801053e:	4602      	mov	r2, r0
 8010540:	460b      	mov	r3, r1
 8010542:	4621      	mov	r1, r4
 8010544:	1a51      	subs	r1, r2, r1
 8010546:	62b9      	str	r1, [r7, #40]	; 0x28
 8010548:	4629      	mov	r1, r5
 801054a:	eb63 0301 	sbc.w	r3, r3, r1
 801054e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010550:	f04f 0200 	mov.w	r2, #0
 8010554:	f04f 0300 	mov.w	r3, #0
 8010558:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 801055c:	4649      	mov	r1, r9
 801055e:	018b      	lsls	r3, r1, #6
 8010560:	4641      	mov	r1, r8
 8010562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010566:	4641      	mov	r1, r8
 8010568:	018a      	lsls	r2, r1, #6
 801056a:	4641      	mov	r1, r8
 801056c:	ebb2 0a01 	subs.w	sl, r2, r1
 8010570:	4649      	mov	r1, r9
 8010572:	eb63 0b01 	sbc.w	fp, r3, r1
 8010576:	f04f 0200 	mov.w	r2, #0
 801057a:	f04f 0300 	mov.w	r3, #0
 801057e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010582:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801058a:	4692      	mov	sl, r2
 801058c:	469b      	mov	fp, r3
 801058e:	4623      	mov	r3, r4
 8010590:	eb1a 0303 	adds.w	r3, sl, r3
 8010594:	623b      	str	r3, [r7, #32]
 8010596:	462b      	mov	r3, r5
 8010598:	eb4b 0303 	adc.w	r3, fp, r3
 801059c:	627b      	str	r3, [r7, #36]	; 0x24
 801059e:	f04f 0200 	mov.w	r2, #0
 80105a2:	f04f 0300 	mov.w	r3, #0
 80105a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80105aa:	4629      	mov	r1, r5
 80105ac:	028b      	lsls	r3, r1, #10
 80105ae:	4621      	mov	r1, r4
 80105b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80105b4:	4621      	mov	r1, r4
 80105b6:	028a      	lsls	r2, r1, #10
 80105b8:	4610      	mov	r0, r2
 80105ba:	4619      	mov	r1, r3
 80105bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80105c0:	2200      	movs	r2, #0
 80105c2:	673b      	str	r3, [r7, #112]	; 0x70
 80105c4:	677a      	str	r2, [r7, #116]	; 0x74
 80105c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80105ca:	f7f0 fb6d 	bl	8000ca8 <__aeabi_uldivmod>
 80105ce:	4602      	mov	r2, r0
 80105d0:	460b      	mov	r3, r1
 80105d2:	4613      	mov	r3, r2
 80105d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80105d8:	4b41      	ldr	r3, [pc, #260]	; (80106e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	0c1b      	lsrs	r3, r3, #16
 80105de:	f003 0303 	and.w	r3, r3, #3
 80105e2:	3301      	adds	r3, #1
 80105e4:	005b      	lsls	r3, r3, #1
 80105e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80105ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80105ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80105f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80105fa:	e0eb      	b.n	80107d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80105fc:	4b38      	ldr	r3, [pc, #224]	; (80106e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010608:	4b35      	ldr	r3, [pc, #212]	; (80106e0 <HAL_RCC_GetSysClockFreq+0x354>)
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010610:	2b00      	cmp	r3, #0
 8010612:	d06b      	beq.n	80106ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010614:	4b32      	ldr	r3, [pc, #200]	; (80106e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	099b      	lsrs	r3, r3, #6
 801061a:	2200      	movs	r2, #0
 801061c:	66bb      	str	r3, [r7, #104]	; 0x68
 801061e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010626:	663b      	str	r3, [r7, #96]	; 0x60
 8010628:	2300      	movs	r3, #0
 801062a:	667b      	str	r3, [r7, #100]	; 0x64
 801062c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8010630:	4622      	mov	r2, r4
 8010632:	462b      	mov	r3, r5
 8010634:	f04f 0000 	mov.w	r0, #0
 8010638:	f04f 0100 	mov.w	r1, #0
 801063c:	0159      	lsls	r1, r3, #5
 801063e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010642:	0150      	lsls	r0, r2, #5
 8010644:	4602      	mov	r2, r0
 8010646:	460b      	mov	r3, r1
 8010648:	4621      	mov	r1, r4
 801064a:	1a51      	subs	r1, r2, r1
 801064c:	61b9      	str	r1, [r7, #24]
 801064e:	4629      	mov	r1, r5
 8010650:	eb63 0301 	sbc.w	r3, r3, r1
 8010654:	61fb      	str	r3, [r7, #28]
 8010656:	f04f 0200 	mov.w	r2, #0
 801065a:	f04f 0300 	mov.w	r3, #0
 801065e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8010662:	4659      	mov	r1, fp
 8010664:	018b      	lsls	r3, r1, #6
 8010666:	4651      	mov	r1, sl
 8010668:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801066c:	4651      	mov	r1, sl
 801066e:	018a      	lsls	r2, r1, #6
 8010670:	4651      	mov	r1, sl
 8010672:	ebb2 0801 	subs.w	r8, r2, r1
 8010676:	4659      	mov	r1, fp
 8010678:	eb63 0901 	sbc.w	r9, r3, r1
 801067c:	f04f 0200 	mov.w	r2, #0
 8010680:	f04f 0300 	mov.w	r3, #0
 8010684:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010688:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801068c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010690:	4690      	mov	r8, r2
 8010692:	4699      	mov	r9, r3
 8010694:	4623      	mov	r3, r4
 8010696:	eb18 0303 	adds.w	r3, r8, r3
 801069a:	613b      	str	r3, [r7, #16]
 801069c:	462b      	mov	r3, r5
 801069e:	eb49 0303 	adc.w	r3, r9, r3
 80106a2:	617b      	str	r3, [r7, #20]
 80106a4:	f04f 0200 	mov.w	r2, #0
 80106a8:	f04f 0300 	mov.w	r3, #0
 80106ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80106b0:	4629      	mov	r1, r5
 80106b2:	024b      	lsls	r3, r1, #9
 80106b4:	4621      	mov	r1, r4
 80106b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80106ba:	4621      	mov	r1, r4
 80106bc:	024a      	lsls	r2, r1, #9
 80106be:	4610      	mov	r0, r2
 80106c0:	4619      	mov	r1, r3
 80106c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106c6:	2200      	movs	r2, #0
 80106c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80106ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80106cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80106d0:	f7f0 faea 	bl	8000ca8 <__aeabi_uldivmod>
 80106d4:	4602      	mov	r2, r0
 80106d6:	460b      	mov	r3, r1
 80106d8:	4613      	mov	r3, r2
 80106da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80106de:	e065      	b.n	80107ac <HAL_RCC_GetSysClockFreq+0x420>
 80106e0:	40023800 	.word	0x40023800
 80106e4:	00f42400 	.word	0x00f42400
 80106e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80106ec:	4b3d      	ldr	r3, [pc, #244]	; (80107e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	099b      	lsrs	r3, r3, #6
 80106f2:	2200      	movs	r2, #0
 80106f4:	4618      	mov	r0, r3
 80106f6:	4611      	mov	r1, r2
 80106f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80106fc:	653b      	str	r3, [r7, #80]	; 0x50
 80106fe:	2300      	movs	r3, #0
 8010700:	657b      	str	r3, [r7, #84]	; 0x54
 8010702:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8010706:	4642      	mov	r2, r8
 8010708:	464b      	mov	r3, r9
 801070a:	f04f 0000 	mov.w	r0, #0
 801070e:	f04f 0100 	mov.w	r1, #0
 8010712:	0159      	lsls	r1, r3, #5
 8010714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010718:	0150      	lsls	r0, r2, #5
 801071a:	4602      	mov	r2, r0
 801071c:	460b      	mov	r3, r1
 801071e:	4641      	mov	r1, r8
 8010720:	1a51      	subs	r1, r2, r1
 8010722:	60b9      	str	r1, [r7, #8]
 8010724:	4649      	mov	r1, r9
 8010726:	eb63 0301 	sbc.w	r3, r3, r1
 801072a:	60fb      	str	r3, [r7, #12]
 801072c:	f04f 0200 	mov.w	r2, #0
 8010730:	f04f 0300 	mov.w	r3, #0
 8010734:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8010738:	4659      	mov	r1, fp
 801073a:	018b      	lsls	r3, r1, #6
 801073c:	4651      	mov	r1, sl
 801073e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010742:	4651      	mov	r1, sl
 8010744:	018a      	lsls	r2, r1, #6
 8010746:	4651      	mov	r1, sl
 8010748:	1a54      	subs	r4, r2, r1
 801074a:	4659      	mov	r1, fp
 801074c:	eb63 0501 	sbc.w	r5, r3, r1
 8010750:	f04f 0200 	mov.w	r2, #0
 8010754:	f04f 0300 	mov.w	r3, #0
 8010758:	00eb      	lsls	r3, r5, #3
 801075a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801075e:	00e2      	lsls	r2, r4, #3
 8010760:	4614      	mov	r4, r2
 8010762:	461d      	mov	r5, r3
 8010764:	4643      	mov	r3, r8
 8010766:	18e3      	adds	r3, r4, r3
 8010768:	603b      	str	r3, [r7, #0]
 801076a:	464b      	mov	r3, r9
 801076c:	eb45 0303 	adc.w	r3, r5, r3
 8010770:	607b      	str	r3, [r7, #4]
 8010772:	f04f 0200 	mov.w	r2, #0
 8010776:	f04f 0300 	mov.w	r3, #0
 801077a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801077e:	4629      	mov	r1, r5
 8010780:	028b      	lsls	r3, r1, #10
 8010782:	4621      	mov	r1, r4
 8010784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010788:	4621      	mov	r1, r4
 801078a:	028a      	lsls	r2, r1, #10
 801078c:	4610      	mov	r0, r2
 801078e:	4619      	mov	r1, r3
 8010790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010794:	2200      	movs	r2, #0
 8010796:	64bb      	str	r3, [r7, #72]	; 0x48
 8010798:	64fa      	str	r2, [r7, #76]	; 0x4c
 801079a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801079e:	f7f0 fa83 	bl	8000ca8 <__aeabi_uldivmod>
 80107a2:	4602      	mov	r2, r0
 80107a4:	460b      	mov	r3, r1
 80107a6:	4613      	mov	r3, r2
 80107a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80107ac:	4b0d      	ldr	r3, [pc, #52]	; (80107e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	0f1b      	lsrs	r3, r3, #28
 80107b2:	f003 0307 	and.w	r3, r3, #7
 80107b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80107ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80107be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80107c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80107c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80107ca:	e003      	b.n	80107d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80107cc:	4b06      	ldr	r3, [pc, #24]	; (80107e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80107ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80107d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80107d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	37b8      	adds	r7, #184	; 0xb8
 80107dc:	46bd      	mov	sp, r7
 80107de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80107e2:	bf00      	nop
 80107e4:	40023800 	.word	0x40023800
 80107e8:	00f42400 	.word	0x00f42400

080107ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b086      	sub	sp, #24
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d101      	bne.n	80107fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80107fa:	2301      	movs	r3, #1
 80107fc:	e28d      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f003 0301 	and.w	r3, r3, #1
 8010806:	2b00      	cmp	r3, #0
 8010808:	f000 8083 	beq.w	8010912 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801080c:	4b94      	ldr	r3, [pc, #592]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	f003 030c 	and.w	r3, r3, #12
 8010814:	2b04      	cmp	r3, #4
 8010816:	d019      	beq.n	801084c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8010818:	4b91      	ldr	r3, [pc, #580]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 801081a:	689b      	ldr	r3, [r3, #8]
 801081c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8010820:	2b08      	cmp	r3, #8
 8010822:	d106      	bne.n	8010832 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8010824:	4b8e      	ldr	r3, [pc, #568]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801082c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010830:	d00c      	beq.n	801084c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010832:	4b8b      	ldr	r3, [pc, #556]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010834:	689b      	ldr	r3, [r3, #8]
 8010836:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801083a:	2b0c      	cmp	r3, #12
 801083c:	d112      	bne.n	8010864 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801083e:	4b88      	ldr	r3, [pc, #544]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801084a:	d10b      	bne.n	8010864 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801084c:	4b84      	ldr	r3, [pc, #528]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010854:	2b00      	cmp	r3, #0
 8010856:	d05b      	beq.n	8010910 <HAL_RCC_OscConfig+0x124>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d157      	bne.n	8010910 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8010860:	2301      	movs	r3, #1
 8010862:	e25a      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801086c:	d106      	bne.n	801087c <HAL_RCC_OscConfig+0x90>
 801086e:	4b7c      	ldr	r3, [pc, #496]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	4a7b      	ldr	r2, [pc, #492]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010878:	6013      	str	r3, [r2, #0]
 801087a:	e01d      	b.n	80108b8 <HAL_RCC_OscConfig+0xcc>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010884:	d10c      	bne.n	80108a0 <HAL_RCC_OscConfig+0xb4>
 8010886:	4b76      	ldr	r3, [pc, #472]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	4a75      	ldr	r2, [pc, #468]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 801088c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010890:	6013      	str	r3, [r2, #0]
 8010892:	4b73      	ldr	r3, [pc, #460]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4a72      	ldr	r2, [pc, #456]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801089c:	6013      	str	r3, [r2, #0]
 801089e:	e00b      	b.n	80108b8 <HAL_RCC_OscConfig+0xcc>
 80108a0:	4b6f      	ldr	r3, [pc, #444]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a6e      	ldr	r2, [pc, #440]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 80108a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108aa:	6013      	str	r3, [r2, #0]
 80108ac:	4b6c      	ldr	r3, [pc, #432]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4a6b      	ldr	r2, [pc, #428]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 80108b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80108b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d013      	beq.n	80108e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108c0:	f7ff f8bc 	bl	800fa3c <HAL_GetTick>
 80108c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108c6:	e008      	b.n	80108da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80108c8:	f7ff f8b8 	bl	800fa3c <HAL_GetTick>
 80108cc:	4602      	mov	r2, r0
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	2b64      	cmp	r3, #100	; 0x64
 80108d4:	d901      	bls.n	80108da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80108d6:	2303      	movs	r3, #3
 80108d8:	e21f      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108da:	4b61      	ldr	r3, [pc, #388]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d0f0      	beq.n	80108c8 <HAL_RCC_OscConfig+0xdc>
 80108e6:	e014      	b.n	8010912 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108e8:	f7ff f8a8 	bl	800fa3c <HAL_GetTick>
 80108ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80108ee:	e008      	b.n	8010902 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80108f0:	f7ff f8a4 	bl	800fa3c <HAL_GetTick>
 80108f4:	4602      	mov	r2, r0
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	2b64      	cmp	r3, #100	; 0x64
 80108fc:	d901      	bls.n	8010902 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80108fe:	2303      	movs	r3, #3
 8010900:	e20b      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010902:	4b57      	ldr	r3, [pc, #348]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801090a:	2b00      	cmp	r3, #0
 801090c:	d1f0      	bne.n	80108f0 <HAL_RCC_OscConfig+0x104>
 801090e:	e000      	b.n	8010912 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f003 0302 	and.w	r3, r3, #2
 801091a:	2b00      	cmp	r3, #0
 801091c:	d06f      	beq.n	80109fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801091e:	4b50      	ldr	r3, [pc, #320]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010920:	689b      	ldr	r3, [r3, #8]
 8010922:	f003 030c 	and.w	r3, r3, #12
 8010926:	2b00      	cmp	r3, #0
 8010928:	d017      	beq.n	801095a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801092a:	4b4d      	ldr	r3, [pc, #308]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 801092c:	689b      	ldr	r3, [r3, #8]
 801092e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8010932:	2b08      	cmp	r3, #8
 8010934:	d105      	bne.n	8010942 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8010936:	4b4a      	ldr	r3, [pc, #296]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00b      	beq.n	801095a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010942:	4b47      	ldr	r3, [pc, #284]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010944:	689b      	ldr	r3, [r3, #8]
 8010946:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801094a:	2b0c      	cmp	r3, #12
 801094c:	d11c      	bne.n	8010988 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801094e:	4b44      	ldr	r3, [pc, #272]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010956:	2b00      	cmp	r3, #0
 8010958:	d116      	bne.n	8010988 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801095a:	4b41      	ldr	r3, [pc, #260]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f003 0302 	and.w	r3, r3, #2
 8010962:	2b00      	cmp	r3, #0
 8010964:	d005      	beq.n	8010972 <HAL_RCC_OscConfig+0x186>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	2b01      	cmp	r3, #1
 801096c:	d001      	beq.n	8010972 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801096e:	2301      	movs	r3, #1
 8010970:	e1d3      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010972:	4b3b      	ldr	r3, [pc, #236]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	691b      	ldr	r3, [r3, #16]
 801097e:	00db      	lsls	r3, r3, #3
 8010980:	4937      	ldr	r1, [pc, #220]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010982:	4313      	orrs	r3, r2
 8010984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010986:	e03a      	b.n	80109fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d020      	beq.n	80109d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010990:	4b34      	ldr	r3, [pc, #208]	; (8010a64 <HAL_RCC_OscConfig+0x278>)
 8010992:	2201      	movs	r2, #1
 8010994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010996:	f7ff f851 	bl	800fa3c <HAL_GetTick>
 801099a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801099c:	e008      	b.n	80109b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801099e:	f7ff f84d 	bl	800fa3c <HAL_GetTick>
 80109a2:	4602      	mov	r2, r0
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	1ad3      	subs	r3, r2, r3
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	d901      	bls.n	80109b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80109ac:	2303      	movs	r3, #3
 80109ae:	e1b4      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80109b0:	4b2b      	ldr	r3, [pc, #172]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f003 0302 	and.w	r3, r3, #2
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d0f0      	beq.n	801099e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80109bc:	4b28      	ldr	r3, [pc, #160]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	691b      	ldr	r3, [r3, #16]
 80109c8:	00db      	lsls	r3, r3, #3
 80109ca:	4925      	ldr	r1, [pc, #148]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 80109cc:	4313      	orrs	r3, r2
 80109ce:	600b      	str	r3, [r1, #0]
 80109d0:	e015      	b.n	80109fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80109d2:	4b24      	ldr	r3, [pc, #144]	; (8010a64 <HAL_RCC_OscConfig+0x278>)
 80109d4:	2200      	movs	r2, #0
 80109d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80109d8:	f7ff f830 	bl	800fa3c <HAL_GetTick>
 80109dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80109de:	e008      	b.n	80109f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80109e0:	f7ff f82c 	bl	800fa3c <HAL_GetTick>
 80109e4:	4602      	mov	r2, r0
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	1ad3      	subs	r3, r2, r3
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	d901      	bls.n	80109f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80109ee:	2303      	movs	r3, #3
 80109f0:	e193      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80109f2:	4b1b      	ldr	r3, [pc, #108]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	f003 0302 	and.w	r3, r3, #2
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1f0      	bne.n	80109e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f003 0308 	and.w	r3, r3, #8
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d036      	beq.n	8010a78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	695b      	ldr	r3, [r3, #20]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d016      	beq.n	8010a40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010a12:	4b15      	ldr	r3, [pc, #84]	; (8010a68 <HAL_RCC_OscConfig+0x27c>)
 8010a14:	2201      	movs	r2, #1
 8010a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a18:	f7ff f810 	bl	800fa3c <HAL_GetTick>
 8010a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010a1e:	e008      	b.n	8010a32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010a20:	f7ff f80c 	bl	800fa3c <HAL_GetTick>
 8010a24:	4602      	mov	r2, r0
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	1ad3      	subs	r3, r2, r3
 8010a2a:	2b02      	cmp	r3, #2
 8010a2c:	d901      	bls.n	8010a32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8010a2e:	2303      	movs	r3, #3
 8010a30:	e173      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010a32:	4b0b      	ldr	r3, [pc, #44]	; (8010a60 <HAL_RCC_OscConfig+0x274>)
 8010a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a36:	f003 0302 	and.w	r3, r3, #2
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d0f0      	beq.n	8010a20 <HAL_RCC_OscConfig+0x234>
 8010a3e:	e01b      	b.n	8010a78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010a40:	4b09      	ldr	r3, [pc, #36]	; (8010a68 <HAL_RCC_OscConfig+0x27c>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a46:	f7fe fff9 	bl	800fa3c <HAL_GetTick>
 8010a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010a4c:	e00e      	b.n	8010a6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010a4e:	f7fe fff5 	bl	800fa3c <HAL_GetTick>
 8010a52:	4602      	mov	r2, r0
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	2b02      	cmp	r3, #2
 8010a5a:	d907      	bls.n	8010a6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8010a5c:	2303      	movs	r3, #3
 8010a5e:	e15c      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
 8010a60:	40023800 	.word	0x40023800
 8010a64:	42470000 	.word	0x42470000
 8010a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010a6c:	4b8a      	ldr	r3, [pc, #552]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a70:	f003 0302 	and.w	r3, r3, #2
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d1ea      	bne.n	8010a4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f003 0304 	and.w	r3, r3, #4
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f000 8097 	beq.w	8010bb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010a86:	2300      	movs	r3, #0
 8010a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010a8a:	4b83      	ldr	r3, [pc, #524]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d10f      	bne.n	8010ab6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010a96:	2300      	movs	r3, #0
 8010a98:	60bb      	str	r3, [r7, #8]
 8010a9a:	4b7f      	ldr	r3, [pc, #508]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a9e:	4a7e      	ldr	r2, [pc, #504]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8010aa6:	4b7c      	ldr	r3, [pc, #496]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010aae:	60bb      	str	r3, [r7, #8]
 8010ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010ab6:	4b79      	ldr	r3, [pc, #484]	; (8010c9c <HAL_RCC_OscConfig+0x4b0>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d118      	bne.n	8010af4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010ac2:	4b76      	ldr	r3, [pc, #472]	; (8010c9c <HAL_RCC_OscConfig+0x4b0>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	4a75      	ldr	r2, [pc, #468]	; (8010c9c <HAL_RCC_OscConfig+0x4b0>)
 8010ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010ace:	f7fe ffb5 	bl	800fa3c <HAL_GetTick>
 8010ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010ad4:	e008      	b.n	8010ae8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010ad6:	f7fe ffb1 	bl	800fa3c <HAL_GetTick>
 8010ada:	4602      	mov	r2, r0
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	1ad3      	subs	r3, r2, r3
 8010ae0:	2b02      	cmp	r3, #2
 8010ae2:	d901      	bls.n	8010ae8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8010ae4:	2303      	movs	r3, #3
 8010ae6:	e118      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010ae8:	4b6c      	ldr	r3, [pc, #432]	; (8010c9c <HAL_RCC_OscConfig+0x4b0>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d0f0      	beq.n	8010ad6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	689b      	ldr	r3, [r3, #8]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d106      	bne.n	8010b0a <HAL_RCC_OscConfig+0x31e>
 8010afc:	4b66      	ldr	r3, [pc, #408]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b00:	4a65      	ldr	r2, [pc, #404]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b02:	f043 0301 	orr.w	r3, r3, #1
 8010b06:	6713      	str	r3, [r2, #112]	; 0x70
 8010b08:	e01c      	b.n	8010b44 <HAL_RCC_OscConfig+0x358>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	689b      	ldr	r3, [r3, #8]
 8010b0e:	2b05      	cmp	r3, #5
 8010b10:	d10c      	bne.n	8010b2c <HAL_RCC_OscConfig+0x340>
 8010b12:	4b61      	ldr	r3, [pc, #388]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b16:	4a60      	ldr	r2, [pc, #384]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b18:	f043 0304 	orr.w	r3, r3, #4
 8010b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8010b1e:	4b5e      	ldr	r3, [pc, #376]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b22:	4a5d      	ldr	r2, [pc, #372]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b24:	f043 0301 	orr.w	r3, r3, #1
 8010b28:	6713      	str	r3, [r2, #112]	; 0x70
 8010b2a:	e00b      	b.n	8010b44 <HAL_RCC_OscConfig+0x358>
 8010b2c:	4b5a      	ldr	r3, [pc, #360]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b30:	4a59      	ldr	r2, [pc, #356]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b32:	f023 0301 	bic.w	r3, r3, #1
 8010b36:	6713      	str	r3, [r2, #112]	; 0x70
 8010b38:	4b57      	ldr	r3, [pc, #348]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b3c:	4a56      	ldr	r2, [pc, #344]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b3e:	f023 0304 	bic.w	r3, r3, #4
 8010b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	689b      	ldr	r3, [r3, #8]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d015      	beq.n	8010b78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b4c:	f7fe ff76 	bl	800fa3c <HAL_GetTick>
 8010b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010b52:	e00a      	b.n	8010b6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b54:	f7fe ff72 	bl	800fa3c <HAL_GetTick>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d901      	bls.n	8010b6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8010b66:	2303      	movs	r3, #3
 8010b68:	e0d7      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010b6a:	4b4b      	ldr	r3, [pc, #300]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b6e:	f003 0302 	and.w	r3, r3, #2
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d0ee      	beq.n	8010b54 <HAL_RCC_OscConfig+0x368>
 8010b76:	e014      	b.n	8010ba2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b78:	f7fe ff60 	bl	800fa3c <HAL_GetTick>
 8010b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b7e:	e00a      	b.n	8010b96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b80:	f7fe ff5c 	bl	800fa3c <HAL_GetTick>
 8010b84:	4602      	mov	r2, r0
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	1ad3      	subs	r3, r2, r3
 8010b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d901      	bls.n	8010b96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8010b92:	2303      	movs	r3, #3
 8010b94:	e0c1      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010b96:	4b40      	ldr	r3, [pc, #256]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b9a:	f003 0302 	and.w	r3, r3, #2
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d1ee      	bne.n	8010b80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010ba2:	7dfb      	ldrb	r3, [r7, #23]
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d105      	bne.n	8010bb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010ba8:	4b3b      	ldr	r3, [pc, #236]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bac:	4a3a      	ldr	r2, [pc, #232]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	699b      	ldr	r3, [r3, #24]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f000 80ad 	beq.w	8010d18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010bbe:	4b36      	ldr	r3, [pc, #216]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010bc0:	689b      	ldr	r3, [r3, #8]
 8010bc2:	f003 030c 	and.w	r3, r3, #12
 8010bc6:	2b08      	cmp	r3, #8
 8010bc8:	d060      	beq.n	8010c8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	699b      	ldr	r3, [r3, #24]
 8010bce:	2b02      	cmp	r3, #2
 8010bd0:	d145      	bne.n	8010c5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010bd2:	4b33      	ldr	r3, [pc, #204]	; (8010ca0 <HAL_RCC_OscConfig+0x4b4>)
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010bd8:	f7fe ff30 	bl	800fa3c <HAL_GetTick>
 8010bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010bde:	e008      	b.n	8010bf2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010be0:	f7fe ff2c 	bl	800fa3c <HAL_GetTick>
 8010be4:	4602      	mov	r2, r0
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	1ad3      	subs	r3, r2, r3
 8010bea:	2b02      	cmp	r3, #2
 8010bec:	d901      	bls.n	8010bf2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8010bee:	2303      	movs	r3, #3
 8010bf0:	e093      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010bf2:	4b29      	ldr	r3, [pc, #164]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1f0      	bne.n	8010be0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	69da      	ldr	r2, [r3, #28]
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6a1b      	ldr	r3, [r3, #32]
 8010c06:	431a      	orrs	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c0c:	019b      	lsls	r3, r3, #6
 8010c0e:	431a      	orrs	r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c14:	085b      	lsrs	r3, r3, #1
 8010c16:	3b01      	subs	r3, #1
 8010c18:	041b      	lsls	r3, r3, #16
 8010c1a:	431a      	orrs	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c20:	061b      	lsls	r3, r3, #24
 8010c22:	431a      	orrs	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c28:	071b      	lsls	r3, r3, #28
 8010c2a:	491b      	ldr	r1, [pc, #108]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010c2c:	4313      	orrs	r3, r2
 8010c2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010c30:	4b1b      	ldr	r3, [pc, #108]	; (8010ca0 <HAL_RCC_OscConfig+0x4b4>)
 8010c32:	2201      	movs	r2, #1
 8010c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c36:	f7fe ff01 	bl	800fa3c <HAL_GetTick>
 8010c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010c3c:	e008      	b.n	8010c50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010c3e:	f7fe fefd 	bl	800fa3c <HAL_GetTick>
 8010c42:	4602      	mov	r2, r0
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	1ad3      	subs	r3, r2, r3
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	d901      	bls.n	8010c50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8010c4c:	2303      	movs	r3, #3
 8010c4e:	e064      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010c50:	4b11      	ldr	r3, [pc, #68]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d0f0      	beq.n	8010c3e <HAL_RCC_OscConfig+0x452>
 8010c5c:	e05c      	b.n	8010d18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010c5e:	4b10      	ldr	r3, [pc, #64]	; (8010ca0 <HAL_RCC_OscConfig+0x4b4>)
 8010c60:	2200      	movs	r2, #0
 8010c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c64:	f7fe feea 	bl	800fa3c <HAL_GetTick>
 8010c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010c6a:	e008      	b.n	8010c7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010c6c:	f7fe fee6 	bl	800fa3c <HAL_GetTick>
 8010c70:	4602      	mov	r2, r0
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	1ad3      	subs	r3, r2, r3
 8010c76:	2b02      	cmp	r3, #2
 8010c78:	d901      	bls.n	8010c7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8010c7a:	2303      	movs	r3, #3
 8010c7c:	e04d      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010c7e:	4b06      	ldr	r3, [pc, #24]	; (8010c98 <HAL_RCC_OscConfig+0x4ac>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d1f0      	bne.n	8010c6c <HAL_RCC_OscConfig+0x480>
 8010c8a:	e045      	b.n	8010d18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	699b      	ldr	r3, [r3, #24]
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d107      	bne.n	8010ca4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8010c94:	2301      	movs	r3, #1
 8010c96:	e040      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
 8010c98:	40023800 	.word	0x40023800
 8010c9c:	40007000 	.word	0x40007000
 8010ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010ca4:	4b1f      	ldr	r3, [pc, #124]	; (8010d24 <HAL_RCC_OscConfig+0x538>)
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	699b      	ldr	r3, [r3, #24]
 8010cae:	2b01      	cmp	r3, #1
 8010cb0:	d030      	beq.n	8010d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d129      	bne.n	8010d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d122      	bne.n	8010d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010cce:	68fa      	ldr	r2, [r7, #12]
 8010cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010cd4:	4013      	ands	r3, r2
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d119      	bne.n	8010d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cea:	085b      	lsrs	r3, r3, #1
 8010cec:	3b01      	subs	r3, #1
 8010cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d10f      	bne.n	8010d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d107      	bne.n	8010d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d001      	beq.n	8010d18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8010d14:	2301      	movs	r3, #1
 8010d16:	e000      	b.n	8010d1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8010d18:	2300      	movs	r3, #0
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3718      	adds	r7, #24
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	40023800 	.word	0x40023800

08010d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d101      	bne.n	8010d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010d36:	2301      	movs	r3, #1
 8010d38:	e07b      	b.n	8010e32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d108      	bne.n	8010d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010d4a:	d009      	beq.n	8010d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	61da      	str	r2, [r3, #28]
 8010d52:	e005      	b.n	8010d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2200      	movs	r2, #0
 8010d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2200      	movs	r2, #0
 8010d64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2200      	movs	r2, #0
 8010d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f7fe fbda 	bl	800f534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2202      	movs	r2, #2
 8010d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	681a      	ldr	r2, [r3, #0]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	689b      	ldr	r3, [r3, #8]
 8010da4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010da8:	431a      	orrs	r2, r3
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010db2:	431a      	orrs	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	691b      	ldr	r3, [r3, #16]
 8010db8:	f003 0302 	and.w	r3, r3, #2
 8010dbc:	431a      	orrs	r2, r3
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	695b      	ldr	r3, [r3, #20]
 8010dc2:	f003 0301 	and.w	r3, r3, #1
 8010dc6:	431a      	orrs	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	699b      	ldr	r3, [r3, #24]
 8010dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010dd0:	431a      	orrs	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	69db      	ldr	r3, [r3, #28]
 8010dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010dda:	431a      	orrs	r2, r3
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6a1b      	ldr	r3, [r3, #32]
 8010de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010de4:	ea42 0103 	orr.w	r1, r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	430a      	orrs	r2, r1
 8010df6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	699b      	ldr	r3, [r3, #24]
 8010dfc:	0c1b      	lsrs	r3, r3, #16
 8010dfe:	f003 0104 	and.w	r1, r3, #4
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e06:	f003 0210 	and.w	r2, r3, #16
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	430a      	orrs	r2, r1
 8010e10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	69da      	ldr	r2, [r3, #28]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010e20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2200      	movs	r2, #0
 8010e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010e30:	2300      	movs	r3, #0
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b088      	sub	sp, #32
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	60f8      	str	r0, [r7, #12]
 8010e42:	60b9      	str	r1, [r7, #8]
 8010e44:	603b      	str	r3, [r7, #0]
 8010e46:	4613      	mov	r3, r2
 8010e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d101      	bne.n	8010e5c <HAL_SPI_Transmit+0x22>
 8010e58:	2302      	movs	r3, #2
 8010e5a:	e126      	b.n	80110aa <HAL_SPI_Transmit+0x270>
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2201      	movs	r2, #1
 8010e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010e64:	f7fe fdea 	bl	800fa3c <HAL_GetTick>
 8010e68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010e6a:	88fb      	ldrh	r3, [r7, #6]
 8010e6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d002      	beq.n	8010e80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010e7a:	2302      	movs	r3, #2
 8010e7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010e7e:	e10b      	b.n	8011098 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d002      	beq.n	8010e8c <HAL_SPI_Transmit+0x52>
 8010e86:	88fb      	ldrh	r3, [r7, #6]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d102      	bne.n	8010e92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010e90:	e102      	b.n	8011098 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2203      	movs	r2, #3
 8010e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	68ba      	ldr	r2, [r7, #8]
 8010ea4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	88fa      	ldrh	r2, [r7, #6]
 8010eaa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	88fa      	ldrh	r2, [r7, #6]
 8010eb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	689b      	ldr	r3, [r3, #8]
 8010ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ed8:	d10f      	bne.n	8010efa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ee8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010ef8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f04:	2b40      	cmp	r3, #64	; 0x40
 8010f06:	d007      	beq.n	8010f18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010f20:	d14b      	bne.n	8010fba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d002      	beq.n	8010f30 <HAL_SPI_Transmit+0xf6>
 8010f2a:	8afb      	ldrh	r3, [r7, #22]
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d13e      	bne.n	8010fae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f34:	881a      	ldrh	r2, [r3, #0]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f40:	1c9a      	adds	r2, r3, #2
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	3b01      	subs	r3, #1
 8010f4e:	b29a      	uxth	r2, r3
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010f54:	e02b      	b.n	8010fae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	689b      	ldr	r3, [r3, #8]
 8010f5c:	f003 0302 	and.w	r3, r3, #2
 8010f60:	2b02      	cmp	r3, #2
 8010f62:	d112      	bne.n	8010f8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f68:	881a      	ldrh	r2, [r3, #0]
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f74:	1c9a      	adds	r2, r3, #2
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	3b01      	subs	r3, #1
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	86da      	strh	r2, [r3, #54]	; 0x36
 8010f88:	e011      	b.n	8010fae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f8a:	f7fe fd57 	bl	800fa3c <HAL_GetTick>
 8010f8e:	4602      	mov	r2, r0
 8010f90:	69bb      	ldr	r3, [r7, #24]
 8010f92:	1ad3      	subs	r3, r2, r3
 8010f94:	683a      	ldr	r2, [r7, #0]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d803      	bhi.n	8010fa2 <HAL_SPI_Transmit+0x168>
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fa0:	d102      	bne.n	8010fa8 <HAL_SPI_Transmit+0x16e>
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d102      	bne.n	8010fae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8010fa8:	2303      	movs	r3, #3
 8010faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010fac:	e074      	b.n	8011098 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d1ce      	bne.n	8010f56 <HAL_SPI_Transmit+0x11c>
 8010fb8:	e04c      	b.n	8011054 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d002      	beq.n	8010fc8 <HAL_SPI_Transmit+0x18e>
 8010fc2:	8afb      	ldrh	r3, [r7, #22]
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d140      	bne.n	801104a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	330c      	adds	r3, #12
 8010fd2:	7812      	ldrb	r2, [r2, #0]
 8010fd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fda:	1c5a      	adds	r2, r3, #1
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	3b01      	subs	r3, #1
 8010fe8:	b29a      	uxth	r2, r3
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8010fee:	e02c      	b.n	801104a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	f003 0302 	and.w	r3, r3, #2
 8010ffa:	2b02      	cmp	r3, #2
 8010ffc:	d113      	bne.n	8011026 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	330c      	adds	r3, #12
 8011008:	7812      	ldrb	r2, [r2, #0]
 801100a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011010:	1c5a      	adds	r2, r3, #1
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801101a:	b29b      	uxth	r3, r3
 801101c:	3b01      	subs	r3, #1
 801101e:	b29a      	uxth	r2, r3
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	86da      	strh	r2, [r3, #54]	; 0x36
 8011024:	e011      	b.n	801104a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011026:	f7fe fd09 	bl	800fa3c <HAL_GetTick>
 801102a:	4602      	mov	r2, r0
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	1ad3      	subs	r3, r2, r3
 8011030:	683a      	ldr	r2, [r7, #0]
 8011032:	429a      	cmp	r2, r3
 8011034:	d803      	bhi.n	801103e <HAL_SPI_Transmit+0x204>
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801103c:	d102      	bne.n	8011044 <HAL_SPI_Transmit+0x20a>
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d102      	bne.n	801104a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8011044:	2303      	movs	r3, #3
 8011046:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011048:	e026      	b.n	8011098 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801104e:	b29b      	uxth	r3, r3
 8011050:	2b00      	cmp	r3, #0
 8011052:	d1cd      	bne.n	8010ff0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011054:	69ba      	ldr	r2, [r7, #24]
 8011056:	6839      	ldr	r1, [r7, #0]
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f000 fbcb 	bl	80117f4 <SPI_EndRxTxTransaction>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2220      	movs	r2, #32
 8011068:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d10a      	bne.n	8011088 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011072:	2300      	movs	r3, #0
 8011074:	613b      	str	r3, [r7, #16]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	613b      	str	r3, [r7, #16]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	689b      	ldr	r3, [r3, #8]
 8011084:	613b      	str	r3, [r7, #16]
 8011086:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801108c:	2b00      	cmp	r3, #0
 801108e:	d002      	beq.n	8011096 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8011090:	2301      	movs	r3, #1
 8011092:	77fb      	strb	r3, [r7, #31]
 8011094:	e000      	b.n	8011098 <HAL_SPI_Transmit+0x25e>
  }

error:
 8011096:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2201      	movs	r2, #1
 801109c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	2200      	movs	r2, #0
 80110a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80110a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3720      	adds	r7, #32
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b088      	sub	sp, #32
 80110b6:	af02      	add	r7, sp, #8
 80110b8:	60f8      	str	r0, [r7, #12]
 80110ba:	60b9      	str	r1, [r7, #8]
 80110bc:	603b      	str	r3, [r7, #0]
 80110be:	4613      	mov	r3, r2
 80110c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80110c2:	2300      	movs	r3, #0
 80110c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80110ce:	d112      	bne.n	80110f6 <HAL_SPI_Receive+0x44>
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	689b      	ldr	r3, [r3, #8]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d10e      	bne.n	80110f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2204      	movs	r2, #4
 80110dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80110e0:	88fa      	ldrh	r2, [r7, #6]
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	4613      	mov	r3, r2
 80110e8:	68ba      	ldr	r2, [r7, #8]
 80110ea:	68b9      	ldr	r1, [r7, #8]
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f000 f8f1 	bl	80112d4 <HAL_SPI_TransmitReceive>
 80110f2:	4603      	mov	r3, r0
 80110f4:	e0ea      	b.n	80112cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d101      	bne.n	8011104 <HAL_SPI_Receive+0x52>
 8011100:	2302      	movs	r3, #2
 8011102:	e0e3      	b.n	80112cc <HAL_SPI_Receive+0x21a>
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2201      	movs	r2, #1
 8011108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801110c:	f7fe fc96 	bl	800fa3c <HAL_GetTick>
 8011110:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011118:	b2db      	uxtb	r3, r3
 801111a:	2b01      	cmp	r3, #1
 801111c:	d002      	beq.n	8011124 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801111e:	2302      	movs	r3, #2
 8011120:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011122:	e0ca      	b.n	80112ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d002      	beq.n	8011130 <HAL_SPI_Receive+0x7e>
 801112a:	88fb      	ldrh	r3, [r7, #6]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d102      	bne.n	8011136 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8011130:	2301      	movs	r3, #1
 8011132:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011134:	e0c1      	b.n	80112ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2204      	movs	r2, #4
 801113a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2200      	movs	r2, #0
 8011142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	68ba      	ldr	r2, [r7, #8]
 8011148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	88fa      	ldrh	r2, [r7, #6]
 801114e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	88fa      	ldrh	r2, [r7, #6]
 8011154:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2200      	movs	r2, #0
 801115a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	2200      	movs	r2, #0
 8011160:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2200      	movs	r2, #0
 8011166:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2200      	movs	r2, #0
 801116c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2200      	movs	r2, #0
 8011172:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	689b      	ldr	r3, [r3, #8]
 8011178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801117c:	d10f      	bne.n	801119e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801118c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801119c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111a8:	2b40      	cmp	r3, #64	; 0x40
 80111aa:	d007      	beq.n	80111bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80111ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d162      	bne.n	801128a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80111c4:	e02e      	b.n	8011224 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	689b      	ldr	r3, [r3, #8]
 80111cc:	f003 0301 	and.w	r3, r3, #1
 80111d0:	2b01      	cmp	r3, #1
 80111d2:	d115      	bne.n	8011200 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f103 020c 	add.w	r2, r3, #12
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111e0:	7812      	ldrb	r2, [r2, #0]
 80111e2:	b2d2      	uxtb	r2, r2
 80111e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111ea:	1c5a      	adds	r2, r3, #1
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	3b01      	subs	r3, #1
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80111fe:	e011      	b.n	8011224 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011200:	f7fe fc1c 	bl	800fa3c <HAL_GetTick>
 8011204:	4602      	mov	r2, r0
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	683a      	ldr	r2, [r7, #0]
 801120c:	429a      	cmp	r2, r3
 801120e:	d803      	bhi.n	8011218 <HAL_SPI_Receive+0x166>
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011216:	d102      	bne.n	801121e <HAL_SPI_Receive+0x16c>
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d102      	bne.n	8011224 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801121e:	2303      	movs	r3, #3
 8011220:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011222:	e04a      	b.n	80112ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011228:	b29b      	uxth	r3, r3
 801122a:	2b00      	cmp	r3, #0
 801122c:	d1cb      	bne.n	80111c6 <HAL_SPI_Receive+0x114>
 801122e:	e031      	b.n	8011294 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	689b      	ldr	r3, [r3, #8]
 8011236:	f003 0301 	and.w	r3, r3, #1
 801123a:	2b01      	cmp	r3, #1
 801123c:	d113      	bne.n	8011266 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	68da      	ldr	r2, [r3, #12]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011248:	b292      	uxth	r2, r2
 801124a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011250:	1c9a      	adds	r2, r3, #2
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801125a:	b29b      	uxth	r3, r3
 801125c:	3b01      	subs	r3, #1
 801125e:	b29a      	uxth	r2, r3
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011264:	e011      	b.n	801128a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011266:	f7fe fbe9 	bl	800fa3c <HAL_GetTick>
 801126a:	4602      	mov	r2, r0
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	1ad3      	subs	r3, r2, r3
 8011270:	683a      	ldr	r2, [r7, #0]
 8011272:	429a      	cmp	r2, r3
 8011274:	d803      	bhi.n	801127e <HAL_SPI_Receive+0x1cc>
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801127c:	d102      	bne.n	8011284 <HAL_SPI_Receive+0x1d2>
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d102      	bne.n	801128a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8011284:	2303      	movs	r3, #3
 8011286:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011288:	e017      	b.n	80112ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801128e:	b29b      	uxth	r3, r3
 8011290:	2b00      	cmp	r3, #0
 8011292:	d1cd      	bne.n	8011230 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011294:	693a      	ldr	r2, [r7, #16]
 8011296:	6839      	ldr	r1, [r7, #0]
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f000 fa45 	bl	8011728 <SPI_EndRxTransaction>
 801129e:	4603      	mov	r3, r0
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d002      	beq.n	80112aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2220      	movs	r2, #32
 80112a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d002      	beq.n	80112b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80112b2:	2301      	movs	r3, #1
 80112b4:	75fb      	strb	r3, [r7, #23]
 80112b6:	e000      	b.n	80112ba <HAL_SPI_Receive+0x208>
  }

error :
 80112b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2201      	movs	r2, #1
 80112be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2200      	movs	r2, #0
 80112c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80112ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	3718      	adds	r7, #24
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b08c      	sub	sp, #48	; 0x30
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
 80112e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80112e2:	2301      	movs	r3, #1
 80112e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80112e6:	2300      	movs	r3, #0
 80112e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	d101      	bne.n	80112fa <HAL_SPI_TransmitReceive+0x26>
 80112f6:	2302      	movs	r3, #2
 80112f8:	e18a      	b.n	8011610 <HAL_SPI_TransmitReceive+0x33c>
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2201      	movs	r2, #1
 80112fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011302:	f7fe fb9b 	bl	800fa3c <HAL_GetTick>
 8011306:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801130e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8011318:	887b      	ldrh	r3, [r7, #2]
 801131a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801131c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011320:	2b01      	cmp	r3, #1
 8011322:	d00f      	beq.n	8011344 <HAL_SPI_TransmitReceive+0x70>
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801132a:	d107      	bne.n	801133c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	689b      	ldr	r3, [r3, #8]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d103      	bne.n	801133c <HAL_SPI_TransmitReceive+0x68>
 8011334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011338:	2b04      	cmp	r3, #4
 801133a:	d003      	beq.n	8011344 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801133c:	2302      	movs	r3, #2
 801133e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011342:	e15b      	b.n	80115fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d005      	beq.n	8011356 <HAL_SPI_TransmitReceive+0x82>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d002      	beq.n	8011356 <HAL_SPI_TransmitReceive+0x82>
 8011350:	887b      	ldrh	r3, [r7, #2]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d103      	bne.n	801135e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8011356:	2301      	movs	r3, #1
 8011358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801135c:	e14e      	b.n	80115fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011364:	b2db      	uxtb	r3, r3
 8011366:	2b04      	cmp	r3, #4
 8011368:	d003      	beq.n	8011372 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2205      	movs	r2, #5
 801136e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	2200      	movs	r2, #0
 8011376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	887a      	ldrh	r2, [r7, #2]
 8011382:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	887a      	ldrh	r2, [r7, #2]
 8011388:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	68ba      	ldr	r2, [r7, #8]
 801138e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	887a      	ldrh	r2, [r7, #2]
 8011394:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	887a      	ldrh	r2, [r7, #2]
 801139a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2200      	movs	r2, #0
 80113a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	2200      	movs	r2, #0
 80113a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113b2:	2b40      	cmp	r3, #64	; 0x40
 80113b4:	d007      	beq.n	80113c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80113c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113ce:	d178      	bne.n	80114c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d002      	beq.n	80113de <HAL_SPI_TransmitReceive+0x10a>
 80113d8:	8b7b      	ldrh	r3, [r7, #26]
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d166      	bne.n	80114ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113e2:	881a      	ldrh	r2, [r3, #0]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ee:	1c9a      	adds	r2, r3, #2
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	3b01      	subs	r3, #1
 80113fc:	b29a      	uxth	r2, r3
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011402:	e053      	b.n	80114ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	689b      	ldr	r3, [r3, #8]
 801140a:	f003 0302 	and.w	r3, r3, #2
 801140e:	2b02      	cmp	r3, #2
 8011410:	d11b      	bne.n	801144a <HAL_SPI_TransmitReceive+0x176>
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011416:	b29b      	uxth	r3, r3
 8011418:	2b00      	cmp	r3, #0
 801141a:	d016      	beq.n	801144a <HAL_SPI_TransmitReceive+0x176>
 801141c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801141e:	2b01      	cmp	r3, #1
 8011420:	d113      	bne.n	801144a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011426:	881a      	ldrh	r2, [r3, #0]
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011432:	1c9a      	adds	r2, r3, #2
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801143c:	b29b      	uxth	r3, r3
 801143e:	3b01      	subs	r3, #1
 8011440:	b29a      	uxth	r2, r3
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011446:	2300      	movs	r3, #0
 8011448:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	689b      	ldr	r3, [r3, #8]
 8011450:	f003 0301 	and.w	r3, r3, #1
 8011454:	2b01      	cmp	r3, #1
 8011456:	d119      	bne.n	801148c <HAL_SPI_TransmitReceive+0x1b8>
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801145c:	b29b      	uxth	r3, r3
 801145e:	2b00      	cmp	r3, #0
 8011460:	d014      	beq.n	801148c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	68da      	ldr	r2, [r3, #12]
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801146c:	b292      	uxth	r2, r2
 801146e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011474:	1c9a      	adds	r2, r3, #2
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801147e:	b29b      	uxth	r3, r3
 8011480:	3b01      	subs	r3, #1
 8011482:	b29a      	uxth	r2, r3
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011488:	2301      	movs	r3, #1
 801148a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801148c:	f7fe fad6 	bl	800fa3c <HAL_GetTick>
 8011490:	4602      	mov	r2, r0
 8011492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011494:	1ad3      	subs	r3, r2, r3
 8011496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011498:	429a      	cmp	r2, r3
 801149a:	d807      	bhi.n	80114ac <HAL_SPI_TransmitReceive+0x1d8>
 801149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114a2:	d003      	beq.n	80114ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80114a4:	2303      	movs	r3, #3
 80114a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80114aa:	e0a7      	b.n	80115fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d1a6      	bne.n	8011404 <HAL_SPI_TransmitReceive+0x130>
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d1a1      	bne.n	8011404 <HAL_SPI_TransmitReceive+0x130>
 80114c0:	e07c      	b.n	80115bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d002      	beq.n	80114d0 <HAL_SPI_TransmitReceive+0x1fc>
 80114ca:	8b7b      	ldrh	r3, [r7, #26]
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d16b      	bne.n	80115a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	330c      	adds	r3, #12
 80114da:	7812      	ldrb	r2, [r2, #0]
 80114dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114e2:	1c5a      	adds	r2, r3, #1
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	3b01      	subs	r3, #1
 80114f0:	b29a      	uxth	r2, r3
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80114f6:	e057      	b.n	80115a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	689b      	ldr	r3, [r3, #8]
 80114fe:	f003 0302 	and.w	r3, r3, #2
 8011502:	2b02      	cmp	r3, #2
 8011504:	d11c      	bne.n	8011540 <HAL_SPI_TransmitReceive+0x26c>
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801150a:	b29b      	uxth	r3, r3
 801150c:	2b00      	cmp	r3, #0
 801150e:	d017      	beq.n	8011540 <HAL_SPI_TransmitReceive+0x26c>
 8011510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011512:	2b01      	cmp	r3, #1
 8011514:	d114      	bne.n	8011540 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	330c      	adds	r3, #12
 8011520:	7812      	ldrb	r2, [r2, #0]
 8011522:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011528:	1c5a      	adds	r2, r3, #1
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011532:	b29b      	uxth	r3, r3
 8011534:	3b01      	subs	r3, #1
 8011536:	b29a      	uxth	r2, r3
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801153c:	2300      	movs	r3, #0
 801153e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	f003 0301 	and.w	r3, r3, #1
 801154a:	2b01      	cmp	r3, #1
 801154c:	d119      	bne.n	8011582 <HAL_SPI_TransmitReceive+0x2ae>
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011552:	b29b      	uxth	r3, r3
 8011554:	2b00      	cmp	r3, #0
 8011556:	d014      	beq.n	8011582 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	68da      	ldr	r2, [r3, #12]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011562:	b2d2      	uxtb	r2, r2
 8011564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801156a:	1c5a      	adds	r2, r3, #1
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011574:	b29b      	uxth	r3, r3
 8011576:	3b01      	subs	r3, #1
 8011578:	b29a      	uxth	r2, r3
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801157e:	2301      	movs	r3, #1
 8011580:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011582:	f7fe fa5b 	bl	800fa3c <HAL_GetTick>
 8011586:	4602      	mov	r2, r0
 8011588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801158e:	429a      	cmp	r2, r3
 8011590:	d803      	bhi.n	801159a <HAL_SPI_TransmitReceive+0x2c6>
 8011592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011598:	d102      	bne.n	80115a0 <HAL_SPI_TransmitReceive+0x2cc>
 801159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159c:	2b00      	cmp	r3, #0
 801159e:	d103      	bne.n	80115a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80115a0:	2303      	movs	r3, #3
 80115a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80115a6:	e029      	b.n	80115fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d1a2      	bne.n	80114f8 <HAL_SPI_TransmitReceive+0x224>
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d19d      	bne.n	80114f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80115bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f000 f917 	bl	80117f4 <SPI_EndRxTxTransaction>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d006      	beq.n	80115da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80115cc:	2301      	movs	r3, #1
 80115ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2220      	movs	r2, #32
 80115d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80115d8:	e010      	b.n	80115fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d10b      	bne.n	80115fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80115e2:	2300      	movs	r3, #0
 80115e4:	617b      	str	r3, [r7, #20]
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	617b      	str	r3, [r7, #20]
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	689b      	ldr	r3, [r3, #8]
 80115f4:	617b      	str	r3, [r7, #20]
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	e000      	b.n	80115fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80115fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2201      	movs	r2, #1
 8011600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	2200      	movs	r2, #0
 8011608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801160c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011610:	4618      	mov	r0, r3
 8011612:	3730      	adds	r7, #48	; 0x30
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b088      	sub	sp, #32
 801161c:	af00      	add	r7, sp, #0
 801161e:	60f8      	str	r0, [r7, #12]
 8011620:	60b9      	str	r1, [r7, #8]
 8011622:	603b      	str	r3, [r7, #0]
 8011624:	4613      	mov	r3, r2
 8011626:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011628:	f7fe fa08 	bl	800fa3c <HAL_GetTick>
 801162c:	4602      	mov	r2, r0
 801162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011630:	1a9b      	subs	r3, r3, r2
 8011632:	683a      	ldr	r2, [r7, #0]
 8011634:	4413      	add	r3, r2
 8011636:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011638:	f7fe fa00 	bl	800fa3c <HAL_GetTick>
 801163c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801163e:	4b39      	ldr	r3, [pc, #228]	; (8011724 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	015b      	lsls	r3, r3, #5
 8011644:	0d1b      	lsrs	r3, r3, #20
 8011646:	69fa      	ldr	r2, [r7, #28]
 8011648:	fb02 f303 	mul.w	r3, r2, r3
 801164c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801164e:	e054      	b.n	80116fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011656:	d050      	beq.n	80116fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011658:	f7fe f9f0 	bl	800fa3c <HAL_GetTick>
 801165c:	4602      	mov	r2, r0
 801165e:	69bb      	ldr	r3, [r7, #24]
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	69fa      	ldr	r2, [r7, #28]
 8011664:	429a      	cmp	r2, r3
 8011666:	d902      	bls.n	801166e <SPI_WaitFlagStateUntilTimeout+0x56>
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d13d      	bne.n	80116ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	685a      	ldr	r2, [r3, #4]
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801167c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011686:	d111      	bne.n	80116ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	689b      	ldr	r3, [r3, #8]
 801168c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011690:	d004      	beq.n	801169c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	689b      	ldr	r3, [r3, #8]
 8011696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801169a:	d107      	bne.n	80116ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80116b4:	d10f      	bne.n	80116d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	681a      	ldr	r2, [r3, #0]
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80116c4:	601a      	str	r2, [r3, #0]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80116d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2201      	movs	r2, #1
 80116da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2200      	movs	r2, #0
 80116e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80116e6:	2303      	movs	r3, #3
 80116e8:	e017      	b.n	801171a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d101      	bne.n	80116f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80116f0:	2300      	movs	r3, #0
 80116f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	3b01      	subs	r3, #1
 80116f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	689a      	ldr	r2, [r3, #8]
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	4013      	ands	r3, r2
 8011704:	68ba      	ldr	r2, [r7, #8]
 8011706:	429a      	cmp	r2, r3
 8011708:	bf0c      	ite	eq
 801170a:	2301      	moveq	r3, #1
 801170c:	2300      	movne	r3, #0
 801170e:	b2db      	uxtb	r3, r3
 8011710:	461a      	mov	r2, r3
 8011712:	79fb      	ldrb	r3, [r7, #7]
 8011714:	429a      	cmp	r2, r3
 8011716:	d19b      	bne.n	8011650 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011718:	2300      	movs	r3, #0
}
 801171a:	4618      	mov	r0, r3
 801171c:	3720      	adds	r7, #32
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
 8011722:	bf00      	nop
 8011724:	20000000 	.word	0x20000000

08011728 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b086      	sub	sp, #24
 801172c:	af02      	add	r7, sp, #8
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	685b      	ldr	r3, [r3, #4]
 8011738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801173c:	d111      	bne.n	8011762 <SPI_EndRxTransaction+0x3a>
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011746:	d004      	beq.n	8011752 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011750:	d107      	bne.n	8011762 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011760:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801176a:	d12a      	bne.n	80117c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	689b      	ldr	r3, [r3, #8]
 8011770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011774:	d012      	beq.n	801179c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	9300      	str	r3, [sp, #0]
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	2200      	movs	r2, #0
 801177e:	2180      	movs	r1, #128	; 0x80
 8011780:	68f8      	ldr	r0, [r7, #12]
 8011782:	f7ff ff49 	bl	8011618 <SPI_WaitFlagStateUntilTimeout>
 8011786:	4603      	mov	r3, r0
 8011788:	2b00      	cmp	r3, #0
 801178a:	d02d      	beq.n	80117e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011790:	f043 0220 	orr.w	r2, r3, #32
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011798:	2303      	movs	r3, #3
 801179a:	e026      	b.n	80117ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	9300      	str	r3, [sp, #0]
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	2200      	movs	r2, #0
 80117a4:	2101      	movs	r1, #1
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	f7ff ff36 	bl	8011618 <SPI_WaitFlagStateUntilTimeout>
 80117ac:	4603      	mov	r3, r0
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d01a      	beq.n	80117e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117b6:	f043 0220 	orr.w	r2, r3, #32
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80117be:	2303      	movs	r3, #3
 80117c0:	e013      	b.n	80117ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	9300      	str	r3, [sp, #0]
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	2200      	movs	r2, #0
 80117ca:	2101      	movs	r1, #1
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f7ff ff23 	bl	8011618 <SPI_WaitFlagStateUntilTimeout>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d007      	beq.n	80117e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117dc:	f043 0220 	orr.w	r2, r3, #32
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80117e4:	2303      	movs	r3, #3
 80117e6:	e000      	b.n	80117ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
	...

080117f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b088      	sub	sp, #32
 80117f8:	af02      	add	r7, sp, #8
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011800:	4b1b      	ldr	r3, [pc, #108]	; (8011870 <SPI_EndRxTxTransaction+0x7c>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	4a1b      	ldr	r2, [pc, #108]	; (8011874 <SPI_EndRxTxTransaction+0x80>)
 8011806:	fba2 2303 	umull	r2, r3, r2, r3
 801180a:	0d5b      	lsrs	r3, r3, #21
 801180c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011810:	fb02 f303 	mul.w	r3, r2, r3
 8011814:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801181e:	d112      	bne.n	8011846 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	9300      	str	r3, [sp, #0]
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	2200      	movs	r2, #0
 8011828:	2180      	movs	r1, #128	; 0x80
 801182a:	68f8      	ldr	r0, [r7, #12]
 801182c:	f7ff fef4 	bl	8011618 <SPI_WaitFlagStateUntilTimeout>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d016      	beq.n	8011864 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801183a:	f043 0220 	orr.w	r2, r3, #32
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011842:	2303      	movs	r3, #3
 8011844:	e00f      	b.n	8011866 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00a      	beq.n	8011862 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	3b01      	subs	r3, #1
 8011850:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	689b      	ldr	r3, [r3, #8]
 8011858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801185c:	2b80      	cmp	r3, #128	; 0x80
 801185e:	d0f2      	beq.n	8011846 <SPI_EndRxTxTransaction+0x52>
 8011860:	e000      	b.n	8011864 <SPI_EndRxTxTransaction+0x70>
        break;
 8011862:	bf00      	nop
  }

  return HAL_OK;
 8011864:	2300      	movs	r3, #0
}
 8011866:	4618      	mov	r0, r3
 8011868:	3718      	adds	r7, #24
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
 801186e:	bf00      	nop
 8011870:	20000000 	.word	0x20000000
 8011874:	165e9f81 	.word	0x165e9f81

08011878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d101      	bne.n	801188a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011886:	2301      	movs	r3, #1
 8011888:	e041      	b.n	801190e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011890:	b2db      	uxtb	r3, r3
 8011892:	2b00      	cmp	r3, #0
 8011894:	d106      	bne.n	80118a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2200      	movs	r2, #0
 801189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7fd feb0 	bl	800f604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2202      	movs	r2, #2
 80118a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	3304      	adds	r3, #4
 80118b4:	4619      	mov	r1, r3
 80118b6:	4610      	mov	r0, r2
 80118b8:	f000 fa96 	bl	8011de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2201      	movs	r2, #1
 80118c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2201      	movs	r2, #1
 80118c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2201      	movs	r2, #1
 80118d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2201      	movs	r2, #1
 80118d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2201      	movs	r2, #1
 80118e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2201      	movs	r2, #1
 80118e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2201      	movs	r2, #1
 80118f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2201      	movs	r2, #1
 80118f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2201      	movs	r2, #1
 8011900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2201      	movs	r2, #1
 8011908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801190c:	2300      	movs	r3, #0
}
 801190e:	4618      	mov	r0, r3
 8011910:	3708      	adds	r7, #8
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
	...

08011918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011918:	b480      	push	{r7}
 801191a:	b085      	sub	sp, #20
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011926:	b2db      	uxtb	r3, r3
 8011928:	2b01      	cmp	r3, #1
 801192a:	d001      	beq.n	8011930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801192c:	2301      	movs	r3, #1
 801192e:	e04e      	b.n	80119ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2202      	movs	r2, #2
 8011934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	68da      	ldr	r2, [r3, #12]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	f042 0201 	orr.w	r2, r2, #1
 8011946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	4a23      	ldr	r2, [pc, #140]	; (80119dc <HAL_TIM_Base_Start_IT+0xc4>)
 801194e:	4293      	cmp	r3, r2
 8011950:	d022      	beq.n	8011998 <HAL_TIM_Base_Start_IT+0x80>
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801195a:	d01d      	beq.n	8011998 <HAL_TIM_Base_Start_IT+0x80>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4a1f      	ldr	r2, [pc, #124]	; (80119e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8011962:	4293      	cmp	r3, r2
 8011964:	d018      	beq.n	8011998 <HAL_TIM_Base_Start_IT+0x80>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4a1e      	ldr	r2, [pc, #120]	; (80119e4 <HAL_TIM_Base_Start_IT+0xcc>)
 801196c:	4293      	cmp	r3, r2
 801196e:	d013      	beq.n	8011998 <HAL_TIM_Base_Start_IT+0x80>
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	4a1c      	ldr	r2, [pc, #112]	; (80119e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8011976:	4293      	cmp	r3, r2
 8011978:	d00e      	beq.n	8011998 <HAL_TIM_Base_Start_IT+0x80>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	4a1b      	ldr	r2, [pc, #108]	; (80119ec <HAL_TIM_Base_Start_IT+0xd4>)
 8011980:	4293      	cmp	r3, r2
 8011982:	d009      	beq.n	8011998 <HAL_TIM_Base_Start_IT+0x80>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4a19      	ldr	r2, [pc, #100]	; (80119f0 <HAL_TIM_Base_Start_IT+0xd8>)
 801198a:	4293      	cmp	r3, r2
 801198c:	d004      	beq.n	8011998 <HAL_TIM_Base_Start_IT+0x80>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	4a18      	ldr	r2, [pc, #96]	; (80119f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8011994:	4293      	cmp	r3, r2
 8011996:	d111      	bne.n	80119bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	689b      	ldr	r3, [r3, #8]
 801199e:	f003 0307 	and.w	r3, r3, #7
 80119a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2b06      	cmp	r3, #6
 80119a8:	d010      	beq.n	80119cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f042 0201 	orr.w	r2, r2, #1
 80119b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80119ba:	e007      	b.n	80119cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f042 0201 	orr.w	r2, r2, #1
 80119ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80119cc:	2300      	movs	r3, #0
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3714      	adds	r7, #20
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr
 80119da:	bf00      	nop
 80119dc:	40010000 	.word	0x40010000
 80119e0:	40000400 	.word	0x40000400
 80119e4:	40000800 	.word	0x40000800
 80119e8:	40000c00 	.word	0x40000c00
 80119ec:	40010400 	.word	0x40010400
 80119f0:	40014000 	.word	0x40014000
 80119f4:	40001800 	.word	0x40001800

080119f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	691b      	ldr	r3, [r3, #16]
 8011a06:	f003 0302 	and.w	r3, r3, #2
 8011a0a:	2b02      	cmp	r3, #2
 8011a0c:	d122      	bne.n	8011a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	68db      	ldr	r3, [r3, #12]
 8011a14:	f003 0302 	and.w	r3, r3, #2
 8011a18:	2b02      	cmp	r3, #2
 8011a1a:	d11b      	bne.n	8011a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	f06f 0202 	mvn.w	r2, #2
 8011a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2201      	movs	r2, #1
 8011a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	699b      	ldr	r3, [r3, #24]
 8011a32:	f003 0303 	and.w	r3, r3, #3
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d003      	beq.n	8011a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f000 f9b5 	bl	8011daa <HAL_TIM_IC_CaptureCallback>
 8011a40:	e005      	b.n	8011a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 f9a7 	bl	8011d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f000 f9b8 	bl	8011dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2200      	movs	r2, #0
 8011a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	691b      	ldr	r3, [r3, #16]
 8011a5a:	f003 0304 	and.w	r3, r3, #4
 8011a5e:	2b04      	cmp	r3, #4
 8011a60:	d122      	bne.n	8011aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	68db      	ldr	r3, [r3, #12]
 8011a68:	f003 0304 	and.w	r3, r3, #4
 8011a6c:	2b04      	cmp	r3, #4
 8011a6e:	d11b      	bne.n	8011aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f06f 0204 	mvn.w	r2, #4
 8011a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2202      	movs	r2, #2
 8011a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	699b      	ldr	r3, [r3, #24]
 8011a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d003      	beq.n	8011a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f000 f98b 	bl	8011daa <HAL_TIM_IC_CaptureCallback>
 8011a94:	e005      	b.n	8011aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f000 f97d 	bl	8011d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f000 f98e 	bl	8011dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	691b      	ldr	r3, [r3, #16]
 8011aae:	f003 0308 	and.w	r3, r3, #8
 8011ab2:	2b08      	cmp	r3, #8
 8011ab4:	d122      	bne.n	8011afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	f003 0308 	and.w	r3, r3, #8
 8011ac0:	2b08      	cmp	r3, #8
 8011ac2:	d11b      	bne.n	8011afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	f06f 0208 	mvn.w	r2, #8
 8011acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2204      	movs	r2, #4
 8011ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	69db      	ldr	r3, [r3, #28]
 8011ada:	f003 0303 	and.w	r3, r3, #3
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d003      	beq.n	8011aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f000 f961 	bl	8011daa <HAL_TIM_IC_CaptureCallback>
 8011ae8:	e005      	b.n	8011af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f000 f953 	bl	8011d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 f964 	bl	8011dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2200      	movs	r2, #0
 8011afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	691b      	ldr	r3, [r3, #16]
 8011b02:	f003 0310 	and.w	r3, r3, #16
 8011b06:	2b10      	cmp	r3, #16
 8011b08:	d122      	bne.n	8011b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	68db      	ldr	r3, [r3, #12]
 8011b10:	f003 0310 	and.w	r3, r3, #16
 8011b14:	2b10      	cmp	r3, #16
 8011b16:	d11b      	bne.n	8011b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	f06f 0210 	mvn.w	r2, #16
 8011b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2208      	movs	r2, #8
 8011b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	69db      	ldr	r3, [r3, #28]
 8011b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d003      	beq.n	8011b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f000 f937 	bl	8011daa <HAL_TIM_IC_CaptureCallback>
 8011b3c:	e005      	b.n	8011b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f000 f929 	bl	8011d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f000 f93a 	bl	8011dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	691b      	ldr	r3, [r3, #16]
 8011b56:	f003 0301 	and.w	r3, r3, #1
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	d10e      	bne.n	8011b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	68db      	ldr	r3, [r3, #12]
 8011b64:	f003 0301 	and.w	r3, r3, #1
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d107      	bne.n	8011b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	f06f 0201 	mvn.w	r2, #1
 8011b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f7fa ff66 	bl	800ca48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	691b      	ldr	r3, [r3, #16]
 8011b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b86:	2b80      	cmp	r3, #128	; 0x80
 8011b88:	d10e      	bne.n	8011ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	68db      	ldr	r3, [r3, #12]
 8011b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b94:	2b80      	cmp	r3, #128	; 0x80
 8011b96:	d107      	bne.n	8011ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f000 fae0 	bl	8012168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	691b      	ldr	r3, [r3, #16]
 8011bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bb2:	2b40      	cmp	r3, #64	; 0x40
 8011bb4:	d10e      	bne.n	8011bd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bc0:	2b40      	cmp	r3, #64	; 0x40
 8011bc2:	d107      	bne.n	8011bd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f000 f8ff 	bl	8011dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	691b      	ldr	r3, [r3, #16]
 8011bda:	f003 0320 	and.w	r3, r3, #32
 8011bde:	2b20      	cmp	r3, #32
 8011be0:	d10e      	bne.n	8011c00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	f003 0320 	and.w	r3, r3, #32
 8011bec:	2b20      	cmp	r3, #32
 8011bee:	d107      	bne.n	8011c00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f06f 0220 	mvn.w	r2, #32
 8011bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f000 faaa 	bl	8012154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011c00:	bf00      	nop
 8011c02:	3708      	adds	r7, #8
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}

08011c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c12:	2300      	movs	r3, #0
 8011c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011c1c:	2b01      	cmp	r3, #1
 8011c1e:	d101      	bne.n	8011c24 <HAL_TIM_ConfigClockSource+0x1c>
 8011c20:	2302      	movs	r3, #2
 8011c22:	e0b4      	b.n	8011d8e <HAL_TIM_ConfigClockSource+0x186>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2201      	movs	r2, #1
 8011c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2202      	movs	r2, #2
 8011c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	689b      	ldr	r3, [r3, #8]
 8011c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	68ba      	ldr	r2, [r7, #8]
 8011c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c5c:	d03e      	beq.n	8011cdc <HAL_TIM_ConfigClockSource+0xd4>
 8011c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c62:	f200 8087 	bhi.w	8011d74 <HAL_TIM_ConfigClockSource+0x16c>
 8011c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c6a:	f000 8086 	beq.w	8011d7a <HAL_TIM_ConfigClockSource+0x172>
 8011c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c72:	d87f      	bhi.n	8011d74 <HAL_TIM_ConfigClockSource+0x16c>
 8011c74:	2b70      	cmp	r3, #112	; 0x70
 8011c76:	d01a      	beq.n	8011cae <HAL_TIM_ConfigClockSource+0xa6>
 8011c78:	2b70      	cmp	r3, #112	; 0x70
 8011c7a:	d87b      	bhi.n	8011d74 <HAL_TIM_ConfigClockSource+0x16c>
 8011c7c:	2b60      	cmp	r3, #96	; 0x60
 8011c7e:	d050      	beq.n	8011d22 <HAL_TIM_ConfigClockSource+0x11a>
 8011c80:	2b60      	cmp	r3, #96	; 0x60
 8011c82:	d877      	bhi.n	8011d74 <HAL_TIM_ConfigClockSource+0x16c>
 8011c84:	2b50      	cmp	r3, #80	; 0x50
 8011c86:	d03c      	beq.n	8011d02 <HAL_TIM_ConfigClockSource+0xfa>
 8011c88:	2b50      	cmp	r3, #80	; 0x50
 8011c8a:	d873      	bhi.n	8011d74 <HAL_TIM_ConfigClockSource+0x16c>
 8011c8c:	2b40      	cmp	r3, #64	; 0x40
 8011c8e:	d058      	beq.n	8011d42 <HAL_TIM_ConfigClockSource+0x13a>
 8011c90:	2b40      	cmp	r3, #64	; 0x40
 8011c92:	d86f      	bhi.n	8011d74 <HAL_TIM_ConfigClockSource+0x16c>
 8011c94:	2b30      	cmp	r3, #48	; 0x30
 8011c96:	d064      	beq.n	8011d62 <HAL_TIM_ConfigClockSource+0x15a>
 8011c98:	2b30      	cmp	r3, #48	; 0x30
 8011c9a:	d86b      	bhi.n	8011d74 <HAL_TIM_ConfigClockSource+0x16c>
 8011c9c:	2b20      	cmp	r3, #32
 8011c9e:	d060      	beq.n	8011d62 <HAL_TIM_ConfigClockSource+0x15a>
 8011ca0:	2b20      	cmp	r3, #32
 8011ca2:	d867      	bhi.n	8011d74 <HAL_TIM_ConfigClockSource+0x16c>
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d05c      	beq.n	8011d62 <HAL_TIM_ConfigClockSource+0x15a>
 8011ca8:	2b10      	cmp	r3, #16
 8011caa:	d05a      	beq.n	8011d62 <HAL_TIM_ConfigClockSource+0x15a>
 8011cac:	e062      	b.n	8011d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6818      	ldr	r0, [r3, #0]
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	6899      	ldr	r1, [r3, #8]
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	685a      	ldr	r2, [r3, #4]
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	f000 f9ad 	bl	801201c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	689b      	ldr	r3, [r3, #8]
 8011cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	68ba      	ldr	r2, [r7, #8]
 8011cd8:	609a      	str	r2, [r3, #8]
      break;
 8011cda:	e04f      	b.n	8011d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6818      	ldr	r0, [r3, #0]
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	6899      	ldr	r1, [r3, #8]
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	685a      	ldr	r2, [r3, #4]
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	68db      	ldr	r3, [r3, #12]
 8011cec:	f000 f996 	bl	801201c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	689a      	ldr	r2, [r3, #8]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011cfe:	609a      	str	r2, [r3, #8]
      break;
 8011d00:	e03c      	b.n	8011d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6818      	ldr	r0, [r3, #0]
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	6859      	ldr	r1, [r3, #4]
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	461a      	mov	r2, r3
 8011d10:	f000 f90a 	bl	8011f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	2150      	movs	r1, #80	; 0x50
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f000 f963 	bl	8011fe6 <TIM_ITRx_SetConfig>
      break;
 8011d20:	e02c      	b.n	8011d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6818      	ldr	r0, [r3, #0]
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	6859      	ldr	r1, [r3, #4]
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	461a      	mov	r2, r3
 8011d30:	f000 f929 	bl	8011f86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2160      	movs	r1, #96	; 0x60
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f000 f953 	bl	8011fe6 <TIM_ITRx_SetConfig>
      break;
 8011d40:	e01c      	b.n	8011d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6818      	ldr	r0, [r3, #0]
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	6859      	ldr	r1, [r3, #4]
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	f000 f8ea 	bl	8011f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2140      	movs	r1, #64	; 0x40
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f000 f943 	bl	8011fe6 <TIM_ITRx_SetConfig>
      break;
 8011d60:	e00c      	b.n	8011d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681a      	ldr	r2, [r3, #0]
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	4610      	mov	r0, r2
 8011d6e:	f000 f93a 	bl	8011fe6 <TIM_ITRx_SetConfig>
      break;
 8011d72:	e003      	b.n	8011d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8011d74:	2301      	movs	r3, #1
 8011d76:	73fb      	strb	r3, [r7, #15]
      break;
 8011d78:	e000      	b.n	8011d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8011d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3710      	adds	r7, #16
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011d96:	b480      	push	{r7}
 8011d98:	b083      	sub	sp, #12
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011d9e:	bf00      	nop
 8011da0:	370c      	adds	r7, #12
 8011da2:	46bd      	mov	sp, r7
 8011da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da8:	4770      	bx	lr

08011daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011daa:	b480      	push	{r7}
 8011dac:	b083      	sub	sp, #12
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011db2:	bf00      	nop
 8011db4:	370c      	adds	r7, #12
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr

08011dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011dbe:	b480      	push	{r7}
 8011dc0:	b083      	sub	sp, #12
 8011dc2:	af00      	add	r7, sp, #0
 8011dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011dc6:	bf00      	nop
 8011dc8:	370c      	adds	r7, #12
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr

08011dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011dd2:	b480      	push	{r7}
 8011dd4:	b083      	sub	sp, #12
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011dda:	bf00      	nop
 8011ddc:	370c      	adds	r7, #12
 8011dde:	46bd      	mov	sp, r7
 8011de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de4:	4770      	bx	lr
	...

08011de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b085      	sub	sp, #20
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	4a40      	ldr	r2, [pc, #256]	; (8011efc <TIM_Base_SetConfig+0x114>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d013      	beq.n	8011e28 <TIM_Base_SetConfig+0x40>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e06:	d00f      	beq.n	8011e28 <TIM_Base_SetConfig+0x40>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	4a3d      	ldr	r2, [pc, #244]	; (8011f00 <TIM_Base_SetConfig+0x118>)
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d00b      	beq.n	8011e28 <TIM_Base_SetConfig+0x40>
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	4a3c      	ldr	r2, [pc, #240]	; (8011f04 <TIM_Base_SetConfig+0x11c>)
 8011e14:	4293      	cmp	r3, r2
 8011e16:	d007      	beq.n	8011e28 <TIM_Base_SetConfig+0x40>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	4a3b      	ldr	r2, [pc, #236]	; (8011f08 <TIM_Base_SetConfig+0x120>)
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d003      	beq.n	8011e28 <TIM_Base_SetConfig+0x40>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	4a3a      	ldr	r2, [pc, #232]	; (8011f0c <TIM_Base_SetConfig+0x124>)
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d108      	bne.n	8011e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	68fa      	ldr	r2, [r7, #12]
 8011e36:	4313      	orrs	r3, r2
 8011e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4a2f      	ldr	r2, [pc, #188]	; (8011efc <TIM_Base_SetConfig+0x114>)
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d02b      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e48:	d027      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	4a2c      	ldr	r2, [pc, #176]	; (8011f00 <TIM_Base_SetConfig+0x118>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d023      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	4a2b      	ldr	r2, [pc, #172]	; (8011f04 <TIM_Base_SetConfig+0x11c>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d01f      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	4a2a      	ldr	r2, [pc, #168]	; (8011f08 <TIM_Base_SetConfig+0x120>)
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	d01b      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	4a29      	ldr	r2, [pc, #164]	; (8011f0c <TIM_Base_SetConfig+0x124>)
 8011e66:	4293      	cmp	r3, r2
 8011e68:	d017      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	4a28      	ldr	r2, [pc, #160]	; (8011f10 <TIM_Base_SetConfig+0x128>)
 8011e6e:	4293      	cmp	r3, r2
 8011e70:	d013      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	4a27      	ldr	r2, [pc, #156]	; (8011f14 <TIM_Base_SetConfig+0x12c>)
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d00f      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	4a26      	ldr	r2, [pc, #152]	; (8011f18 <TIM_Base_SetConfig+0x130>)
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	d00b      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	4a25      	ldr	r2, [pc, #148]	; (8011f1c <TIM_Base_SetConfig+0x134>)
 8011e86:	4293      	cmp	r3, r2
 8011e88:	d007      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	4a24      	ldr	r2, [pc, #144]	; (8011f20 <TIM_Base_SetConfig+0x138>)
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	d003      	beq.n	8011e9a <TIM_Base_SetConfig+0xb2>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	4a23      	ldr	r2, [pc, #140]	; (8011f24 <TIM_Base_SetConfig+0x13c>)
 8011e96:	4293      	cmp	r3, r2
 8011e98:	d108      	bne.n	8011eac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	4313      	orrs	r3, r2
 8011eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	695b      	ldr	r3, [r3, #20]
 8011eb6:	4313      	orrs	r3, r2
 8011eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	68fa      	ldr	r2, [r7, #12]
 8011ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	689a      	ldr	r2, [r3, #8]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	681a      	ldr	r2, [r3, #0]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	4a0a      	ldr	r2, [pc, #40]	; (8011efc <TIM_Base_SetConfig+0x114>)
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	d003      	beq.n	8011ee0 <TIM_Base_SetConfig+0xf8>
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	4a0c      	ldr	r2, [pc, #48]	; (8011f0c <TIM_Base_SetConfig+0x124>)
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d103      	bne.n	8011ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	691a      	ldr	r2, [r3, #16]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2201      	movs	r2, #1
 8011eec:	615a      	str	r2, [r3, #20]
}
 8011eee:	bf00      	nop
 8011ef0:	3714      	adds	r7, #20
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef8:	4770      	bx	lr
 8011efa:	bf00      	nop
 8011efc:	40010000 	.word	0x40010000
 8011f00:	40000400 	.word	0x40000400
 8011f04:	40000800 	.word	0x40000800
 8011f08:	40000c00 	.word	0x40000c00
 8011f0c:	40010400 	.word	0x40010400
 8011f10:	40014000 	.word	0x40014000
 8011f14:	40014400 	.word	0x40014400
 8011f18:	40014800 	.word	0x40014800
 8011f1c:	40001800 	.word	0x40001800
 8011f20:	40001c00 	.word	0x40001c00
 8011f24:	40002000 	.word	0x40002000

08011f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b087      	sub	sp, #28
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	6a1b      	ldr	r3, [r3, #32]
 8011f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6a1b      	ldr	r3, [r3, #32]
 8011f3e:	f023 0201 	bic.w	r2, r3, #1
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	699b      	ldr	r3, [r3, #24]
 8011f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	011b      	lsls	r3, r3, #4
 8011f58:	693a      	ldr	r2, [r7, #16]
 8011f5a:	4313      	orrs	r3, r2
 8011f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	f023 030a 	bic.w	r3, r3, #10
 8011f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011f66:	697a      	ldr	r2, [r7, #20]
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	4313      	orrs	r3, r2
 8011f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	693a      	ldr	r2, [r7, #16]
 8011f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	697a      	ldr	r2, [r7, #20]
 8011f78:	621a      	str	r2, [r3, #32]
}
 8011f7a:	bf00      	nop
 8011f7c:	371c      	adds	r7, #28
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f84:	4770      	bx	lr

08011f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011f86:	b480      	push	{r7}
 8011f88:	b087      	sub	sp, #28
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	60f8      	str	r0, [r7, #12]
 8011f8e:	60b9      	str	r1, [r7, #8]
 8011f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	6a1b      	ldr	r3, [r3, #32]
 8011f96:	f023 0210 	bic.w	r2, r3, #16
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	699b      	ldr	r3, [r3, #24]
 8011fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	6a1b      	ldr	r3, [r3, #32]
 8011fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	031b      	lsls	r3, r3, #12
 8011fb6:	697a      	ldr	r2, [r7, #20]
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	011b      	lsls	r3, r3, #4
 8011fc8:	693a      	ldr	r2, [r7, #16]
 8011fca:	4313      	orrs	r3, r2
 8011fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	697a      	ldr	r2, [r7, #20]
 8011fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	693a      	ldr	r2, [r7, #16]
 8011fd8:	621a      	str	r2, [r3, #32]
}
 8011fda:	bf00      	nop
 8011fdc:	371c      	adds	r7, #28
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr

08011fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011fe6:	b480      	push	{r7}
 8011fe8:	b085      	sub	sp, #20
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
 8011fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	689b      	ldr	r3, [r3, #8]
 8011ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011ffe:	683a      	ldr	r2, [r7, #0]
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	4313      	orrs	r3, r2
 8012004:	f043 0307 	orr.w	r3, r3, #7
 8012008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	68fa      	ldr	r2, [r7, #12]
 801200e:	609a      	str	r2, [r3, #8]
}
 8012010:	bf00      	nop
 8012012:	3714      	adds	r7, #20
 8012014:	46bd      	mov	sp, r7
 8012016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201a:	4770      	bx	lr

0801201c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801201c:	b480      	push	{r7}
 801201e:	b087      	sub	sp, #28
 8012020:	af00      	add	r7, sp, #0
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	60b9      	str	r1, [r7, #8]
 8012026:	607a      	str	r2, [r7, #4]
 8012028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	689b      	ldr	r3, [r3, #8]
 801202e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	021a      	lsls	r2, r3, #8
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	431a      	orrs	r2, r3
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	4313      	orrs	r3, r2
 8012044:	697a      	ldr	r2, [r7, #20]
 8012046:	4313      	orrs	r3, r2
 8012048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	697a      	ldr	r2, [r7, #20]
 801204e:	609a      	str	r2, [r3, #8]
}
 8012050:	bf00      	nop
 8012052:	371c      	adds	r7, #28
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr

0801205c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801205c:	b480      	push	{r7}
 801205e:	b085      	sub	sp, #20
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801206c:	2b01      	cmp	r3, #1
 801206e:	d101      	bne.n	8012074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012070:	2302      	movs	r3, #2
 8012072:	e05a      	b.n	801212a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2201      	movs	r2, #1
 8012078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2202      	movs	r2, #2
 8012080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	689b      	ldr	r3, [r3, #8]
 8012092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801209a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	68fa      	ldr	r2, [r7, #12]
 80120a2:	4313      	orrs	r3, r2
 80120a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	68fa      	ldr	r2, [r7, #12]
 80120ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	4a21      	ldr	r2, [pc, #132]	; (8012138 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80120b4:	4293      	cmp	r3, r2
 80120b6:	d022      	beq.n	80120fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80120c0:	d01d      	beq.n	80120fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	4a1d      	ldr	r2, [pc, #116]	; (801213c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80120c8:	4293      	cmp	r3, r2
 80120ca:	d018      	beq.n	80120fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4a1b      	ldr	r2, [pc, #108]	; (8012140 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80120d2:	4293      	cmp	r3, r2
 80120d4:	d013      	beq.n	80120fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	4a1a      	ldr	r2, [pc, #104]	; (8012144 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80120dc:	4293      	cmp	r3, r2
 80120de:	d00e      	beq.n	80120fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	4a18      	ldr	r2, [pc, #96]	; (8012148 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80120e6:	4293      	cmp	r3, r2
 80120e8:	d009      	beq.n	80120fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	4a17      	ldr	r2, [pc, #92]	; (801214c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80120f0:	4293      	cmp	r3, r2
 80120f2:	d004      	beq.n	80120fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	4a15      	ldr	r2, [pc, #84]	; (8012150 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80120fa:	4293      	cmp	r3, r2
 80120fc:	d10c      	bne.n	8012118 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	68ba      	ldr	r2, [r7, #8]
 801210c:	4313      	orrs	r3, r2
 801210e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	68ba      	ldr	r2, [r7, #8]
 8012116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2201      	movs	r2, #1
 801211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	3714      	adds	r7, #20
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr
 8012136:	bf00      	nop
 8012138:	40010000 	.word	0x40010000
 801213c:	40000400 	.word	0x40000400
 8012140:	40000800 	.word	0x40000800
 8012144:	40000c00 	.word	0x40000c00
 8012148:	40010400 	.word	0x40010400
 801214c:	40014000 	.word	0x40014000
 8012150:	40001800 	.word	0x40001800

08012154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012154:	b480      	push	{r7}
 8012156:	b083      	sub	sp, #12
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801215c:	bf00      	nop
 801215e:	370c      	adds	r7, #12
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr

08012168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012170:	bf00      	nop
 8012172:	370c      	adds	r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr

0801217c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d101      	bne.n	801218e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801218a:	2301      	movs	r3, #1
 801218c:	e03f      	b.n	801220e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012194:	b2db      	uxtb	r3, r3
 8012196:	2b00      	cmp	r3, #0
 8012198:	d106      	bne.n	80121a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2200      	movs	r2, #0
 801219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f7fd fa54 	bl	800f650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2224      	movs	r2, #36	; 0x24
 80121ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	68da      	ldr	r2, [r3, #12]
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80121be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f000 fe05 	bl	8012dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	691a      	ldr	r2, [r3, #16]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80121d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	695a      	ldr	r2, [r3, #20]
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80121e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	68da      	ldr	r2, [r3, #12]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80121f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2200      	movs	r2, #0
 80121fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2220      	movs	r2, #32
 8012200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2220      	movs	r2, #32
 8012208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801220c:	2300      	movs	r3, #0
}
 801220e:	4618      	mov	r0, r3
 8012210:	3708      	adds	r7, #8
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}

08012216 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012216:	b480      	push	{r7}
 8012218:	b085      	sub	sp, #20
 801221a:	af00      	add	r7, sp, #0
 801221c:	60f8      	str	r0, [r7, #12]
 801221e:	60b9      	str	r1, [r7, #8]
 8012220:	4613      	mov	r3, r2
 8012222:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801222a:	b2db      	uxtb	r3, r3
 801222c:	2b20      	cmp	r3, #32
 801222e:	d130      	bne.n	8012292 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d002      	beq.n	801223c <HAL_UART_Transmit_IT+0x26>
 8012236:	88fb      	ldrh	r3, [r7, #6]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d101      	bne.n	8012240 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801223c:	2301      	movs	r3, #1
 801223e:	e029      	b.n	8012294 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012246:	2b01      	cmp	r3, #1
 8012248:	d101      	bne.n	801224e <HAL_UART_Transmit_IT+0x38>
 801224a:	2302      	movs	r3, #2
 801224c:	e022      	b.n	8012294 <HAL_UART_Transmit_IT+0x7e>
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	2201      	movs	r2, #1
 8012252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	68ba      	ldr	r2, [r7, #8]
 801225a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	88fa      	ldrh	r2, [r7, #6]
 8012260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	88fa      	ldrh	r2, [r7, #6]
 8012266:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2200      	movs	r2, #0
 801226c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	2221      	movs	r2, #33	; 0x21
 8012272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2200      	movs	r2, #0
 801227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	68da      	ldr	r2, [r3, #12]
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801228c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801228e:	2300      	movs	r3, #0
 8012290:	e000      	b.n	8012294 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8012292:	2302      	movs	r3, #2
  }
}
 8012294:	4618      	mov	r0, r3
 8012296:	3714      	adds	r7, #20
 8012298:	46bd      	mov	sp, r7
 801229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229e:	4770      	bx	lr

080122a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b084      	sub	sp, #16
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	4613      	mov	r3, r2
 80122ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	2b20      	cmp	r3, #32
 80122b8:	d11d      	bne.n	80122f6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d002      	beq.n	80122c6 <HAL_UART_Receive_IT+0x26>
 80122c0:	88fb      	ldrh	r3, [r7, #6]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d101      	bne.n	80122ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80122c6:	2301      	movs	r3, #1
 80122c8:	e016      	b.n	80122f8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d101      	bne.n	80122d8 <HAL_UART_Receive_IT+0x38>
 80122d4:	2302      	movs	r3, #2
 80122d6:	e00f      	b.n	80122f8 <HAL_UART_Receive_IT+0x58>
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2201      	movs	r2, #1
 80122dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2200      	movs	r2, #0
 80122e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80122e6:	88fb      	ldrh	r3, [r7, #6]
 80122e8:	461a      	mov	r2, r3
 80122ea:	68b9      	ldr	r1, [r7, #8]
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f000 fb97 	bl	8012a20 <UART_Start_Receive_IT>
 80122f2:	4603      	mov	r3, r0
 80122f4:	e000      	b.n	80122f8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80122f6:	2302      	movs	r3, #2
  }
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b0a0      	sub	sp, #128	; 0x80
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	330c      	adds	r3, #12
 801230e:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012312:	e853 3f00 	ldrex	r3, [r3]
 8012316:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801231a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 801231e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	330c      	adds	r3, #12
 8012326:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012328:	66ba      	str	r2, [r7, #104]	; 0x68
 801232a:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801232c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801232e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012330:	e841 2300 	strex	r3, r2, [r1]
 8012334:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1e5      	bne.n	8012308 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	3314      	adds	r3, #20
 8012342:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012346:	e853 3f00 	ldrex	r3, [r3]
 801234a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801234c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801234e:	f023 0301 	bic.w	r3, r3, #1
 8012352:	67bb      	str	r3, [r7, #120]	; 0x78
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	3314      	adds	r3, #20
 801235a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801235c:	657a      	str	r2, [r7, #84]	; 0x54
 801235e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012360:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012362:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012364:	e841 2300 	strex	r3, r2, [r1]
 8012368:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801236a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801236c:	2b00      	cmp	r3, #0
 801236e:	d1e5      	bne.n	801233c <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012374:	2b01      	cmp	r3, #1
 8012376:	d119      	bne.n	80123ac <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	330c      	adds	r3, #12
 801237e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012382:	e853 3f00 	ldrex	r3, [r3]
 8012386:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238a:	f023 0310 	bic.w	r3, r3, #16
 801238e:	677b      	str	r3, [r7, #116]	; 0x74
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	330c      	adds	r3, #12
 8012396:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012398:	643a      	str	r2, [r7, #64]	; 0x40
 801239a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801239c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801239e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123a0:	e841 2300 	strex	r3, r2, [r1]
 80123a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80123a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d1e5      	bne.n	8012378 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	695b      	ldr	r3, [r3, #20]
 80123b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123b6:	2b80      	cmp	r3, #128	; 0x80
 80123b8:	d136      	bne.n	8012428 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	3314      	adds	r3, #20
 80123c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123c2:	6a3b      	ldr	r3, [r7, #32]
 80123c4:	e853 3f00 	ldrex	r3, [r3]
 80123c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80123d0:	673b      	str	r3, [r7, #112]	; 0x70
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	3314      	adds	r3, #20
 80123d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80123da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80123dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123e2:	e841 2300 	strex	r3, r2, [r1]
 80123e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80123e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d1e5      	bne.n	80123ba <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d018      	beq.n	8012428 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123fa:	2200      	movs	r2, #0
 80123fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012402:	4618      	mov	r0, r3
 8012404:	f7fd fc5b 	bl	800fcbe <HAL_DMA_Abort>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00c      	beq.n	8012428 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012412:	4618      	mov	r0, r3
 8012414:	f7fd fce5 	bl	800fde2 <HAL_DMA_GetError>
 8012418:	4603      	mov	r3, r0
 801241a:	2b20      	cmp	r3, #32
 801241c:	d104      	bne.n	8012428 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2210      	movs	r2, #16
 8012422:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8012424:	2303      	movs	r3, #3
 8012426:	e052      	b.n	80124ce <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	695b      	ldr	r3, [r3, #20]
 801242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012432:	2b40      	cmp	r3, #64	; 0x40
 8012434:	d136      	bne.n	80124a4 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	3314      	adds	r3, #20
 801243c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	e853 3f00 	ldrex	r3, [r3]
 8012444:	60bb      	str	r3, [r7, #8]
   return(result);
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801244c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	3314      	adds	r3, #20
 8012454:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012456:	61ba      	str	r2, [r7, #24]
 8012458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801245a:	6979      	ldr	r1, [r7, #20]
 801245c:	69ba      	ldr	r2, [r7, #24]
 801245e:	e841 2300 	strex	r3, r2, [r1]
 8012462:	613b      	str	r3, [r7, #16]
   return(result);
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d1e5      	bne.n	8012436 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801246e:	2b00      	cmp	r3, #0
 8012470:	d018      	beq.n	80124a4 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012476:	2200      	movs	r2, #0
 8012478:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801247e:	4618      	mov	r0, r3
 8012480:	f7fd fc1d 	bl	800fcbe <HAL_DMA_Abort>
 8012484:	4603      	mov	r3, r0
 8012486:	2b00      	cmp	r3, #0
 8012488:	d00c      	beq.n	80124a4 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801248e:	4618      	mov	r0, r3
 8012490:	f7fd fca7 	bl	800fde2 <HAL_DMA_GetError>
 8012494:	4603      	mov	r3, r0
 8012496:	2b20      	cmp	r3, #32
 8012498:	d104      	bne.n	80124a4 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2210      	movs	r2, #16
 801249e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80124a0:	2303      	movs	r3, #3
 80124a2:	e014      	b.n	80124ce <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2200      	movs	r2, #0
 80124a8:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2200      	movs	r2, #0
 80124ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2220      	movs	r2, #32
 80124ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2220      	movs	r2, #32
 80124c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2200      	movs	r2, #0
 80124ca:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80124cc:	2300      	movs	r3, #0
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3780      	adds	r7, #128	; 0x80
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
	...

080124d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b0ba      	sub	sp, #232	; 0xe8
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	695b      	ldr	r3, [r3, #20]
 80124fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80124fe:	2300      	movs	r3, #0
 8012500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8012504:	2300      	movs	r3, #0
 8012506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801250e:	f003 030f 	and.w	r3, r3, #15
 8012512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8012516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801251a:	2b00      	cmp	r3, #0
 801251c:	d10f      	bne.n	801253e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801251e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012522:	f003 0320 	and.w	r3, r3, #32
 8012526:	2b00      	cmp	r3, #0
 8012528:	d009      	beq.n	801253e <HAL_UART_IRQHandler+0x66>
 801252a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801252e:	f003 0320 	and.w	r3, r3, #32
 8012532:	2b00      	cmp	r3, #0
 8012534:	d003      	beq.n	801253e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f000 fb8f 	bl	8012c5a <UART_Receive_IT>
      return;
 801253c:	e256      	b.n	80129ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801253e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012542:	2b00      	cmp	r3, #0
 8012544:	f000 80de 	beq.w	8012704 <HAL_UART_IRQHandler+0x22c>
 8012548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801254c:	f003 0301 	and.w	r3, r3, #1
 8012550:	2b00      	cmp	r3, #0
 8012552:	d106      	bne.n	8012562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012558:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801255c:	2b00      	cmp	r3, #0
 801255e:	f000 80d1 	beq.w	8012704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012566:	f003 0301 	and.w	r3, r3, #1
 801256a:	2b00      	cmp	r3, #0
 801256c:	d00b      	beq.n	8012586 <HAL_UART_IRQHandler+0xae>
 801256e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012576:	2b00      	cmp	r3, #0
 8012578:	d005      	beq.n	8012586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801257e:	f043 0201 	orr.w	r2, r3, #1
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801258a:	f003 0304 	and.w	r3, r3, #4
 801258e:	2b00      	cmp	r3, #0
 8012590:	d00b      	beq.n	80125aa <HAL_UART_IRQHandler+0xd2>
 8012592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012596:	f003 0301 	and.w	r3, r3, #1
 801259a:	2b00      	cmp	r3, #0
 801259c:	d005      	beq.n	80125aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125a2:	f043 0202 	orr.w	r2, r3, #2
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80125aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125ae:	f003 0302 	and.w	r3, r3, #2
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00b      	beq.n	80125ce <HAL_UART_IRQHandler+0xf6>
 80125b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80125ba:	f003 0301 	and.w	r3, r3, #1
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d005      	beq.n	80125ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125c6:	f043 0204 	orr.w	r2, r3, #4
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80125ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125d2:	f003 0308 	and.w	r3, r3, #8
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d011      	beq.n	80125fe <HAL_UART_IRQHandler+0x126>
 80125da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80125de:	f003 0320 	and.w	r3, r3, #32
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d105      	bne.n	80125f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80125e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80125ea:	f003 0301 	and.w	r3, r3, #1
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d005      	beq.n	80125fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125f6:	f043 0208 	orr.w	r2, r3, #8
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012602:	2b00      	cmp	r3, #0
 8012604:	f000 81ed 	beq.w	80129e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801260c:	f003 0320 	and.w	r3, r3, #32
 8012610:	2b00      	cmp	r3, #0
 8012612:	d008      	beq.n	8012626 <HAL_UART_IRQHandler+0x14e>
 8012614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012618:	f003 0320 	and.w	r3, r3, #32
 801261c:	2b00      	cmp	r3, #0
 801261e:	d002      	beq.n	8012626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 fb1a 	bl	8012c5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	695b      	ldr	r3, [r3, #20]
 801262c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012630:	2b40      	cmp	r3, #64	; 0x40
 8012632:	bf0c      	ite	eq
 8012634:	2301      	moveq	r3, #1
 8012636:	2300      	movne	r3, #0
 8012638:	b2db      	uxtb	r3, r3
 801263a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012642:	f003 0308 	and.w	r3, r3, #8
 8012646:	2b00      	cmp	r3, #0
 8012648:	d103      	bne.n	8012652 <HAL_UART_IRQHandler+0x17a>
 801264a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801264e:	2b00      	cmp	r3, #0
 8012650:	d04f      	beq.n	80126f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 fa22 	bl	8012a9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	695b      	ldr	r3, [r3, #20]
 801265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012662:	2b40      	cmp	r3, #64	; 0x40
 8012664:	d141      	bne.n	80126ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	3314      	adds	r3, #20
 801266c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012674:	e853 3f00 	ldrex	r3, [r3]
 8012678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801267c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	3314      	adds	r3, #20
 801268e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801269a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801269e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80126a2:	e841 2300 	strex	r3, r2, [r1]
 80126a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80126aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d1d9      	bne.n	8012666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d013      	beq.n	80126e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126be:	4a7d      	ldr	r2, [pc, #500]	; (80128b4 <HAL_UART_IRQHandler+0x3dc>)
 80126c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fd fb69 	bl	800fd9e <HAL_DMA_Abort_IT>
 80126cc:	4603      	mov	r3, r0
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d016      	beq.n	8012700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80126dc:	4610      	mov	r0, r2
 80126de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80126e0:	e00e      	b.n	8012700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f000 f986 	bl	80129f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80126e8:	e00a      	b.n	8012700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f000 f982 	bl	80129f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80126f0:	e006      	b.n	8012700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 f97e 	bl	80129f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2200      	movs	r2, #0
 80126fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80126fe:	e170      	b.n	80129e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012700:	bf00      	nop
    return;
 8012702:	e16e      	b.n	80129e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012708:	2b01      	cmp	r3, #1
 801270a:	f040 814a 	bne.w	80129a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801270e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012712:	f003 0310 	and.w	r3, r3, #16
 8012716:	2b00      	cmp	r3, #0
 8012718:	f000 8143 	beq.w	80129a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801271c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012720:	f003 0310 	and.w	r3, r3, #16
 8012724:	2b00      	cmp	r3, #0
 8012726:	f000 813c 	beq.w	80129a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801272a:	2300      	movs	r3, #0
 801272c:	60bb      	str	r3, [r7, #8]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	60bb      	str	r3, [r7, #8]
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	60bb      	str	r3, [r7, #8]
 801273e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	695b      	ldr	r3, [r3, #20]
 8012746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801274a:	2b40      	cmp	r3, #64	; 0x40
 801274c:	f040 80b4 	bne.w	80128b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801275c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012760:	2b00      	cmp	r3, #0
 8012762:	f000 8140 	beq.w	80129e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801276a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801276e:	429a      	cmp	r2, r3
 8012770:	f080 8139 	bcs.w	80129e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801277a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012780:	69db      	ldr	r3, [r3, #28]
 8012782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012786:	f000 8088 	beq.w	801289a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	330c      	adds	r3, #12
 8012790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012798:	e853 3f00 	ldrex	r3, [r3]
 801279c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80127a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80127a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	330c      	adds	r3, #12
 80127b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80127b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80127ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80127c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80127c6:	e841 2300 	strex	r3, r2, [r1]
 80127ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80127ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1d9      	bne.n	801278a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	3314      	adds	r3, #20
 80127dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80127e0:	e853 3f00 	ldrex	r3, [r3]
 80127e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80127e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80127e8:	f023 0301 	bic.w	r3, r3, #1
 80127ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	3314      	adds	r3, #20
 80127f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80127fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80127fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012800:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012802:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012806:	e841 2300 	strex	r3, r2, [r1]
 801280a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801280c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801280e:	2b00      	cmp	r3, #0
 8012810:	d1e1      	bne.n	80127d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	3314      	adds	r3, #20
 8012818:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801281a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801281c:	e853 3f00 	ldrex	r3, [r3]
 8012820:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	3314      	adds	r3, #20
 8012832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012836:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012838:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801283a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801283c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801283e:	e841 2300 	strex	r3, r2, [r1]
 8012842:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012846:	2b00      	cmp	r3, #0
 8012848:	d1e3      	bne.n	8012812 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2220      	movs	r2, #32
 801284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2200      	movs	r2, #0
 8012856:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	330c      	adds	r3, #12
 801285e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012862:	e853 3f00 	ldrex	r3, [r3]
 8012866:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801286a:	f023 0310 	bic.w	r3, r3, #16
 801286e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	330c      	adds	r3, #12
 8012878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801287c:	65ba      	str	r2, [r7, #88]	; 0x58
 801287e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012880:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012884:	e841 2300 	strex	r3, r2, [r1]
 8012888:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801288a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801288c:	2b00      	cmp	r3, #0
 801288e:	d1e3      	bne.n	8012858 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012894:	4618      	mov	r0, r3
 8012896:	f7fd fa12 	bl	800fcbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	1ad3      	subs	r3, r2, r3
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	4619      	mov	r1, r3
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 f8ac 	bl	8012a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80128b0:	e099      	b.n	80129e6 <HAL_UART_IRQHandler+0x50e>
 80128b2:	bf00      	nop
 80128b4:	08012b63 	.word	0x08012b63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	1ad3      	subs	r3, r2, r3
 80128c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f000 808b 	beq.w	80129ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80128d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80128d8:	2b00      	cmp	r3, #0
 80128da:	f000 8086 	beq.w	80129ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	330c      	adds	r3, #12
 80128e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e8:	e853 3f00 	ldrex	r3, [r3]
 80128ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80128ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80128f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	330c      	adds	r3, #12
 80128fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8012902:	647a      	str	r2, [r7, #68]	; 0x44
 8012904:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801290a:	e841 2300 	strex	r3, r2, [r1]
 801290e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1e3      	bne.n	80128de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	3314      	adds	r3, #20
 801291c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012920:	e853 3f00 	ldrex	r3, [r3]
 8012924:	623b      	str	r3, [r7, #32]
   return(result);
 8012926:	6a3b      	ldr	r3, [r7, #32]
 8012928:	f023 0301 	bic.w	r3, r3, #1
 801292c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	3314      	adds	r3, #20
 8012936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801293a:	633a      	str	r2, [r7, #48]	; 0x30
 801293c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801293e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012942:	e841 2300 	strex	r3, r2, [r1]
 8012946:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801294a:	2b00      	cmp	r3, #0
 801294c:	d1e3      	bne.n	8012916 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2220      	movs	r2, #32
 8012952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2200      	movs	r2, #0
 801295a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	330c      	adds	r3, #12
 8012962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	e853 3f00 	ldrex	r3, [r3]
 801296a:	60fb      	str	r3, [r7, #12]
   return(result);
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f023 0310 	bic.w	r3, r3, #16
 8012972:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	330c      	adds	r3, #12
 801297c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8012980:	61fa      	str	r2, [r7, #28]
 8012982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012984:	69b9      	ldr	r1, [r7, #24]
 8012986:	69fa      	ldr	r2, [r7, #28]
 8012988:	e841 2300 	strex	r3, r2, [r1]
 801298c:	617b      	str	r3, [r7, #20]
   return(result);
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d1e3      	bne.n	801295c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012998:	4619      	mov	r1, r3
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 f834 	bl	8012a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80129a0:	e023      	b.n	80129ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80129a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d009      	beq.n	80129c2 <HAL_UART_IRQHandler+0x4ea>
 80129ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80129b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d003      	beq.n	80129c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f000 f8e5 	bl	8012b8a <UART_Transmit_IT>
    return;
 80129c0:	e014      	b.n	80129ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80129c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d00e      	beq.n	80129ec <HAL_UART_IRQHandler+0x514>
 80129ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80129d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d008      	beq.n	80129ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 f925 	bl	8012c2a <UART_EndTransmit_IT>
    return;
 80129e0:	e004      	b.n	80129ec <HAL_UART_IRQHandler+0x514>
    return;
 80129e2:	bf00      	nop
 80129e4:	e002      	b.n	80129ec <HAL_UART_IRQHandler+0x514>
      return;
 80129e6:	bf00      	nop
 80129e8:	e000      	b.n	80129ec <HAL_UART_IRQHandler+0x514>
      return;
 80129ea:	bf00      	nop
  }
}
 80129ec:	37e8      	adds	r7, #232	; 0xe8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop

080129f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b083      	sub	sp, #12
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80129fc:	bf00      	nop
 80129fe:	370c      	adds	r7, #12
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	460b      	mov	r3, r1
 8012a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012a14:	bf00      	nop
 8012a16:	370c      	adds	r7, #12
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr

08012a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012a20:	b480      	push	{r7}
 8012a22:	b085      	sub	sp, #20
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	60f8      	str	r0, [r7, #12]
 8012a28:	60b9      	str	r1, [r7, #8]
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	68ba      	ldr	r2, [r7, #8]
 8012a32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	88fa      	ldrh	r2, [r7, #6]
 8012a38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	88fa      	ldrh	r2, [r7, #6]
 8012a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2200      	movs	r2, #0
 8012a44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2222      	movs	r2, #34	; 0x22
 8012a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	2200      	movs	r2, #0
 8012a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	691b      	ldr	r3, [r3, #16]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d007      	beq.n	8012a6e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	68da      	ldr	r2, [r3, #12]
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012a6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	695a      	ldr	r2, [r3, #20]
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f042 0201 	orr.w	r2, r2, #1
 8012a7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	68da      	ldr	r2, [r3, #12]
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f042 0220 	orr.w	r2, r2, #32
 8012a8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3714      	adds	r7, #20
 8012a94:	46bd      	mov	sp, r7
 8012a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9a:	4770      	bx	lr

08012a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	b095      	sub	sp, #84	; 0x54
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	330c      	adds	r3, #12
 8012aaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aae:	e853 3f00 	ldrex	r3, [r3]
 8012ab2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	330c      	adds	r3, #12
 8012ac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012ac4:	643a      	str	r2, [r7, #64]	; 0x40
 8012ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ac8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012acc:	e841 2300 	strex	r3, r2, [r1]
 8012ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d1e5      	bne.n	8012aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	3314      	adds	r3, #20
 8012ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ae0:	6a3b      	ldr	r3, [r7, #32]
 8012ae2:	e853 3f00 	ldrex	r3, [r3]
 8012ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	f023 0301 	bic.w	r3, r3, #1
 8012aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	3314      	adds	r3, #20
 8012af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012af8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b00:	e841 2300 	strex	r3, r2, [r1]
 8012b04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d1e5      	bne.n	8012ad8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d119      	bne.n	8012b48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	330c      	adds	r3, #12
 8012b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	e853 3f00 	ldrex	r3, [r3]
 8012b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	f023 0310 	bic.w	r3, r3, #16
 8012b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	330c      	adds	r3, #12
 8012b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b34:	61ba      	str	r2, [r7, #24]
 8012b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b38:	6979      	ldr	r1, [r7, #20]
 8012b3a:	69ba      	ldr	r2, [r7, #24]
 8012b3c:	e841 2300 	strex	r3, r2, [r1]
 8012b40:	613b      	str	r3, [r7, #16]
   return(result);
 8012b42:	693b      	ldr	r3, [r7, #16]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d1e5      	bne.n	8012b14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2220      	movs	r2, #32
 8012b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8012b56:	bf00      	nop
 8012b58:	3754      	adds	r7, #84	; 0x54
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr

08012b62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012b62:	b580      	push	{r7, lr}
 8012b64:	b084      	sub	sp, #16
 8012b66:	af00      	add	r7, sp, #0
 8012b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2200      	movs	r2, #0
 8012b74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012b7c:	68f8      	ldr	r0, [r7, #12]
 8012b7e:	f7ff ff39 	bl	80129f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012b82:	bf00      	nop
 8012b84:	3710      	adds	r7, #16
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8012b8a:	b480      	push	{r7}
 8012b8c:	b085      	sub	sp, #20
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	2b21      	cmp	r3, #33	; 0x21
 8012b9c:	d13e      	bne.n	8012c1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	689b      	ldr	r3, [r3, #8]
 8012ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ba6:	d114      	bne.n	8012bd2 <UART_Transmit_IT+0x48>
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	691b      	ldr	r3, [r3, #16]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d110      	bne.n	8012bd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6a1b      	ldr	r3, [r3, #32]
 8012bb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	881b      	ldrh	r3, [r3, #0]
 8012bba:	461a      	mov	r2, r3
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012bc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6a1b      	ldr	r3, [r3, #32]
 8012bca:	1c9a      	adds	r2, r3, #2
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	621a      	str	r2, [r3, #32]
 8012bd0:	e008      	b.n	8012be4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6a1b      	ldr	r3, [r3, #32]
 8012bd6:	1c59      	adds	r1, r3, #1
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	6211      	str	r1, [r2, #32]
 8012bdc:	781a      	ldrb	r2, [r3, #0]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	3b01      	subs	r3, #1
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d10f      	bne.n	8012c18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	68da      	ldr	r2, [r3, #12]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012c06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	68da      	ldr	r2, [r3, #12]
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012c16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	e000      	b.n	8012c1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8012c1c:	2302      	movs	r3, #2
  }
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3714      	adds	r7, #20
 8012c22:	46bd      	mov	sp, r7
 8012c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c28:	4770      	bx	lr

08012c2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012c2a:	b580      	push	{r7, lr}
 8012c2c:	b082      	sub	sp, #8
 8012c2e:	af00      	add	r7, sp, #0
 8012c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	68da      	ldr	r2, [r3, #12]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012c40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2220      	movs	r2, #32
 8012c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f7f9 fed4 	bl	800c9f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8012c50:	2300      	movs	r3, #0
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}

08012c5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012c5a:	b580      	push	{r7, lr}
 8012c5c:	b08c      	sub	sp, #48	; 0x30
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	2b22      	cmp	r3, #34	; 0x22
 8012c6c:	f040 80ab 	bne.w	8012dc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	689b      	ldr	r3, [r3, #8]
 8012c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012c78:	d117      	bne.n	8012caa <UART_Receive_IT+0x50>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	691b      	ldr	r3, [r3, #16]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d113      	bne.n	8012caa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8012c82:	2300      	movs	r3, #0
 8012c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	685b      	ldr	r3, [r3, #4]
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c98:	b29a      	uxth	r2, r3
 8012c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ca2:	1c9a      	adds	r2, r3, #2
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8012ca8:	e026      	b.n	8012cf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012cbc:	d007      	beq.n	8012cce <UART_Receive_IT+0x74>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	689b      	ldr	r3, [r3, #8]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d10a      	bne.n	8012cdc <UART_Receive_IT+0x82>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	691b      	ldr	r3, [r3, #16]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d106      	bne.n	8012cdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	b2da      	uxtb	r2, r3
 8012cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd8:	701a      	strb	r2, [r3, #0]
 8012cda:	e008      	b.n	8012cee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012ce8:	b2da      	uxtb	r2, r3
 8012cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cf2:	1c5a      	adds	r2, r3, #1
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	3b01      	subs	r3, #1
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	4619      	mov	r1, r3
 8012d06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d15a      	bne.n	8012dc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	68da      	ldr	r2, [r3, #12]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f022 0220 	bic.w	r2, r2, #32
 8012d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	68da      	ldr	r2, [r3, #12]
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	695a      	ldr	r2, [r3, #20]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	f022 0201 	bic.w	r2, r2, #1
 8012d3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2220      	movs	r2, #32
 8012d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d135      	bne.n	8012db8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	330c      	adds	r3, #12
 8012d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	e853 3f00 	ldrex	r3, [r3]
 8012d60:	613b      	str	r3, [r7, #16]
   return(result);
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	f023 0310 	bic.w	r3, r3, #16
 8012d68:	627b      	str	r3, [r7, #36]	; 0x24
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	330c      	adds	r3, #12
 8012d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d72:	623a      	str	r2, [r7, #32]
 8012d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d76:	69f9      	ldr	r1, [r7, #28]
 8012d78:	6a3a      	ldr	r2, [r7, #32]
 8012d7a:	e841 2300 	strex	r3, r2, [r1]
 8012d7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d1e5      	bne.n	8012d52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	f003 0310 	and.w	r3, r3, #16
 8012d90:	2b10      	cmp	r3, #16
 8012d92:	d10a      	bne.n	8012daa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012d94:	2300      	movs	r3, #0
 8012d96:	60fb      	str	r3, [r7, #12]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	60fb      	str	r3, [r7, #12]
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	60fb      	str	r3, [r7, #12]
 8012da8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012dae:	4619      	mov	r1, r3
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f7ff fe29 	bl	8012a08 <HAL_UARTEx_RxEventCallback>
 8012db6:	e002      	b.n	8012dbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f7f9 fe31 	bl	800ca20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	e002      	b.n	8012dc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	e000      	b.n	8012dc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8012dc6:	2302      	movs	r3, #2
  }
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3730      	adds	r7, #48	; 0x30
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012dd4:	b0c0      	sub	sp, #256	; 0x100
 8012dd6:	af00      	add	r7, sp, #0
 8012dd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	691b      	ldr	r3, [r3, #16]
 8012de4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012dec:	68d9      	ldr	r1, [r3, #12]
 8012dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	ea40 0301 	orr.w	r3, r0, r1
 8012df8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012dfe:	689a      	ldr	r2, [r3, #8]
 8012e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e04:	691b      	ldr	r3, [r3, #16]
 8012e06:	431a      	orrs	r2, r3
 8012e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e0c:	695b      	ldr	r3, [r3, #20]
 8012e0e:	431a      	orrs	r2, r3
 8012e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e14:	69db      	ldr	r3, [r3, #28]
 8012e16:	4313      	orrs	r3, r2
 8012e18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	68db      	ldr	r3, [r3, #12]
 8012e24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012e28:	f021 010c 	bic.w	r1, r1, #12
 8012e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012e36:	430b      	orrs	r3, r1
 8012e38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	695b      	ldr	r3, [r3, #20]
 8012e42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e4a:	6999      	ldr	r1, [r3, #24]
 8012e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	ea40 0301 	orr.w	r3, r0, r1
 8012e56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e5c:	681a      	ldr	r2, [r3, #0]
 8012e5e:	4b8f      	ldr	r3, [pc, #572]	; (801309c <UART_SetConfig+0x2cc>)
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d005      	beq.n	8012e70 <UART_SetConfig+0xa0>
 8012e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e68:	681a      	ldr	r2, [r3, #0]
 8012e6a:	4b8d      	ldr	r3, [pc, #564]	; (80130a0 <UART_SetConfig+0x2d0>)
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d104      	bne.n	8012e7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8012e70:	f7fd fa78 	bl	8010364 <HAL_RCC_GetPCLK2Freq>
 8012e74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8012e78:	e003      	b.n	8012e82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012e7a:	f7fd fa5f 	bl	801033c <HAL_RCC_GetPCLK1Freq>
 8012e7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e86:	69db      	ldr	r3, [r3, #28]
 8012e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e8c:	f040 810c 	bne.w	80130a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012e94:	2200      	movs	r2, #0
 8012e96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012e9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8012e9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8012ea2:	4622      	mov	r2, r4
 8012ea4:	462b      	mov	r3, r5
 8012ea6:	1891      	adds	r1, r2, r2
 8012ea8:	65b9      	str	r1, [r7, #88]	; 0x58
 8012eaa:	415b      	adcs	r3, r3
 8012eac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012eae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012eb2:	4621      	mov	r1, r4
 8012eb4:	eb12 0801 	adds.w	r8, r2, r1
 8012eb8:	4629      	mov	r1, r5
 8012eba:	eb43 0901 	adc.w	r9, r3, r1
 8012ebe:	f04f 0200 	mov.w	r2, #0
 8012ec2:	f04f 0300 	mov.w	r3, #0
 8012ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012ed2:	4690      	mov	r8, r2
 8012ed4:	4699      	mov	r9, r3
 8012ed6:	4623      	mov	r3, r4
 8012ed8:	eb18 0303 	adds.w	r3, r8, r3
 8012edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012ee0:	462b      	mov	r3, r5
 8012ee2:	eb49 0303 	adc.w	r3, r9, r3
 8012ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012ef6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8012efa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012efe:	460b      	mov	r3, r1
 8012f00:	18db      	adds	r3, r3, r3
 8012f02:	653b      	str	r3, [r7, #80]	; 0x50
 8012f04:	4613      	mov	r3, r2
 8012f06:	eb42 0303 	adc.w	r3, r2, r3
 8012f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8012f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012f10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012f14:	f7ed fec8 	bl	8000ca8 <__aeabi_uldivmod>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	460b      	mov	r3, r1
 8012f1c:	4b61      	ldr	r3, [pc, #388]	; (80130a4 <UART_SetConfig+0x2d4>)
 8012f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8012f22:	095b      	lsrs	r3, r3, #5
 8012f24:	011c      	lsls	r4, r3, #4
 8012f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012f30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8012f34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8012f38:	4642      	mov	r2, r8
 8012f3a:	464b      	mov	r3, r9
 8012f3c:	1891      	adds	r1, r2, r2
 8012f3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8012f40:	415b      	adcs	r3, r3
 8012f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012f44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012f48:	4641      	mov	r1, r8
 8012f4a:	eb12 0a01 	adds.w	sl, r2, r1
 8012f4e:	4649      	mov	r1, r9
 8012f50:	eb43 0b01 	adc.w	fp, r3, r1
 8012f54:	f04f 0200 	mov.w	r2, #0
 8012f58:	f04f 0300 	mov.w	r3, #0
 8012f5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012f60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012f68:	4692      	mov	sl, r2
 8012f6a:	469b      	mov	fp, r3
 8012f6c:	4643      	mov	r3, r8
 8012f6e:	eb1a 0303 	adds.w	r3, sl, r3
 8012f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012f76:	464b      	mov	r3, r9
 8012f78:	eb4b 0303 	adc.w	r3, fp, r3
 8012f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	2200      	movs	r2, #0
 8012f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012f8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8012f90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8012f94:	460b      	mov	r3, r1
 8012f96:	18db      	adds	r3, r3, r3
 8012f98:	643b      	str	r3, [r7, #64]	; 0x40
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	eb42 0303 	adc.w	r3, r2, r3
 8012fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8012fa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012fa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8012faa:	f7ed fe7d 	bl	8000ca8 <__aeabi_uldivmod>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	4611      	mov	r1, r2
 8012fb4:	4b3b      	ldr	r3, [pc, #236]	; (80130a4 <UART_SetConfig+0x2d4>)
 8012fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8012fba:	095b      	lsrs	r3, r3, #5
 8012fbc:	2264      	movs	r2, #100	; 0x64
 8012fbe:	fb02 f303 	mul.w	r3, r2, r3
 8012fc2:	1acb      	subs	r3, r1, r3
 8012fc4:	00db      	lsls	r3, r3, #3
 8012fc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8012fca:	4b36      	ldr	r3, [pc, #216]	; (80130a4 <UART_SetConfig+0x2d4>)
 8012fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8012fd0:	095b      	lsrs	r3, r3, #5
 8012fd2:	005b      	lsls	r3, r3, #1
 8012fd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012fd8:	441c      	add	r4, r3
 8012fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012fde:	2200      	movs	r2, #0
 8012fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012fe4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8012fe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8012fec:	4642      	mov	r2, r8
 8012fee:	464b      	mov	r3, r9
 8012ff0:	1891      	adds	r1, r2, r2
 8012ff2:	63b9      	str	r1, [r7, #56]	; 0x38
 8012ff4:	415b      	adcs	r3, r3
 8012ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012ff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012ffc:	4641      	mov	r1, r8
 8012ffe:	1851      	adds	r1, r2, r1
 8013000:	6339      	str	r1, [r7, #48]	; 0x30
 8013002:	4649      	mov	r1, r9
 8013004:	414b      	adcs	r3, r1
 8013006:	637b      	str	r3, [r7, #52]	; 0x34
 8013008:	f04f 0200 	mov.w	r2, #0
 801300c:	f04f 0300 	mov.w	r3, #0
 8013010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8013014:	4659      	mov	r1, fp
 8013016:	00cb      	lsls	r3, r1, #3
 8013018:	4651      	mov	r1, sl
 801301a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801301e:	4651      	mov	r1, sl
 8013020:	00ca      	lsls	r2, r1, #3
 8013022:	4610      	mov	r0, r2
 8013024:	4619      	mov	r1, r3
 8013026:	4603      	mov	r3, r0
 8013028:	4642      	mov	r2, r8
 801302a:	189b      	adds	r3, r3, r2
 801302c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013030:	464b      	mov	r3, r9
 8013032:	460a      	mov	r2, r1
 8013034:	eb42 0303 	adc.w	r3, r2, r3
 8013038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013040:	685b      	ldr	r3, [r3, #4]
 8013042:	2200      	movs	r2, #0
 8013044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013048:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801304c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8013050:	460b      	mov	r3, r1
 8013052:	18db      	adds	r3, r3, r3
 8013054:	62bb      	str	r3, [r7, #40]	; 0x28
 8013056:	4613      	mov	r3, r2
 8013058:	eb42 0303 	adc.w	r3, r2, r3
 801305c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801305e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013066:	f7ed fe1f 	bl	8000ca8 <__aeabi_uldivmod>
 801306a:	4602      	mov	r2, r0
 801306c:	460b      	mov	r3, r1
 801306e:	4b0d      	ldr	r3, [pc, #52]	; (80130a4 <UART_SetConfig+0x2d4>)
 8013070:	fba3 1302 	umull	r1, r3, r3, r2
 8013074:	095b      	lsrs	r3, r3, #5
 8013076:	2164      	movs	r1, #100	; 0x64
 8013078:	fb01 f303 	mul.w	r3, r1, r3
 801307c:	1ad3      	subs	r3, r2, r3
 801307e:	00db      	lsls	r3, r3, #3
 8013080:	3332      	adds	r3, #50	; 0x32
 8013082:	4a08      	ldr	r2, [pc, #32]	; (80130a4 <UART_SetConfig+0x2d4>)
 8013084:	fba2 2303 	umull	r2, r3, r2, r3
 8013088:	095b      	lsrs	r3, r3, #5
 801308a:	f003 0207 	and.w	r2, r3, #7
 801308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4422      	add	r2, r4
 8013096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8013098:	e106      	b.n	80132a8 <UART_SetConfig+0x4d8>
 801309a:	bf00      	nop
 801309c:	40011000 	.word	0x40011000
 80130a0:	40011400 	.word	0x40011400
 80130a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80130a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80130ac:	2200      	movs	r2, #0
 80130ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80130b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80130b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80130ba:	4642      	mov	r2, r8
 80130bc:	464b      	mov	r3, r9
 80130be:	1891      	adds	r1, r2, r2
 80130c0:	6239      	str	r1, [r7, #32]
 80130c2:	415b      	adcs	r3, r3
 80130c4:	627b      	str	r3, [r7, #36]	; 0x24
 80130c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80130ca:	4641      	mov	r1, r8
 80130cc:	1854      	adds	r4, r2, r1
 80130ce:	4649      	mov	r1, r9
 80130d0:	eb43 0501 	adc.w	r5, r3, r1
 80130d4:	f04f 0200 	mov.w	r2, #0
 80130d8:	f04f 0300 	mov.w	r3, #0
 80130dc:	00eb      	lsls	r3, r5, #3
 80130de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80130e2:	00e2      	lsls	r2, r4, #3
 80130e4:	4614      	mov	r4, r2
 80130e6:	461d      	mov	r5, r3
 80130e8:	4643      	mov	r3, r8
 80130ea:	18e3      	adds	r3, r4, r3
 80130ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80130f0:	464b      	mov	r3, r9
 80130f2:	eb45 0303 	adc.w	r3, r5, r3
 80130f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80130fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	2200      	movs	r2, #0
 8013102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801310a:	f04f 0200 	mov.w	r2, #0
 801310e:	f04f 0300 	mov.w	r3, #0
 8013112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013116:	4629      	mov	r1, r5
 8013118:	008b      	lsls	r3, r1, #2
 801311a:	4621      	mov	r1, r4
 801311c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013120:	4621      	mov	r1, r4
 8013122:	008a      	lsls	r2, r1, #2
 8013124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013128:	f7ed fdbe 	bl	8000ca8 <__aeabi_uldivmod>
 801312c:	4602      	mov	r2, r0
 801312e:	460b      	mov	r3, r1
 8013130:	4b60      	ldr	r3, [pc, #384]	; (80132b4 <UART_SetConfig+0x4e4>)
 8013132:	fba3 2302 	umull	r2, r3, r3, r2
 8013136:	095b      	lsrs	r3, r3, #5
 8013138:	011c      	lsls	r4, r3, #4
 801313a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801313e:	2200      	movs	r2, #0
 8013140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801314c:	4642      	mov	r2, r8
 801314e:	464b      	mov	r3, r9
 8013150:	1891      	adds	r1, r2, r2
 8013152:	61b9      	str	r1, [r7, #24]
 8013154:	415b      	adcs	r3, r3
 8013156:	61fb      	str	r3, [r7, #28]
 8013158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801315c:	4641      	mov	r1, r8
 801315e:	1851      	adds	r1, r2, r1
 8013160:	6139      	str	r1, [r7, #16]
 8013162:	4649      	mov	r1, r9
 8013164:	414b      	adcs	r3, r1
 8013166:	617b      	str	r3, [r7, #20]
 8013168:	f04f 0200 	mov.w	r2, #0
 801316c:	f04f 0300 	mov.w	r3, #0
 8013170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013174:	4659      	mov	r1, fp
 8013176:	00cb      	lsls	r3, r1, #3
 8013178:	4651      	mov	r1, sl
 801317a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801317e:	4651      	mov	r1, sl
 8013180:	00ca      	lsls	r2, r1, #3
 8013182:	4610      	mov	r0, r2
 8013184:	4619      	mov	r1, r3
 8013186:	4603      	mov	r3, r0
 8013188:	4642      	mov	r2, r8
 801318a:	189b      	adds	r3, r3, r2
 801318c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013190:	464b      	mov	r3, r9
 8013192:	460a      	mov	r2, r1
 8013194:	eb42 0303 	adc.w	r3, r2, r3
 8013198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	2200      	movs	r2, #0
 80131a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80131a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80131a8:	f04f 0200 	mov.w	r2, #0
 80131ac:	f04f 0300 	mov.w	r3, #0
 80131b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80131b4:	4649      	mov	r1, r9
 80131b6:	008b      	lsls	r3, r1, #2
 80131b8:	4641      	mov	r1, r8
 80131ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80131be:	4641      	mov	r1, r8
 80131c0:	008a      	lsls	r2, r1, #2
 80131c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80131c6:	f7ed fd6f 	bl	8000ca8 <__aeabi_uldivmod>
 80131ca:	4602      	mov	r2, r0
 80131cc:	460b      	mov	r3, r1
 80131ce:	4611      	mov	r1, r2
 80131d0:	4b38      	ldr	r3, [pc, #224]	; (80132b4 <UART_SetConfig+0x4e4>)
 80131d2:	fba3 2301 	umull	r2, r3, r3, r1
 80131d6:	095b      	lsrs	r3, r3, #5
 80131d8:	2264      	movs	r2, #100	; 0x64
 80131da:	fb02 f303 	mul.w	r3, r2, r3
 80131de:	1acb      	subs	r3, r1, r3
 80131e0:	011b      	lsls	r3, r3, #4
 80131e2:	3332      	adds	r3, #50	; 0x32
 80131e4:	4a33      	ldr	r2, [pc, #204]	; (80132b4 <UART_SetConfig+0x4e4>)
 80131e6:	fba2 2303 	umull	r2, r3, r2, r3
 80131ea:	095b      	lsrs	r3, r3, #5
 80131ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80131f0:	441c      	add	r4, r3
 80131f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80131f6:	2200      	movs	r2, #0
 80131f8:	673b      	str	r3, [r7, #112]	; 0x70
 80131fa:	677a      	str	r2, [r7, #116]	; 0x74
 80131fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8013200:	4642      	mov	r2, r8
 8013202:	464b      	mov	r3, r9
 8013204:	1891      	adds	r1, r2, r2
 8013206:	60b9      	str	r1, [r7, #8]
 8013208:	415b      	adcs	r3, r3
 801320a:	60fb      	str	r3, [r7, #12]
 801320c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013210:	4641      	mov	r1, r8
 8013212:	1851      	adds	r1, r2, r1
 8013214:	6039      	str	r1, [r7, #0]
 8013216:	4649      	mov	r1, r9
 8013218:	414b      	adcs	r3, r1
 801321a:	607b      	str	r3, [r7, #4]
 801321c:	f04f 0200 	mov.w	r2, #0
 8013220:	f04f 0300 	mov.w	r3, #0
 8013224:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013228:	4659      	mov	r1, fp
 801322a:	00cb      	lsls	r3, r1, #3
 801322c:	4651      	mov	r1, sl
 801322e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013232:	4651      	mov	r1, sl
 8013234:	00ca      	lsls	r2, r1, #3
 8013236:	4610      	mov	r0, r2
 8013238:	4619      	mov	r1, r3
 801323a:	4603      	mov	r3, r0
 801323c:	4642      	mov	r2, r8
 801323e:	189b      	adds	r3, r3, r2
 8013240:	66bb      	str	r3, [r7, #104]	; 0x68
 8013242:	464b      	mov	r3, r9
 8013244:	460a      	mov	r2, r1
 8013246:	eb42 0303 	adc.w	r3, r2, r3
 801324a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	2200      	movs	r2, #0
 8013254:	663b      	str	r3, [r7, #96]	; 0x60
 8013256:	667a      	str	r2, [r7, #100]	; 0x64
 8013258:	f04f 0200 	mov.w	r2, #0
 801325c:	f04f 0300 	mov.w	r3, #0
 8013260:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8013264:	4649      	mov	r1, r9
 8013266:	008b      	lsls	r3, r1, #2
 8013268:	4641      	mov	r1, r8
 801326a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801326e:	4641      	mov	r1, r8
 8013270:	008a      	lsls	r2, r1, #2
 8013272:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013276:	f7ed fd17 	bl	8000ca8 <__aeabi_uldivmod>
 801327a:	4602      	mov	r2, r0
 801327c:	460b      	mov	r3, r1
 801327e:	4b0d      	ldr	r3, [pc, #52]	; (80132b4 <UART_SetConfig+0x4e4>)
 8013280:	fba3 1302 	umull	r1, r3, r3, r2
 8013284:	095b      	lsrs	r3, r3, #5
 8013286:	2164      	movs	r1, #100	; 0x64
 8013288:	fb01 f303 	mul.w	r3, r1, r3
 801328c:	1ad3      	subs	r3, r2, r3
 801328e:	011b      	lsls	r3, r3, #4
 8013290:	3332      	adds	r3, #50	; 0x32
 8013292:	4a08      	ldr	r2, [pc, #32]	; (80132b4 <UART_SetConfig+0x4e4>)
 8013294:	fba2 2303 	umull	r2, r3, r2, r3
 8013298:	095b      	lsrs	r3, r3, #5
 801329a:	f003 020f 	and.w	r2, r3, #15
 801329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4422      	add	r2, r4
 80132a6:	609a      	str	r2, [r3, #8]
}
 80132a8:	bf00      	nop
 80132aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80132ae:	46bd      	mov	sp, r7
 80132b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80132b4:	51eb851f 	.word	0x51eb851f

080132b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80132b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80132ba:	2400      	movs	r4, #0
 80132bc:	2310      	movs	r3, #16
 80132be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80132c2:	6803      	ldr	r3, [r0, #0]
 80132c4:	4615      	mov	r5, r2
 80132c6:	699e      	ldr	r6, [r3, #24]
 80132c8:	6812      	ldr	r2, [r2, #0]
 80132ca:	466b      	mov	r3, sp
 80132cc:	e9cd 4400 	strd	r4, r4, [sp]
 80132d0:	47b0      	blx	r6
 80132d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80132d6:	f003 0306 	and.w	r3, r3, #6
 80132da:	2b06      	cmp	r3, #6
 80132dc:	bf03      	ittte	eq
 80132de:	9b00      	ldreq	r3, [sp, #0]
 80132e0:	602b      	streq	r3, [r5, #0]
 80132e2:	2001      	moveq	r0, #1
 80132e4:	4620      	movne	r0, r4
 80132e6:	b004      	add	sp, #16
 80132e8:	bd70      	pop	{r4, r5, r6, pc}

080132ea <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80132ea:	9800      	ldr	r0, [sp, #0]
 80132ec:	4290      	cmp	r0, r2
 80132ee:	bf14      	ite	ne
 80132f0:	2001      	movne	r0, #1
 80132f2:	2006      	moveq	r0, #6
 80132f4:	4770      	bx	lr
	...

080132f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80132f8:	b510      	push	{r4, lr}
 80132fa:	4b03      	ldr	r3, [pc, #12]	; (8013308 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80132fc:	6003      	str	r3, [r0, #0]
 80132fe:	4604      	mov	r4, r0
 8013300:	f000 fd3f 	bl	8013d82 <_ZNSt9type_infoD1Ev>
 8013304:	4620      	mov	r0, r4
 8013306:	bd10      	pop	{r4, pc}
 8013308:	0801851c 	.word	0x0801851c

0801330c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801330c:	b510      	push	{r4, lr}
 801330e:	4604      	mov	r4, r0
 8013310:	f7ff fff2 	bl	80132f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8013314:	4620      	mov	r0, r4
 8013316:	2108      	movs	r1, #8
 8013318:	f000 f842 	bl	80133a0 <_ZdlPvj>
 801331c:	4620      	mov	r0, r4
 801331e:	bd10      	pop	{r4, pc}

08013320 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8013320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013324:	461f      	mov	r7, r3
 8013326:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801332a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801332e:	4598      	cmp	r8, r3
 8013330:	4606      	mov	r6, r0
 8013332:	4615      	mov	r5, r2
 8013334:	d107      	bne.n	8013346 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8013336:	9907      	ldr	r1, [sp, #28]
 8013338:	f000 fd26 	bl	8013d88 <_ZNKSt9type_infoeqERKS_>
 801333c:	b118      	cbz	r0, 8013346 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801333e:	7165      	strb	r5, [r4, #5]
 8013340:	2000      	movs	r0, #0
 8013342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013346:	4639      	mov	r1, r7
 8013348:	4630      	mov	r0, r6
 801334a:	f000 fd1d 	bl	8013d88 <_ZNKSt9type_infoeqERKS_>
 801334e:	2800      	cmp	r0, #0
 8013350:	d0f6      	beq.n	8013340 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8013352:	2301      	movs	r3, #1
 8013354:	f8c4 8000 	str.w	r8, [r4]
 8013358:	7125      	strb	r5, [r4, #4]
 801335a:	71a3      	strb	r3, [r4, #6]
 801335c:	e7f0      	b.n	8013340 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801335e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801335e:	b538      	push	{r3, r4, r5, lr}
 8013360:	4615      	mov	r5, r2
 8013362:	461c      	mov	r4, r3
 8013364:	f000 fd10 	bl	8013d88 <_ZNKSt9type_infoeqERKS_>
 8013368:	b120      	cbz	r0, 8013374 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801336a:	2308      	movs	r3, #8
 801336c:	60e3      	str	r3, [r4, #12]
 801336e:	2306      	movs	r3, #6
 8013370:	6025      	str	r5, [r4, #0]
 8013372:	7123      	strb	r3, [r4, #4]
 8013374:	bd38      	pop	{r3, r4, r5, pc}

08013376 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8013376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013378:	4605      	mov	r5, r0
 801337a:	460c      	mov	r4, r1
 801337c:	9201      	str	r2, [sp, #4]
 801337e:	461e      	mov	r6, r3
 8013380:	f000 fd02 	bl	8013d88 <_ZNKSt9type_infoeqERKS_>
 8013384:	b950      	cbnz	r0, 801339c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8013386:	2e03      	cmp	r6, #3
 8013388:	d808      	bhi.n	801339c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801338a:	6823      	ldr	r3, [r4, #0]
 801338c:	9a01      	ldr	r2, [sp, #4]
 801338e:	695b      	ldr	r3, [r3, #20]
 8013390:	4629      	mov	r1, r5
 8013392:	4620      	mov	r0, r4
 8013394:	b002      	add	sp, #8
 8013396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801339a:	4718      	bx	r3
 801339c:	b002      	add	sp, #8
 801339e:	bd70      	pop	{r4, r5, r6, pc}

080133a0 <_ZdlPvj>:
 80133a0:	f000 bde4 	b.w	8013f6c <_ZdlPv>

080133a4 <_ZdaPv>:
 80133a4:	f000 bde2 	b.w	8013f6c <_ZdlPv>

080133a8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 80133a8:	4a19      	ldr	r2, [pc, #100]	; (8013410 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>)
 80133aa:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80133ae:	6853      	ldr	r3, [r2, #4]
 80133b0:	b570      	push	{r4, r5, r6, lr}
 80133b2:	f1a0 0408 	sub.w	r4, r0, #8
 80133b6:	b113      	cbz	r3, 80133be <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x16>
 80133b8:	1865      	adds	r5, r4, r1
 80133ba:	42ab      	cmp	r3, r5
 80133bc:	d903      	bls.n	80133c6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 80133be:	f840 3c04 	str.w	r3, [r0, #-4]
 80133c2:	6054      	str	r4, [r2, #4]
 80133c4:	bd70      	pop	{r4, r5, r6, pc}
 80133c6:	685e      	ldr	r6, [r3, #4]
 80133c8:	d11f      	bne.n	801340a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x62>
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	440b      	add	r3, r1
 80133ce:	e940 3602 	strd	r3, r6, [r0, #-8]
 80133d2:	e7f6      	b.n	80133c2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1a>
 80133d4:	1d1a      	adds	r2, r3, #4
 80133d6:	4633      	mov	r3, r6
 80133d8:	685e      	ldr	r6, [r3, #4]
 80133da:	b136      	cbz	r6, 80133ea <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
 80133dc:	42b5      	cmp	r5, r6
 80133de:	d3f9      	bcc.n	80133d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2c>
 80133e0:	bf01      	itttt	eq
 80133e2:	682e      	ldreq	r6, [r5, #0]
 80133e4:	686d      	ldreq	r5, [r5, #4]
 80133e6:	605d      	streq	r5, [r3, #4]
 80133e8:	1989      	addeq	r1, r1, r6
 80133ea:	6813      	ldr	r3, [r2, #0]
 80133ec:	681d      	ldr	r5, [r3, #0]
 80133ee:	195e      	adds	r6, r3, r5
 80133f0:	42b4      	cmp	r4, r6
 80133f2:	bf1f      	itttt	ne
 80133f4:	685b      	ldrne	r3, [r3, #4]
 80133f6:	f840 3c04 	strne.w	r3, [r0, #-4]
 80133fa:	6813      	ldrne	r3, [r2, #0]
 80133fc:	f840 1c08 	strne.w	r1, [r0, #-8]
 8013400:	bf06      	itte	eq
 8013402:	186d      	addeq	r5, r5, r1
 8013404:	601d      	streq	r5, [r3, #0]
 8013406:	605c      	strne	r4, [r3, #4]
 8013408:	e7dc      	b.n	80133c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1c>
 801340a:	3204      	adds	r2, #4
 801340c:	e7e4      	b.n	80133d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 801340e:	bf00      	nop
 8013410:	200003f0 	.word	0x200003f0

08013414 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 8013414:	3008      	adds	r0, #8
 8013416:	2808      	cmp	r0, #8
 8013418:	b530      	push	{r4, r5, lr}
 801341a:	4a0f      	ldr	r2, [pc, #60]	; (8013458 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 801341c:	bf38      	it	cc
 801341e:	2008      	movcc	r0, #8
 8013420:	3007      	adds	r0, #7
 8013422:	f020 0307 	bic.w	r3, r0, #7
 8013426:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801342a:	b198      	cbz	r0, 8013454 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x40>
 801342c:	e9d0 1400 	ldrd	r1, r4, [r0]
 8013430:	428b      	cmp	r3, r1
 8013432:	d805      	bhi.n	8013440 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x2c>
 8013434:	1acd      	subs	r5, r1, r3
 8013436:	2d07      	cmp	r5, #7
 8013438:	d805      	bhi.n	8013446 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x32>
 801343a:	6001      	str	r1, [r0, #0]
 801343c:	4621      	mov	r1, r4
 801343e:	e007      	b.n	8013450 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
 8013440:	1d02      	adds	r2, r0, #4
 8013442:	4620      	mov	r0, r4
 8013444:	e7f1      	b.n	801342a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x16>
 8013446:	18c1      	adds	r1, r0, r3
 8013448:	604c      	str	r4, [r1, #4]
 801344a:	50c5      	str	r5, [r0, r3]
 801344c:	6810      	ldr	r0, [r2, #0]
 801344e:	6003      	str	r3, [r0, #0]
 8013450:	6011      	str	r1, [r2, #0]
 8013452:	3008      	adds	r0, #8
 8013454:	bd30      	pop	{r4, r5, pc}
 8013456:	bf00      	nop
 8013458:	200003f0 	.word	0x200003f0

0801345c <__cxa_allocate_exception>:
 801345c:	b510      	push	{r4, lr}
 801345e:	f100 0480 	add.w	r4, r0, #128	; 0x80
 8013462:	4620      	mov	r0, r4
 8013464:	f000 fe1a 	bl	801409c <malloc>
 8013468:	4603      	mov	r3, r0
 801346a:	b930      	cbnz	r0, 801347a <__cxa_allocate_exception+0x1e>
 801346c:	4620      	mov	r0, r4
 801346e:	f7ff ffd1 	bl	8013414 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 8013472:	4603      	mov	r3, r0
 8013474:	b908      	cbnz	r0, 801347a <__cxa_allocate_exception+0x1e>
 8013476:	f000 fb6f 	bl	8013b58 <_ZSt9terminatev>
 801347a:	2280      	movs	r2, #128	; 0x80
 801347c:	2100      	movs	r1, #0
 801347e:	4618      	mov	r0, r3
 8013480:	f001 fc6d 	bl	8014d5e <memset>
 8013484:	3080      	adds	r0, #128	; 0x80
 8013486:	bd10      	pop	{r4, pc}

08013488 <__cxa_free_exception>:
 8013488:	4a06      	ldr	r2, [pc, #24]	; (80134a4 <__cxa_free_exception+0x1c>)
 801348a:	6893      	ldr	r3, [r2, #8]
 801348c:	3880      	subs	r0, #128	; 0x80
 801348e:	4298      	cmp	r0, r3
 8013490:	d905      	bls.n	801349e <__cxa_free_exception+0x16>
 8013492:	68d2      	ldr	r2, [r2, #12]
 8013494:	4413      	add	r3, r2
 8013496:	4298      	cmp	r0, r3
 8013498:	d201      	bcs.n	801349e <__cxa_free_exception+0x16>
 801349a:	f7ff bf85 	b.w	80133a8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 801349e:	f000 be05 	b.w	80140ac <free>
 80134a2:	bf00      	nop
 80134a4:	200003f0 	.word	0x200003f0

080134a8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80134a8:	b538      	push	{r3, r4, r5, lr}
 80134aa:	4c08      	ldr	r4, [pc, #32]	; (80134cc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80134ac:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80134b0:	4628      	mov	r0, r5
 80134b2:	60e5      	str	r5, [r4, #12]
 80134b4:	f000 fdf2 	bl	801409c <malloc>
 80134b8:	60a0      	str	r0, [r4, #8]
 80134ba:	b910      	cbnz	r0, 80134c2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 80134bc:	60e0      	str	r0, [r4, #12]
 80134be:	6060      	str	r0, [r4, #4]
 80134c0:	bd38      	pop	{r3, r4, r5, pc}
 80134c2:	2300      	movs	r3, #0
 80134c4:	6060      	str	r0, [r4, #4]
 80134c6:	6005      	str	r5, [r0, #0]
 80134c8:	6043      	str	r3, [r0, #4]
 80134ca:	e7f9      	b.n	80134c0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 80134cc:	200003f0 	.word	0x200003f0

080134d0 <__cxa_end_cleanup>:
 80134d0:	b41e      	push	{r1, r2, r3, r4}
 80134d2:	f000 f89c 	bl	801360e <__gnu_end_cleanup>
 80134d6:	bc1e      	pop	{r1, r2, r3, r4}
 80134d8:	f7ee faf0 	bl	8001abc <_Unwind_Resume>

080134dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80134dc:	7803      	ldrb	r3, [r0, #0]
 80134de:	2b47      	cmp	r3, #71	; 0x47
 80134e0:	d117      	bne.n	8013512 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134e2:	7843      	ldrb	r3, [r0, #1]
 80134e4:	2b4e      	cmp	r3, #78	; 0x4e
 80134e6:	d114      	bne.n	8013512 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134e8:	7883      	ldrb	r3, [r0, #2]
 80134ea:	2b55      	cmp	r3, #85	; 0x55
 80134ec:	d111      	bne.n	8013512 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134ee:	78c3      	ldrb	r3, [r0, #3]
 80134f0:	2b43      	cmp	r3, #67	; 0x43
 80134f2:	d10e      	bne.n	8013512 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134f4:	7903      	ldrb	r3, [r0, #4]
 80134f6:	2b43      	cmp	r3, #67	; 0x43
 80134f8:	d10b      	bne.n	8013512 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134fa:	7943      	ldrb	r3, [r0, #5]
 80134fc:	2b2b      	cmp	r3, #43	; 0x2b
 80134fe:	d108      	bne.n	8013512 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013500:	7983      	ldrb	r3, [r0, #6]
 8013502:	2b2b      	cmp	r3, #43	; 0x2b
 8013504:	d105      	bne.n	8013512 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013506:	79c0      	ldrb	r0, [r0, #7]
 8013508:	2801      	cmp	r0, #1
 801350a:	bf8c      	ite	hi
 801350c:	2000      	movhi	r0, #0
 801350e:	2001      	movls	r0, #1
 8013510:	4770      	bx	lr
 8013512:	2000      	movs	r0, #0
 8013514:	4770      	bx	lr
	...

08013518 <__cxa_type_match>:
 8013518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801351c:	461d      	mov	r5, r3
 801351e:	7803      	ldrb	r3, [r0, #0]
 8013520:	2b47      	cmp	r3, #71	; 0x47
 8013522:	460e      	mov	r6, r1
 8013524:	4602      	mov	r2, r0
 8013526:	79c1      	ldrb	r1, [r0, #7]
 8013528:	d113      	bne.n	8013552 <__cxa_type_match+0x3a>
 801352a:	7843      	ldrb	r3, [r0, #1]
 801352c:	2b4e      	cmp	r3, #78	; 0x4e
 801352e:	d110      	bne.n	8013552 <__cxa_type_match+0x3a>
 8013530:	7883      	ldrb	r3, [r0, #2]
 8013532:	2b55      	cmp	r3, #85	; 0x55
 8013534:	d10d      	bne.n	8013552 <__cxa_type_match+0x3a>
 8013536:	78c3      	ldrb	r3, [r0, #3]
 8013538:	2b43      	cmp	r3, #67	; 0x43
 801353a:	d10a      	bne.n	8013552 <__cxa_type_match+0x3a>
 801353c:	7903      	ldrb	r3, [r0, #4]
 801353e:	2b46      	cmp	r3, #70	; 0x46
 8013540:	d107      	bne.n	8013552 <__cxa_type_match+0x3a>
 8013542:	7943      	ldrb	r3, [r0, #5]
 8013544:	2b4f      	cmp	r3, #79	; 0x4f
 8013546:	d104      	bne.n	8013552 <__cxa_type_match+0x3a>
 8013548:	7983      	ldrb	r3, [r0, #6]
 801354a:	2b52      	cmp	r3, #82	; 0x52
 801354c:	d101      	bne.n	8013552 <__cxa_type_match+0x3a>
 801354e:	2900      	cmp	r1, #0
 8013550:	d031      	beq.n	80135b6 <__cxa_type_match+0x9e>
 8013552:	4610      	mov	r0, r2
 8013554:	f7ff ffc2 	bl	80134dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013558:	f080 0001 	eor.w	r0, r0, #1
 801355c:	b2c4      	uxtb	r4, r0
 801355e:	2300      	movs	r3, #0
 8013560:	2000      	movs	r0, #0
 8013562:	9001      	str	r0, [sp, #4]
 8013564:	bb53      	cbnz	r3, 80135bc <__cxa_type_match+0xa4>
 8013566:	bb5c      	cbnz	r4, 80135c0 <__cxa_type_match+0xa8>
 8013568:	2901      	cmp	r1, #1
 801356a:	bf0a      	itet	eq
 801356c:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8013570:	f1a2 0320 	subne.w	r3, r2, #32
 8013574:	3b78      	subeq	r3, #120	; 0x78
 8013576:	2901      	cmp	r1, #1
 8013578:	bf08      	it	eq
 801357a:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 801357e:	681c      	ldr	r4, [r3, #0]
 8013580:	bf18      	it	ne
 8013582:	3258      	addne	r2, #88	; 0x58
 8013584:	9201      	str	r2, [sp, #4]
 8013586:	6823      	ldr	r3, [r4, #0]
 8013588:	4620      	mov	r0, r4
 801358a:	689b      	ldr	r3, [r3, #8]
 801358c:	4798      	blx	r3
 801358e:	b1c8      	cbz	r0, 80135c4 <__cxa_type_match+0xac>
 8013590:	9b01      	ldr	r3, [sp, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	9301      	str	r3, [sp, #4]
 8013596:	2702      	movs	r7, #2
 8013598:	6833      	ldr	r3, [r6, #0]
 801359a:	aa01      	add	r2, sp, #4
 801359c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80135a0:	4621      	mov	r1, r4
 80135a2:	2301      	movs	r3, #1
 80135a4:	4630      	mov	r0, r6
 80135a6:	47c0      	blx	r8
 80135a8:	b170      	cbz	r0, 80135c8 <__cxa_type_match+0xb0>
 80135aa:	9b01      	ldr	r3, [sp, #4]
 80135ac:	602b      	str	r3, [r5, #0]
 80135ae:	4638      	mov	r0, r7
 80135b0:	b002      	add	sp, #8
 80135b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b6:	2301      	movs	r3, #1
 80135b8:	460c      	mov	r4, r1
 80135ba:	e7d1      	b.n	8013560 <__cxa_type_match+0x48>
 80135bc:	4c03      	ldr	r4, [pc, #12]	; (80135cc <__cxa_type_match+0xb4>)
 80135be:	e7e2      	b.n	8013586 <__cxa_type_match+0x6e>
 80135c0:	4c03      	ldr	r4, [pc, #12]	; (80135d0 <__cxa_type_match+0xb8>)
 80135c2:	e7e0      	b.n	8013586 <__cxa_type_match+0x6e>
 80135c4:	2701      	movs	r7, #1
 80135c6:	e7e7      	b.n	8013598 <__cxa_type_match+0x80>
 80135c8:	4607      	mov	r7, r0
 80135ca:	e7f0      	b.n	80135ae <__cxa_type_match+0x96>
 80135cc:	08018540 	.word	0x08018540
 80135d0:	08018548 	.word	0x08018548

080135d4 <__cxa_begin_cleanup>:
 80135d4:	b510      	push	{r4, lr}
 80135d6:	4604      	mov	r4, r0
 80135d8:	f000 f834 	bl	8013644 <__cxa_get_globals>
 80135dc:	4602      	mov	r2, r0
 80135de:	4620      	mov	r0, r4
 80135e0:	f1a4 0120 	sub.w	r1, r4, #32
 80135e4:	f7ff ff7a 	bl	80134dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80135e8:	b160      	cbz	r0, 8013604 <__cxa_begin_cleanup+0x30>
 80135ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80135ee:	3301      	adds	r3, #1
 80135f0:	2b01      	cmp	r3, #1
 80135f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80135f6:	d103      	bne.n	8013600 <__cxa_begin_cleanup+0x2c>
 80135f8:	6893      	ldr	r3, [r2, #8]
 80135fa:	f844 3c08 	str.w	r3, [r4, #-8]
 80135fe:	6091      	str	r1, [r2, #8]
 8013600:	2001      	movs	r0, #1
 8013602:	bd10      	pop	{r4, pc}
 8013604:	6893      	ldr	r3, [r2, #8]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d0f9      	beq.n	80135fe <__cxa_begin_cleanup+0x2a>
 801360a:	f000 faa5 	bl	8013b58 <_ZSt9terminatev>

0801360e <__gnu_end_cleanup>:
 801360e:	b510      	push	{r4, lr}
 8013610:	f000 f818 	bl	8013644 <__cxa_get_globals>
 8013614:	6882      	ldr	r2, [r0, #8]
 8013616:	4601      	mov	r1, r0
 8013618:	b90a      	cbnz	r2, 801361e <__gnu_end_cleanup+0x10>
 801361a:	f000 fa9d 	bl	8013b58 <_ZSt9terminatev>
 801361e:	f102 0420 	add.w	r4, r2, #32
 8013622:	4620      	mov	r0, r4
 8013624:	f7ff ff5a 	bl	80134dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013628:	b140      	cbz	r0, 801363c <__gnu_end_cleanup+0x2e>
 801362a:	69d3      	ldr	r3, [r2, #28]
 801362c:	3b01      	subs	r3, #1
 801362e:	61d3      	str	r3, [r2, #28]
 8013630:	b913      	cbnz	r3, 8013638 <__gnu_end_cleanup+0x2a>
 8013632:	6990      	ldr	r0, [r2, #24]
 8013634:	6088      	str	r0, [r1, #8]
 8013636:	6193      	str	r3, [r2, #24]
 8013638:	4620      	mov	r0, r4
 801363a:	bd10      	pop	{r4, pc}
 801363c:	6088      	str	r0, [r1, #8]
 801363e:	e7fb      	b.n	8013638 <__gnu_end_cleanup+0x2a>

08013640 <_ZNSt9exceptionD1Ev>:
 8013640:	4770      	bx	lr
	...

08013644 <__cxa_get_globals>:
 8013644:	4800      	ldr	r0, [pc, #0]	; (8013648 <__cxa_get_globals+0x4>)
 8013646:	4770      	bx	lr
 8013648:	20000400 	.word	0x20000400

0801364c <_ZL12read_uleb128PKhPm>:
 801364c:	b530      	push	{r4, r5, lr}
 801364e:	2300      	movs	r3, #0
 8013650:	461a      	mov	r2, r3
 8013652:	f810 5b01 	ldrb.w	r5, [r0], #1
 8013656:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 801365a:	4094      	lsls	r4, r2
 801365c:	4323      	orrs	r3, r4
 801365e:	062c      	lsls	r4, r5, #24
 8013660:	f102 0207 	add.w	r2, r2, #7
 8013664:	d4f5      	bmi.n	8013652 <_ZL12read_uleb128PKhPm+0x6>
 8013666:	600b      	str	r3, [r1, #0]
 8013668:	bd30      	pop	{r4, r5, pc}

0801366a <_ZL12read_sleb128PKhPl>:
 801366a:	b530      	push	{r4, r5, lr}
 801366c:	2300      	movs	r3, #0
 801366e:	461a      	mov	r2, r3
 8013670:	f810 4b01 	ldrb.w	r4, [r0], #1
 8013674:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8013678:	4095      	lsls	r5, r2
 801367a:	432b      	orrs	r3, r5
 801367c:	0625      	lsls	r5, r4, #24
 801367e:	f102 0207 	add.w	r2, r2, #7
 8013682:	d4f5      	bmi.n	8013670 <_ZL12read_sleb128PKhPl+0x6>
 8013684:	2a1f      	cmp	r2, #31
 8013686:	d806      	bhi.n	8013696 <_ZL12read_sleb128PKhPl+0x2c>
 8013688:	0664      	lsls	r4, r4, #25
 801368a:	bf42      	ittt	mi
 801368c:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8013690:	fa04 f202 	lslmi.w	r2, r4, r2
 8013694:	4313      	orrmi	r3, r2
 8013696:	600b      	str	r3, [r1, #0]
 8013698:	bd30      	pop	{r4, r5, pc}

0801369a <_ZL28read_encoded_value_with_basehjPKhPj>:
 801369a:	2850      	cmp	r0, #80	; 0x50
 801369c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80136a0:	4606      	mov	r6, r0
 80136a2:	4688      	mov	r8, r1
 80136a4:	4615      	mov	r5, r2
 80136a6:	461f      	mov	r7, r3
 80136a8:	d108      	bne.n	80136bc <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 80136aa:	3203      	adds	r2, #3
 80136ac:	f022 0003 	bic.w	r0, r2, #3
 80136b0:	f850 4b04 	ldr.w	r4, [r0], #4
 80136b4:	603c      	str	r4, [r7, #0]
 80136b6:	b002      	add	sp, #8
 80136b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136bc:	f000 030f 	and.w	r3, r0, #15
 80136c0:	2b0c      	cmp	r3, #12
 80136c2:	d82e      	bhi.n	8013722 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 80136c4:	e8df f003 	tbb	[pc, r3]
 80136c8:	251d0725 	.word	0x251d0725
 80136cc:	2d2d2d29 	.word	0x2d2d2d29
 80136d0:	2521182d 	.word	0x2521182d
 80136d4:	29          	.byte	0x29
 80136d5:	00          	.byte	0x00
 80136d6:	a901      	add	r1, sp, #4
 80136d8:	4628      	mov	r0, r5
 80136da:	f7ff ffb7 	bl	801364c <_ZL12read_uleb128PKhPm>
 80136de:	9c01      	ldr	r4, [sp, #4]
 80136e0:	2c00      	cmp	r4, #0
 80136e2:	d0e7      	beq.n	80136b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80136e4:	f006 0370 	and.w	r3, r6, #112	; 0x70
 80136e8:	2b10      	cmp	r3, #16
 80136ea:	bf08      	it	eq
 80136ec:	46a8      	moveq	r8, r5
 80136ee:	4444      	add	r4, r8
 80136f0:	0633      	lsls	r3, r6, #24
 80136f2:	bf48      	it	mi
 80136f4:	6824      	ldrmi	r4, [r4, #0]
 80136f6:	e7dd      	b.n	80136b4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80136f8:	a901      	add	r1, sp, #4
 80136fa:	4628      	mov	r0, r5
 80136fc:	f7ff ffb5 	bl	801366a <_ZL12read_sleb128PKhPl>
 8013700:	e7ed      	b.n	80136de <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8013702:	4628      	mov	r0, r5
 8013704:	f830 4b02 	ldrh.w	r4, [r0], #2
 8013708:	e7ea      	b.n	80136e0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801370a:	4628      	mov	r0, r5
 801370c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8013710:	e7e6      	b.n	80136e0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8013712:	4628      	mov	r0, r5
 8013714:	f850 4b04 	ldr.w	r4, [r0], #4
 8013718:	e7e2      	b.n	80136e0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 801371a:	4628      	mov	r0, r5
 801371c:	f850 4b08 	ldr.w	r4, [r0], #8
 8013720:	e7de      	b.n	80136e0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8013722:	f000 fcb3 	bl	801408c <abort>

08013726 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8013726:	b508      	push	{r3, lr}
 8013728:	4603      	mov	r3, r0
 801372a:	2bff      	cmp	r3, #255	; 0xff
 801372c:	4608      	mov	r0, r1
 801372e:	d010      	beq.n	8013752 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8013730:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8013734:	2a30      	cmp	r2, #48	; 0x30
 8013736:	d012      	beq.n	801375e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8013738:	d807      	bhi.n	801374a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 801373a:	2a20      	cmp	r2, #32
 801373c:	d00b      	beq.n	8013756 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 801373e:	d802      	bhi.n	8013746 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8013740:	f013 0f60 	tst.w	r3, #96	; 0x60
 8013744:	d005      	beq.n	8013752 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8013746:	f000 fca1 	bl	801408c <abort>
 801374a:	2a40      	cmp	r2, #64	; 0x40
 801374c:	d00b      	beq.n	8013766 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 801374e:	2a50      	cmp	r2, #80	; 0x50
 8013750:	d1f9      	bne.n	8013746 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8013752:	2000      	movs	r0, #0
 8013754:	bd08      	pop	{r3, pc}
 8013756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801375a:	f003 bb2a 	b.w	8016db2 <_Unwind_GetTextRelBase>
 801375e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013762:	f003 bb23 	b.w	8016dac <_Unwind_GetDataRelBase>
 8013766:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801376a:	f7ee bb77 	b.w	8001e5c <_Unwind_GetRegionStart>

0801376e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 801376e:	b513      	push	{r0, r1, r4, lr}
 8013770:	460c      	mov	r4, r1
 8013772:	4601      	mov	r1, r0
 8013774:	4620      	mov	r0, r4
 8013776:	e9cd 3200 	strd	r3, r2, [sp]
 801377a:	f7ff ffd4 	bl	8013726 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801377e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013782:	4601      	mov	r1, r0
 8013784:	4620      	mov	r0, r4
 8013786:	b002      	add	sp, #8
 8013788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801378c:	f7ff bf85 	b.w	801369a <_ZL28read_encoded_value_with_basehjPKhPj>

08013790 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8013790:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013792:	460c      	mov	r4, r1
 8013794:	4615      	mov	r5, r2
 8013796:	4606      	mov	r6, r0
 8013798:	b320      	cbz	r0, 80137e4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 801379a:	f7ee fb5f 	bl	8001e5c <_Unwind_GetRegionStart>
 801379e:	4603      	mov	r3, r0
 80137a0:	4620      	mov	r0, r4
 80137a2:	602b      	str	r3, [r5, #0]
 80137a4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80137a8:	29ff      	cmp	r1, #255	; 0xff
 80137aa:	d01d      	beq.n	80137e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 80137ac:	4602      	mov	r2, r0
 80137ae:	1d2b      	adds	r3, r5, #4
 80137b0:	4630      	mov	r0, r6
 80137b2:	f7ff ffdc 	bl	801376e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80137b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80137ba:	2bff      	cmp	r3, #255	; 0xff
 80137bc:	d016      	beq.n	80137ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 80137be:	2310      	movs	r3, #16
 80137c0:	752b      	strb	r3, [r5, #20]
 80137c2:	a901      	add	r1, sp, #4
 80137c4:	f7ff ff42 	bl	801364c <_ZL12read_uleb128PKhPm>
 80137c8:	9b01      	ldr	r3, [sp, #4]
 80137ca:	4403      	add	r3, r0
 80137cc:	60eb      	str	r3, [r5, #12]
 80137ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80137d2:	756b      	strb	r3, [r5, #21]
 80137d4:	a901      	add	r1, sp, #4
 80137d6:	f7ff ff39 	bl	801364c <_ZL12read_uleb128PKhPm>
 80137da:	9b01      	ldr	r3, [sp, #4]
 80137dc:	4403      	add	r3, r0
 80137de:	612b      	str	r3, [r5, #16]
 80137e0:	b002      	add	sp, #8
 80137e2:	bd70      	pop	{r4, r5, r6, pc}
 80137e4:	4603      	mov	r3, r0
 80137e6:	e7db      	b.n	80137a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 80137e8:	606b      	str	r3, [r5, #4]
 80137ea:	e7e4      	b.n	80137b6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 80137ec:	752b      	strb	r3, [r5, #20]
 80137ee:	2300      	movs	r3, #0
 80137f0:	e7ec      	b.n	80137cc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

080137f2 <_Unwind_GetGR>:
 80137f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137f4:	ab03      	add	r3, sp, #12
 80137f6:	9300      	str	r3, [sp, #0]
 80137f8:	2300      	movs	r3, #0
 80137fa:	460a      	mov	r2, r1
 80137fc:	4619      	mov	r1, r3
 80137fe:	f7ed fd91 	bl	8001324 <_Unwind_VRS_Get>
 8013802:	9803      	ldr	r0, [sp, #12]
 8013804:	b005      	add	sp, #20
 8013806:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801380c <__gxx_personality_v0>:
 801380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013810:	b091      	sub	sp, #68	; 0x44
 8013812:	2300      	movs	r3, #0
 8013814:	9305      	str	r3, [sp, #20]
 8013816:	f000 0303 	and.w	r3, r0, #3
 801381a:	2b01      	cmp	r3, #1
 801381c:	4606      	mov	r6, r0
 801381e:	460c      	mov	r4, r1
 8013820:	4617      	mov	r7, r2
 8013822:	d00e      	beq.n	8013842 <__gxx_personality_v0+0x36>
 8013824:	2b02      	cmp	r3, #2
 8013826:	d003      	beq.n	8013830 <__gxx_personality_v0+0x24>
 8013828:	2b00      	cmp	r3, #0
 801382a:	d13b      	bne.n	80138a4 <__gxx_personality_v0+0x98>
 801382c:	0701      	lsls	r1, r0, #28
 801382e:	d53b      	bpl.n	80138a8 <__gxx_personality_v0+0x9c>
 8013830:	4639      	mov	r1, r7
 8013832:	4620      	mov	r0, r4
 8013834:	f7ee fafc 	bl	8001e30 <__gnu_unwind_frame>
 8013838:	b390      	cbz	r0, 80138a0 <__gxx_personality_v0+0x94>
 801383a:	2009      	movs	r0, #9
 801383c:	b011      	add	sp, #68	; 0x44
 801383e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013842:	0702      	lsls	r2, r0, #28
 8013844:	d406      	bmi.n	8013854 <__gxx_personality_v0+0x48>
 8013846:	6a0d      	ldr	r5, [r1, #32]
 8013848:	4638      	mov	r0, r7
 801384a:	210d      	movs	r1, #13
 801384c:	f7ff ffd1 	bl	80137f2 <_Unwind_GetGR>
 8013850:	4285      	cmp	r5, r0
 8013852:	d02b      	beq.n	80138ac <__gxx_personality_v0+0xa0>
 8013854:	2302      	movs	r3, #2
 8013856:	f006 0608 	and.w	r6, r6, #8
 801385a:	431e      	orrs	r6, r3
 801385c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8013860:	2300      	movs	r3, #0
 8013862:	f8cd b000 	str.w	fp, [sp]
 8013866:	220c      	movs	r2, #12
 8013868:	4619      	mov	r1, r3
 801386a:	4638      	mov	r0, r7
 801386c:	940a      	str	r4, [sp, #40]	; 0x28
 801386e:	f7ed fd7f 	bl	8001370 <_Unwind_VRS_Set>
 8013872:	2e06      	cmp	r6, #6
 8013874:	d11c      	bne.n	80138b0 <__gxx_personality_v0+0xa4>
 8013876:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801387a:	e9d4 5a0a 	ldrd	r5, sl, [r4, #40]	; 0x28
 801387e:	f1b8 0f00 	cmp.w	r8, #0
 8013882:	bf0c      	ite	eq
 8013884:	f04f 0901 	moveq.w	r9, #1
 8013888:	f04f 0903 	movne.w	r9, #3
 801388c:	f016 0608 	ands.w	r6, r6, #8
 8013890:	f000 8104 	beq.w	8013a9c <__gxx_personality_v0+0x290>
 8013894:	f1b9 0f01 	cmp.w	r9, #1
 8013898:	f040 80fc 	bne.w	8013a94 <__gxx_personality_v0+0x288>
 801389c:	f000 f95c 	bl	8013b58 <_ZSt9terminatev>
 80138a0:	2008      	movs	r0, #8
 80138a2:	e7cb      	b.n	801383c <__gxx_personality_v0+0x30>
 80138a4:	f000 fbf2 	bl	801408c <abort>
 80138a8:	2301      	movs	r3, #1
 80138aa:	e7d4      	b.n	8013856 <__gxx_personality_v0+0x4a>
 80138ac:	2306      	movs	r3, #6
 80138ae:	e7d2      	b.n	8013856 <__gxx_personality_v0+0x4a>
 80138b0:	4638      	mov	r0, r7
 80138b2:	f7ee fad9 	bl	8001e68 <_Unwind_GetLanguageSpecificData>
 80138b6:	4682      	mov	sl, r0
 80138b8:	2800      	cmp	r0, #0
 80138ba:	d0b9      	beq.n	8013830 <__gxx_personality_v0+0x24>
 80138bc:	465a      	mov	r2, fp
 80138be:	4601      	mov	r1, r0
 80138c0:	4638      	mov	r0, r7
 80138c2:	f7ff ff65 	bl	8013790 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80138c6:	4639      	mov	r1, r7
 80138c8:	4605      	mov	r5, r0
 80138ca:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80138ce:	f7ff ff2a 	bl	8013726 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80138d2:	210f      	movs	r1, #15
 80138d4:	900c      	str	r0, [sp, #48]	; 0x30
 80138d6:	4638      	mov	r0, r7
 80138d8:	f7ff ff8b 	bl	80137f2 <_Unwind_GetGR>
 80138dc:	f020 0801 	bic.w	r8, r0, #1
 80138e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80138e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138e6:	42ab      	cmp	r3, r5
 80138e8:	d815      	bhi.n	8013916 <__gxx_personality_v0+0x10a>
 80138ea:	2500      	movs	r5, #0
 80138ec:	46a8      	mov	r8, r5
 80138ee:	f04f 0901 	mov.w	r9, #1
 80138f2:	07f3      	lsls	r3, r6, #31
 80138f4:	d5ca      	bpl.n	801388c <__gxx_personality_v0+0x80>
 80138f6:	f1b9 0f02 	cmp.w	r9, #2
 80138fa:	d099      	beq.n	8013830 <__gxx_personality_v0+0x24>
 80138fc:	210d      	movs	r1, #13
 80138fe:	4638      	mov	r0, r7
 8013900:	9e05      	ldr	r6, [sp, #20]
 8013902:	f7ff ff76 	bl	80137f2 <_Unwind_GetGR>
 8013906:	e9c4 5a0a 	strd	r5, sl, [r4, #40]	; 0x28
 801390a:	e9c4 0608 	strd	r0, r6, [r4, #32]
 801390e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8013912:	2006      	movs	r0, #6
 8013914:	e792      	b.n	801383c <__gxx_personality_v0+0x30>
 8013916:	462a      	mov	r2, r5
 8013918:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 801391c:	ab06      	add	r3, sp, #24
 801391e:	2000      	movs	r0, #0
 8013920:	f7ff ff25 	bl	801376e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8013924:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8013928:	4602      	mov	r2, r0
 801392a:	ab07      	add	r3, sp, #28
 801392c:	2000      	movs	r0, #0
 801392e:	f7ff ff1e 	bl	801376e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8013932:	ab08      	add	r3, sp, #32
 8013934:	4602      	mov	r2, r0
 8013936:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 801393a:	2000      	movs	r0, #0
 801393c:	f7ff ff17 	bl	801376e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8013940:	a909      	add	r1, sp, #36	; 0x24
 8013942:	f7ff fe83 	bl	801364c <_ZL12read_uleb128PKhPm>
 8013946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013948:	9a06      	ldr	r2, [sp, #24]
 801394a:	4413      	add	r3, r2
 801394c:	4543      	cmp	r3, r8
 801394e:	4605      	mov	r5, r0
 8013950:	d901      	bls.n	8013956 <__gxx_personality_v0+0x14a>
 8013952:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8013954:	e7c6      	b.n	80138e4 <__gxx_personality_v0+0xd8>
 8013956:	9a07      	ldr	r2, [sp, #28]
 8013958:	4413      	add	r3, r2
 801395a:	4543      	cmp	r3, r8
 801395c:	d9c2      	bls.n	80138e4 <__gxx_personality_v0+0xd8>
 801395e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013962:	f1b8 0f00 	cmp.w	r8, #0
 8013966:	d001      	beq.n	801396c <__gxx_personality_v0+0x160>
 8013968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801396a:	4498      	add	r8, r3
 801396c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801396e:	b115      	cbz	r5, 8013976 <__gxx_personality_v0+0x16a>
 8013970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013972:	3d01      	subs	r5, #1
 8013974:	441d      	add	r5, r3
 8013976:	f1b8 0f00 	cmp.w	r8, #0
 801397a:	f43f af59 	beq.w	8013830 <__gxx_personality_v0+0x24>
 801397e:	2d00      	cmp	r5, #0
 8013980:	f000 8085 	beq.w	8013a8e <__gxx_personality_v0+0x282>
 8013984:	f016 0308 	ands.w	r3, r6, #8
 8013988:	9303      	str	r3, [sp, #12]
 801398a:	d033      	beq.n	80139f4 <__gxx_personality_v0+0x1e8>
 801398c:	2347      	movs	r3, #71	; 0x47
 801398e:	7023      	strb	r3, [r4, #0]
 8013990:	234e      	movs	r3, #78	; 0x4e
 8013992:	7063      	strb	r3, [r4, #1]
 8013994:	2355      	movs	r3, #85	; 0x55
 8013996:	70a3      	strb	r3, [r4, #2]
 8013998:	2343      	movs	r3, #67	; 0x43
 801399a:	70e3      	strb	r3, [r4, #3]
 801399c:	2346      	movs	r3, #70	; 0x46
 801399e:	7123      	strb	r3, [r4, #4]
 80139a0:	234f      	movs	r3, #79	; 0x4f
 80139a2:	7163      	strb	r3, [r4, #5]
 80139a4:	2352      	movs	r3, #82	; 0x52
 80139a6:	71a3      	strb	r3, [r4, #6]
 80139a8:	2300      	movs	r3, #0
 80139aa:	71e3      	strb	r3, [r4, #7]
 80139ac:	2300      	movs	r3, #0
 80139ae:	9302      	str	r3, [sp, #8]
 80139b0:	a907      	add	r1, sp, #28
 80139b2:	4628      	mov	r0, r5
 80139b4:	f7ff fe59 	bl	801366a <_ZL12read_sleb128PKhPl>
 80139b8:	a908      	add	r1, sp, #32
 80139ba:	4681      	mov	r9, r0
 80139bc:	f7ff fe55 	bl	801366a <_ZL12read_sleb128PKhPl>
 80139c0:	9907      	ldr	r1, [sp, #28]
 80139c2:	2900      	cmp	r1, #0
 80139c4:	d060      	beq.n	8013a88 <__gxx_personality_v0+0x27c>
 80139c6:	dd39      	ble.n	8013a3c <__gxx_personality_v0+0x230>
 80139c8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80139cc:	28ff      	cmp	r0, #255	; 0xff
 80139ce:	d031      	beq.n	8013a34 <__gxx_personality_v0+0x228>
 80139d0:	f000 0307 	and.w	r3, r0, #7
 80139d4:	2b04      	cmp	r3, #4
 80139d6:	f63f af65 	bhi.w	80138a4 <__gxx_personality_v0+0x98>
 80139da:	a201      	add	r2, pc, #4	; (adr r2, 80139e0 <__gxx_personality_v0+0x1d4>)
 80139dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139e0:	08013a39 	.word	0x08013a39
 80139e4:	080138a5 	.word	0x080138a5
 80139e8:	08013a07 	.word	0x08013a07
 80139ec:	08013a39 	.word	0x08013a39
 80139f0:	08013a31 	.word	0x08013a31
 80139f4:	79e3      	ldrb	r3, [r4, #7]
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	bf0c      	ite	eq
 80139fa:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 80139fe:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8013a02:	9305      	str	r3, [sp, #20]
 8013a04:	e7d2      	b.n	80139ac <__gxx_personality_v0+0x1a0>
 8013a06:	2502      	movs	r5, #2
 8013a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a0a:	ab09      	add	r3, sp, #36	; 0x24
 8013a0c:	fb05 2211 	mls	r2, r5, r1, r2
 8013a10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013a12:	f7ff fe42 	bl	801369a <_ZL28read_encoded_value_with_basehjPKhPj>
 8013a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a18:	b131      	cbz	r1, 8013a28 <__gxx_personality_v0+0x21c>
 8013a1a:	b35c      	cbz	r4, 8013a74 <__gxx_personality_v0+0x268>
 8013a1c:	ab05      	add	r3, sp, #20
 8013a1e:	2200      	movs	r2, #0
 8013a20:	4620      	mov	r0, r4
 8013a22:	f7ff fd79 	bl	8013518 <__cxa_type_match>
 8013a26:	b328      	cbz	r0, 8013a74 <__gxx_personality_v0+0x268>
 8013a28:	9d07      	ldr	r5, [sp, #28]
 8013a2a:	f04f 0903 	mov.w	r9, #3
 8013a2e:	e760      	b.n	80138f2 <__gxx_personality_v0+0xe6>
 8013a30:	2508      	movs	r5, #8
 8013a32:	e7e9      	b.n	8013a08 <__gxx_personality_v0+0x1fc>
 8013a34:	2500      	movs	r5, #0
 8013a36:	e7e7      	b.n	8013a08 <__gxx_personality_v0+0x1fc>
 8013a38:	2504      	movs	r5, #4
 8013a3a:	e7e5      	b.n	8013a08 <__gxx_personality_v0+0x1fc>
 8013a3c:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8013a40:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8013a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a46:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8013a4a:	313f      	adds	r1, #63	; 0x3f
 8013a4c:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8013a50:	b1ac      	cbz	r4, 8013a7e <__gxx_personality_v0+0x272>
 8013a52:	9a03      	ldr	r2, [sp, #12]
 8013a54:	b99a      	cbnz	r2, 8013a7e <__gxx_personality_v0+0x272>
 8013a56:	9b05      	ldr	r3, [sp, #20]
 8013a58:	9309      	str	r3, [sp, #36]	; 0x24
 8013a5a:	3d04      	subs	r5, #4
 8013a5c:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8013a60:	2900      	cmp	r1, #0
 8013a62:	d0e1      	beq.n	8013a28 <__gxx_personality_v0+0x21c>
 8013a64:	ab09      	add	r3, sp, #36	; 0x24
 8013a66:	2200      	movs	r2, #0
 8013a68:	4429      	add	r1, r5
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f7ff fd54 	bl	8013518 <__cxa_type_match>
 8013a70:	2800      	cmp	r0, #0
 8013a72:	d0f3      	beq.n	8013a5c <__gxx_personality_v0+0x250>
 8013a74:	9d08      	ldr	r5, [sp, #32]
 8013a76:	2d00      	cmp	r5, #0
 8013a78:	d05a      	beq.n	8013b30 <__gxx_personality_v0+0x324>
 8013a7a:	444d      	add	r5, r9
 8013a7c:	e798      	b.n	80139b0 <__gxx_personality_v0+0x1a4>
 8013a7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d1f6      	bne.n	8013a74 <__gxx_personality_v0+0x268>
 8013a86:	e7cf      	b.n	8013a28 <__gxx_personality_v0+0x21c>
 8013a88:	2301      	movs	r3, #1
 8013a8a:	9302      	str	r3, [sp, #8]
 8013a8c:	e7f2      	b.n	8013a74 <__gxx_personality_v0+0x268>
 8013a8e:	f04f 0902 	mov.w	r9, #2
 8013a92:	e72e      	b.n	80138f2 <__gxx_personality_v0+0xe6>
 8013a94:	2d00      	cmp	r5, #0
 8013a96:	da20      	bge.n	8013ada <__gxx_personality_v0+0x2ce>
 8013a98:	f000 f870 	bl	8013b7c <_ZSt10unexpectedv>
 8013a9c:	f1b9 0f01 	cmp.w	r9, #1
 8013aa0:	d102      	bne.n	8013aa8 <__gxx_personality_v0+0x29c>
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	f000 fa81 	bl	8013faa <__cxa_call_terminate>
 8013aa8:	2d00      	cmp	r5, #0
 8013aaa:	da16      	bge.n	8013ada <__gxx_personality_v0+0x2ce>
 8013aac:	465a      	mov	r2, fp
 8013aae:	4651      	mov	r1, sl
 8013ab0:	4638      	mov	r0, r7
 8013ab2:	f7ff fe6d 	bl	8013790 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8013ab6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8013aba:	4639      	mov	r1, r7
 8013abc:	f7ff fe33 	bl	8013726 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8013ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ac2:	900c      	str	r0, [sp, #48]	; 0x30
 8013ac4:	43ea      	mvns	r2, r5
 8013ac6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013aca:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8013ace:	bb6a      	cbnz	r2, 8013b2c <__gxx_personality_v0+0x320>
 8013ad0:	2204      	movs	r2, #4
 8013ad2:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8013ad6:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8013ada:	2300      	movs	r3, #0
 8013adc:	ae09      	add	r6, sp, #36	; 0x24
 8013ade:	461a      	mov	r2, r3
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	9600      	str	r6, [sp, #0]
 8013ae4:	4638      	mov	r0, r7
 8013ae6:	9409      	str	r4, [sp, #36]	; 0x24
 8013ae8:	f7ed fc42 	bl	8001370 <_Unwind_VRS_Set>
 8013aec:	2300      	movs	r3, #0
 8013aee:	4619      	mov	r1, r3
 8013af0:	2201      	movs	r2, #1
 8013af2:	9600      	str	r6, [sp, #0]
 8013af4:	4638      	mov	r0, r7
 8013af6:	9509      	str	r5, [sp, #36]	; 0x24
 8013af8:	f7ed fc3a 	bl	8001370 <_Unwind_VRS_Set>
 8013afc:	210f      	movs	r1, #15
 8013afe:	4638      	mov	r0, r7
 8013b00:	f7ff fe77 	bl	80137f2 <_Unwind_GetGR>
 8013b04:	f000 0001 	and.w	r0, r0, #1
 8013b08:	ea40 0008 	orr.w	r0, r0, r8
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	9009      	str	r0, [sp, #36]	; 0x24
 8013b10:	9600      	str	r6, [sp, #0]
 8013b12:	220f      	movs	r2, #15
 8013b14:	4619      	mov	r1, r3
 8013b16:	4638      	mov	r0, r7
 8013b18:	f7ed fc2a 	bl	8001370 <_Unwind_VRS_Set>
 8013b1c:	f1b9 0f02 	cmp.w	r9, #2
 8013b20:	d102      	bne.n	8013b28 <__gxx_personality_v0+0x31c>
 8013b22:	4620      	mov	r0, r4
 8013b24:	f7ff fd56 	bl	80135d4 <__cxa_begin_cleanup>
 8013b28:	2007      	movs	r0, #7
 8013b2a:	e687      	b.n	801383c <__gxx_personality_v0+0x30>
 8013b2c:	3601      	adds	r6, #1
 8013b2e:	e7cc      	b.n	8013aca <__gxx_personality_v0+0x2be>
 8013b30:	9b02      	ldr	r3, [sp, #8]
 8013b32:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	f43f ae7a 	beq.w	8013830 <__gxx_personality_v0+0x24>
 8013b3c:	e6d9      	b.n	80138f2 <__gxx_personality_v0+0xe6>
 8013b3e:	bf00      	nop

08013b40 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013b40:	b508      	push	{r3, lr}
 8013b42:	4780      	blx	r0
 8013b44:	f000 faa2 	bl	801408c <abort>

08013b48 <_ZSt13get_terminatev>:
 8013b48:	4b02      	ldr	r3, [pc, #8]	; (8013b54 <_ZSt13get_terminatev+0xc>)
 8013b4a:	6818      	ldr	r0, [r3, #0]
 8013b4c:	f3bf 8f5b 	dmb	ish
 8013b50:	4770      	bx	lr
 8013b52:	bf00      	nop
 8013b54:	20000010 	.word	0x20000010

08013b58 <_ZSt9terminatev>:
 8013b58:	b508      	push	{r3, lr}
 8013b5a:	f7ff fff5 	bl	8013b48 <_ZSt13get_terminatev>
 8013b5e:	f7ff ffef 	bl	8013b40 <_ZN10__cxxabiv111__terminateEPFvvE>

08013b62 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8013b62:	b508      	push	{r3, lr}
 8013b64:	4780      	blx	r0
 8013b66:	f7ff fff7 	bl	8013b58 <_ZSt9terminatev>
	...

08013b6c <_ZSt14get_unexpectedv>:
 8013b6c:	4b02      	ldr	r3, [pc, #8]	; (8013b78 <_ZSt14get_unexpectedv+0xc>)
 8013b6e:	6818      	ldr	r0, [r3, #0]
 8013b70:	f3bf 8f5b 	dmb	ish
 8013b74:	4770      	bx	lr
 8013b76:	bf00      	nop
 8013b78:	2000000c 	.word	0x2000000c

08013b7c <_ZSt10unexpectedv>:
 8013b7c:	b508      	push	{r3, lr}
 8013b7e:	f7ff fff5 	bl	8013b6c <_ZSt14get_unexpectedv>
 8013b82:	f7ff ffee 	bl	8013b62 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08013b86 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8013b86:	2801      	cmp	r0, #1
 8013b88:	b507      	push	{r0, r1, r2, lr}
 8013b8a:	d903      	bls.n	8013b94 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8013b8c:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8013b90:	f7ff ffd6 	bl	8013b40 <_ZN10__cxxabiv111__terminateEPFvvE>
 8013b94:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8013b98:	f3bf 8f5b 	dmb	ish
 8013b9c:	e853 2f00 	ldrex	r2, [r3]
 8013ba0:	3a01      	subs	r2, #1
 8013ba2:	e843 2000 	strex	r0, r2, [r3]
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	d1f8      	bne.n	8013b9c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 8013baa:	f3bf 8f5b 	dmb	ish
 8013bae:	b962      	cbnz	r2, 8013bca <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x44>
 8013bb0:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8013bb4:	f101 0058 	add.w	r0, r1, #88	; 0x58
 8013bb8:	b113      	cbz	r3, 8013bc0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 8013bba:	9001      	str	r0, [sp, #4]
 8013bbc:	4798      	blx	r3
 8013bbe:	9801      	ldr	r0, [sp, #4]
 8013bc0:	b003      	add	sp, #12
 8013bc2:	f85d eb04 	ldr.w	lr, [sp], #4
 8013bc6:	f7ff bc5f 	b.w	8013488 <__cxa_free_exception>
 8013bca:	b003      	add	sp, #12
 8013bcc:	f85d fb04 	ldr.w	pc, [sp], #4

08013bd0 <__cxa_init_primary_exception>:
 8013bd0:	b538      	push	{r3, r4, r5, lr}
 8013bd2:	2500      	movs	r5, #0
 8013bd4:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 8013bd8:	f840 5c80 	str.w	r5, [r0, #-128]
 8013bdc:	4604      	mov	r4, r0
 8013bde:	f7ff ffc5 	bl	8013b6c <_ZSt14get_unexpectedv>
 8013be2:	f844 0c70 	str.w	r0, [r4, #-112]
 8013be6:	f7ff ffaf 	bl	8013b48 <_ZSt13get_terminatev>
 8013bea:	2347      	movs	r3, #71	; 0x47
 8013bec:	f804 3c58 	strb.w	r3, [r4, #-88]
 8013bf0:	234e      	movs	r3, #78	; 0x4e
 8013bf2:	f804 3c57 	strb.w	r3, [r4, #-87]
 8013bf6:	2355      	movs	r3, #85	; 0x55
 8013bf8:	f804 3c56 	strb.w	r3, [r4, #-86]
 8013bfc:	2343      	movs	r3, #67	; 0x43
 8013bfe:	f804 3c55 	strb.w	r3, [r4, #-85]
 8013c02:	f804 3c54 	strb.w	r3, [r4, #-84]
 8013c06:	232b      	movs	r3, #43	; 0x2b
 8013c08:	f804 3c53 	strb.w	r3, [r4, #-83]
 8013c0c:	f804 3c52 	strb.w	r3, [r4, #-82]
 8013c10:	4b04      	ldr	r3, [pc, #16]	; (8013c24 <__cxa_init_primary_exception+0x54>)
 8013c12:	f844 0c6c 	str.w	r0, [r4, #-108]
 8013c16:	f804 5c51 	strb.w	r5, [r4, #-81]
 8013c1a:	f844 3c50 	str.w	r3, [r4, #-80]
 8013c1e:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 8013c22:	bd38      	pop	{r3, r4, r5, pc}
 8013c24:	08013b87 	.word	0x08013b87

08013c28 <__cxa_throw>:
 8013c28:	b507      	push	{r0, r1, r2, lr}
 8013c2a:	4604      	mov	r4, r0
 8013c2c:	e9cd 2100 	strd	r2, r1, [sp]
 8013c30:	f7ff fd08 	bl	8013644 <__cxa_get_globals>
 8013c34:	4603      	mov	r3, r0
 8013c36:	6840      	ldr	r0, [r0, #4]
 8013c38:	3001      	adds	r0, #1
 8013c3a:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013c3e:	6058      	str	r0, [r3, #4]
 8013c40:	4620      	mov	r0, r4
 8013c42:	f7ff ffc5 	bl	8013bd0 <__cxa_init_primary_exception>
 8013c46:	4604      	mov	r4, r0
 8013c48:	2301      	movs	r3, #1
 8013c4a:	f844 3b28 	str.w	r3, [r4], #40
 8013c4e:	4620      	mov	r0, r4
 8013c50:	f7ed ff22 	bl	8001a98 <_Unwind_RaiseException>
 8013c54:	4620      	mov	r0, r4
 8013c56:	f000 f9e8 	bl	801402a <__cxa_begin_catch>
 8013c5a:	f7ff ff7d 	bl	8013b58 <_ZSt9terminatev>

08013c5e <_Znwj>:
 8013c5e:	2801      	cmp	r0, #1
 8013c60:	bf38      	it	cc
 8013c62:	2001      	movcc	r0, #1
 8013c64:	b510      	push	{r4, lr}
 8013c66:	4604      	mov	r4, r0
 8013c68:	4620      	mov	r0, r4
 8013c6a:	f000 fa17 	bl	801409c <malloc>
 8013c6e:	b100      	cbz	r0, 8013c72 <_Znwj+0x14>
 8013c70:	bd10      	pop	{r4, pc}
 8013c72:	f000 fa03 	bl	801407c <_ZSt15get_new_handlerv>
 8013c76:	b908      	cbnz	r0, 8013c7c <_Znwj+0x1e>
 8013c78:	f000 fa08 	bl	801408c <abort>
 8013c7c:	4780      	blx	r0
 8013c7e:	e7f3      	b.n	8013c68 <_Znwj+0xa>

08013c80 <_Znaj>:
 8013c80:	f7ff bfed 	b.w	8013c5e <_Znwj>

08013c84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8013c84:	b510      	push	{r4, lr}
 8013c86:	4b03      	ldr	r3, [pc, #12]	; (8013c94 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8013c88:	6003      	str	r3, [r0, #0]
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	f7ff fb34 	bl	80132f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8013c90:	4620      	mov	r0, r4
 8013c92:	bd10      	pop	{r4, pc}
 8013c94:	080185e8 	.word	0x080185e8

08013c98 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8013c98:	b510      	push	{r4, lr}
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	f7ff fff2 	bl	8013c84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	210c      	movs	r1, #12
 8013ca4:	f7ff fb7c 	bl	80133a0 <_ZdlPvj>
 8013ca8:	4620      	mov	r0, r4
 8013caa:	bd10      	pop	{r4, pc}

08013cac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8013cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013cae:	9f08      	ldr	r7, [sp, #32]
 8013cb0:	4297      	cmp	r7, r2
 8013cb2:	4605      	mov	r5, r0
 8013cb4:	460e      	mov	r6, r1
 8013cb6:	4614      	mov	r4, r2
 8013cb8:	d00a      	beq.n	8013cd0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8013cba:	68a8      	ldr	r0, [r5, #8]
 8013cbc:	6802      	ldr	r2, [r0, #0]
 8013cbe:	9708      	str	r7, [sp, #32]
 8013cc0:	6a15      	ldr	r5, [r2, #32]
 8013cc2:	4631      	mov	r1, r6
 8013cc4:	4622      	mov	r2, r4
 8013cc6:	46ac      	mov	ip, r5
 8013cc8:	b003      	add	sp, #12
 8013cca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013cce:	4760      	bx	ip
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	9301      	str	r3, [sp, #4]
 8013cd4:	f000 f858 	bl	8013d88 <_ZNKSt9type_infoeqERKS_>
 8013cd8:	9b01      	ldr	r3, [sp, #4]
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	d0ed      	beq.n	8013cba <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8013cde:	2006      	movs	r0, #6
 8013ce0:	b003      	add	sp, #12
 8013ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ce4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8013ce4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce8:	460d      	mov	r5, r1
 8013cea:	4619      	mov	r1, r3
 8013cec:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8013cf0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8013cf4:	4681      	mov	r9, r0
 8013cf6:	4617      	mov	r7, r2
 8013cf8:	4698      	mov	r8, r3
 8013cfa:	f000 f845 	bl	8013d88 <_ZNKSt9type_infoeqERKS_>
 8013cfe:	b190      	cbz	r0, 8013d26 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8013d00:	2d00      	cmp	r5, #0
 8013d02:	6034      	str	r4, [r6, #0]
 8013d04:	7137      	strb	r7, [r6, #4]
 8013d06:	db09      	blt.n	8013d1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8013d08:	1961      	adds	r1, r4, r5
 8013d0a:	458a      	cmp	sl, r1
 8013d0c:	bf0c      	ite	eq
 8013d0e:	2106      	moveq	r1, #6
 8013d10:	2101      	movne	r1, #1
 8013d12:	71b1      	strb	r1, [r6, #6]
 8013d14:	2000      	movs	r0, #0
 8013d16:	b001      	add	sp, #4
 8013d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d1c:	3502      	adds	r5, #2
 8013d1e:	d1f9      	bne.n	8013d14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013d20:	2301      	movs	r3, #1
 8013d22:	71b3      	strb	r3, [r6, #6]
 8013d24:	e7f6      	b.n	8013d14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013d26:	4554      	cmp	r4, sl
 8013d28:	d106      	bne.n	8013d38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8013d2a:	4659      	mov	r1, fp
 8013d2c:	4648      	mov	r0, r9
 8013d2e:	f000 f82b 	bl	8013d88 <_ZNKSt9type_infoeqERKS_>
 8013d32:	b108      	cbz	r0, 8013d38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8013d34:	7177      	strb	r7, [r6, #5]
 8013d36:	e7ed      	b.n	8013d14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013d38:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8013d3c:	6803      	ldr	r3, [r0, #0]
 8013d3e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8013d42:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8013d46:	69dc      	ldr	r4, [r3, #28]
 8013d48:	463a      	mov	r2, r7
 8013d4a:	4643      	mov	r3, r8
 8013d4c:	4629      	mov	r1, r5
 8013d4e:	46a4      	mov	ip, r4
 8013d50:	b001      	add	sp, #4
 8013d52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d56:	4760      	bx	ip

08013d58 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8013d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d5c:	4607      	mov	r7, r0
 8013d5e:	460c      	mov	r4, r1
 8013d60:	4615      	mov	r5, r2
 8013d62:	461e      	mov	r6, r3
 8013d64:	f7ff fafb 	bl	801335e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8013d68:	b948      	cbnz	r0, 8013d7e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8013d6a:	68b8      	ldr	r0, [r7, #8]
 8013d6c:	6803      	ldr	r3, [r0, #0]
 8013d6e:	699f      	ldr	r7, [r3, #24]
 8013d70:	462a      	mov	r2, r5
 8013d72:	4633      	mov	r3, r6
 8013d74:	4621      	mov	r1, r4
 8013d76:	46bc      	mov	ip, r7
 8013d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d7c:	4760      	bx	ip
 8013d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d82 <_ZNSt9type_infoD1Ev>:
 8013d82:	4770      	bx	lr

08013d84 <_ZNKSt9type_info14__is_pointer_pEv>:
 8013d84:	2000      	movs	r0, #0
 8013d86:	4770      	bx	lr

08013d88 <_ZNKSt9type_infoeqERKS_>:
 8013d88:	4281      	cmp	r1, r0
 8013d8a:	b508      	push	{r3, lr}
 8013d8c:	d00e      	beq.n	8013dac <_ZNKSt9type_infoeqERKS_+0x24>
 8013d8e:	6840      	ldr	r0, [r0, #4]
 8013d90:	7803      	ldrb	r3, [r0, #0]
 8013d92:	2b2a      	cmp	r3, #42	; 0x2a
 8013d94:	d00c      	beq.n	8013db0 <_ZNKSt9type_infoeqERKS_+0x28>
 8013d96:	6849      	ldr	r1, [r1, #4]
 8013d98:	780b      	ldrb	r3, [r1, #0]
 8013d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8013d9c:	bf08      	it	eq
 8013d9e:	3101      	addeq	r1, #1
 8013da0:	f7ec fa36 	bl	8000210 <strcmp>
 8013da4:	fab0 f080 	clz	r0, r0
 8013da8:	0940      	lsrs	r0, r0, #5
 8013daa:	bd08      	pop	{r3, pc}
 8013dac:	2001      	movs	r0, #1
 8013dae:	e7fc      	b.n	8013daa <_ZNKSt9type_infoeqERKS_+0x22>
 8013db0:	2000      	movs	r0, #0
 8013db2:	e7fa      	b.n	8013daa <_ZNKSt9type_infoeqERKS_+0x22>

08013db4 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8013db4:	684b      	ldr	r3, [r1, #4]
 8013db6:	6043      	str	r3, [r0, #4]
 8013db8:	684b      	ldr	r3, [r1, #4]
 8013dba:	6001      	str	r1, [r0, #0]
 8013dbc:	6018      	str	r0, [r3, #0]
 8013dbe:	6048      	str	r0, [r1, #4]
 8013dc0:	4770      	bx	lr

08013dc2 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8013dc2:	e9d0 3200 	ldrd	r3, r2, [r0]
 8013dc6:	6013      	str	r3, [r2, #0]
 8013dc8:	605a      	str	r2, [r3, #4]
 8013dca:	4770      	bx	lr

08013dcc <_ZNKSt11logic_error4whatEv>:
 8013dcc:	6840      	ldr	r0, [r0, #4]
 8013dce:	4770      	bx	lr

08013dd0 <_ZNSt13runtime_errorD1Ev>:
 8013dd0:	b513      	push	{r0, r1, r4, lr}
 8013dd2:	4b07      	ldr	r3, [pc, #28]	; (8013df0 <_ZNSt13runtime_errorD1Ev+0x20>)
 8013dd4:	6003      	str	r3, [r0, #0]
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	6840      	ldr	r0, [r0, #4]
 8013dda:	a901      	add	r1, sp, #4
 8013ddc:	380c      	subs	r0, #12
 8013dde:	f000 f8ab 	bl	8013f38 <_ZNSs4_Rep10_M_disposeERKSaIcE>
 8013de2:	4620      	mov	r0, r4
 8013de4:	f7ff fc2c 	bl	8013640 <_ZNSt9exceptionD1Ev>
 8013de8:	4620      	mov	r0, r4
 8013dea:	b002      	add	sp, #8
 8013dec:	bd10      	pop	{r4, pc}
 8013dee:	bf00      	nop
 8013df0:	0801864c 	.word	0x0801864c

08013df4 <_ZNSt13runtime_errorD0Ev>:
 8013df4:	b510      	push	{r4, lr}
 8013df6:	4604      	mov	r4, r0
 8013df8:	f7ff ffea 	bl	8013dd0 <_ZNSt13runtime_errorD1Ev>
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	f000 f8b5 	bl	8013f6c <_ZdlPv>
 8013e02:	4620      	mov	r0, r4
 8013e04:	bd10      	pop	{r4, pc}
	...

08013e08 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>:
 8013e08:	4288      	cmp	r0, r1
 8013e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e0e:	4604      	mov	r4, r0
 8013e10:	460d      	mov	r5, r1
 8013e12:	d018      	beq.n	8013e46 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x3e>
 8013e14:	b1a0      	cbz	r0, 8013e40 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x38>
 8013e16:	eba1 0800 	sub.w	r8, r1, r0
 8013e1a:	4640      	mov	r0, r8
 8013e1c:	2100      	movs	r1, #0
 8013e1e:	f000 f859 	bl	8013ed4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8013e22:	f100 070c 	add.w	r7, r0, #12
 8013e26:	4606      	mov	r6, r0
 8013e28:	4621      	mov	r1, r4
 8013e2a:	4638      	mov	r0, r7
 8013e2c:	462a      	mov	r2, r5
 8013e2e:	f000 f83f 	bl	8013eb0 <_ZNSs13_S_copy_charsEPcPKcS1_>
 8013e32:	4641      	mov	r1, r8
 8013e34:	4630      	mov	r0, r6
 8013e36:	f000 f841 	bl	8013ebc <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8013e3a:	4638      	mov	r0, r7
 8013e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e40:	4802      	ldr	r0, [pc, #8]	; (8013e4c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x44>)
 8013e42:	f000 f88d 	bl	8013f60 <_ZSt19__throw_logic_errorPKc>
 8013e46:	4f02      	ldr	r7, [pc, #8]	; (8013e50 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x48>)
 8013e48:	e7f7      	b.n	8013e3a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x32>
 8013e4a:	bf00      	nop
 8013e4c:	08018658 	.word	0x08018658
 8013e50:	20000418 	.word	0x20000418

08013e54 <_ZNSsC2EPKcRKSaIcE.isra.0>:
 8013e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e56:	4605      	mov	r5, r0
 8013e58:	460c      	mov	r4, r1
 8013e5a:	b159      	cbz	r1, 8013e74 <_ZNSsC2EPKcRKSaIcE.isra.0+0x20>
 8013e5c:	4608      	mov	r0, r1
 8013e5e:	9201      	str	r2, [sp, #4]
 8013e60:	f7ec fa36 	bl	80002d0 <strlen>
 8013e64:	9a01      	ldr	r2, [sp, #4]
 8013e66:	1821      	adds	r1, r4, r0
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f7ff ffcd 	bl	8013e08 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>
 8013e6e:	6028      	str	r0, [r5, #0]
 8013e70:	b003      	add	sp, #12
 8013e72:	bd30      	pop	{r4, r5, pc}
 8013e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013e78:	e7f6      	b.n	8013e68 <_ZNSsC2EPKcRKSaIcE.isra.0+0x14>
	...

08013e7c <_ZNSt13runtime_errorC1EPKc>:
 8013e7c:	b513      	push	{r0, r1, r4, lr}
 8013e7e:	4b05      	ldr	r3, [pc, #20]	; (8013e94 <_ZNSt13runtime_errorC1EPKc+0x18>)
 8013e80:	4604      	mov	r4, r0
 8013e82:	aa01      	add	r2, sp, #4
 8013e84:	f840 3b04 	str.w	r3, [r0], #4
 8013e88:	f7ff ffe4 	bl	8013e54 <_ZNSsC2EPKcRKSaIcE.isra.0>
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	b002      	add	sp, #8
 8013e90:	bd10      	pop	{r4, pc}
 8013e92:	bf00      	nop
 8013e94:	0801864c 	.word	0x0801864c

08013e98 <_ZNSs7_M_copyEPcPKcj>:
 8013e98:	2a01      	cmp	r2, #1
 8013e9a:	b430      	push	{r4, r5}
 8013e9c:	d103      	bne.n	8013ea6 <_ZNSs7_M_copyEPcPKcj+0xe>
 8013e9e:	780b      	ldrb	r3, [r1, #0]
 8013ea0:	7003      	strb	r3, [r0, #0]
 8013ea2:	bc30      	pop	{r4, r5}
 8013ea4:	4770      	bx	lr
 8013ea6:	2a00      	cmp	r2, #0
 8013ea8:	d0fb      	beq.n	8013ea2 <_ZNSs7_M_copyEPcPKcj+0xa>
 8013eaa:	bc30      	pop	{r4, r5}
 8013eac:	f001 b82b 	b.w	8014f06 <memcpy>

08013eb0 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 8013eb0:	b508      	push	{r3, lr}
 8013eb2:	1a52      	subs	r2, r2, r1
 8013eb4:	f7ff fff0 	bl	8013e98 <_ZNSs7_M_copyEPcPKcj>
 8013eb8:	bd08      	pop	{r3, pc}
	...

08013ebc <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8013ebc:	4b04      	ldr	r3, [pc, #16]	; (8013ed0 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 8013ebe:	4298      	cmp	r0, r3
 8013ec0:	d004      	beq.n	8013ecc <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 8013ec2:	6001      	str	r1, [r0, #0]
 8013ec4:	4401      	add	r1, r0
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	6083      	str	r3, [r0, #8]
 8013eca:	730b      	strb	r3, [r1, #12]
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop
 8013ed0:	2000040c 	.word	0x2000040c

08013ed4 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8013ed4:	4b15      	ldr	r3, [pc, #84]	; (8013f2c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8013ed6:	4298      	cmp	r0, r3
 8013ed8:	b510      	push	{r4, lr}
 8013eda:	4604      	mov	r4, r0
 8013edc:	d902      	bls.n	8013ee4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8013ede:	4814      	ldr	r0, [pc, #80]	; (8013f30 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8013ee0:	f000 f841 	bl	8013f66 <_ZSt20__throw_length_errorPKc>
 8013ee4:	4288      	cmp	r0, r1
 8013ee6:	d903      	bls.n	8013ef0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8013ee8:	004b      	lsls	r3, r1, #1
 8013eea:	4298      	cmp	r0, r3
 8013eec:	bf38      	it	cc
 8013eee:	461c      	movcc	r4, r3
 8013ef0:	f104 031d 	add.w	r3, r4, #29
 8013ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013ef8:	f104 000d 	add.w	r0, r4, #13
 8013efc:	d90c      	bls.n	8013f18 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8013efe:	428c      	cmp	r4, r1
 8013f00:	d90a      	bls.n	8013f18 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8013f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013f06:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8013f0a:	1ae4      	subs	r4, r4, r3
 8013f0c:	4b07      	ldr	r3, [pc, #28]	; (8013f2c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8013f0e:	429c      	cmp	r4, r3
 8013f10:	bf28      	it	cs
 8013f12:	461c      	movcs	r4, r3
 8013f14:	f104 000d 	add.w	r0, r4, #13
 8013f18:	2800      	cmp	r0, #0
 8013f1a:	da01      	bge.n	8013f20 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8013f1c:	f000 f81a 	bl	8013f54 <_ZSt17__throw_bad_allocv>
 8013f20:	f7ff fe9d 	bl	8013c5e <_Znwj>
 8013f24:	2200      	movs	r2, #0
 8013f26:	6044      	str	r4, [r0, #4]
 8013f28:	6082      	str	r2, [r0, #8]
 8013f2a:	bd10      	pop	{r4, pc}
 8013f2c:	3ffffffc 	.word	0x3ffffffc
 8013f30:	08018682 	.word	0x08018682

08013f34 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 8013f34:	f000 b81a 	b.w	8013f6c <_ZdlPv>

08013f38 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 8013f38:	4a05      	ldr	r2, [pc, #20]	; (8013f50 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 8013f3a:	4290      	cmp	r0, r2
 8013f3c:	b510      	push	{r4, lr}
 8013f3e:	d006      	beq.n	8013f4e <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8013f40:	6882      	ldr	r2, [r0, #8]
 8013f42:	1e54      	subs	r4, r2, #1
 8013f44:	2a00      	cmp	r2, #0
 8013f46:	6084      	str	r4, [r0, #8]
 8013f48:	dc01      	bgt.n	8013f4e <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8013f4a:	f7ff fff3 	bl	8013f34 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 8013f4e:	bd10      	pop	{r4, pc}
 8013f50:	2000040c 	.word	0x2000040c

08013f54 <_ZSt17__throw_bad_allocv>:
 8013f54:	b508      	push	{r3, lr}
 8013f56:	f000 f899 	bl	801408c <abort>

08013f5a <_ZSt28__throw_bad_array_new_lengthv>:
 8013f5a:	b508      	push	{r3, lr}
 8013f5c:	f000 f896 	bl	801408c <abort>

08013f60 <_ZSt19__throw_logic_errorPKc>:
 8013f60:	b508      	push	{r3, lr}
 8013f62:	f000 f893 	bl	801408c <abort>

08013f66 <_ZSt20__throw_length_errorPKc>:
 8013f66:	b508      	push	{r3, lr}
 8013f68:	f000 f890 	bl	801408c <abort>

08013f6c <_ZdlPv>:
 8013f6c:	f000 b89e 	b.w	80140ac <free>

08013f70 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8013f70:	7803      	ldrb	r3, [r0, #0]
 8013f72:	2b47      	cmp	r3, #71	; 0x47
 8013f74:	d117      	bne.n	8013fa6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013f76:	7843      	ldrb	r3, [r0, #1]
 8013f78:	2b4e      	cmp	r3, #78	; 0x4e
 8013f7a:	d114      	bne.n	8013fa6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013f7c:	7883      	ldrb	r3, [r0, #2]
 8013f7e:	2b55      	cmp	r3, #85	; 0x55
 8013f80:	d111      	bne.n	8013fa6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013f82:	78c3      	ldrb	r3, [r0, #3]
 8013f84:	2b43      	cmp	r3, #67	; 0x43
 8013f86:	d10e      	bne.n	8013fa6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013f88:	7903      	ldrb	r3, [r0, #4]
 8013f8a:	2b43      	cmp	r3, #67	; 0x43
 8013f8c:	d10b      	bne.n	8013fa6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013f8e:	7943      	ldrb	r3, [r0, #5]
 8013f90:	2b2b      	cmp	r3, #43	; 0x2b
 8013f92:	d108      	bne.n	8013fa6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013f94:	7983      	ldrb	r3, [r0, #6]
 8013f96:	2b2b      	cmp	r3, #43	; 0x2b
 8013f98:	d105      	bne.n	8013fa6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013f9a:	79c0      	ldrb	r0, [r0, #7]
 8013f9c:	2801      	cmp	r0, #1
 8013f9e:	bf8c      	ite	hi
 8013fa0:	2000      	movhi	r0, #0
 8013fa2:	2001      	movls	r0, #1
 8013fa4:	4770      	bx	lr
 8013fa6:	2000      	movs	r0, #0
 8013fa8:	4770      	bx	lr

08013faa <__cxa_call_terminate>:
 8013faa:	b510      	push	{r4, lr}
 8013fac:	4604      	mov	r4, r0
 8013fae:	b148      	cbz	r0, 8013fc4 <__cxa_call_terminate+0x1a>
 8013fb0:	f000 f83b 	bl	801402a <__cxa_begin_catch>
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f7ff ffdb 	bl	8013f70 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013fba:	b118      	cbz	r0, 8013fc4 <__cxa_call_terminate+0x1a>
 8013fbc:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8013fc0:	f7ff fdbe 	bl	8013b40 <_ZN10__cxxabiv111__terminateEPFvvE>
 8013fc4:	f7ff fdc8 	bl	8013b58 <_ZSt9terminatev>

08013fc8 <__cxa_call_unexpected>:
 8013fc8:	b538      	push	{r3, r4, r5, lr}
 8013fca:	4602      	mov	r2, r0
 8013fcc:	f7ff ffd0 	bl	8013f70 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013fd0:	4604      	mov	r4, r0
 8013fd2:	b140      	cbz	r0, 8013fe6 <__cxa_call_unexpected+0x1e>
 8013fd4:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8013fd8:	2500      	movs	r5, #0
 8013fda:	4610      	mov	r0, r2
 8013fdc:	f000 f825 	bl	801402a <__cxa_begin_catch>
 8013fe0:	b11d      	cbz	r5, 8013fea <__cxa_call_unexpected+0x22>
 8013fe2:	f7ff fdcb 	bl	8013b7c <_ZSt10unexpectedv>
 8013fe6:	2501      	movs	r5, #1
 8013fe8:	e7f7      	b.n	8013fda <__cxa_call_unexpected+0x12>
 8013fea:	4620      	mov	r0, r4
 8013fec:	f7ff fdb9 	bl	8013b62 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08013ff0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8013ff0:	7803      	ldrb	r3, [r0, #0]
 8013ff2:	2b47      	cmp	r3, #71	; 0x47
 8013ff4:	d117      	bne.n	8014026 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013ff6:	7843      	ldrb	r3, [r0, #1]
 8013ff8:	2b4e      	cmp	r3, #78	; 0x4e
 8013ffa:	d114      	bne.n	8014026 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8013ffc:	7883      	ldrb	r3, [r0, #2]
 8013ffe:	2b55      	cmp	r3, #85	; 0x55
 8014000:	d111      	bne.n	8014026 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8014002:	78c3      	ldrb	r3, [r0, #3]
 8014004:	2b43      	cmp	r3, #67	; 0x43
 8014006:	d10e      	bne.n	8014026 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8014008:	7903      	ldrb	r3, [r0, #4]
 801400a:	2b43      	cmp	r3, #67	; 0x43
 801400c:	d10b      	bne.n	8014026 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801400e:	7943      	ldrb	r3, [r0, #5]
 8014010:	2b2b      	cmp	r3, #43	; 0x2b
 8014012:	d108      	bne.n	8014026 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8014014:	7983      	ldrb	r3, [r0, #6]
 8014016:	2b2b      	cmp	r3, #43	; 0x2b
 8014018:	d105      	bne.n	8014026 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801401a:	79c0      	ldrb	r0, [r0, #7]
 801401c:	2801      	cmp	r0, #1
 801401e:	bf8c      	ite	hi
 8014020:	2000      	movhi	r0, #0
 8014022:	2001      	movls	r0, #1
 8014024:	4770      	bx	lr
 8014026:	2000      	movs	r0, #0
 8014028:	4770      	bx	lr

0801402a <__cxa_begin_catch>:
 801402a:	b538      	push	{r3, r4, r5, lr}
 801402c:	4604      	mov	r4, r0
 801402e:	f7ff fb09 	bl	8013644 <__cxa_get_globals>
 8014032:	6805      	ldr	r5, [r0, #0]
 8014034:	4602      	mov	r2, r0
 8014036:	4620      	mov	r0, r4
 8014038:	f1a4 0120 	sub.w	r1, r4, #32
 801403c:	f7ff ffd8 	bl	8013ff0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8014040:	b928      	cbnz	r0, 801404e <__cxa_begin_catch+0x24>
 8014042:	b10d      	cbz	r5, 8014048 <__cxa_begin_catch+0x1e>
 8014044:	f7ff fd88 	bl	8013b58 <_ZSt9terminatev>
 8014048:	6011      	str	r1, [r2, #0]
 801404a:	4628      	mov	r0, r5
 801404c:	bd38      	pop	{r3, r4, r5, pc}
 801404e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8014052:	2b00      	cmp	r3, #0
 8014054:	bfb4      	ite	lt
 8014056:	f1c3 0301 	rsblt	r3, r3, #1
 801405a:	3301      	addge	r3, #1
 801405c:	f844 3c0c 	str.w	r3, [r4, #-12]
 8014060:	6853      	ldr	r3, [r2, #4]
 8014062:	428d      	cmp	r5, r1
 8014064:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8014068:	6053      	str	r3, [r2, #4]
 801406a:	4620      	mov	r0, r4
 801406c:	bf1c      	itt	ne
 801406e:	f844 5c10 	strne.w	r5, [r4, #-16]
 8014072:	6011      	strne	r1, [r2, #0]
 8014074:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014076:	f7ed f94d 	bl	8001314 <_Unwind_Complete>
 801407a:	e7e6      	b.n	801404a <__cxa_begin_catch+0x20>

0801407c <_ZSt15get_new_handlerv>:
 801407c:	4b02      	ldr	r3, [pc, #8]	; (8014088 <_ZSt15get_new_handlerv+0xc>)
 801407e:	6818      	ldr	r0, [r3, #0]
 8014080:	f3bf 8f5b 	dmb	ish
 8014084:	4770      	bx	lr
 8014086:	bf00      	nop
 8014088:	2000041c 	.word	0x2000041c

0801408c <abort>:
 801408c:	b508      	push	{r3, lr}
 801408e:	2006      	movs	r0, #6
 8014090:	f000 fe96 	bl	8014dc0 <raise>
 8014094:	2001      	movs	r0, #1
 8014096:	f7fb fb81 	bl	800f79c <_exit>
	...

0801409c <malloc>:
 801409c:	4b02      	ldr	r3, [pc, #8]	; (80140a8 <malloc+0xc>)
 801409e:	4601      	mov	r1, r0
 80140a0:	6818      	ldr	r0, [r3, #0]
 80140a2:	f000 b82b 	b.w	80140fc <_malloc_r>
 80140a6:	bf00      	nop
 80140a8:	2000006c 	.word	0x2000006c

080140ac <free>:
 80140ac:	4b02      	ldr	r3, [pc, #8]	; (80140b8 <free+0xc>)
 80140ae:	4601      	mov	r1, r0
 80140b0:	6818      	ldr	r0, [r3, #0]
 80140b2:	f001 bdb3 	b.w	8015c1c <_free_r>
 80140b6:	bf00      	nop
 80140b8:	2000006c 	.word	0x2000006c

080140bc <sbrk_aligned>:
 80140bc:	b570      	push	{r4, r5, r6, lr}
 80140be:	4e0e      	ldr	r6, [pc, #56]	; (80140f8 <sbrk_aligned+0x3c>)
 80140c0:	460c      	mov	r4, r1
 80140c2:	6831      	ldr	r1, [r6, #0]
 80140c4:	4605      	mov	r5, r0
 80140c6:	b911      	cbnz	r1, 80140ce <sbrk_aligned+0x12>
 80140c8:	f000 fece 	bl	8014e68 <_sbrk_r>
 80140cc:	6030      	str	r0, [r6, #0]
 80140ce:	4621      	mov	r1, r4
 80140d0:	4628      	mov	r0, r5
 80140d2:	f000 fec9 	bl	8014e68 <_sbrk_r>
 80140d6:	1c43      	adds	r3, r0, #1
 80140d8:	d00a      	beq.n	80140f0 <sbrk_aligned+0x34>
 80140da:	1cc4      	adds	r4, r0, #3
 80140dc:	f024 0403 	bic.w	r4, r4, #3
 80140e0:	42a0      	cmp	r0, r4
 80140e2:	d007      	beq.n	80140f4 <sbrk_aligned+0x38>
 80140e4:	1a21      	subs	r1, r4, r0
 80140e6:	4628      	mov	r0, r5
 80140e8:	f000 febe 	bl	8014e68 <_sbrk_r>
 80140ec:	3001      	adds	r0, #1
 80140ee:	d101      	bne.n	80140f4 <sbrk_aligned+0x38>
 80140f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80140f4:	4620      	mov	r0, r4
 80140f6:	bd70      	pop	{r4, r5, r6, pc}
 80140f8:	20000424 	.word	0x20000424

080140fc <_malloc_r>:
 80140fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014100:	1ccd      	adds	r5, r1, #3
 8014102:	f025 0503 	bic.w	r5, r5, #3
 8014106:	3508      	adds	r5, #8
 8014108:	2d0c      	cmp	r5, #12
 801410a:	bf38      	it	cc
 801410c:	250c      	movcc	r5, #12
 801410e:	2d00      	cmp	r5, #0
 8014110:	4607      	mov	r7, r0
 8014112:	db01      	blt.n	8014118 <_malloc_r+0x1c>
 8014114:	42a9      	cmp	r1, r5
 8014116:	d905      	bls.n	8014124 <_malloc_r+0x28>
 8014118:	230c      	movs	r3, #12
 801411a:	603b      	str	r3, [r7, #0]
 801411c:	2600      	movs	r6, #0
 801411e:	4630      	mov	r0, r6
 8014120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014124:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80141f8 <_malloc_r+0xfc>
 8014128:	f000 f868 	bl	80141fc <__malloc_lock>
 801412c:	f8d8 3000 	ldr.w	r3, [r8]
 8014130:	461c      	mov	r4, r3
 8014132:	bb5c      	cbnz	r4, 801418c <_malloc_r+0x90>
 8014134:	4629      	mov	r1, r5
 8014136:	4638      	mov	r0, r7
 8014138:	f7ff ffc0 	bl	80140bc <sbrk_aligned>
 801413c:	1c43      	adds	r3, r0, #1
 801413e:	4604      	mov	r4, r0
 8014140:	d155      	bne.n	80141ee <_malloc_r+0xf2>
 8014142:	f8d8 4000 	ldr.w	r4, [r8]
 8014146:	4626      	mov	r6, r4
 8014148:	2e00      	cmp	r6, #0
 801414a:	d145      	bne.n	80141d8 <_malloc_r+0xdc>
 801414c:	2c00      	cmp	r4, #0
 801414e:	d048      	beq.n	80141e2 <_malloc_r+0xe6>
 8014150:	6823      	ldr	r3, [r4, #0]
 8014152:	4631      	mov	r1, r6
 8014154:	4638      	mov	r0, r7
 8014156:	eb04 0903 	add.w	r9, r4, r3
 801415a:	f000 fe85 	bl	8014e68 <_sbrk_r>
 801415e:	4581      	cmp	r9, r0
 8014160:	d13f      	bne.n	80141e2 <_malloc_r+0xe6>
 8014162:	6821      	ldr	r1, [r4, #0]
 8014164:	1a6d      	subs	r5, r5, r1
 8014166:	4629      	mov	r1, r5
 8014168:	4638      	mov	r0, r7
 801416a:	f7ff ffa7 	bl	80140bc <sbrk_aligned>
 801416e:	3001      	adds	r0, #1
 8014170:	d037      	beq.n	80141e2 <_malloc_r+0xe6>
 8014172:	6823      	ldr	r3, [r4, #0]
 8014174:	442b      	add	r3, r5
 8014176:	6023      	str	r3, [r4, #0]
 8014178:	f8d8 3000 	ldr.w	r3, [r8]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d038      	beq.n	80141f2 <_malloc_r+0xf6>
 8014180:	685a      	ldr	r2, [r3, #4]
 8014182:	42a2      	cmp	r2, r4
 8014184:	d12b      	bne.n	80141de <_malloc_r+0xe2>
 8014186:	2200      	movs	r2, #0
 8014188:	605a      	str	r2, [r3, #4]
 801418a:	e00f      	b.n	80141ac <_malloc_r+0xb0>
 801418c:	6822      	ldr	r2, [r4, #0]
 801418e:	1b52      	subs	r2, r2, r5
 8014190:	d41f      	bmi.n	80141d2 <_malloc_r+0xd6>
 8014192:	2a0b      	cmp	r2, #11
 8014194:	d917      	bls.n	80141c6 <_malloc_r+0xca>
 8014196:	1961      	adds	r1, r4, r5
 8014198:	42a3      	cmp	r3, r4
 801419a:	6025      	str	r5, [r4, #0]
 801419c:	bf18      	it	ne
 801419e:	6059      	strne	r1, [r3, #4]
 80141a0:	6863      	ldr	r3, [r4, #4]
 80141a2:	bf08      	it	eq
 80141a4:	f8c8 1000 	streq.w	r1, [r8]
 80141a8:	5162      	str	r2, [r4, r5]
 80141aa:	604b      	str	r3, [r1, #4]
 80141ac:	4638      	mov	r0, r7
 80141ae:	f104 060b 	add.w	r6, r4, #11
 80141b2:	f000 f829 	bl	8014208 <__malloc_unlock>
 80141b6:	f026 0607 	bic.w	r6, r6, #7
 80141ba:	1d23      	adds	r3, r4, #4
 80141bc:	1af2      	subs	r2, r6, r3
 80141be:	d0ae      	beq.n	801411e <_malloc_r+0x22>
 80141c0:	1b9b      	subs	r3, r3, r6
 80141c2:	50a3      	str	r3, [r4, r2]
 80141c4:	e7ab      	b.n	801411e <_malloc_r+0x22>
 80141c6:	42a3      	cmp	r3, r4
 80141c8:	6862      	ldr	r2, [r4, #4]
 80141ca:	d1dd      	bne.n	8014188 <_malloc_r+0x8c>
 80141cc:	f8c8 2000 	str.w	r2, [r8]
 80141d0:	e7ec      	b.n	80141ac <_malloc_r+0xb0>
 80141d2:	4623      	mov	r3, r4
 80141d4:	6864      	ldr	r4, [r4, #4]
 80141d6:	e7ac      	b.n	8014132 <_malloc_r+0x36>
 80141d8:	4634      	mov	r4, r6
 80141da:	6876      	ldr	r6, [r6, #4]
 80141dc:	e7b4      	b.n	8014148 <_malloc_r+0x4c>
 80141de:	4613      	mov	r3, r2
 80141e0:	e7cc      	b.n	801417c <_malloc_r+0x80>
 80141e2:	230c      	movs	r3, #12
 80141e4:	603b      	str	r3, [r7, #0]
 80141e6:	4638      	mov	r0, r7
 80141e8:	f000 f80e 	bl	8014208 <__malloc_unlock>
 80141ec:	e797      	b.n	801411e <_malloc_r+0x22>
 80141ee:	6025      	str	r5, [r4, #0]
 80141f0:	e7dc      	b.n	80141ac <_malloc_r+0xb0>
 80141f2:	605b      	str	r3, [r3, #4]
 80141f4:	deff      	udf	#255	; 0xff
 80141f6:	bf00      	nop
 80141f8:	20000420 	.word	0x20000420

080141fc <__malloc_lock>:
 80141fc:	4801      	ldr	r0, [pc, #4]	; (8014204 <__malloc_lock+0x8>)
 80141fe:	f000 be80 	b.w	8014f02 <__retarget_lock_acquire_recursive>
 8014202:	bf00      	nop
 8014204:	20000568 	.word	0x20000568

08014208 <__malloc_unlock>:
 8014208:	4801      	ldr	r0, [pc, #4]	; (8014210 <__malloc_unlock+0x8>)
 801420a:	f000 be7b 	b.w	8014f04 <__retarget_lock_release_recursive>
 801420e:	bf00      	nop
 8014210:	20000568 	.word	0x20000568

08014214 <__cvt>:
 8014214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014218:	ec55 4b10 	vmov	r4, r5, d0
 801421c:	2d00      	cmp	r5, #0
 801421e:	460e      	mov	r6, r1
 8014220:	4619      	mov	r1, r3
 8014222:	462b      	mov	r3, r5
 8014224:	bfbb      	ittet	lt
 8014226:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801422a:	461d      	movlt	r5, r3
 801422c:	2300      	movge	r3, #0
 801422e:	232d      	movlt	r3, #45	; 0x2d
 8014230:	700b      	strb	r3, [r1, #0]
 8014232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014234:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014238:	4691      	mov	r9, r2
 801423a:	f023 0820 	bic.w	r8, r3, #32
 801423e:	bfbc      	itt	lt
 8014240:	4622      	movlt	r2, r4
 8014242:	4614      	movlt	r4, r2
 8014244:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014248:	d005      	beq.n	8014256 <__cvt+0x42>
 801424a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801424e:	d100      	bne.n	8014252 <__cvt+0x3e>
 8014250:	3601      	adds	r6, #1
 8014252:	2102      	movs	r1, #2
 8014254:	e000      	b.n	8014258 <__cvt+0x44>
 8014256:	2103      	movs	r1, #3
 8014258:	ab03      	add	r3, sp, #12
 801425a:	9301      	str	r3, [sp, #4]
 801425c:	ab02      	add	r3, sp, #8
 801425e:	9300      	str	r3, [sp, #0]
 8014260:	ec45 4b10 	vmov	d0, r4, r5
 8014264:	4653      	mov	r3, sl
 8014266:	4632      	mov	r2, r6
 8014268:	f000 fee6 	bl	8015038 <_dtoa_r>
 801426c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014270:	4607      	mov	r7, r0
 8014272:	d102      	bne.n	801427a <__cvt+0x66>
 8014274:	f019 0f01 	tst.w	r9, #1
 8014278:	d022      	beq.n	80142c0 <__cvt+0xac>
 801427a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801427e:	eb07 0906 	add.w	r9, r7, r6
 8014282:	d110      	bne.n	80142a6 <__cvt+0x92>
 8014284:	783b      	ldrb	r3, [r7, #0]
 8014286:	2b30      	cmp	r3, #48	; 0x30
 8014288:	d10a      	bne.n	80142a0 <__cvt+0x8c>
 801428a:	2200      	movs	r2, #0
 801428c:	2300      	movs	r3, #0
 801428e:	4620      	mov	r0, r4
 8014290:	4629      	mov	r1, r5
 8014292:	f7ec fc49 	bl	8000b28 <__aeabi_dcmpeq>
 8014296:	b918      	cbnz	r0, 80142a0 <__cvt+0x8c>
 8014298:	f1c6 0601 	rsb	r6, r6, #1
 801429c:	f8ca 6000 	str.w	r6, [sl]
 80142a0:	f8da 3000 	ldr.w	r3, [sl]
 80142a4:	4499      	add	r9, r3
 80142a6:	2200      	movs	r2, #0
 80142a8:	2300      	movs	r3, #0
 80142aa:	4620      	mov	r0, r4
 80142ac:	4629      	mov	r1, r5
 80142ae:	f7ec fc3b 	bl	8000b28 <__aeabi_dcmpeq>
 80142b2:	b108      	cbz	r0, 80142b8 <__cvt+0xa4>
 80142b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80142b8:	2230      	movs	r2, #48	; 0x30
 80142ba:	9b03      	ldr	r3, [sp, #12]
 80142bc:	454b      	cmp	r3, r9
 80142be:	d307      	bcc.n	80142d0 <__cvt+0xbc>
 80142c0:	9b03      	ldr	r3, [sp, #12]
 80142c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80142c4:	1bdb      	subs	r3, r3, r7
 80142c6:	4638      	mov	r0, r7
 80142c8:	6013      	str	r3, [r2, #0]
 80142ca:	b004      	add	sp, #16
 80142cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142d0:	1c59      	adds	r1, r3, #1
 80142d2:	9103      	str	r1, [sp, #12]
 80142d4:	701a      	strb	r2, [r3, #0]
 80142d6:	e7f0      	b.n	80142ba <__cvt+0xa6>

080142d8 <__exponent>:
 80142d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142da:	4603      	mov	r3, r0
 80142dc:	2900      	cmp	r1, #0
 80142de:	bfb8      	it	lt
 80142e0:	4249      	neglt	r1, r1
 80142e2:	f803 2b02 	strb.w	r2, [r3], #2
 80142e6:	bfb4      	ite	lt
 80142e8:	222d      	movlt	r2, #45	; 0x2d
 80142ea:	222b      	movge	r2, #43	; 0x2b
 80142ec:	2909      	cmp	r1, #9
 80142ee:	7042      	strb	r2, [r0, #1]
 80142f0:	dd2a      	ble.n	8014348 <__exponent+0x70>
 80142f2:	f10d 0207 	add.w	r2, sp, #7
 80142f6:	4617      	mov	r7, r2
 80142f8:	260a      	movs	r6, #10
 80142fa:	4694      	mov	ip, r2
 80142fc:	fb91 f5f6 	sdiv	r5, r1, r6
 8014300:	fb06 1415 	mls	r4, r6, r5, r1
 8014304:	3430      	adds	r4, #48	; 0x30
 8014306:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801430a:	460c      	mov	r4, r1
 801430c:	2c63      	cmp	r4, #99	; 0x63
 801430e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8014312:	4629      	mov	r1, r5
 8014314:	dcf1      	bgt.n	80142fa <__exponent+0x22>
 8014316:	3130      	adds	r1, #48	; 0x30
 8014318:	f1ac 0402 	sub.w	r4, ip, #2
 801431c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014320:	1c41      	adds	r1, r0, #1
 8014322:	4622      	mov	r2, r4
 8014324:	42ba      	cmp	r2, r7
 8014326:	d30a      	bcc.n	801433e <__exponent+0x66>
 8014328:	f10d 0209 	add.w	r2, sp, #9
 801432c:	eba2 020c 	sub.w	r2, r2, ip
 8014330:	42bc      	cmp	r4, r7
 8014332:	bf88      	it	hi
 8014334:	2200      	movhi	r2, #0
 8014336:	4413      	add	r3, r2
 8014338:	1a18      	subs	r0, r3, r0
 801433a:	b003      	add	sp, #12
 801433c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801433e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014342:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014346:	e7ed      	b.n	8014324 <__exponent+0x4c>
 8014348:	2330      	movs	r3, #48	; 0x30
 801434a:	3130      	adds	r1, #48	; 0x30
 801434c:	7083      	strb	r3, [r0, #2]
 801434e:	70c1      	strb	r1, [r0, #3]
 8014350:	1d03      	adds	r3, r0, #4
 8014352:	e7f1      	b.n	8014338 <__exponent+0x60>

08014354 <_printf_float>:
 8014354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014358:	ed2d 8b02 	vpush	{d8}
 801435c:	b08d      	sub	sp, #52	; 0x34
 801435e:	460c      	mov	r4, r1
 8014360:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014364:	4616      	mov	r6, r2
 8014366:	461f      	mov	r7, r3
 8014368:	4605      	mov	r5, r0
 801436a:	f000 fd31 	bl	8014dd0 <_localeconv_r>
 801436e:	f8d0 a000 	ldr.w	sl, [r0]
 8014372:	4650      	mov	r0, sl
 8014374:	f7eb ffac 	bl	80002d0 <strlen>
 8014378:	2300      	movs	r3, #0
 801437a:	930a      	str	r3, [sp, #40]	; 0x28
 801437c:	6823      	ldr	r3, [r4, #0]
 801437e:	9305      	str	r3, [sp, #20]
 8014380:	f8d8 3000 	ldr.w	r3, [r8]
 8014384:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014388:	3307      	adds	r3, #7
 801438a:	f023 0307 	bic.w	r3, r3, #7
 801438e:	f103 0208 	add.w	r2, r3, #8
 8014392:	f8c8 2000 	str.w	r2, [r8]
 8014396:	e9d3 8900 	ldrd	r8, r9, [r3]
 801439a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801439e:	9307      	str	r3, [sp, #28]
 80143a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80143a4:	ee08 0a10 	vmov	s16, r0
 80143a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80143ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143b0:	4b9e      	ldr	r3, [pc, #632]	; (801462c <_printf_float+0x2d8>)
 80143b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80143b6:	f7ec fbe9 	bl	8000b8c <__aeabi_dcmpun>
 80143ba:	bb88      	cbnz	r0, 8014420 <_printf_float+0xcc>
 80143bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143c0:	4b9a      	ldr	r3, [pc, #616]	; (801462c <_printf_float+0x2d8>)
 80143c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80143c6:	f7ec fbc3 	bl	8000b50 <__aeabi_dcmple>
 80143ca:	bb48      	cbnz	r0, 8014420 <_printf_float+0xcc>
 80143cc:	2200      	movs	r2, #0
 80143ce:	2300      	movs	r3, #0
 80143d0:	4640      	mov	r0, r8
 80143d2:	4649      	mov	r1, r9
 80143d4:	f7ec fbb2 	bl	8000b3c <__aeabi_dcmplt>
 80143d8:	b110      	cbz	r0, 80143e0 <_printf_float+0x8c>
 80143da:	232d      	movs	r3, #45	; 0x2d
 80143dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80143e0:	4a93      	ldr	r2, [pc, #588]	; (8014630 <_printf_float+0x2dc>)
 80143e2:	4b94      	ldr	r3, [pc, #592]	; (8014634 <_printf_float+0x2e0>)
 80143e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80143e8:	bf94      	ite	ls
 80143ea:	4690      	movls	r8, r2
 80143ec:	4698      	movhi	r8, r3
 80143ee:	2303      	movs	r3, #3
 80143f0:	6123      	str	r3, [r4, #16]
 80143f2:	9b05      	ldr	r3, [sp, #20]
 80143f4:	f023 0304 	bic.w	r3, r3, #4
 80143f8:	6023      	str	r3, [r4, #0]
 80143fa:	f04f 0900 	mov.w	r9, #0
 80143fe:	9700      	str	r7, [sp, #0]
 8014400:	4633      	mov	r3, r6
 8014402:	aa0b      	add	r2, sp, #44	; 0x2c
 8014404:	4621      	mov	r1, r4
 8014406:	4628      	mov	r0, r5
 8014408:	f000 f9da 	bl	80147c0 <_printf_common>
 801440c:	3001      	adds	r0, #1
 801440e:	f040 8090 	bne.w	8014532 <_printf_float+0x1de>
 8014412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014416:	b00d      	add	sp, #52	; 0x34
 8014418:	ecbd 8b02 	vpop	{d8}
 801441c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014420:	4642      	mov	r2, r8
 8014422:	464b      	mov	r3, r9
 8014424:	4640      	mov	r0, r8
 8014426:	4649      	mov	r1, r9
 8014428:	f7ec fbb0 	bl	8000b8c <__aeabi_dcmpun>
 801442c:	b140      	cbz	r0, 8014440 <_printf_float+0xec>
 801442e:	464b      	mov	r3, r9
 8014430:	2b00      	cmp	r3, #0
 8014432:	bfbc      	itt	lt
 8014434:	232d      	movlt	r3, #45	; 0x2d
 8014436:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801443a:	4a7f      	ldr	r2, [pc, #508]	; (8014638 <_printf_float+0x2e4>)
 801443c:	4b7f      	ldr	r3, [pc, #508]	; (801463c <_printf_float+0x2e8>)
 801443e:	e7d1      	b.n	80143e4 <_printf_float+0x90>
 8014440:	6863      	ldr	r3, [r4, #4]
 8014442:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014446:	9206      	str	r2, [sp, #24]
 8014448:	1c5a      	adds	r2, r3, #1
 801444a:	d13f      	bne.n	80144cc <_printf_float+0x178>
 801444c:	2306      	movs	r3, #6
 801444e:	6063      	str	r3, [r4, #4]
 8014450:	9b05      	ldr	r3, [sp, #20]
 8014452:	6861      	ldr	r1, [r4, #4]
 8014454:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014458:	2300      	movs	r3, #0
 801445a:	9303      	str	r3, [sp, #12]
 801445c:	ab0a      	add	r3, sp, #40	; 0x28
 801445e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014462:	ab09      	add	r3, sp, #36	; 0x24
 8014464:	ec49 8b10 	vmov	d0, r8, r9
 8014468:	9300      	str	r3, [sp, #0]
 801446a:	6022      	str	r2, [r4, #0]
 801446c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014470:	4628      	mov	r0, r5
 8014472:	f7ff fecf 	bl	8014214 <__cvt>
 8014476:	9b06      	ldr	r3, [sp, #24]
 8014478:	9909      	ldr	r1, [sp, #36]	; 0x24
 801447a:	2b47      	cmp	r3, #71	; 0x47
 801447c:	4680      	mov	r8, r0
 801447e:	d108      	bne.n	8014492 <_printf_float+0x13e>
 8014480:	1cc8      	adds	r0, r1, #3
 8014482:	db02      	blt.n	801448a <_printf_float+0x136>
 8014484:	6863      	ldr	r3, [r4, #4]
 8014486:	4299      	cmp	r1, r3
 8014488:	dd41      	ble.n	801450e <_printf_float+0x1ba>
 801448a:	f1ab 0302 	sub.w	r3, fp, #2
 801448e:	fa5f fb83 	uxtb.w	fp, r3
 8014492:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014496:	d820      	bhi.n	80144da <_printf_float+0x186>
 8014498:	3901      	subs	r1, #1
 801449a:	465a      	mov	r2, fp
 801449c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80144a0:	9109      	str	r1, [sp, #36]	; 0x24
 80144a2:	f7ff ff19 	bl	80142d8 <__exponent>
 80144a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144a8:	1813      	adds	r3, r2, r0
 80144aa:	2a01      	cmp	r2, #1
 80144ac:	4681      	mov	r9, r0
 80144ae:	6123      	str	r3, [r4, #16]
 80144b0:	dc02      	bgt.n	80144b8 <_printf_float+0x164>
 80144b2:	6822      	ldr	r2, [r4, #0]
 80144b4:	07d2      	lsls	r2, r2, #31
 80144b6:	d501      	bpl.n	80144bc <_printf_float+0x168>
 80144b8:	3301      	adds	r3, #1
 80144ba:	6123      	str	r3, [r4, #16]
 80144bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d09c      	beq.n	80143fe <_printf_float+0xaa>
 80144c4:	232d      	movs	r3, #45	; 0x2d
 80144c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144ca:	e798      	b.n	80143fe <_printf_float+0xaa>
 80144cc:	9a06      	ldr	r2, [sp, #24]
 80144ce:	2a47      	cmp	r2, #71	; 0x47
 80144d0:	d1be      	bne.n	8014450 <_printf_float+0xfc>
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d1bc      	bne.n	8014450 <_printf_float+0xfc>
 80144d6:	2301      	movs	r3, #1
 80144d8:	e7b9      	b.n	801444e <_printf_float+0xfa>
 80144da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80144de:	d118      	bne.n	8014512 <_printf_float+0x1be>
 80144e0:	2900      	cmp	r1, #0
 80144e2:	6863      	ldr	r3, [r4, #4]
 80144e4:	dd0b      	ble.n	80144fe <_printf_float+0x1aa>
 80144e6:	6121      	str	r1, [r4, #16]
 80144e8:	b913      	cbnz	r3, 80144f0 <_printf_float+0x19c>
 80144ea:	6822      	ldr	r2, [r4, #0]
 80144ec:	07d0      	lsls	r0, r2, #31
 80144ee:	d502      	bpl.n	80144f6 <_printf_float+0x1a2>
 80144f0:	3301      	adds	r3, #1
 80144f2:	440b      	add	r3, r1
 80144f4:	6123      	str	r3, [r4, #16]
 80144f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80144f8:	f04f 0900 	mov.w	r9, #0
 80144fc:	e7de      	b.n	80144bc <_printf_float+0x168>
 80144fe:	b913      	cbnz	r3, 8014506 <_printf_float+0x1b2>
 8014500:	6822      	ldr	r2, [r4, #0]
 8014502:	07d2      	lsls	r2, r2, #31
 8014504:	d501      	bpl.n	801450a <_printf_float+0x1b6>
 8014506:	3302      	adds	r3, #2
 8014508:	e7f4      	b.n	80144f4 <_printf_float+0x1a0>
 801450a:	2301      	movs	r3, #1
 801450c:	e7f2      	b.n	80144f4 <_printf_float+0x1a0>
 801450e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014514:	4299      	cmp	r1, r3
 8014516:	db05      	blt.n	8014524 <_printf_float+0x1d0>
 8014518:	6823      	ldr	r3, [r4, #0]
 801451a:	6121      	str	r1, [r4, #16]
 801451c:	07d8      	lsls	r0, r3, #31
 801451e:	d5ea      	bpl.n	80144f6 <_printf_float+0x1a2>
 8014520:	1c4b      	adds	r3, r1, #1
 8014522:	e7e7      	b.n	80144f4 <_printf_float+0x1a0>
 8014524:	2900      	cmp	r1, #0
 8014526:	bfd4      	ite	le
 8014528:	f1c1 0202 	rsble	r2, r1, #2
 801452c:	2201      	movgt	r2, #1
 801452e:	4413      	add	r3, r2
 8014530:	e7e0      	b.n	80144f4 <_printf_float+0x1a0>
 8014532:	6823      	ldr	r3, [r4, #0]
 8014534:	055a      	lsls	r2, r3, #21
 8014536:	d407      	bmi.n	8014548 <_printf_float+0x1f4>
 8014538:	6923      	ldr	r3, [r4, #16]
 801453a:	4642      	mov	r2, r8
 801453c:	4631      	mov	r1, r6
 801453e:	4628      	mov	r0, r5
 8014540:	47b8      	blx	r7
 8014542:	3001      	adds	r0, #1
 8014544:	d12c      	bne.n	80145a0 <_printf_float+0x24c>
 8014546:	e764      	b.n	8014412 <_printf_float+0xbe>
 8014548:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801454c:	f240 80e0 	bls.w	8014710 <_printf_float+0x3bc>
 8014550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014554:	2200      	movs	r2, #0
 8014556:	2300      	movs	r3, #0
 8014558:	f7ec fae6 	bl	8000b28 <__aeabi_dcmpeq>
 801455c:	2800      	cmp	r0, #0
 801455e:	d034      	beq.n	80145ca <_printf_float+0x276>
 8014560:	4a37      	ldr	r2, [pc, #220]	; (8014640 <_printf_float+0x2ec>)
 8014562:	2301      	movs	r3, #1
 8014564:	4631      	mov	r1, r6
 8014566:	4628      	mov	r0, r5
 8014568:	47b8      	blx	r7
 801456a:	3001      	adds	r0, #1
 801456c:	f43f af51 	beq.w	8014412 <_printf_float+0xbe>
 8014570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014574:	429a      	cmp	r2, r3
 8014576:	db02      	blt.n	801457e <_printf_float+0x22a>
 8014578:	6823      	ldr	r3, [r4, #0]
 801457a:	07d8      	lsls	r0, r3, #31
 801457c:	d510      	bpl.n	80145a0 <_printf_float+0x24c>
 801457e:	ee18 3a10 	vmov	r3, s16
 8014582:	4652      	mov	r2, sl
 8014584:	4631      	mov	r1, r6
 8014586:	4628      	mov	r0, r5
 8014588:	47b8      	blx	r7
 801458a:	3001      	adds	r0, #1
 801458c:	f43f af41 	beq.w	8014412 <_printf_float+0xbe>
 8014590:	f04f 0800 	mov.w	r8, #0
 8014594:	f104 091a 	add.w	r9, r4, #26
 8014598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801459a:	3b01      	subs	r3, #1
 801459c:	4543      	cmp	r3, r8
 801459e:	dc09      	bgt.n	80145b4 <_printf_float+0x260>
 80145a0:	6823      	ldr	r3, [r4, #0]
 80145a2:	079b      	lsls	r3, r3, #30
 80145a4:	f100 8107 	bmi.w	80147b6 <_printf_float+0x462>
 80145a8:	68e0      	ldr	r0, [r4, #12]
 80145aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145ac:	4298      	cmp	r0, r3
 80145ae:	bfb8      	it	lt
 80145b0:	4618      	movlt	r0, r3
 80145b2:	e730      	b.n	8014416 <_printf_float+0xc2>
 80145b4:	2301      	movs	r3, #1
 80145b6:	464a      	mov	r2, r9
 80145b8:	4631      	mov	r1, r6
 80145ba:	4628      	mov	r0, r5
 80145bc:	47b8      	blx	r7
 80145be:	3001      	adds	r0, #1
 80145c0:	f43f af27 	beq.w	8014412 <_printf_float+0xbe>
 80145c4:	f108 0801 	add.w	r8, r8, #1
 80145c8:	e7e6      	b.n	8014598 <_printf_float+0x244>
 80145ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	dc39      	bgt.n	8014644 <_printf_float+0x2f0>
 80145d0:	4a1b      	ldr	r2, [pc, #108]	; (8014640 <_printf_float+0x2ec>)
 80145d2:	2301      	movs	r3, #1
 80145d4:	4631      	mov	r1, r6
 80145d6:	4628      	mov	r0, r5
 80145d8:	47b8      	blx	r7
 80145da:	3001      	adds	r0, #1
 80145dc:	f43f af19 	beq.w	8014412 <_printf_float+0xbe>
 80145e0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80145e4:	4313      	orrs	r3, r2
 80145e6:	d102      	bne.n	80145ee <_printf_float+0x29a>
 80145e8:	6823      	ldr	r3, [r4, #0]
 80145ea:	07d9      	lsls	r1, r3, #31
 80145ec:	d5d8      	bpl.n	80145a0 <_printf_float+0x24c>
 80145ee:	ee18 3a10 	vmov	r3, s16
 80145f2:	4652      	mov	r2, sl
 80145f4:	4631      	mov	r1, r6
 80145f6:	4628      	mov	r0, r5
 80145f8:	47b8      	blx	r7
 80145fa:	3001      	adds	r0, #1
 80145fc:	f43f af09 	beq.w	8014412 <_printf_float+0xbe>
 8014600:	f04f 0900 	mov.w	r9, #0
 8014604:	f104 0a1a 	add.w	sl, r4, #26
 8014608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801460a:	425b      	negs	r3, r3
 801460c:	454b      	cmp	r3, r9
 801460e:	dc01      	bgt.n	8014614 <_printf_float+0x2c0>
 8014610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014612:	e792      	b.n	801453a <_printf_float+0x1e6>
 8014614:	2301      	movs	r3, #1
 8014616:	4652      	mov	r2, sl
 8014618:	4631      	mov	r1, r6
 801461a:	4628      	mov	r0, r5
 801461c:	47b8      	blx	r7
 801461e:	3001      	adds	r0, #1
 8014620:	f43f aef7 	beq.w	8014412 <_printf_float+0xbe>
 8014624:	f109 0901 	add.w	r9, r9, #1
 8014628:	e7ee      	b.n	8014608 <_printf_float+0x2b4>
 801462a:	bf00      	nop
 801462c:	7fefffff 	.word	0x7fefffff
 8014630:	0801879b 	.word	0x0801879b
 8014634:	0801879f 	.word	0x0801879f
 8014638:	080187a3 	.word	0x080187a3
 801463c:	080187a7 	.word	0x080187a7
 8014640:	080187ab 	.word	0x080187ab
 8014644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014648:	429a      	cmp	r2, r3
 801464a:	bfa8      	it	ge
 801464c:	461a      	movge	r2, r3
 801464e:	2a00      	cmp	r2, #0
 8014650:	4691      	mov	r9, r2
 8014652:	dc37      	bgt.n	80146c4 <_printf_float+0x370>
 8014654:	f04f 0b00 	mov.w	fp, #0
 8014658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801465c:	f104 021a 	add.w	r2, r4, #26
 8014660:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014662:	9305      	str	r3, [sp, #20]
 8014664:	eba3 0309 	sub.w	r3, r3, r9
 8014668:	455b      	cmp	r3, fp
 801466a:	dc33      	bgt.n	80146d4 <_printf_float+0x380>
 801466c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014670:	429a      	cmp	r2, r3
 8014672:	db3b      	blt.n	80146ec <_printf_float+0x398>
 8014674:	6823      	ldr	r3, [r4, #0]
 8014676:	07da      	lsls	r2, r3, #31
 8014678:	d438      	bmi.n	80146ec <_printf_float+0x398>
 801467a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801467e:	eba2 0903 	sub.w	r9, r2, r3
 8014682:	9b05      	ldr	r3, [sp, #20]
 8014684:	1ad2      	subs	r2, r2, r3
 8014686:	4591      	cmp	r9, r2
 8014688:	bfa8      	it	ge
 801468a:	4691      	movge	r9, r2
 801468c:	f1b9 0f00 	cmp.w	r9, #0
 8014690:	dc35      	bgt.n	80146fe <_printf_float+0x3aa>
 8014692:	f04f 0800 	mov.w	r8, #0
 8014696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801469a:	f104 0a1a 	add.w	sl, r4, #26
 801469e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80146a2:	1a9b      	subs	r3, r3, r2
 80146a4:	eba3 0309 	sub.w	r3, r3, r9
 80146a8:	4543      	cmp	r3, r8
 80146aa:	f77f af79 	ble.w	80145a0 <_printf_float+0x24c>
 80146ae:	2301      	movs	r3, #1
 80146b0:	4652      	mov	r2, sl
 80146b2:	4631      	mov	r1, r6
 80146b4:	4628      	mov	r0, r5
 80146b6:	47b8      	blx	r7
 80146b8:	3001      	adds	r0, #1
 80146ba:	f43f aeaa 	beq.w	8014412 <_printf_float+0xbe>
 80146be:	f108 0801 	add.w	r8, r8, #1
 80146c2:	e7ec      	b.n	801469e <_printf_float+0x34a>
 80146c4:	4613      	mov	r3, r2
 80146c6:	4631      	mov	r1, r6
 80146c8:	4642      	mov	r2, r8
 80146ca:	4628      	mov	r0, r5
 80146cc:	47b8      	blx	r7
 80146ce:	3001      	adds	r0, #1
 80146d0:	d1c0      	bne.n	8014654 <_printf_float+0x300>
 80146d2:	e69e      	b.n	8014412 <_printf_float+0xbe>
 80146d4:	2301      	movs	r3, #1
 80146d6:	4631      	mov	r1, r6
 80146d8:	4628      	mov	r0, r5
 80146da:	9205      	str	r2, [sp, #20]
 80146dc:	47b8      	blx	r7
 80146de:	3001      	adds	r0, #1
 80146e0:	f43f ae97 	beq.w	8014412 <_printf_float+0xbe>
 80146e4:	9a05      	ldr	r2, [sp, #20]
 80146e6:	f10b 0b01 	add.w	fp, fp, #1
 80146ea:	e7b9      	b.n	8014660 <_printf_float+0x30c>
 80146ec:	ee18 3a10 	vmov	r3, s16
 80146f0:	4652      	mov	r2, sl
 80146f2:	4631      	mov	r1, r6
 80146f4:	4628      	mov	r0, r5
 80146f6:	47b8      	blx	r7
 80146f8:	3001      	adds	r0, #1
 80146fa:	d1be      	bne.n	801467a <_printf_float+0x326>
 80146fc:	e689      	b.n	8014412 <_printf_float+0xbe>
 80146fe:	9a05      	ldr	r2, [sp, #20]
 8014700:	464b      	mov	r3, r9
 8014702:	4442      	add	r2, r8
 8014704:	4631      	mov	r1, r6
 8014706:	4628      	mov	r0, r5
 8014708:	47b8      	blx	r7
 801470a:	3001      	adds	r0, #1
 801470c:	d1c1      	bne.n	8014692 <_printf_float+0x33e>
 801470e:	e680      	b.n	8014412 <_printf_float+0xbe>
 8014710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014712:	2a01      	cmp	r2, #1
 8014714:	dc01      	bgt.n	801471a <_printf_float+0x3c6>
 8014716:	07db      	lsls	r3, r3, #31
 8014718:	d53a      	bpl.n	8014790 <_printf_float+0x43c>
 801471a:	2301      	movs	r3, #1
 801471c:	4642      	mov	r2, r8
 801471e:	4631      	mov	r1, r6
 8014720:	4628      	mov	r0, r5
 8014722:	47b8      	blx	r7
 8014724:	3001      	adds	r0, #1
 8014726:	f43f ae74 	beq.w	8014412 <_printf_float+0xbe>
 801472a:	ee18 3a10 	vmov	r3, s16
 801472e:	4652      	mov	r2, sl
 8014730:	4631      	mov	r1, r6
 8014732:	4628      	mov	r0, r5
 8014734:	47b8      	blx	r7
 8014736:	3001      	adds	r0, #1
 8014738:	f43f ae6b 	beq.w	8014412 <_printf_float+0xbe>
 801473c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014740:	2200      	movs	r2, #0
 8014742:	2300      	movs	r3, #0
 8014744:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8014748:	f7ec f9ee 	bl	8000b28 <__aeabi_dcmpeq>
 801474c:	b9d8      	cbnz	r0, 8014786 <_printf_float+0x432>
 801474e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8014752:	f108 0201 	add.w	r2, r8, #1
 8014756:	4631      	mov	r1, r6
 8014758:	4628      	mov	r0, r5
 801475a:	47b8      	blx	r7
 801475c:	3001      	adds	r0, #1
 801475e:	d10e      	bne.n	801477e <_printf_float+0x42a>
 8014760:	e657      	b.n	8014412 <_printf_float+0xbe>
 8014762:	2301      	movs	r3, #1
 8014764:	4652      	mov	r2, sl
 8014766:	4631      	mov	r1, r6
 8014768:	4628      	mov	r0, r5
 801476a:	47b8      	blx	r7
 801476c:	3001      	adds	r0, #1
 801476e:	f43f ae50 	beq.w	8014412 <_printf_float+0xbe>
 8014772:	f108 0801 	add.w	r8, r8, #1
 8014776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014778:	3b01      	subs	r3, #1
 801477a:	4543      	cmp	r3, r8
 801477c:	dcf1      	bgt.n	8014762 <_printf_float+0x40e>
 801477e:	464b      	mov	r3, r9
 8014780:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014784:	e6da      	b.n	801453c <_printf_float+0x1e8>
 8014786:	f04f 0800 	mov.w	r8, #0
 801478a:	f104 0a1a 	add.w	sl, r4, #26
 801478e:	e7f2      	b.n	8014776 <_printf_float+0x422>
 8014790:	2301      	movs	r3, #1
 8014792:	4642      	mov	r2, r8
 8014794:	e7df      	b.n	8014756 <_printf_float+0x402>
 8014796:	2301      	movs	r3, #1
 8014798:	464a      	mov	r2, r9
 801479a:	4631      	mov	r1, r6
 801479c:	4628      	mov	r0, r5
 801479e:	47b8      	blx	r7
 80147a0:	3001      	adds	r0, #1
 80147a2:	f43f ae36 	beq.w	8014412 <_printf_float+0xbe>
 80147a6:	f108 0801 	add.w	r8, r8, #1
 80147aa:	68e3      	ldr	r3, [r4, #12]
 80147ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147ae:	1a5b      	subs	r3, r3, r1
 80147b0:	4543      	cmp	r3, r8
 80147b2:	dcf0      	bgt.n	8014796 <_printf_float+0x442>
 80147b4:	e6f8      	b.n	80145a8 <_printf_float+0x254>
 80147b6:	f04f 0800 	mov.w	r8, #0
 80147ba:	f104 0919 	add.w	r9, r4, #25
 80147be:	e7f4      	b.n	80147aa <_printf_float+0x456>

080147c0 <_printf_common>:
 80147c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147c4:	4616      	mov	r6, r2
 80147c6:	4699      	mov	r9, r3
 80147c8:	688a      	ldr	r2, [r1, #8]
 80147ca:	690b      	ldr	r3, [r1, #16]
 80147cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80147d0:	4293      	cmp	r3, r2
 80147d2:	bfb8      	it	lt
 80147d4:	4613      	movlt	r3, r2
 80147d6:	6033      	str	r3, [r6, #0]
 80147d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80147dc:	4607      	mov	r7, r0
 80147de:	460c      	mov	r4, r1
 80147e0:	b10a      	cbz	r2, 80147e6 <_printf_common+0x26>
 80147e2:	3301      	adds	r3, #1
 80147e4:	6033      	str	r3, [r6, #0]
 80147e6:	6823      	ldr	r3, [r4, #0]
 80147e8:	0699      	lsls	r1, r3, #26
 80147ea:	bf42      	ittt	mi
 80147ec:	6833      	ldrmi	r3, [r6, #0]
 80147ee:	3302      	addmi	r3, #2
 80147f0:	6033      	strmi	r3, [r6, #0]
 80147f2:	6825      	ldr	r5, [r4, #0]
 80147f4:	f015 0506 	ands.w	r5, r5, #6
 80147f8:	d106      	bne.n	8014808 <_printf_common+0x48>
 80147fa:	f104 0a19 	add.w	sl, r4, #25
 80147fe:	68e3      	ldr	r3, [r4, #12]
 8014800:	6832      	ldr	r2, [r6, #0]
 8014802:	1a9b      	subs	r3, r3, r2
 8014804:	42ab      	cmp	r3, r5
 8014806:	dc26      	bgt.n	8014856 <_printf_common+0x96>
 8014808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801480c:	1e13      	subs	r3, r2, #0
 801480e:	6822      	ldr	r2, [r4, #0]
 8014810:	bf18      	it	ne
 8014812:	2301      	movne	r3, #1
 8014814:	0692      	lsls	r2, r2, #26
 8014816:	d42b      	bmi.n	8014870 <_printf_common+0xb0>
 8014818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801481c:	4649      	mov	r1, r9
 801481e:	4638      	mov	r0, r7
 8014820:	47c0      	blx	r8
 8014822:	3001      	adds	r0, #1
 8014824:	d01e      	beq.n	8014864 <_printf_common+0xa4>
 8014826:	6823      	ldr	r3, [r4, #0]
 8014828:	6922      	ldr	r2, [r4, #16]
 801482a:	f003 0306 	and.w	r3, r3, #6
 801482e:	2b04      	cmp	r3, #4
 8014830:	bf02      	ittt	eq
 8014832:	68e5      	ldreq	r5, [r4, #12]
 8014834:	6833      	ldreq	r3, [r6, #0]
 8014836:	1aed      	subeq	r5, r5, r3
 8014838:	68a3      	ldr	r3, [r4, #8]
 801483a:	bf0c      	ite	eq
 801483c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014840:	2500      	movne	r5, #0
 8014842:	4293      	cmp	r3, r2
 8014844:	bfc4      	itt	gt
 8014846:	1a9b      	subgt	r3, r3, r2
 8014848:	18ed      	addgt	r5, r5, r3
 801484a:	2600      	movs	r6, #0
 801484c:	341a      	adds	r4, #26
 801484e:	42b5      	cmp	r5, r6
 8014850:	d11a      	bne.n	8014888 <_printf_common+0xc8>
 8014852:	2000      	movs	r0, #0
 8014854:	e008      	b.n	8014868 <_printf_common+0xa8>
 8014856:	2301      	movs	r3, #1
 8014858:	4652      	mov	r2, sl
 801485a:	4649      	mov	r1, r9
 801485c:	4638      	mov	r0, r7
 801485e:	47c0      	blx	r8
 8014860:	3001      	adds	r0, #1
 8014862:	d103      	bne.n	801486c <_printf_common+0xac>
 8014864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801486c:	3501      	adds	r5, #1
 801486e:	e7c6      	b.n	80147fe <_printf_common+0x3e>
 8014870:	18e1      	adds	r1, r4, r3
 8014872:	1c5a      	adds	r2, r3, #1
 8014874:	2030      	movs	r0, #48	; 0x30
 8014876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801487a:	4422      	add	r2, r4
 801487c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014884:	3302      	adds	r3, #2
 8014886:	e7c7      	b.n	8014818 <_printf_common+0x58>
 8014888:	2301      	movs	r3, #1
 801488a:	4622      	mov	r2, r4
 801488c:	4649      	mov	r1, r9
 801488e:	4638      	mov	r0, r7
 8014890:	47c0      	blx	r8
 8014892:	3001      	adds	r0, #1
 8014894:	d0e6      	beq.n	8014864 <_printf_common+0xa4>
 8014896:	3601      	adds	r6, #1
 8014898:	e7d9      	b.n	801484e <_printf_common+0x8e>
	...

0801489c <_printf_i>:
 801489c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80148a0:	7e0f      	ldrb	r7, [r1, #24]
 80148a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80148a4:	2f78      	cmp	r7, #120	; 0x78
 80148a6:	4691      	mov	r9, r2
 80148a8:	4680      	mov	r8, r0
 80148aa:	460c      	mov	r4, r1
 80148ac:	469a      	mov	sl, r3
 80148ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80148b2:	d807      	bhi.n	80148c4 <_printf_i+0x28>
 80148b4:	2f62      	cmp	r7, #98	; 0x62
 80148b6:	d80a      	bhi.n	80148ce <_printf_i+0x32>
 80148b8:	2f00      	cmp	r7, #0
 80148ba:	f000 80d4 	beq.w	8014a66 <_printf_i+0x1ca>
 80148be:	2f58      	cmp	r7, #88	; 0x58
 80148c0:	f000 80c0 	beq.w	8014a44 <_printf_i+0x1a8>
 80148c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80148c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80148cc:	e03a      	b.n	8014944 <_printf_i+0xa8>
 80148ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80148d2:	2b15      	cmp	r3, #21
 80148d4:	d8f6      	bhi.n	80148c4 <_printf_i+0x28>
 80148d6:	a101      	add	r1, pc, #4	; (adr r1, 80148dc <_printf_i+0x40>)
 80148d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80148dc:	08014935 	.word	0x08014935
 80148e0:	08014949 	.word	0x08014949
 80148e4:	080148c5 	.word	0x080148c5
 80148e8:	080148c5 	.word	0x080148c5
 80148ec:	080148c5 	.word	0x080148c5
 80148f0:	080148c5 	.word	0x080148c5
 80148f4:	08014949 	.word	0x08014949
 80148f8:	080148c5 	.word	0x080148c5
 80148fc:	080148c5 	.word	0x080148c5
 8014900:	080148c5 	.word	0x080148c5
 8014904:	080148c5 	.word	0x080148c5
 8014908:	08014a4d 	.word	0x08014a4d
 801490c:	08014975 	.word	0x08014975
 8014910:	08014a07 	.word	0x08014a07
 8014914:	080148c5 	.word	0x080148c5
 8014918:	080148c5 	.word	0x080148c5
 801491c:	08014a6f 	.word	0x08014a6f
 8014920:	080148c5 	.word	0x080148c5
 8014924:	08014975 	.word	0x08014975
 8014928:	080148c5 	.word	0x080148c5
 801492c:	080148c5 	.word	0x080148c5
 8014930:	08014a0f 	.word	0x08014a0f
 8014934:	682b      	ldr	r3, [r5, #0]
 8014936:	1d1a      	adds	r2, r3, #4
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	602a      	str	r2, [r5, #0]
 801493c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014944:	2301      	movs	r3, #1
 8014946:	e09f      	b.n	8014a88 <_printf_i+0x1ec>
 8014948:	6820      	ldr	r0, [r4, #0]
 801494a:	682b      	ldr	r3, [r5, #0]
 801494c:	0607      	lsls	r7, r0, #24
 801494e:	f103 0104 	add.w	r1, r3, #4
 8014952:	6029      	str	r1, [r5, #0]
 8014954:	d501      	bpl.n	801495a <_printf_i+0xbe>
 8014956:	681e      	ldr	r6, [r3, #0]
 8014958:	e003      	b.n	8014962 <_printf_i+0xc6>
 801495a:	0646      	lsls	r6, r0, #25
 801495c:	d5fb      	bpl.n	8014956 <_printf_i+0xba>
 801495e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014962:	2e00      	cmp	r6, #0
 8014964:	da03      	bge.n	801496e <_printf_i+0xd2>
 8014966:	232d      	movs	r3, #45	; 0x2d
 8014968:	4276      	negs	r6, r6
 801496a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801496e:	485a      	ldr	r0, [pc, #360]	; (8014ad8 <_printf_i+0x23c>)
 8014970:	230a      	movs	r3, #10
 8014972:	e012      	b.n	801499a <_printf_i+0xfe>
 8014974:	682b      	ldr	r3, [r5, #0]
 8014976:	6820      	ldr	r0, [r4, #0]
 8014978:	1d19      	adds	r1, r3, #4
 801497a:	6029      	str	r1, [r5, #0]
 801497c:	0605      	lsls	r5, r0, #24
 801497e:	d501      	bpl.n	8014984 <_printf_i+0xe8>
 8014980:	681e      	ldr	r6, [r3, #0]
 8014982:	e002      	b.n	801498a <_printf_i+0xee>
 8014984:	0641      	lsls	r1, r0, #25
 8014986:	d5fb      	bpl.n	8014980 <_printf_i+0xe4>
 8014988:	881e      	ldrh	r6, [r3, #0]
 801498a:	4853      	ldr	r0, [pc, #332]	; (8014ad8 <_printf_i+0x23c>)
 801498c:	2f6f      	cmp	r7, #111	; 0x6f
 801498e:	bf0c      	ite	eq
 8014990:	2308      	moveq	r3, #8
 8014992:	230a      	movne	r3, #10
 8014994:	2100      	movs	r1, #0
 8014996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801499a:	6865      	ldr	r5, [r4, #4]
 801499c:	60a5      	str	r5, [r4, #8]
 801499e:	2d00      	cmp	r5, #0
 80149a0:	bfa2      	ittt	ge
 80149a2:	6821      	ldrge	r1, [r4, #0]
 80149a4:	f021 0104 	bicge.w	r1, r1, #4
 80149a8:	6021      	strge	r1, [r4, #0]
 80149aa:	b90e      	cbnz	r6, 80149b0 <_printf_i+0x114>
 80149ac:	2d00      	cmp	r5, #0
 80149ae:	d04b      	beq.n	8014a48 <_printf_i+0x1ac>
 80149b0:	4615      	mov	r5, r2
 80149b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80149b6:	fb03 6711 	mls	r7, r3, r1, r6
 80149ba:	5dc7      	ldrb	r7, [r0, r7]
 80149bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80149c0:	4637      	mov	r7, r6
 80149c2:	42bb      	cmp	r3, r7
 80149c4:	460e      	mov	r6, r1
 80149c6:	d9f4      	bls.n	80149b2 <_printf_i+0x116>
 80149c8:	2b08      	cmp	r3, #8
 80149ca:	d10b      	bne.n	80149e4 <_printf_i+0x148>
 80149cc:	6823      	ldr	r3, [r4, #0]
 80149ce:	07de      	lsls	r6, r3, #31
 80149d0:	d508      	bpl.n	80149e4 <_printf_i+0x148>
 80149d2:	6923      	ldr	r3, [r4, #16]
 80149d4:	6861      	ldr	r1, [r4, #4]
 80149d6:	4299      	cmp	r1, r3
 80149d8:	bfde      	ittt	le
 80149da:	2330      	movle	r3, #48	; 0x30
 80149dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80149e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80149e4:	1b52      	subs	r2, r2, r5
 80149e6:	6122      	str	r2, [r4, #16]
 80149e8:	f8cd a000 	str.w	sl, [sp]
 80149ec:	464b      	mov	r3, r9
 80149ee:	aa03      	add	r2, sp, #12
 80149f0:	4621      	mov	r1, r4
 80149f2:	4640      	mov	r0, r8
 80149f4:	f7ff fee4 	bl	80147c0 <_printf_common>
 80149f8:	3001      	adds	r0, #1
 80149fa:	d14a      	bne.n	8014a92 <_printf_i+0x1f6>
 80149fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a00:	b004      	add	sp, #16
 8014a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a06:	6823      	ldr	r3, [r4, #0]
 8014a08:	f043 0320 	orr.w	r3, r3, #32
 8014a0c:	6023      	str	r3, [r4, #0]
 8014a0e:	4833      	ldr	r0, [pc, #204]	; (8014adc <_printf_i+0x240>)
 8014a10:	2778      	movs	r7, #120	; 0x78
 8014a12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014a16:	6823      	ldr	r3, [r4, #0]
 8014a18:	6829      	ldr	r1, [r5, #0]
 8014a1a:	061f      	lsls	r7, r3, #24
 8014a1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014a20:	d402      	bmi.n	8014a28 <_printf_i+0x18c>
 8014a22:	065f      	lsls	r7, r3, #25
 8014a24:	bf48      	it	mi
 8014a26:	b2b6      	uxthmi	r6, r6
 8014a28:	07df      	lsls	r7, r3, #31
 8014a2a:	bf48      	it	mi
 8014a2c:	f043 0320 	orrmi.w	r3, r3, #32
 8014a30:	6029      	str	r1, [r5, #0]
 8014a32:	bf48      	it	mi
 8014a34:	6023      	strmi	r3, [r4, #0]
 8014a36:	b91e      	cbnz	r6, 8014a40 <_printf_i+0x1a4>
 8014a38:	6823      	ldr	r3, [r4, #0]
 8014a3a:	f023 0320 	bic.w	r3, r3, #32
 8014a3e:	6023      	str	r3, [r4, #0]
 8014a40:	2310      	movs	r3, #16
 8014a42:	e7a7      	b.n	8014994 <_printf_i+0xf8>
 8014a44:	4824      	ldr	r0, [pc, #144]	; (8014ad8 <_printf_i+0x23c>)
 8014a46:	e7e4      	b.n	8014a12 <_printf_i+0x176>
 8014a48:	4615      	mov	r5, r2
 8014a4a:	e7bd      	b.n	80149c8 <_printf_i+0x12c>
 8014a4c:	682b      	ldr	r3, [r5, #0]
 8014a4e:	6826      	ldr	r6, [r4, #0]
 8014a50:	6961      	ldr	r1, [r4, #20]
 8014a52:	1d18      	adds	r0, r3, #4
 8014a54:	6028      	str	r0, [r5, #0]
 8014a56:	0635      	lsls	r5, r6, #24
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	d501      	bpl.n	8014a60 <_printf_i+0x1c4>
 8014a5c:	6019      	str	r1, [r3, #0]
 8014a5e:	e002      	b.n	8014a66 <_printf_i+0x1ca>
 8014a60:	0670      	lsls	r0, r6, #25
 8014a62:	d5fb      	bpl.n	8014a5c <_printf_i+0x1c0>
 8014a64:	8019      	strh	r1, [r3, #0]
 8014a66:	2300      	movs	r3, #0
 8014a68:	6123      	str	r3, [r4, #16]
 8014a6a:	4615      	mov	r5, r2
 8014a6c:	e7bc      	b.n	80149e8 <_printf_i+0x14c>
 8014a6e:	682b      	ldr	r3, [r5, #0]
 8014a70:	1d1a      	adds	r2, r3, #4
 8014a72:	602a      	str	r2, [r5, #0]
 8014a74:	681d      	ldr	r5, [r3, #0]
 8014a76:	6862      	ldr	r2, [r4, #4]
 8014a78:	2100      	movs	r1, #0
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7eb fbd8 	bl	8000230 <memchr>
 8014a80:	b108      	cbz	r0, 8014a86 <_printf_i+0x1ea>
 8014a82:	1b40      	subs	r0, r0, r5
 8014a84:	6060      	str	r0, [r4, #4]
 8014a86:	6863      	ldr	r3, [r4, #4]
 8014a88:	6123      	str	r3, [r4, #16]
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a90:	e7aa      	b.n	80149e8 <_printf_i+0x14c>
 8014a92:	6923      	ldr	r3, [r4, #16]
 8014a94:	462a      	mov	r2, r5
 8014a96:	4649      	mov	r1, r9
 8014a98:	4640      	mov	r0, r8
 8014a9a:	47d0      	blx	sl
 8014a9c:	3001      	adds	r0, #1
 8014a9e:	d0ad      	beq.n	80149fc <_printf_i+0x160>
 8014aa0:	6823      	ldr	r3, [r4, #0]
 8014aa2:	079b      	lsls	r3, r3, #30
 8014aa4:	d413      	bmi.n	8014ace <_printf_i+0x232>
 8014aa6:	68e0      	ldr	r0, [r4, #12]
 8014aa8:	9b03      	ldr	r3, [sp, #12]
 8014aaa:	4298      	cmp	r0, r3
 8014aac:	bfb8      	it	lt
 8014aae:	4618      	movlt	r0, r3
 8014ab0:	e7a6      	b.n	8014a00 <_printf_i+0x164>
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	4632      	mov	r2, r6
 8014ab6:	4649      	mov	r1, r9
 8014ab8:	4640      	mov	r0, r8
 8014aba:	47d0      	blx	sl
 8014abc:	3001      	adds	r0, #1
 8014abe:	d09d      	beq.n	80149fc <_printf_i+0x160>
 8014ac0:	3501      	adds	r5, #1
 8014ac2:	68e3      	ldr	r3, [r4, #12]
 8014ac4:	9903      	ldr	r1, [sp, #12]
 8014ac6:	1a5b      	subs	r3, r3, r1
 8014ac8:	42ab      	cmp	r3, r5
 8014aca:	dcf2      	bgt.n	8014ab2 <_printf_i+0x216>
 8014acc:	e7eb      	b.n	8014aa6 <_printf_i+0x20a>
 8014ace:	2500      	movs	r5, #0
 8014ad0:	f104 0619 	add.w	r6, r4, #25
 8014ad4:	e7f5      	b.n	8014ac2 <_printf_i+0x226>
 8014ad6:	bf00      	nop
 8014ad8:	080187ad 	.word	0x080187ad
 8014adc:	080187be 	.word	0x080187be

08014ae0 <std>:
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	b510      	push	{r4, lr}
 8014ae4:	4604      	mov	r4, r0
 8014ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8014aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014aee:	6083      	str	r3, [r0, #8]
 8014af0:	8181      	strh	r1, [r0, #12]
 8014af2:	6643      	str	r3, [r0, #100]	; 0x64
 8014af4:	81c2      	strh	r2, [r0, #14]
 8014af6:	6183      	str	r3, [r0, #24]
 8014af8:	4619      	mov	r1, r3
 8014afa:	2208      	movs	r2, #8
 8014afc:	305c      	adds	r0, #92	; 0x5c
 8014afe:	f000 f92e 	bl	8014d5e <memset>
 8014b02:	4b0d      	ldr	r3, [pc, #52]	; (8014b38 <std+0x58>)
 8014b04:	6263      	str	r3, [r4, #36]	; 0x24
 8014b06:	4b0d      	ldr	r3, [pc, #52]	; (8014b3c <std+0x5c>)
 8014b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b0a:	4b0d      	ldr	r3, [pc, #52]	; (8014b40 <std+0x60>)
 8014b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b0e:	4b0d      	ldr	r3, [pc, #52]	; (8014b44 <std+0x64>)
 8014b10:	6323      	str	r3, [r4, #48]	; 0x30
 8014b12:	4b0d      	ldr	r3, [pc, #52]	; (8014b48 <std+0x68>)
 8014b14:	6224      	str	r4, [r4, #32]
 8014b16:	429c      	cmp	r4, r3
 8014b18:	d006      	beq.n	8014b28 <std+0x48>
 8014b1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014b1e:	4294      	cmp	r4, r2
 8014b20:	d002      	beq.n	8014b28 <std+0x48>
 8014b22:	33d0      	adds	r3, #208	; 0xd0
 8014b24:	429c      	cmp	r4, r3
 8014b26:	d105      	bne.n	8014b34 <std+0x54>
 8014b28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b30:	f000 b9e6 	b.w	8014f00 <__retarget_lock_init_recursive>
 8014b34:	bd10      	pop	{r4, pc}
 8014b36:	bf00      	nop
 8014b38:	08014ca5 	.word	0x08014ca5
 8014b3c:	08014cc7 	.word	0x08014cc7
 8014b40:	08014cff 	.word	0x08014cff
 8014b44:	08014d23 	.word	0x08014d23
 8014b48:	20000428 	.word	0x20000428

08014b4c <stdio_exit_handler>:
 8014b4c:	4a02      	ldr	r2, [pc, #8]	; (8014b58 <stdio_exit_handler+0xc>)
 8014b4e:	4903      	ldr	r1, [pc, #12]	; (8014b5c <stdio_exit_handler+0x10>)
 8014b50:	4803      	ldr	r0, [pc, #12]	; (8014b60 <stdio_exit_handler+0x14>)
 8014b52:	f000 b869 	b.w	8014c28 <_fwalk_sglue>
 8014b56:	bf00      	nop
 8014b58:	20000014 	.word	0x20000014
 8014b5c:	08016769 	.word	0x08016769
 8014b60:	20000020 	.word	0x20000020

08014b64 <cleanup_stdio>:
 8014b64:	6841      	ldr	r1, [r0, #4]
 8014b66:	4b0c      	ldr	r3, [pc, #48]	; (8014b98 <cleanup_stdio+0x34>)
 8014b68:	4299      	cmp	r1, r3
 8014b6a:	b510      	push	{r4, lr}
 8014b6c:	4604      	mov	r4, r0
 8014b6e:	d001      	beq.n	8014b74 <cleanup_stdio+0x10>
 8014b70:	f001 fdfa 	bl	8016768 <_fflush_r>
 8014b74:	68a1      	ldr	r1, [r4, #8]
 8014b76:	4b09      	ldr	r3, [pc, #36]	; (8014b9c <cleanup_stdio+0x38>)
 8014b78:	4299      	cmp	r1, r3
 8014b7a:	d002      	beq.n	8014b82 <cleanup_stdio+0x1e>
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	f001 fdf3 	bl	8016768 <_fflush_r>
 8014b82:	68e1      	ldr	r1, [r4, #12]
 8014b84:	4b06      	ldr	r3, [pc, #24]	; (8014ba0 <cleanup_stdio+0x3c>)
 8014b86:	4299      	cmp	r1, r3
 8014b88:	d004      	beq.n	8014b94 <cleanup_stdio+0x30>
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b90:	f001 bdea 	b.w	8016768 <_fflush_r>
 8014b94:	bd10      	pop	{r4, pc}
 8014b96:	bf00      	nop
 8014b98:	20000428 	.word	0x20000428
 8014b9c:	20000490 	.word	0x20000490
 8014ba0:	200004f8 	.word	0x200004f8

08014ba4 <global_stdio_init.part.0>:
 8014ba4:	b510      	push	{r4, lr}
 8014ba6:	4b0b      	ldr	r3, [pc, #44]	; (8014bd4 <global_stdio_init.part.0+0x30>)
 8014ba8:	4c0b      	ldr	r4, [pc, #44]	; (8014bd8 <global_stdio_init.part.0+0x34>)
 8014baa:	4a0c      	ldr	r2, [pc, #48]	; (8014bdc <global_stdio_init.part.0+0x38>)
 8014bac:	601a      	str	r2, [r3, #0]
 8014bae:	4620      	mov	r0, r4
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	2104      	movs	r1, #4
 8014bb4:	f7ff ff94 	bl	8014ae0 <std>
 8014bb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	2109      	movs	r1, #9
 8014bc0:	f7ff ff8e 	bl	8014ae0 <std>
 8014bc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014bc8:	2202      	movs	r2, #2
 8014bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bce:	2112      	movs	r1, #18
 8014bd0:	f7ff bf86 	b.w	8014ae0 <std>
 8014bd4:	20000560 	.word	0x20000560
 8014bd8:	20000428 	.word	0x20000428
 8014bdc:	08014b4d 	.word	0x08014b4d

08014be0 <__sfp_lock_acquire>:
 8014be0:	4801      	ldr	r0, [pc, #4]	; (8014be8 <__sfp_lock_acquire+0x8>)
 8014be2:	f000 b98e 	b.w	8014f02 <__retarget_lock_acquire_recursive>
 8014be6:	bf00      	nop
 8014be8:	20000569 	.word	0x20000569

08014bec <__sfp_lock_release>:
 8014bec:	4801      	ldr	r0, [pc, #4]	; (8014bf4 <__sfp_lock_release+0x8>)
 8014bee:	f000 b989 	b.w	8014f04 <__retarget_lock_release_recursive>
 8014bf2:	bf00      	nop
 8014bf4:	20000569 	.word	0x20000569

08014bf8 <__sinit>:
 8014bf8:	b510      	push	{r4, lr}
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	f7ff fff0 	bl	8014be0 <__sfp_lock_acquire>
 8014c00:	6a23      	ldr	r3, [r4, #32]
 8014c02:	b11b      	cbz	r3, 8014c0c <__sinit+0x14>
 8014c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c08:	f7ff bff0 	b.w	8014bec <__sfp_lock_release>
 8014c0c:	4b04      	ldr	r3, [pc, #16]	; (8014c20 <__sinit+0x28>)
 8014c0e:	6223      	str	r3, [r4, #32]
 8014c10:	4b04      	ldr	r3, [pc, #16]	; (8014c24 <__sinit+0x2c>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d1f5      	bne.n	8014c04 <__sinit+0xc>
 8014c18:	f7ff ffc4 	bl	8014ba4 <global_stdio_init.part.0>
 8014c1c:	e7f2      	b.n	8014c04 <__sinit+0xc>
 8014c1e:	bf00      	nop
 8014c20:	08014b65 	.word	0x08014b65
 8014c24:	20000560 	.word	0x20000560

08014c28 <_fwalk_sglue>:
 8014c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c2c:	4607      	mov	r7, r0
 8014c2e:	4688      	mov	r8, r1
 8014c30:	4614      	mov	r4, r2
 8014c32:	2600      	movs	r6, #0
 8014c34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014c38:	f1b9 0901 	subs.w	r9, r9, #1
 8014c3c:	d505      	bpl.n	8014c4a <_fwalk_sglue+0x22>
 8014c3e:	6824      	ldr	r4, [r4, #0]
 8014c40:	2c00      	cmp	r4, #0
 8014c42:	d1f7      	bne.n	8014c34 <_fwalk_sglue+0xc>
 8014c44:	4630      	mov	r0, r6
 8014c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c4a:	89ab      	ldrh	r3, [r5, #12]
 8014c4c:	2b01      	cmp	r3, #1
 8014c4e:	d907      	bls.n	8014c60 <_fwalk_sglue+0x38>
 8014c50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c54:	3301      	adds	r3, #1
 8014c56:	d003      	beq.n	8014c60 <_fwalk_sglue+0x38>
 8014c58:	4629      	mov	r1, r5
 8014c5a:	4638      	mov	r0, r7
 8014c5c:	47c0      	blx	r8
 8014c5e:	4306      	orrs	r6, r0
 8014c60:	3568      	adds	r5, #104	; 0x68
 8014c62:	e7e9      	b.n	8014c38 <_fwalk_sglue+0x10>

08014c64 <siprintf>:
 8014c64:	b40e      	push	{r1, r2, r3}
 8014c66:	b500      	push	{lr}
 8014c68:	b09c      	sub	sp, #112	; 0x70
 8014c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8014c6c:	9002      	str	r0, [sp, #8]
 8014c6e:	9006      	str	r0, [sp, #24]
 8014c70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014c74:	4809      	ldr	r0, [pc, #36]	; (8014c9c <siprintf+0x38>)
 8014c76:	9107      	str	r1, [sp, #28]
 8014c78:	9104      	str	r1, [sp, #16]
 8014c7a:	4909      	ldr	r1, [pc, #36]	; (8014ca0 <siprintf+0x3c>)
 8014c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c80:	9105      	str	r1, [sp, #20]
 8014c82:	6800      	ldr	r0, [r0, #0]
 8014c84:	9301      	str	r3, [sp, #4]
 8014c86:	a902      	add	r1, sp, #8
 8014c88:	f001 fbea 	bl	8016460 <_svfiprintf_r>
 8014c8c:	9b02      	ldr	r3, [sp, #8]
 8014c8e:	2200      	movs	r2, #0
 8014c90:	701a      	strb	r2, [r3, #0]
 8014c92:	b01c      	add	sp, #112	; 0x70
 8014c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c98:	b003      	add	sp, #12
 8014c9a:	4770      	bx	lr
 8014c9c:	2000006c 	.word	0x2000006c
 8014ca0:	ffff0208 	.word	0xffff0208

08014ca4 <__sread>:
 8014ca4:	b510      	push	{r4, lr}
 8014ca6:	460c      	mov	r4, r1
 8014ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cac:	f000 f8b6 	bl	8014e1c <_read_r>
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	bfab      	itete	ge
 8014cb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8014cb8:	181b      	addge	r3, r3, r0
 8014cba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014cbe:	bfac      	ite	ge
 8014cc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8014cc2:	81a3      	strhlt	r3, [r4, #12]
 8014cc4:	bd10      	pop	{r4, pc}

08014cc6 <__swrite>:
 8014cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cca:	461f      	mov	r7, r3
 8014ccc:	898b      	ldrh	r3, [r1, #12]
 8014cce:	05db      	lsls	r3, r3, #23
 8014cd0:	4605      	mov	r5, r0
 8014cd2:	460c      	mov	r4, r1
 8014cd4:	4616      	mov	r6, r2
 8014cd6:	d505      	bpl.n	8014ce4 <__swrite+0x1e>
 8014cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cdc:	2302      	movs	r3, #2
 8014cde:	2200      	movs	r2, #0
 8014ce0:	f000 f88a 	bl	8014df8 <_lseek_r>
 8014ce4:	89a3      	ldrh	r3, [r4, #12]
 8014ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014cee:	81a3      	strh	r3, [r4, #12]
 8014cf0:	4632      	mov	r2, r6
 8014cf2:	463b      	mov	r3, r7
 8014cf4:	4628      	mov	r0, r5
 8014cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cfa:	f000 b8c5 	b.w	8014e88 <_write_r>

08014cfe <__sseek>:
 8014cfe:	b510      	push	{r4, lr}
 8014d00:	460c      	mov	r4, r1
 8014d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d06:	f000 f877 	bl	8014df8 <_lseek_r>
 8014d0a:	1c43      	adds	r3, r0, #1
 8014d0c:	89a3      	ldrh	r3, [r4, #12]
 8014d0e:	bf15      	itete	ne
 8014d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8014d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014d1a:	81a3      	strheq	r3, [r4, #12]
 8014d1c:	bf18      	it	ne
 8014d1e:	81a3      	strhne	r3, [r4, #12]
 8014d20:	bd10      	pop	{r4, pc}

08014d22 <__sclose>:
 8014d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d26:	f000 b857 	b.w	8014dd8 <_close_r>

08014d2a <memmove>:
 8014d2a:	4288      	cmp	r0, r1
 8014d2c:	b510      	push	{r4, lr}
 8014d2e:	eb01 0402 	add.w	r4, r1, r2
 8014d32:	d902      	bls.n	8014d3a <memmove+0x10>
 8014d34:	4284      	cmp	r4, r0
 8014d36:	4623      	mov	r3, r4
 8014d38:	d807      	bhi.n	8014d4a <memmove+0x20>
 8014d3a:	1e43      	subs	r3, r0, #1
 8014d3c:	42a1      	cmp	r1, r4
 8014d3e:	d008      	beq.n	8014d52 <memmove+0x28>
 8014d40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d48:	e7f8      	b.n	8014d3c <memmove+0x12>
 8014d4a:	4402      	add	r2, r0
 8014d4c:	4601      	mov	r1, r0
 8014d4e:	428a      	cmp	r2, r1
 8014d50:	d100      	bne.n	8014d54 <memmove+0x2a>
 8014d52:	bd10      	pop	{r4, pc}
 8014d54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014d58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014d5c:	e7f7      	b.n	8014d4e <memmove+0x24>

08014d5e <memset>:
 8014d5e:	4402      	add	r2, r0
 8014d60:	4603      	mov	r3, r0
 8014d62:	4293      	cmp	r3, r2
 8014d64:	d100      	bne.n	8014d68 <memset+0xa>
 8014d66:	4770      	bx	lr
 8014d68:	f803 1b01 	strb.w	r1, [r3], #1
 8014d6c:	e7f9      	b.n	8014d62 <memset+0x4>

08014d6e <_raise_r>:
 8014d6e:	291f      	cmp	r1, #31
 8014d70:	b538      	push	{r3, r4, r5, lr}
 8014d72:	4604      	mov	r4, r0
 8014d74:	460d      	mov	r5, r1
 8014d76:	d904      	bls.n	8014d82 <_raise_r+0x14>
 8014d78:	2316      	movs	r3, #22
 8014d7a:	6003      	str	r3, [r0, #0]
 8014d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d80:	bd38      	pop	{r3, r4, r5, pc}
 8014d82:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014d84:	b112      	cbz	r2, 8014d8c <_raise_r+0x1e>
 8014d86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d8a:	b94b      	cbnz	r3, 8014da0 <_raise_r+0x32>
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	f000 f869 	bl	8014e64 <_getpid_r>
 8014d92:	462a      	mov	r2, r5
 8014d94:	4601      	mov	r1, r0
 8014d96:	4620      	mov	r0, r4
 8014d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d9c:	f000 b850 	b.w	8014e40 <_kill_r>
 8014da0:	2b01      	cmp	r3, #1
 8014da2:	d00a      	beq.n	8014dba <_raise_r+0x4c>
 8014da4:	1c59      	adds	r1, r3, #1
 8014da6:	d103      	bne.n	8014db0 <_raise_r+0x42>
 8014da8:	2316      	movs	r3, #22
 8014daa:	6003      	str	r3, [r0, #0]
 8014dac:	2001      	movs	r0, #1
 8014dae:	e7e7      	b.n	8014d80 <_raise_r+0x12>
 8014db0:	2400      	movs	r4, #0
 8014db2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014db6:	4628      	mov	r0, r5
 8014db8:	4798      	blx	r3
 8014dba:	2000      	movs	r0, #0
 8014dbc:	e7e0      	b.n	8014d80 <_raise_r+0x12>
	...

08014dc0 <raise>:
 8014dc0:	4b02      	ldr	r3, [pc, #8]	; (8014dcc <raise+0xc>)
 8014dc2:	4601      	mov	r1, r0
 8014dc4:	6818      	ldr	r0, [r3, #0]
 8014dc6:	f7ff bfd2 	b.w	8014d6e <_raise_r>
 8014dca:	bf00      	nop
 8014dcc:	2000006c 	.word	0x2000006c

08014dd0 <_localeconv_r>:
 8014dd0:	4800      	ldr	r0, [pc, #0]	; (8014dd4 <_localeconv_r+0x4>)
 8014dd2:	4770      	bx	lr
 8014dd4:	20000160 	.word	0x20000160

08014dd8 <_close_r>:
 8014dd8:	b538      	push	{r3, r4, r5, lr}
 8014dda:	4d06      	ldr	r5, [pc, #24]	; (8014df4 <_close_r+0x1c>)
 8014ddc:	2300      	movs	r3, #0
 8014dde:	4604      	mov	r4, r0
 8014de0:	4608      	mov	r0, r1
 8014de2:	602b      	str	r3, [r5, #0]
 8014de4:	f7fa fd1d 	bl	800f822 <_close>
 8014de8:	1c43      	adds	r3, r0, #1
 8014dea:	d102      	bne.n	8014df2 <_close_r+0x1a>
 8014dec:	682b      	ldr	r3, [r5, #0]
 8014dee:	b103      	cbz	r3, 8014df2 <_close_r+0x1a>
 8014df0:	6023      	str	r3, [r4, #0]
 8014df2:	bd38      	pop	{r3, r4, r5, pc}
 8014df4:	20000564 	.word	0x20000564

08014df8 <_lseek_r>:
 8014df8:	b538      	push	{r3, r4, r5, lr}
 8014dfa:	4d07      	ldr	r5, [pc, #28]	; (8014e18 <_lseek_r+0x20>)
 8014dfc:	4604      	mov	r4, r0
 8014dfe:	4608      	mov	r0, r1
 8014e00:	4611      	mov	r1, r2
 8014e02:	2200      	movs	r2, #0
 8014e04:	602a      	str	r2, [r5, #0]
 8014e06:	461a      	mov	r2, r3
 8014e08:	f7fa fd32 	bl	800f870 <_lseek>
 8014e0c:	1c43      	adds	r3, r0, #1
 8014e0e:	d102      	bne.n	8014e16 <_lseek_r+0x1e>
 8014e10:	682b      	ldr	r3, [r5, #0]
 8014e12:	b103      	cbz	r3, 8014e16 <_lseek_r+0x1e>
 8014e14:	6023      	str	r3, [r4, #0]
 8014e16:	bd38      	pop	{r3, r4, r5, pc}
 8014e18:	20000564 	.word	0x20000564

08014e1c <_read_r>:
 8014e1c:	b538      	push	{r3, r4, r5, lr}
 8014e1e:	4d07      	ldr	r5, [pc, #28]	; (8014e3c <_read_r+0x20>)
 8014e20:	4604      	mov	r4, r0
 8014e22:	4608      	mov	r0, r1
 8014e24:	4611      	mov	r1, r2
 8014e26:	2200      	movs	r2, #0
 8014e28:	602a      	str	r2, [r5, #0]
 8014e2a:	461a      	mov	r2, r3
 8014e2c:	f7fa fcc0 	bl	800f7b0 <_read>
 8014e30:	1c43      	adds	r3, r0, #1
 8014e32:	d102      	bne.n	8014e3a <_read_r+0x1e>
 8014e34:	682b      	ldr	r3, [r5, #0]
 8014e36:	b103      	cbz	r3, 8014e3a <_read_r+0x1e>
 8014e38:	6023      	str	r3, [r4, #0]
 8014e3a:	bd38      	pop	{r3, r4, r5, pc}
 8014e3c:	20000564 	.word	0x20000564

08014e40 <_kill_r>:
 8014e40:	b538      	push	{r3, r4, r5, lr}
 8014e42:	4d07      	ldr	r5, [pc, #28]	; (8014e60 <_kill_r+0x20>)
 8014e44:	2300      	movs	r3, #0
 8014e46:	4604      	mov	r4, r0
 8014e48:	4608      	mov	r0, r1
 8014e4a:	4611      	mov	r1, r2
 8014e4c:	602b      	str	r3, [r5, #0]
 8014e4e:	f7fa fc95 	bl	800f77c <_kill>
 8014e52:	1c43      	adds	r3, r0, #1
 8014e54:	d102      	bne.n	8014e5c <_kill_r+0x1c>
 8014e56:	682b      	ldr	r3, [r5, #0]
 8014e58:	b103      	cbz	r3, 8014e5c <_kill_r+0x1c>
 8014e5a:	6023      	str	r3, [r4, #0]
 8014e5c:	bd38      	pop	{r3, r4, r5, pc}
 8014e5e:	bf00      	nop
 8014e60:	20000564 	.word	0x20000564

08014e64 <_getpid_r>:
 8014e64:	f7fa bc82 	b.w	800f76c <_getpid>

08014e68 <_sbrk_r>:
 8014e68:	b538      	push	{r3, r4, r5, lr}
 8014e6a:	4d06      	ldr	r5, [pc, #24]	; (8014e84 <_sbrk_r+0x1c>)
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	4604      	mov	r4, r0
 8014e70:	4608      	mov	r0, r1
 8014e72:	602b      	str	r3, [r5, #0]
 8014e74:	f7fa fd0a 	bl	800f88c <_sbrk>
 8014e78:	1c43      	adds	r3, r0, #1
 8014e7a:	d102      	bne.n	8014e82 <_sbrk_r+0x1a>
 8014e7c:	682b      	ldr	r3, [r5, #0]
 8014e7e:	b103      	cbz	r3, 8014e82 <_sbrk_r+0x1a>
 8014e80:	6023      	str	r3, [r4, #0]
 8014e82:	bd38      	pop	{r3, r4, r5, pc}
 8014e84:	20000564 	.word	0x20000564

08014e88 <_write_r>:
 8014e88:	b538      	push	{r3, r4, r5, lr}
 8014e8a:	4d07      	ldr	r5, [pc, #28]	; (8014ea8 <_write_r+0x20>)
 8014e8c:	4604      	mov	r4, r0
 8014e8e:	4608      	mov	r0, r1
 8014e90:	4611      	mov	r1, r2
 8014e92:	2200      	movs	r2, #0
 8014e94:	602a      	str	r2, [r5, #0]
 8014e96:	461a      	mov	r2, r3
 8014e98:	f7fa fca7 	bl	800f7ea <_write>
 8014e9c:	1c43      	adds	r3, r0, #1
 8014e9e:	d102      	bne.n	8014ea6 <_write_r+0x1e>
 8014ea0:	682b      	ldr	r3, [r5, #0]
 8014ea2:	b103      	cbz	r3, 8014ea6 <_write_r+0x1e>
 8014ea4:	6023      	str	r3, [r4, #0]
 8014ea6:	bd38      	pop	{r3, r4, r5, pc}
 8014ea8:	20000564 	.word	0x20000564

08014eac <__errno>:
 8014eac:	4b01      	ldr	r3, [pc, #4]	; (8014eb4 <__errno+0x8>)
 8014eae:	6818      	ldr	r0, [r3, #0]
 8014eb0:	4770      	bx	lr
 8014eb2:	bf00      	nop
 8014eb4:	2000006c 	.word	0x2000006c

08014eb8 <__libc_init_array>:
 8014eb8:	b570      	push	{r4, r5, r6, lr}
 8014eba:	4d0d      	ldr	r5, [pc, #52]	; (8014ef0 <__libc_init_array+0x38>)
 8014ebc:	4c0d      	ldr	r4, [pc, #52]	; (8014ef4 <__libc_init_array+0x3c>)
 8014ebe:	1b64      	subs	r4, r4, r5
 8014ec0:	10a4      	asrs	r4, r4, #2
 8014ec2:	2600      	movs	r6, #0
 8014ec4:	42a6      	cmp	r6, r4
 8014ec6:	d109      	bne.n	8014edc <__libc_init_array+0x24>
 8014ec8:	4d0b      	ldr	r5, [pc, #44]	; (8014ef8 <__libc_init_array+0x40>)
 8014eca:	4c0c      	ldr	r4, [pc, #48]	; (8014efc <__libc_init_array+0x44>)
 8014ecc:	f001 ff74 	bl	8016db8 <_init>
 8014ed0:	1b64      	subs	r4, r4, r5
 8014ed2:	10a4      	asrs	r4, r4, #2
 8014ed4:	2600      	movs	r6, #0
 8014ed6:	42a6      	cmp	r6, r4
 8014ed8:	d105      	bne.n	8014ee6 <__libc_init_array+0x2e>
 8014eda:	bd70      	pop	{r4, r5, r6, pc}
 8014edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ee0:	4798      	blx	r3
 8014ee2:	3601      	adds	r6, #1
 8014ee4:	e7ee      	b.n	8014ec4 <__libc_init_array+0xc>
 8014ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014eea:	4798      	blx	r3
 8014eec:	3601      	adds	r6, #1
 8014eee:	e7f2      	b.n	8014ed6 <__libc_init_array+0x1e>
 8014ef0:	0801af58 	.word	0x0801af58
 8014ef4:	0801af58 	.word	0x0801af58
 8014ef8:	0801af58 	.word	0x0801af58
 8014efc:	0801af64 	.word	0x0801af64

08014f00 <__retarget_lock_init_recursive>:
 8014f00:	4770      	bx	lr

08014f02 <__retarget_lock_acquire_recursive>:
 8014f02:	4770      	bx	lr

08014f04 <__retarget_lock_release_recursive>:
 8014f04:	4770      	bx	lr

08014f06 <memcpy>:
 8014f06:	440a      	add	r2, r1
 8014f08:	4291      	cmp	r1, r2
 8014f0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014f0e:	d100      	bne.n	8014f12 <memcpy+0xc>
 8014f10:	4770      	bx	lr
 8014f12:	b510      	push	{r4, lr}
 8014f14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f1c:	4291      	cmp	r1, r2
 8014f1e:	d1f9      	bne.n	8014f14 <memcpy+0xe>
 8014f20:	bd10      	pop	{r4, pc}

08014f22 <quorem>:
 8014f22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f26:	6903      	ldr	r3, [r0, #16]
 8014f28:	690c      	ldr	r4, [r1, #16]
 8014f2a:	42a3      	cmp	r3, r4
 8014f2c:	4607      	mov	r7, r0
 8014f2e:	db7e      	blt.n	801502e <quorem+0x10c>
 8014f30:	3c01      	subs	r4, #1
 8014f32:	f101 0814 	add.w	r8, r1, #20
 8014f36:	f100 0514 	add.w	r5, r0, #20
 8014f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014f3e:	9301      	str	r3, [sp, #4]
 8014f40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014f48:	3301      	adds	r3, #1
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014f50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014f54:	fbb2 f6f3 	udiv	r6, r2, r3
 8014f58:	d331      	bcc.n	8014fbe <quorem+0x9c>
 8014f5a:	f04f 0e00 	mov.w	lr, #0
 8014f5e:	4640      	mov	r0, r8
 8014f60:	46ac      	mov	ip, r5
 8014f62:	46f2      	mov	sl, lr
 8014f64:	f850 2b04 	ldr.w	r2, [r0], #4
 8014f68:	b293      	uxth	r3, r2
 8014f6a:	fb06 e303 	mla	r3, r6, r3, lr
 8014f6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014f72:	0c1a      	lsrs	r2, r3, #16
 8014f74:	b29b      	uxth	r3, r3
 8014f76:	ebaa 0303 	sub.w	r3, sl, r3
 8014f7a:	f8dc a000 	ldr.w	sl, [ip]
 8014f7e:	fa13 f38a 	uxtah	r3, r3, sl
 8014f82:	fb06 220e 	mla	r2, r6, lr, r2
 8014f86:	9300      	str	r3, [sp, #0]
 8014f88:	9b00      	ldr	r3, [sp, #0]
 8014f8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014f8e:	b292      	uxth	r2, r2
 8014f90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014f94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014f98:	f8bd 3000 	ldrh.w	r3, [sp]
 8014f9c:	4581      	cmp	r9, r0
 8014f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014fa2:	f84c 3b04 	str.w	r3, [ip], #4
 8014fa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014faa:	d2db      	bcs.n	8014f64 <quorem+0x42>
 8014fac:	f855 300b 	ldr.w	r3, [r5, fp]
 8014fb0:	b92b      	cbnz	r3, 8014fbe <quorem+0x9c>
 8014fb2:	9b01      	ldr	r3, [sp, #4]
 8014fb4:	3b04      	subs	r3, #4
 8014fb6:	429d      	cmp	r5, r3
 8014fb8:	461a      	mov	r2, r3
 8014fba:	d32c      	bcc.n	8015016 <quorem+0xf4>
 8014fbc:	613c      	str	r4, [r7, #16]
 8014fbe:	4638      	mov	r0, r7
 8014fc0:	f001 f8f4 	bl	80161ac <__mcmp>
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	db22      	blt.n	801500e <quorem+0xec>
 8014fc8:	3601      	adds	r6, #1
 8014fca:	4629      	mov	r1, r5
 8014fcc:	2000      	movs	r0, #0
 8014fce:	f858 2b04 	ldr.w	r2, [r8], #4
 8014fd2:	f8d1 c000 	ldr.w	ip, [r1]
 8014fd6:	b293      	uxth	r3, r2
 8014fd8:	1ac3      	subs	r3, r0, r3
 8014fda:	0c12      	lsrs	r2, r2, #16
 8014fdc:	fa13 f38c 	uxtah	r3, r3, ip
 8014fe0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014fe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014fe8:	b29b      	uxth	r3, r3
 8014fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014fee:	45c1      	cmp	r9, r8
 8014ff0:	f841 3b04 	str.w	r3, [r1], #4
 8014ff4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014ff8:	d2e9      	bcs.n	8014fce <quorem+0xac>
 8014ffa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ffe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015002:	b922      	cbnz	r2, 801500e <quorem+0xec>
 8015004:	3b04      	subs	r3, #4
 8015006:	429d      	cmp	r5, r3
 8015008:	461a      	mov	r2, r3
 801500a:	d30a      	bcc.n	8015022 <quorem+0x100>
 801500c:	613c      	str	r4, [r7, #16]
 801500e:	4630      	mov	r0, r6
 8015010:	b003      	add	sp, #12
 8015012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015016:	6812      	ldr	r2, [r2, #0]
 8015018:	3b04      	subs	r3, #4
 801501a:	2a00      	cmp	r2, #0
 801501c:	d1ce      	bne.n	8014fbc <quorem+0x9a>
 801501e:	3c01      	subs	r4, #1
 8015020:	e7c9      	b.n	8014fb6 <quorem+0x94>
 8015022:	6812      	ldr	r2, [r2, #0]
 8015024:	3b04      	subs	r3, #4
 8015026:	2a00      	cmp	r2, #0
 8015028:	d1f0      	bne.n	801500c <quorem+0xea>
 801502a:	3c01      	subs	r4, #1
 801502c:	e7eb      	b.n	8015006 <quorem+0xe4>
 801502e:	2000      	movs	r0, #0
 8015030:	e7ee      	b.n	8015010 <quorem+0xee>
 8015032:	0000      	movs	r0, r0
 8015034:	0000      	movs	r0, r0
	...

08015038 <_dtoa_r>:
 8015038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801503c:	ed2d 8b04 	vpush	{d8-d9}
 8015040:	69c5      	ldr	r5, [r0, #28]
 8015042:	b093      	sub	sp, #76	; 0x4c
 8015044:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015048:	ec57 6b10 	vmov	r6, r7, d0
 801504c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015050:	9107      	str	r1, [sp, #28]
 8015052:	4604      	mov	r4, r0
 8015054:	920a      	str	r2, [sp, #40]	; 0x28
 8015056:	930d      	str	r3, [sp, #52]	; 0x34
 8015058:	b975      	cbnz	r5, 8015078 <_dtoa_r+0x40>
 801505a:	2010      	movs	r0, #16
 801505c:	f7ff f81e 	bl	801409c <malloc>
 8015060:	4602      	mov	r2, r0
 8015062:	61e0      	str	r0, [r4, #28]
 8015064:	b920      	cbnz	r0, 8015070 <_dtoa_r+0x38>
 8015066:	4bae      	ldr	r3, [pc, #696]	; (8015320 <_dtoa_r+0x2e8>)
 8015068:	21ef      	movs	r1, #239	; 0xef
 801506a:	48ae      	ldr	r0, [pc, #696]	; (8015324 <_dtoa_r+0x2ec>)
 801506c:	f001 fba4 	bl	80167b8 <__assert_func>
 8015070:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015074:	6005      	str	r5, [r0, #0]
 8015076:	60c5      	str	r5, [r0, #12]
 8015078:	69e3      	ldr	r3, [r4, #28]
 801507a:	6819      	ldr	r1, [r3, #0]
 801507c:	b151      	cbz	r1, 8015094 <_dtoa_r+0x5c>
 801507e:	685a      	ldr	r2, [r3, #4]
 8015080:	604a      	str	r2, [r1, #4]
 8015082:	2301      	movs	r3, #1
 8015084:	4093      	lsls	r3, r2
 8015086:	608b      	str	r3, [r1, #8]
 8015088:	4620      	mov	r0, r4
 801508a:	f000 fe53 	bl	8015d34 <_Bfree>
 801508e:	69e3      	ldr	r3, [r4, #28]
 8015090:	2200      	movs	r2, #0
 8015092:	601a      	str	r2, [r3, #0]
 8015094:	1e3b      	subs	r3, r7, #0
 8015096:	bfbb      	ittet	lt
 8015098:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801509c:	9303      	strlt	r3, [sp, #12]
 801509e:	2300      	movge	r3, #0
 80150a0:	2201      	movlt	r2, #1
 80150a2:	bfac      	ite	ge
 80150a4:	f8c8 3000 	strge.w	r3, [r8]
 80150a8:	f8c8 2000 	strlt.w	r2, [r8]
 80150ac:	4b9e      	ldr	r3, [pc, #632]	; (8015328 <_dtoa_r+0x2f0>)
 80150ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80150b2:	ea33 0308 	bics.w	r3, r3, r8
 80150b6:	d11b      	bne.n	80150f0 <_dtoa_r+0xb8>
 80150b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80150be:	6013      	str	r3, [r2, #0]
 80150c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80150c4:	4333      	orrs	r3, r6
 80150c6:	f000 8593 	beq.w	8015bf0 <_dtoa_r+0xbb8>
 80150ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150cc:	b963      	cbnz	r3, 80150e8 <_dtoa_r+0xb0>
 80150ce:	4b97      	ldr	r3, [pc, #604]	; (801532c <_dtoa_r+0x2f4>)
 80150d0:	e027      	b.n	8015122 <_dtoa_r+0xea>
 80150d2:	4b97      	ldr	r3, [pc, #604]	; (8015330 <_dtoa_r+0x2f8>)
 80150d4:	9300      	str	r3, [sp, #0]
 80150d6:	3308      	adds	r3, #8
 80150d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80150da:	6013      	str	r3, [r2, #0]
 80150dc:	9800      	ldr	r0, [sp, #0]
 80150de:	b013      	add	sp, #76	; 0x4c
 80150e0:	ecbd 8b04 	vpop	{d8-d9}
 80150e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150e8:	4b90      	ldr	r3, [pc, #576]	; (801532c <_dtoa_r+0x2f4>)
 80150ea:	9300      	str	r3, [sp, #0]
 80150ec:	3303      	adds	r3, #3
 80150ee:	e7f3      	b.n	80150d8 <_dtoa_r+0xa0>
 80150f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80150f4:	2200      	movs	r2, #0
 80150f6:	ec51 0b17 	vmov	r0, r1, d7
 80150fa:	eeb0 8a47 	vmov.f32	s16, s14
 80150fe:	eef0 8a67 	vmov.f32	s17, s15
 8015102:	2300      	movs	r3, #0
 8015104:	f7eb fd10 	bl	8000b28 <__aeabi_dcmpeq>
 8015108:	4681      	mov	r9, r0
 801510a:	b160      	cbz	r0, 8015126 <_dtoa_r+0xee>
 801510c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801510e:	2301      	movs	r3, #1
 8015110:	6013      	str	r3, [r2, #0]
 8015112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015114:	2b00      	cmp	r3, #0
 8015116:	f000 8568 	beq.w	8015bea <_dtoa_r+0xbb2>
 801511a:	4b86      	ldr	r3, [pc, #536]	; (8015334 <_dtoa_r+0x2fc>)
 801511c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801511e:	6013      	str	r3, [r2, #0]
 8015120:	3b01      	subs	r3, #1
 8015122:	9300      	str	r3, [sp, #0]
 8015124:	e7da      	b.n	80150dc <_dtoa_r+0xa4>
 8015126:	aa10      	add	r2, sp, #64	; 0x40
 8015128:	a911      	add	r1, sp, #68	; 0x44
 801512a:	4620      	mov	r0, r4
 801512c:	eeb0 0a48 	vmov.f32	s0, s16
 8015130:	eef0 0a68 	vmov.f32	s1, s17
 8015134:	f001 f8e0 	bl	80162f8 <__d2b>
 8015138:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801513c:	4682      	mov	sl, r0
 801513e:	2d00      	cmp	r5, #0
 8015140:	d07f      	beq.n	8015242 <_dtoa_r+0x20a>
 8015142:	ee18 3a90 	vmov	r3, s17
 8015146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801514a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801514e:	ec51 0b18 	vmov	r0, r1, d8
 8015152:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015156:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801515a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801515e:	4619      	mov	r1, r3
 8015160:	2200      	movs	r2, #0
 8015162:	4b75      	ldr	r3, [pc, #468]	; (8015338 <_dtoa_r+0x300>)
 8015164:	f7eb f8c0 	bl	80002e8 <__aeabi_dsub>
 8015168:	a367      	add	r3, pc, #412	; (adr r3, 8015308 <_dtoa_r+0x2d0>)
 801516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801516e:	f7eb fa73 	bl	8000658 <__aeabi_dmul>
 8015172:	a367      	add	r3, pc, #412	; (adr r3, 8015310 <_dtoa_r+0x2d8>)
 8015174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015178:	f7eb f8b8 	bl	80002ec <__adddf3>
 801517c:	4606      	mov	r6, r0
 801517e:	4628      	mov	r0, r5
 8015180:	460f      	mov	r7, r1
 8015182:	f7eb f9ff 	bl	8000584 <__aeabi_i2d>
 8015186:	a364      	add	r3, pc, #400	; (adr r3, 8015318 <_dtoa_r+0x2e0>)
 8015188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518c:	f7eb fa64 	bl	8000658 <__aeabi_dmul>
 8015190:	4602      	mov	r2, r0
 8015192:	460b      	mov	r3, r1
 8015194:	4630      	mov	r0, r6
 8015196:	4639      	mov	r1, r7
 8015198:	f7eb f8a8 	bl	80002ec <__adddf3>
 801519c:	4606      	mov	r6, r0
 801519e:	460f      	mov	r7, r1
 80151a0:	f7eb fd0a 	bl	8000bb8 <__aeabi_d2iz>
 80151a4:	2200      	movs	r2, #0
 80151a6:	4683      	mov	fp, r0
 80151a8:	2300      	movs	r3, #0
 80151aa:	4630      	mov	r0, r6
 80151ac:	4639      	mov	r1, r7
 80151ae:	f7eb fcc5 	bl	8000b3c <__aeabi_dcmplt>
 80151b2:	b148      	cbz	r0, 80151c8 <_dtoa_r+0x190>
 80151b4:	4658      	mov	r0, fp
 80151b6:	f7eb f9e5 	bl	8000584 <__aeabi_i2d>
 80151ba:	4632      	mov	r2, r6
 80151bc:	463b      	mov	r3, r7
 80151be:	f7eb fcb3 	bl	8000b28 <__aeabi_dcmpeq>
 80151c2:	b908      	cbnz	r0, 80151c8 <_dtoa_r+0x190>
 80151c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80151c8:	f1bb 0f16 	cmp.w	fp, #22
 80151cc:	d857      	bhi.n	801527e <_dtoa_r+0x246>
 80151ce:	4b5b      	ldr	r3, [pc, #364]	; (801533c <_dtoa_r+0x304>)
 80151d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80151d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d8:	ec51 0b18 	vmov	r0, r1, d8
 80151dc:	f7eb fcae 	bl	8000b3c <__aeabi_dcmplt>
 80151e0:	2800      	cmp	r0, #0
 80151e2:	d04e      	beq.n	8015282 <_dtoa_r+0x24a>
 80151e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80151e8:	2300      	movs	r3, #0
 80151ea:	930c      	str	r3, [sp, #48]	; 0x30
 80151ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151ee:	1b5b      	subs	r3, r3, r5
 80151f0:	1e5a      	subs	r2, r3, #1
 80151f2:	bf45      	ittet	mi
 80151f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80151f8:	9305      	strmi	r3, [sp, #20]
 80151fa:	2300      	movpl	r3, #0
 80151fc:	2300      	movmi	r3, #0
 80151fe:	9206      	str	r2, [sp, #24]
 8015200:	bf54      	ite	pl
 8015202:	9305      	strpl	r3, [sp, #20]
 8015204:	9306      	strmi	r3, [sp, #24]
 8015206:	f1bb 0f00 	cmp.w	fp, #0
 801520a:	db3c      	blt.n	8015286 <_dtoa_r+0x24e>
 801520c:	9b06      	ldr	r3, [sp, #24]
 801520e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8015212:	445b      	add	r3, fp
 8015214:	9306      	str	r3, [sp, #24]
 8015216:	2300      	movs	r3, #0
 8015218:	9308      	str	r3, [sp, #32]
 801521a:	9b07      	ldr	r3, [sp, #28]
 801521c:	2b09      	cmp	r3, #9
 801521e:	d868      	bhi.n	80152f2 <_dtoa_r+0x2ba>
 8015220:	2b05      	cmp	r3, #5
 8015222:	bfc4      	itt	gt
 8015224:	3b04      	subgt	r3, #4
 8015226:	9307      	strgt	r3, [sp, #28]
 8015228:	9b07      	ldr	r3, [sp, #28]
 801522a:	f1a3 0302 	sub.w	r3, r3, #2
 801522e:	bfcc      	ite	gt
 8015230:	2500      	movgt	r5, #0
 8015232:	2501      	movle	r5, #1
 8015234:	2b03      	cmp	r3, #3
 8015236:	f200 8085 	bhi.w	8015344 <_dtoa_r+0x30c>
 801523a:	e8df f003 	tbb	[pc, r3]
 801523e:	3b2e      	.short	0x3b2e
 8015240:	5839      	.short	0x5839
 8015242:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015246:	441d      	add	r5, r3
 8015248:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801524c:	2b20      	cmp	r3, #32
 801524e:	bfc1      	itttt	gt
 8015250:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015254:	fa08 f803 	lslgt.w	r8, r8, r3
 8015258:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801525c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015260:	bfd6      	itet	le
 8015262:	f1c3 0320 	rsble	r3, r3, #32
 8015266:	ea48 0003 	orrgt.w	r0, r8, r3
 801526a:	fa06 f003 	lslle.w	r0, r6, r3
 801526e:	f7eb f979 	bl	8000564 <__aeabi_ui2d>
 8015272:	2201      	movs	r2, #1
 8015274:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015278:	3d01      	subs	r5, #1
 801527a:	920e      	str	r2, [sp, #56]	; 0x38
 801527c:	e76f      	b.n	801515e <_dtoa_r+0x126>
 801527e:	2301      	movs	r3, #1
 8015280:	e7b3      	b.n	80151ea <_dtoa_r+0x1b2>
 8015282:	900c      	str	r0, [sp, #48]	; 0x30
 8015284:	e7b2      	b.n	80151ec <_dtoa_r+0x1b4>
 8015286:	9b05      	ldr	r3, [sp, #20]
 8015288:	eba3 030b 	sub.w	r3, r3, fp
 801528c:	9305      	str	r3, [sp, #20]
 801528e:	f1cb 0300 	rsb	r3, fp, #0
 8015292:	9308      	str	r3, [sp, #32]
 8015294:	2300      	movs	r3, #0
 8015296:	930b      	str	r3, [sp, #44]	; 0x2c
 8015298:	e7bf      	b.n	801521a <_dtoa_r+0x1e2>
 801529a:	2300      	movs	r3, #0
 801529c:	9309      	str	r3, [sp, #36]	; 0x24
 801529e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	dc52      	bgt.n	801534a <_dtoa_r+0x312>
 80152a4:	2301      	movs	r3, #1
 80152a6:	9301      	str	r3, [sp, #4]
 80152a8:	9304      	str	r3, [sp, #16]
 80152aa:	461a      	mov	r2, r3
 80152ac:	920a      	str	r2, [sp, #40]	; 0x28
 80152ae:	e00b      	b.n	80152c8 <_dtoa_r+0x290>
 80152b0:	2301      	movs	r3, #1
 80152b2:	e7f3      	b.n	801529c <_dtoa_r+0x264>
 80152b4:	2300      	movs	r3, #0
 80152b6:	9309      	str	r3, [sp, #36]	; 0x24
 80152b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152ba:	445b      	add	r3, fp
 80152bc:	9301      	str	r3, [sp, #4]
 80152be:	3301      	adds	r3, #1
 80152c0:	2b01      	cmp	r3, #1
 80152c2:	9304      	str	r3, [sp, #16]
 80152c4:	bfb8      	it	lt
 80152c6:	2301      	movlt	r3, #1
 80152c8:	69e0      	ldr	r0, [r4, #28]
 80152ca:	2100      	movs	r1, #0
 80152cc:	2204      	movs	r2, #4
 80152ce:	f102 0614 	add.w	r6, r2, #20
 80152d2:	429e      	cmp	r6, r3
 80152d4:	d93d      	bls.n	8015352 <_dtoa_r+0x31a>
 80152d6:	6041      	str	r1, [r0, #4]
 80152d8:	4620      	mov	r0, r4
 80152da:	f000 fceb 	bl	8015cb4 <_Balloc>
 80152de:	9000      	str	r0, [sp, #0]
 80152e0:	2800      	cmp	r0, #0
 80152e2:	d139      	bne.n	8015358 <_dtoa_r+0x320>
 80152e4:	4b16      	ldr	r3, [pc, #88]	; (8015340 <_dtoa_r+0x308>)
 80152e6:	4602      	mov	r2, r0
 80152e8:	f240 11af 	movw	r1, #431	; 0x1af
 80152ec:	e6bd      	b.n	801506a <_dtoa_r+0x32>
 80152ee:	2301      	movs	r3, #1
 80152f0:	e7e1      	b.n	80152b6 <_dtoa_r+0x27e>
 80152f2:	2501      	movs	r5, #1
 80152f4:	2300      	movs	r3, #0
 80152f6:	9307      	str	r3, [sp, #28]
 80152f8:	9509      	str	r5, [sp, #36]	; 0x24
 80152fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152fe:	9301      	str	r3, [sp, #4]
 8015300:	9304      	str	r3, [sp, #16]
 8015302:	2200      	movs	r2, #0
 8015304:	2312      	movs	r3, #18
 8015306:	e7d1      	b.n	80152ac <_dtoa_r+0x274>
 8015308:	636f4361 	.word	0x636f4361
 801530c:	3fd287a7 	.word	0x3fd287a7
 8015310:	8b60c8b3 	.word	0x8b60c8b3
 8015314:	3fc68a28 	.word	0x3fc68a28
 8015318:	509f79fb 	.word	0x509f79fb
 801531c:	3fd34413 	.word	0x3fd34413
 8015320:	080187dc 	.word	0x080187dc
 8015324:	080187f3 	.word	0x080187f3
 8015328:	7ff00000 	.word	0x7ff00000
 801532c:	080187d8 	.word	0x080187d8
 8015330:	080187cf 	.word	0x080187cf
 8015334:	080187ac 	.word	0x080187ac
 8015338:	3ff80000 	.word	0x3ff80000
 801533c:	080188e0 	.word	0x080188e0
 8015340:	0801884b 	.word	0x0801884b
 8015344:	2301      	movs	r3, #1
 8015346:	9309      	str	r3, [sp, #36]	; 0x24
 8015348:	e7d7      	b.n	80152fa <_dtoa_r+0x2c2>
 801534a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801534c:	9301      	str	r3, [sp, #4]
 801534e:	9304      	str	r3, [sp, #16]
 8015350:	e7ba      	b.n	80152c8 <_dtoa_r+0x290>
 8015352:	3101      	adds	r1, #1
 8015354:	0052      	lsls	r2, r2, #1
 8015356:	e7ba      	b.n	80152ce <_dtoa_r+0x296>
 8015358:	69e3      	ldr	r3, [r4, #28]
 801535a:	9a00      	ldr	r2, [sp, #0]
 801535c:	601a      	str	r2, [r3, #0]
 801535e:	9b04      	ldr	r3, [sp, #16]
 8015360:	2b0e      	cmp	r3, #14
 8015362:	f200 80a8 	bhi.w	80154b6 <_dtoa_r+0x47e>
 8015366:	2d00      	cmp	r5, #0
 8015368:	f000 80a5 	beq.w	80154b6 <_dtoa_r+0x47e>
 801536c:	f1bb 0f00 	cmp.w	fp, #0
 8015370:	dd38      	ble.n	80153e4 <_dtoa_r+0x3ac>
 8015372:	4bc0      	ldr	r3, [pc, #768]	; (8015674 <_dtoa_r+0x63c>)
 8015374:	f00b 020f 	and.w	r2, fp, #15
 8015378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801537c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015380:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015384:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015388:	d019      	beq.n	80153be <_dtoa_r+0x386>
 801538a:	4bbb      	ldr	r3, [pc, #748]	; (8015678 <_dtoa_r+0x640>)
 801538c:	ec51 0b18 	vmov	r0, r1, d8
 8015390:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015394:	f7eb fa8a 	bl	80008ac <__aeabi_ddiv>
 8015398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801539c:	f008 080f 	and.w	r8, r8, #15
 80153a0:	2503      	movs	r5, #3
 80153a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015678 <_dtoa_r+0x640>
 80153a6:	f1b8 0f00 	cmp.w	r8, #0
 80153aa:	d10a      	bne.n	80153c2 <_dtoa_r+0x38a>
 80153ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153b0:	4632      	mov	r2, r6
 80153b2:	463b      	mov	r3, r7
 80153b4:	f7eb fa7a 	bl	80008ac <__aeabi_ddiv>
 80153b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80153bc:	e02b      	b.n	8015416 <_dtoa_r+0x3de>
 80153be:	2502      	movs	r5, #2
 80153c0:	e7ef      	b.n	80153a2 <_dtoa_r+0x36a>
 80153c2:	f018 0f01 	tst.w	r8, #1
 80153c6:	d008      	beq.n	80153da <_dtoa_r+0x3a2>
 80153c8:	4630      	mov	r0, r6
 80153ca:	4639      	mov	r1, r7
 80153cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80153d0:	f7eb f942 	bl	8000658 <__aeabi_dmul>
 80153d4:	3501      	adds	r5, #1
 80153d6:	4606      	mov	r6, r0
 80153d8:	460f      	mov	r7, r1
 80153da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80153de:	f109 0908 	add.w	r9, r9, #8
 80153e2:	e7e0      	b.n	80153a6 <_dtoa_r+0x36e>
 80153e4:	f000 809f 	beq.w	8015526 <_dtoa_r+0x4ee>
 80153e8:	f1cb 0600 	rsb	r6, fp, #0
 80153ec:	4ba1      	ldr	r3, [pc, #644]	; (8015674 <_dtoa_r+0x63c>)
 80153ee:	4fa2      	ldr	r7, [pc, #648]	; (8015678 <_dtoa_r+0x640>)
 80153f0:	f006 020f 	and.w	r2, r6, #15
 80153f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80153f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153fc:	ec51 0b18 	vmov	r0, r1, d8
 8015400:	f7eb f92a 	bl	8000658 <__aeabi_dmul>
 8015404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015408:	1136      	asrs	r6, r6, #4
 801540a:	2300      	movs	r3, #0
 801540c:	2502      	movs	r5, #2
 801540e:	2e00      	cmp	r6, #0
 8015410:	d17e      	bne.n	8015510 <_dtoa_r+0x4d8>
 8015412:	2b00      	cmp	r3, #0
 8015414:	d1d0      	bne.n	80153b8 <_dtoa_r+0x380>
 8015416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015418:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801541c:	2b00      	cmp	r3, #0
 801541e:	f000 8084 	beq.w	801552a <_dtoa_r+0x4f2>
 8015422:	4b96      	ldr	r3, [pc, #600]	; (801567c <_dtoa_r+0x644>)
 8015424:	2200      	movs	r2, #0
 8015426:	4640      	mov	r0, r8
 8015428:	4649      	mov	r1, r9
 801542a:	f7eb fb87 	bl	8000b3c <__aeabi_dcmplt>
 801542e:	2800      	cmp	r0, #0
 8015430:	d07b      	beq.n	801552a <_dtoa_r+0x4f2>
 8015432:	9b04      	ldr	r3, [sp, #16]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d078      	beq.n	801552a <_dtoa_r+0x4f2>
 8015438:	9b01      	ldr	r3, [sp, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	dd39      	ble.n	80154b2 <_dtoa_r+0x47a>
 801543e:	4b90      	ldr	r3, [pc, #576]	; (8015680 <_dtoa_r+0x648>)
 8015440:	2200      	movs	r2, #0
 8015442:	4640      	mov	r0, r8
 8015444:	4649      	mov	r1, r9
 8015446:	f7eb f907 	bl	8000658 <__aeabi_dmul>
 801544a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801544e:	9e01      	ldr	r6, [sp, #4]
 8015450:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8015454:	3501      	adds	r5, #1
 8015456:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801545a:	4628      	mov	r0, r5
 801545c:	f7eb f892 	bl	8000584 <__aeabi_i2d>
 8015460:	4642      	mov	r2, r8
 8015462:	464b      	mov	r3, r9
 8015464:	f7eb f8f8 	bl	8000658 <__aeabi_dmul>
 8015468:	4b86      	ldr	r3, [pc, #536]	; (8015684 <_dtoa_r+0x64c>)
 801546a:	2200      	movs	r2, #0
 801546c:	f7ea ff3e 	bl	80002ec <__adddf3>
 8015470:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015478:	9303      	str	r3, [sp, #12]
 801547a:	2e00      	cmp	r6, #0
 801547c:	d158      	bne.n	8015530 <_dtoa_r+0x4f8>
 801547e:	4b82      	ldr	r3, [pc, #520]	; (8015688 <_dtoa_r+0x650>)
 8015480:	2200      	movs	r2, #0
 8015482:	4640      	mov	r0, r8
 8015484:	4649      	mov	r1, r9
 8015486:	f7ea ff2f 	bl	80002e8 <__aeabi_dsub>
 801548a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801548e:	4680      	mov	r8, r0
 8015490:	4689      	mov	r9, r1
 8015492:	f7eb fb71 	bl	8000b78 <__aeabi_dcmpgt>
 8015496:	2800      	cmp	r0, #0
 8015498:	f040 8296 	bne.w	80159c8 <_dtoa_r+0x990>
 801549c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80154a0:	4640      	mov	r0, r8
 80154a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154a6:	4649      	mov	r1, r9
 80154a8:	f7eb fb48 	bl	8000b3c <__aeabi_dcmplt>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	f040 8289 	bne.w	80159c4 <_dtoa_r+0x98c>
 80154b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80154b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	f2c0 814e 	blt.w	801575a <_dtoa_r+0x722>
 80154be:	f1bb 0f0e 	cmp.w	fp, #14
 80154c2:	f300 814a 	bgt.w	801575a <_dtoa_r+0x722>
 80154c6:	4b6b      	ldr	r3, [pc, #428]	; (8015674 <_dtoa_r+0x63c>)
 80154c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80154cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80154d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	f280 80dc 	bge.w	8015690 <_dtoa_r+0x658>
 80154d8:	9b04      	ldr	r3, [sp, #16]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f300 80d8 	bgt.w	8015690 <_dtoa_r+0x658>
 80154e0:	f040 826f 	bne.w	80159c2 <_dtoa_r+0x98a>
 80154e4:	4b68      	ldr	r3, [pc, #416]	; (8015688 <_dtoa_r+0x650>)
 80154e6:	2200      	movs	r2, #0
 80154e8:	4640      	mov	r0, r8
 80154ea:	4649      	mov	r1, r9
 80154ec:	f7eb f8b4 	bl	8000658 <__aeabi_dmul>
 80154f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80154f4:	f7eb fb36 	bl	8000b64 <__aeabi_dcmpge>
 80154f8:	9e04      	ldr	r6, [sp, #16]
 80154fa:	4637      	mov	r7, r6
 80154fc:	2800      	cmp	r0, #0
 80154fe:	f040 8245 	bne.w	801598c <_dtoa_r+0x954>
 8015502:	9d00      	ldr	r5, [sp, #0]
 8015504:	2331      	movs	r3, #49	; 0x31
 8015506:	f805 3b01 	strb.w	r3, [r5], #1
 801550a:	f10b 0b01 	add.w	fp, fp, #1
 801550e:	e241      	b.n	8015994 <_dtoa_r+0x95c>
 8015510:	07f2      	lsls	r2, r6, #31
 8015512:	d505      	bpl.n	8015520 <_dtoa_r+0x4e8>
 8015514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015518:	f7eb f89e 	bl	8000658 <__aeabi_dmul>
 801551c:	3501      	adds	r5, #1
 801551e:	2301      	movs	r3, #1
 8015520:	1076      	asrs	r6, r6, #1
 8015522:	3708      	adds	r7, #8
 8015524:	e773      	b.n	801540e <_dtoa_r+0x3d6>
 8015526:	2502      	movs	r5, #2
 8015528:	e775      	b.n	8015416 <_dtoa_r+0x3de>
 801552a:	9e04      	ldr	r6, [sp, #16]
 801552c:	465f      	mov	r7, fp
 801552e:	e792      	b.n	8015456 <_dtoa_r+0x41e>
 8015530:	9900      	ldr	r1, [sp, #0]
 8015532:	4b50      	ldr	r3, [pc, #320]	; (8015674 <_dtoa_r+0x63c>)
 8015534:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015538:	4431      	add	r1, r6
 801553a:	9102      	str	r1, [sp, #8]
 801553c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801553e:	eeb0 9a47 	vmov.f32	s18, s14
 8015542:	eef0 9a67 	vmov.f32	s19, s15
 8015546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801554a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801554e:	2900      	cmp	r1, #0
 8015550:	d044      	beq.n	80155dc <_dtoa_r+0x5a4>
 8015552:	494e      	ldr	r1, [pc, #312]	; (801568c <_dtoa_r+0x654>)
 8015554:	2000      	movs	r0, #0
 8015556:	f7eb f9a9 	bl	80008ac <__aeabi_ddiv>
 801555a:	ec53 2b19 	vmov	r2, r3, d9
 801555e:	f7ea fec3 	bl	80002e8 <__aeabi_dsub>
 8015562:	9d00      	ldr	r5, [sp, #0]
 8015564:	ec41 0b19 	vmov	d9, r0, r1
 8015568:	4649      	mov	r1, r9
 801556a:	4640      	mov	r0, r8
 801556c:	f7eb fb24 	bl	8000bb8 <__aeabi_d2iz>
 8015570:	4606      	mov	r6, r0
 8015572:	f7eb f807 	bl	8000584 <__aeabi_i2d>
 8015576:	4602      	mov	r2, r0
 8015578:	460b      	mov	r3, r1
 801557a:	4640      	mov	r0, r8
 801557c:	4649      	mov	r1, r9
 801557e:	f7ea feb3 	bl	80002e8 <__aeabi_dsub>
 8015582:	3630      	adds	r6, #48	; 0x30
 8015584:	f805 6b01 	strb.w	r6, [r5], #1
 8015588:	ec53 2b19 	vmov	r2, r3, d9
 801558c:	4680      	mov	r8, r0
 801558e:	4689      	mov	r9, r1
 8015590:	f7eb fad4 	bl	8000b3c <__aeabi_dcmplt>
 8015594:	2800      	cmp	r0, #0
 8015596:	d164      	bne.n	8015662 <_dtoa_r+0x62a>
 8015598:	4642      	mov	r2, r8
 801559a:	464b      	mov	r3, r9
 801559c:	4937      	ldr	r1, [pc, #220]	; (801567c <_dtoa_r+0x644>)
 801559e:	2000      	movs	r0, #0
 80155a0:	f7ea fea2 	bl	80002e8 <__aeabi_dsub>
 80155a4:	ec53 2b19 	vmov	r2, r3, d9
 80155a8:	f7eb fac8 	bl	8000b3c <__aeabi_dcmplt>
 80155ac:	2800      	cmp	r0, #0
 80155ae:	f040 80b6 	bne.w	801571e <_dtoa_r+0x6e6>
 80155b2:	9b02      	ldr	r3, [sp, #8]
 80155b4:	429d      	cmp	r5, r3
 80155b6:	f43f af7c 	beq.w	80154b2 <_dtoa_r+0x47a>
 80155ba:	4b31      	ldr	r3, [pc, #196]	; (8015680 <_dtoa_r+0x648>)
 80155bc:	ec51 0b19 	vmov	r0, r1, d9
 80155c0:	2200      	movs	r2, #0
 80155c2:	f7eb f849 	bl	8000658 <__aeabi_dmul>
 80155c6:	4b2e      	ldr	r3, [pc, #184]	; (8015680 <_dtoa_r+0x648>)
 80155c8:	ec41 0b19 	vmov	d9, r0, r1
 80155cc:	2200      	movs	r2, #0
 80155ce:	4640      	mov	r0, r8
 80155d0:	4649      	mov	r1, r9
 80155d2:	f7eb f841 	bl	8000658 <__aeabi_dmul>
 80155d6:	4680      	mov	r8, r0
 80155d8:	4689      	mov	r9, r1
 80155da:	e7c5      	b.n	8015568 <_dtoa_r+0x530>
 80155dc:	ec51 0b17 	vmov	r0, r1, d7
 80155e0:	f7eb f83a 	bl	8000658 <__aeabi_dmul>
 80155e4:	9b02      	ldr	r3, [sp, #8]
 80155e6:	9d00      	ldr	r5, [sp, #0]
 80155e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80155ea:	ec41 0b19 	vmov	d9, r0, r1
 80155ee:	4649      	mov	r1, r9
 80155f0:	4640      	mov	r0, r8
 80155f2:	f7eb fae1 	bl	8000bb8 <__aeabi_d2iz>
 80155f6:	4606      	mov	r6, r0
 80155f8:	f7ea ffc4 	bl	8000584 <__aeabi_i2d>
 80155fc:	3630      	adds	r6, #48	; 0x30
 80155fe:	4602      	mov	r2, r0
 8015600:	460b      	mov	r3, r1
 8015602:	4640      	mov	r0, r8
 8015604:	4649      	mov	r1, r9
 8015606:	f7ea fe6f 	bl	80002e8 <__aeabi_dsub>
 801560a:	f805 6b01 	strb.w	r6, [r5], #1
 801560e:	9b02      	ldr	r3, [sp, #8]
 8015610:	429d      	cmp	r5, r3
 8015612:	4680      	mov	r8, r0
 8015614:	4689      	mov	r9, r1
 8015616:	f04f 0200 	mov.w	r2, #0
 801561a:	d124      	bne.n	8015666 <_dtoa_r+0x62e>
 801561c:	4b1b      	ldr	r3, [pc, #108]	; (801568c <_dtoa_r+0x654>)
 801561e:	ec51 0b19 	vmov	r0, r1, d9
 8015622:	f7ea fe63 	bl	80002ec <__adddf3>
 8015626:	4602      	mov	r2, r0
 8015628:	460b      	mov	r3, r1
 801562a:	4640      	mov	r0, r8
 801562c:	4649      	mov	r1, r9
 801562e:	f7eb faa3 	bl	8000b78 <__aeabi_dcmpgt>
 8015632:	2800      	cmp	r0, #0
 8015634:	d173      	bne.n	801571e <_dtoa_r+0x6e6>
 8015636:	ec53 2b19 	vmov	r2, r3, d9
 801563a:	4914      	ldr	r1, [pc, #80]	; (801568c <_dtoa_r+0x654>)
 801563c:	2000      	movs	r0, #0
 801563e:	f7ea fe53 	bl	80002e8 <__aeabi_dsub>
 8015642:	4602      	mov	r2, r0
 8015644:	460b      	mov	r3, r1
 8015646:	4640      	mov	r0, r8
 8015648:	4649      	mov	r1, r9
 801564a:	f7eb fa77 	bl	8000b3c <__aeabi_dcmplt>
 801564e:	2800      	cmp	r0, #0
 8015650:	f43f af2f 	beq.w	80154b2 <_dtoa_r+0x47a>
 8015654:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015656:	1e6b      	subs	r3, r5, #1
 8015658:	930f      	str	r3, [sp, #60]	; 0x3c
 801565a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801565e:	2b30      	cmp	r3, #48	; 0x30
 8015660:	d0f8      	beq.n	8015654 <_dtoa_r+0x61c>
 8015662:	46bb      	mov	fp, r7
 8015664:	e04a      	b.n	80156fc <_dtoa_r+0x6c4>
 8015666:	4b06      	ldr	r3, [pc, #24]	; (8015680 <_dtoa_r+0x648>)
 8015668:	f7ea fff6 	bl	8000658 <__aeabi_dmul>
 801566c:	4680      	mov	r8, r0
 801566e:	4689      	mov	r9, r1
 8015670:	e7bd      	b.n	80155ee <_dtoa_r+0x5b6>
 8015672:	bf00      	nop
 8015674:	080188e0 	.word	0x080188e0
 8015678:	080188b8 	.word	0x080188b8
 801567c:	3ff00000 	.word	0x3ff00000
 8015680:	40240000 	.word	0x40240000
 8015684:	401c0000 	.word	0x401c0000
 8015688:	40140000 	.word	0x40140000
 801568c:	3fe00000 	.word	0x3fe00000
 8015690:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015694:	9d00      	ldr	r5, [sp, #0]
 8015696:	4642      	mov	r2, r8
 8015698:	464b      	mov	r3, r9
 801569a:	4630      	mov	r0, r6
 801569c:	4639      	mov	r1, r7
 801569e:	f7eb f905 	bl	80008ac <__aeabi_ddiv>
 80156a2:	f7eb fa89 	bl	8000bb8 <__aeabi_d2iz>
 80156a6:	9001      	str	r0, [sp, #4]
 80156a8:	f7ea ff6c 	bl	8000584 <__aeabi_i2d>
 80156ac:	4642      	mov	r2, r8
 80156ae:	464b      	mov	r3, r9
 80156b0:	f7ea ffd2 	bl	8000658 <__aeabi_dmul>
 80156b4:	4602      	mov	r2, r0
 80156b6:	460b      	mov	r3, r1
 80156b8:	4630      	mov	r0, r6
 80156ba:	4639      	mov	r1, r7
 80156bc:	f7ea fe14 	bl	80002e8 <__aeabi_dsub>
 80156c0:	9e01      	ldr	r6, [sp, #4]
 80156c2:	9f04      	ldr	r7, [sp, #16]
 80156c4:	3630      	adds	r6, #48	; 0x30
 80156c6:	f805 6b01 	strb.w	r6, [r5], #1
 80156ca:	9e00      	ldr	r6, [sp, #0]
 80156cc:	1bae      	subs	r6, r5, r6
 80156ce:	42b7      	cmp	r7, r6
 80156d0:	4602      	mov	r2, r0
 80156d2:	460b      	mov	r3, r1
 80156d4:	d134      	bne.n	8015740 <_dtoa_r+0x708>
 80156d6:	f7ea fe09 	bl	80002ec <__adddf3>
 80156da:	4642      	mov	r2, r8
 80156dc:	464b      	mov	r3, r9
 80156de:	4606      	mov	r6, r0
 80156e0:	460f      	mov	r7, r1
 80156e2:	f7eb fa49 	bl	8000b78 <__aeabi_dcmpgt>
 80156e6:	b9c8      	cbnz	r0, 801571c <_dtoa_r+0x6e4>
 80156e8:	4642      	mov	r2, r8
 80156ea:	464b      	mov	r3, r9
 80156ec:	4630      	mov	r0, r6
 80156ee:	4639      	mov	r1, r7
 80156f0:	f7eb fa1a 	bl	8000b28 <__aeabi_dcmpeq>
 80156f4:	b110      	cbz	r0, 80156fc <_dtoa_r+0x6c4>
 80156f6:	9b01      	ldr	r3, [sp, #4]
 80156f8:	07db      	lsls	r3, r3, #31
 80156fa:	d40f      	bmi.n	801571c <_dtoa_r+0x6e4>
 80156fc:	4651      	mov	r1, sl
 80156fe:	4620      	mov	r0, r4
 8015700:	f000 fb18 	bl	8015d34 <_Bfree>
 8015704:	2300      	movs	r3, #0
 8015706:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015708:	702b      	strb	r3, [r5, #0]
 801570a:	f10b 0301 	add.w	r3, fp, #1
 801570e:	6013      	str	r3, [r2, #0]
 8015710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015712:	2b00      	cmp	r3, #0
 8015714:	f43f ace2 	beq.w	80150dc <_dtoa_r+0xa4>
 8015718:	601d      	str	r5, [r3, #0]
 801571a:	e4df      	b.n	80150dc <_dtoa_r+0xa4>
 801571c:	465f      	mov	r7, fp
 801571e:	462b      	mov	r3, r5
 8015720:	461d      	mov	r5, r3
 8015722:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015726:	2a39      	cmp	r2, #57	; 0x39
 8015728:	d106      	bne.n	8015738 <_dtoa_r+0x700>
 801572a:	9a00      	ldr	r2, [sp, #0]
 801572c:	429a      	cmp	r2, r3
 801572e:	d1f7      	bne.n	8015720 <_dtoa_r+0x6e8>
 8015730:	9900      	ldr	r1, [sp, #0]
 8015732:	2230      	movs	r2, #48	; 0x30
 8015734:	3701      	adds	r7, #1
 8015736:	700a      	strb	r2, [r1, #0]
 8015738:	781a      	ldrb	r2, [r3, #0]
 801573a:	3201      	adds	r2, #1
 801573c:	701a      	strb	r2, [r3, #0]
 801573e:	e790      	b.n	8015662 <_dtoa_r+0x62a>
 8015740:	4ba3      	ldr	r3, [pc, #652]	; (80159d0 <_dtoa_r+0x998>)
 8015742:	2200      	movs	r2, #0
 8015744:	f7ea ff88 	bl	8000658 <__aeabi_dmul>
 8015748:	2200      	movs	r2, #0
 801574a:	2300      	movs	r3, #0
 801574c:	4606      	mov	r6, r0
 801574e:	460f      	mov	r7, r1
 8015750:	f7eb f9ea 	bl	8000b28 <__aeabi_dcmpeq>
 8015754:	2800      	cmp	r0, #0
 8015756:	d09e      	beq.n	8015696 <_dtoa_r+0x65e>
 8015758:	e7d0      	b.n	80156fc <_dtoa_r+0x6c4>
 801575a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801575c:	2a00      	cmp	r2, #0
 801575e:	f000 80ca 	beq.w	80158f6 <_dtoa_r+0x8be>
 8015762:	9a07      	ldr	r2, [sp, #28]
 8015764:	2a01      	cmp	r2, #1
 8015766:	f300 80ad 	bgt.w	80158c4 <_dtoa_r+0x88c>
 801576a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801576c:	2a00      	cmp	r2, #0
 801576e:	f000 80a5 	beq.w	80158bc <_dtoa_r+0x884>
 8015772:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015776:	9e08      	ldr	r6, [sp, #32]
 8015778:	9d05      	ldr	r5, [sp, #20]
 801577a:	9a05      	ldr	r2, [sp, #20]
 801577c:	441a      	add	r2, r3
 801577e:	9205      	str	r2, [sp, #20]
 8015780:	9a06      	ldr	r2, [sp, #24]
 8015782:	2101      	movs	r1, #1
 8015784:	441a      	add	r2, r3
 8015786:	4620      	mov	r0, r4
 8015788:	9206      	str	r2, [sp, #24]
 801578a:	f000 fb89 	bl	8015ea0 <__i2b>
 801578e:	4607      	mov	r7, r0
 8015790:	b165      	cbz	r5, 80157ac <_dtoa_r+0x774>
 8015792:	9b06      	ldr	r3, [sp, #24]
 8015794:	2b00      	cmp	r3, #0
 8015796:	dd09      	ble.n	80157ac <_dtoa_r+0x774>
 8015798:	42ab      	cmp	r3, r5
 801579a:	9a05      	ldr	r2, [sp, #20]
 801579c:	bfa8      	it	ge
 801579e:	462b      	movge	r3, r5
 80157a0:	1ad2      	subs	r2, r2, r3
 80157a2:	9205      	str	r2, [sp, #20]
 80157a4:	9a06      	ldr	r2, [sp, #24]
 80157a6:	1aed      	subs	r5, r5, r3
 80157a8:	1ad3      	subs	r3, r2, r3
 80157aa:	9306      	str	r3, [sp, #24]
 80157ac:	9b08      	ldr	r3, [sp, #32]
 80157ae:	b1f3      	cbz	r3, 80157ee <_dtoa_r+0x7b6>
 80157b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	f000 80a3 	beq.w	80158fe <_dtoa_r+0x8c6>
 80157b8:	2e00      	cmp	r6, #0
 80157ba:	dd10      	ble.n	80157de <_dtoa_r+0x7a6>
 80157bc:	4639      	mov	r1, r7
 80157be:	4632      	mov	r2, r6
 80157c0:	4620      	mov	r0, r4
 80157c2:	f000 fc2d 	bl	8016020 <__pow5mult>
 80157c6:	4652      	mov	r2, sl
 80157c8:	4601      	mov	r1, r0
 80157ca:	4607      	mov	r7, r0
 80157cc:	4620      	mov	r0, r4
 80157ce:	f000 fb7d 	bl	8015ecc <__multiply>
 80157d2:	4651      	mov	r1, sl
 80157d4:	4680      	mov	r8, r0
 80157d6:	4620      	mov	r0, r4
 80157d8:	f000 faac 	bl	8015d34 <_Bfree>
 80157dc:	46c2      	mov	sl, r8
 80157de:	9b08      	ldr	r3, [sp, #32]
 80157e0:	1b9a      	subs	r2, r3, r6
 80157e2:	d004      	beq.n	80157ee <_dtoa_r+0x7b6>
 80157e4:	4651      	mov	r1, sl
 80157e6:	4620      	mov	r0, r4
 80157e8:	f000 fc1a 	bl	8016020 <__pow5mult>
 80157ec:	4682      	mov	sl, r0
 80157ee:	2101      	movs	r1, #1
 80157f0:	4620      	mov	r0, r4
 80157f2:	f000 fb55 	bl	8015ea0 <__i2b>
 80157f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	4606      	mov	r6, r0
 80157fc:	f340 8081 	ble.w	8015902 <_dtoa_r+0x8ca>
 8015800:	461a      	mov	r2, r3
 8015802:	4601      	mov	r1, r0
 8015804:	4620      	mov	r0, r4
 8015806:	f000 fc0b 	bl	8016020 <__pow5mult>
 801580a:	9b07      	ldr	r3, [sp, #28]
 801580c:	2b01      	cmp	r3, #1
 801580e:	4606      	mov	r6, r0
 8015810:	dd7a      	ble.n	8015908 <_dtoa_r+0x8d0>
 8015812:	f04f 0800 	mov.w	r8, #0
 8015816:	6933      	ldr	r3, [r6, #16]
 8015818:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801581c:	6918      	ldr	r0, [r3, #16]
 801581e:	f000 faf1 	bl	8015e04 <__hi0bits>
 8015822:	f1c0 0020 	rsb	r0, r0, #32
 8015826:	9b06      	ldr	r3, [sp, #24]
 8015828:	4418      	add	r0, r3
 801582a:	f010 001f 	ands.w	r0, r0, #31
 801582e:	f000 8094 	beq.w	801595a <_dtoa_r+0x922>
 8015832:	f1c0 0320 	rsb	r3, r0, #32
 8015836:	2b04      	cmp	r3, #4
 8015838:	f340 8085 	ble.w	8015946 <_dtoa_r+0x90e>
 801583c:	9b05      	ldr	r3, [sp, #20]
 801583e:	f1c0 001c 	rsb	r0, r0, #28
 8015842:	4403      	add	r3, r0
 8015844:	9305      	str	r3, [sp, #20]
 8015846:	9b06      	ldr	r3, [sp, #24]
 8015848:	4403      	add	r3, r0
 801584a:	4405      	add	r5, r0
 801584c:	9306      	str	r3, [sp, #24]
 801584e:	9b05      	ldr	r3, [sp, #20]
 8015850:	2b00      	cmp	r3, #0
 8015852:	dd05      	ble.n	8015860 <_dtoa_r+0x828>
 8015854:	4651      	mov	r1, sl
 8015856:	461a      	mov	r2, r3
 8015858:	4620      	mov	r0, r4
 801585a:	f000 fc3b 	bl	80160d4 <__lshift>
 801585e:	4682      	mov	sl, r0
 8015860:	9b06      	ldr	r3, [sp, #24]
 8015862:	2b00      	cmp	r3, #0
 8015864:	dd05      	ble.n	8015872 <_dtoa_r+0x83a>
 8015866:	4631      	mov	r1, r6
 8015868:	461a      	mov	r2, r3
 801586a:	4620      	mov	r0, r4
 801586c:	f000 fc32 	bl	80160d4 <__lshift>
 8015870:	4606      	mov	r6, r0
 8015872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015874:	2b00      	cmp	r3, #0
 8015876:	d072      	beq.n	801595e <_dtoa_r+0x926>
 8015878:	4631      	mov	r1, r6
 801587a:	4650      	mov	r0, sl
 801587c:	f000 fc96 	bl	80161ac <__mcmp>
 8015880:	2800      	cmp	r0, #0
 8015882:	da6c      	bge.n	801595e <_dtoa_r+0x926>
 8015884:	2300      	movs	r3, #0
 8015886:	4651      	mov	r1, sl
 8015888:	220a      	movs	r2, #10
 801588a:	4620      	mov	r0, r4
 801588c:	f000 fa74 	bl	8015d78 <__multadd>
 8015890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015892:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015896:	4682      	mov	sl, r0
 8015898:	2b00      	cmp	r3, #0
 801589a:	f000 81b0 	beq.w	8015bfe <_dtoa_r+0xbc6>
 801589e:	2300      	movs	r3, #0
 80158a0:	4639      	mov	r1, r7
 80158a2:	220a      	movs	r2, #10
 80158a4:	4620      	mov	r0, r4
 80158a6:	f000 fa67 	bl	8015d78 <__multadd>
 80158aa:	9b01      	ldr	r3, [sp, #4]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	4607      	mov	r7, r0
 80158b0:	f300 8096 	bgt.w	80159e0 <_dtoa_r+0x9a8>
 80158b4:	9b07      	ldr	r3, [sp, #28]
 80158b6:	2b02      	cmp	r3, #2
 80158b8:	dc59      	bgt.n	801596e <_dtoa_r+0x936>
 80158ba:	e091      	b.n	80159e0 <_dtoa_r+0x9a8>
 80158bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80158c2:	e758      	b.n	8015776 <_dtoa_r+0x73e>
 80158c4:	9b04      	ldr	r3, [sp, #16]
 80158c6:	1e5e      	subs	r6, r3, #1
 80158c8:	9b08      	ldr	r3, [sp, #32]
 80158ca:	42b3      	cmp	r3, r6
 80158cc:	bfbf      	itttt	lt
 80158ce:	9b08      	ldrlt	r3, [sp, #32]
 80158d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80158d2:	9608      	strlt	r6, [sp, #32]
 80158d4:	1af3      	sublt	r3, r6, r3
 80158d6:	bfb4      	ite	lt
 80158d8:	18d2      	addlt	r2, r2, r3
 80158da:	1b9e      	subge	r6, r3, r6
 80158dc:	9b04      	ldr	r3, [sp, #16]
 80158de:	bfbc      	itt	lt
 80158e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80158e2:	2600      	movlt	r6, #0
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	bfb7      	itett	lt
 80158e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80158ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80158f0:	1a9d      	sublt	r5, r3, r2
 80158f2:	2300      	movlt	r3, #0
 80158f4:	e741      	b.n	801577a <_dtoa_r+0x742>
 80158f6:	9e08      	ldr	r6, [sp, #32]
 80158f8:	9d05      	ldr	r5, [sp, #20]
 80158fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80158fc:	e748      	b.n	8015790 <_dtoa_r+0x758>
 80158fe:	9a08      	ldr	r2, [sp, #32]
 8015900:	e770      	b.n	80157e4 <_dtoa_r+0x7ac>
 8015902:	9b07      	ldr	r3, [sp, #28]
 8015904:	2b01      	cmp	r3, #1
 8015906:	dc19      	bgt.n	801593c <_dtoa_r+0x904>
 8015908:	9b02      	ldr	r3, [sp, #8]
 801590a:	b9bb      	cbnz	r3, 801593c <_dtoa_r+0x904>
 801590c:	9b03      	ldr	r3, [sp, #12]
 801590e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015912:	b99b      	cbnz	r3, 801593c <_dtoa_r+0x904>
 8015914:	9b03      	ldr	r3, [sp, #12]
 8015916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801591a:	0d1b      	lsrs	r3, r3, #20
 801591c:	051b      	lsls	r3, r3, #20
 801591e:	b183      	cbz	r3, 8015942 <_dtoa_r+0x90a>
 8015920:	9b05      	ldr	r3, [sp, #20]
 8015922:	3301      	adds	r3, #1
 8015924:	9305      	str	r3, [sp, #20]
 8015926:	9b06      	ldr	r3, [sp, #24]
 8015928:	3301      	adds	r3, #1
 801592a:	9306      	str	r3, [sp, #24]
 801592c:	f04f 0801 	mov.w	r8, #1
 8015930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015932:	2b00      	cmp	r3, #0
 8015934:	f47f af6f 	bne.w	8015816 <_dtoa_r+0x7de>
 8015938:	2001      	movs	r0, #1
 801593a:	e774      	b.n	8015826 <_dtoa_r+0x7ee>
 801593c:	f04f 0800 	mov.w	r8, #0
 8015940:	e7f6      	b.n	8015930 <_dtoa_r+0x8f8>
 8015942:	4698      	mov	r8, r3
 8015944:	e7f4      	b.n	8015930 <_dtoa_r+0x8f8>
 8015946:	d082      	beq.n	801584e <_dtoa_r+0x816>
 8015948:	9a05      	ldr	r2, [sp, #20]
 801594a:	331c      	adds	r3, #28
 801594c:	441a      	add	r2, r3
 801594e:	9205      	str	r2, [sp, #20]
 8015950:	9a06      	ldr	r2, [sp, #24]
 8015952:	441a      	add	r2, r3
 8015954:	441d      	add	r5, r3
 8015956:	9206      	str	r2, [sp, #24]
 8015958:	e779      	b.n	801584e <_dtoa_r+0x816>
 801595a:	4603      	mov	r3, r0
 801595c:	e7f4      	b.n	8015948 <_dtoa_r+0x910>
 801595e:	9b04      	ldr	r3, [sp, #16]
 8015960:	2b00      	cmp	r3, #0
 8015962:	dc37      	bgt.n	80159d4 <_dtoa_r+0x99c>
 8015964:	9b07      	ldr	r3, [sp, #28]
 8015966:	2b02      	cmp	r3, #2
 8015968:	dd34      	ble.n	80159d4 <_dtoa_r+0x99c>
 801596a:	9b04      	ldr	r3, [sp, #16]
 801596c:	9301      	str	r3, [sp, #4]
 801596e:	9b01      	ldr	r3, [sp, #4]
 8015970:	b963      	cbnz	r3, 801598c <_dtoa_r+0x954>
 8015972:	4631      	mov	r1, r6
 8015974:	2205      	movs	r2, #5
 8015976:	4620      	mov	r0, r4
 8015978:	f000 f9fe 	bl	8015d78 <__multadd>
 801597c:	4601      	mov	r1, r0
 801597e:	4606      	mov	r6, r0
 8015980:	4650      	mov	r0, sl
 8015982:	f000 fc13 	bl	80161ac <__mcmp>
 8015986:	2800      	cmp	r0, #0
 8015988:	f73f adbb 	bgt.w	8015502 <_dtoa_r+0x4ca>
 801598c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801598e:	9d00      	ldr	r5, [sp, #0]
 8015990:	ea6f 0b03 	mvn.w	fp, r3
 8015994:	f04f 0800 	mov.w	r8, #0
 8015998:	4631      	mov	r1, r6
 801599a:	4620      	mov	r0, r4
 801599c:	f000 f9ca 	bl	8015d34 <_Bfree>
 80159a0:	2f00      	cmp	r7, #0
 80159a2:	f43f aeab 	beq.w	80156fc <_dtoa_r+0x6c4>
 80159a6:	f1b8 0f00 	cmp.w	r8, #0
 80159aa:	d005      	beq.n	80159b8 <_dtoa_r+0x980>
 80159ac:	45b8      	cmp	r8, r7
 80159ae:	d003      	beq.n	80159b8 <_dtoa_r+0x980>
 80159b0:	4641      	mov	r1, r8
 80159b2:	4620      	mov	r0, r4
 80159b4:	f000 f9be 	bl	8015d34 <_Bfree>
 80159b8:	4639      	mov	r1, r7
 80159ba:	4620      	mov	r0, r4
 80159bc:	f000 f9ba 	bl	8015d34 <_Bfree>
 80159c0:	e69c      	b.n	80156fc <_dtoa_r+0x6c4>
 80159c2:	2600      	movs	r6, #0
 80159c4:	4637      	mov	r7, r6
 80159c6:	e7e1      	b.n	801598c <_dtoa_r+0x954>
 80159c8:	46bb      	mov	fp, r7
 80159ca:	4637      	mov	r7, r6
 80159cc:	e599      	b.n	8015502 <_dtoa_r+0x4ca>
 80159ce:	bf00      	nop
 80159d0:	40240000 	.word	0x40240000
 80159d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	f000 80c8 	beq.w	8015b6c <_dtoa_r+0xb34>
 80159dc:	9b04      	ldr	r3, [sp, #16]
 80159de:	9301      	str	r3, [sp, #4]
 80159e0:	2d00      	cmp	r5, #0
 80159e2:	dd05      	ble.n	80159f0 <_dtoa_r+0x9b8>
 80159e4:	4639      	mov	r1, r7
 80159e6:	462a      	mov	r2, r5
 80159e8:	4620      	mov	r0, r4
 80159ea:	f000 fb73 	bl	80160d4 <__lshift>
 80159ee:	4607      	mov	r7, r0
 80159f0:	f1b8 0f00 	cmp.w	r8, #0
 80159f4:	d05b      	beq.n	8015aae <_dtoa_r+0xa76>
 80159f6:	6879      	ldr	r1, [r7, #4]
 80159f8:	4620      	mov	r0, r4
 80159fa:	f000 f95b 	bl	8015cb4 <_Balloc>
 80159fe:	4605      	mov	r5, r0
 8015a00:	b928      	cbnz	r0, 8015a0e <_dtoa_r+0x9d6>
 8015a02:	4b83      	ldr	r3, [pc, #524]	; (8015c10 <_dtoa_r+0xbd8>)
 8015a04:	4602      	mov	r2, r0
 8015a06:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015a0a:	f7ff bb2e 	b.w	801506a <_dtoa_r+0x32>
 8015a0e:	693a      	ldr	r2, [r7, #16]
 8015a10:	3202      	adds	r2, #2
 8015a12:	0092      	lsls	r2, r2, #2
 8015a14:	f107 010c 	add.w	r1, r7, #12
 8015a18:	300c      	adds	r0, #12
 8015a1a:	f7ff fa74 	bl	8014f06 <memcpy>
 8015a1e:	2201      	movs	r2, #1
 8015a20:	4629      	mov	r1, r5
 8015a22:	4620      	mov	r0, r4
 8015a24:	f000 fb56 	bl	80160d4 <__lshift>
 8015a28:	9b00      	ldr	r3, [sp, #0]
 8015a2a:	3301      	adds	r3, #1
 8015a2c:	9304      	str	r3, [sp, #16]
 8015a2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a32:	4413      	add	r3, r2
 8015a34:	9308      	str	r3, [sp, #32]
 8015a36:	9b02      	ldr	r3, [sp, #8]
 8015a38:	f003 0301 	and.w	r3, r3, #1
 8015a3c:	46b8      	mov	r8, r7
 8015a3e:	9306      	str	r3, [sp, #24]
 8015a40:	4607      	mov	r7, r0
 8015a42:	9b04      	ldr	r3, [sp, #16]
 8015a44:	4631      	mov	r1, r6
 8015a46:	3b01      	subs	r3, #1
 8015a48:	4650      	mov	r0, sl
 8015a4a:	9301      	str	r3, [sp, #4]
 8015a4c:	f7ff fa69 	bl	8014f22 <quorem>
 8015a50:	4641      	mov	r1, r8
 8015a52:	9002      	str	r0, [sp, #8]
 8015a54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015a58:	4650      	mov	r0, sl
 8015a5a:	f000 fba7 	bl	80161ac <__mcmp>
 8015a5e:	463a      	mov	r2, r7
 8015a60:	9005      	str	r0, [sp, #20]
 8015a62:	4631      	mov	r1, r6
 8015a64:	4620      	mov	r0, r4
 8015a66:	f000 fbbd 	bl	80161e4 <__mdiff>
 8015a6a:	68c2      	ldr	r2, [r0, #12]
 8015a6c:	4605      	mov	r5, r0
 8015a6e:	bb02      	cbnz	r2, 8015ab2 <_dtoa_r+0xa7a>
 8015a70:	4601      	mov	r1, r0
 8015a72:	4650      	mov	r0, sl
 8015a74:	f000 fb9a 	bl	80161ac <__mcmp>
 8015a78:	4602      	mov	r2, r0
 8015a7a:	4629      	mov	r1, r5
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8015a80:	f000 f958 	bl	8015d34 <_Bfree>
 8015a84:	9b07      	ldr	r3, [sp, #28]
 8015a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a88:	9d04      	ldr	r5, [sp, #16]
 8015a8a:	ea43 0102 	orr.w	r1, r3, r2
 8015a8e:	9b06      	ldr	r3, [sp, #24]
 8015a90:	4319      	orrs	r1, r3
 8015a92:	d110      	bne.n	8015ab6 <_dtoa_r+0xa7e>
 8015a94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015a98:	d029      	beq.n	8015aee <_dtoa_r+0xab6>
 8015a9a:	9b05      	ldr	r3, [sp, #20]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	dd02      	ble.n	8015aa6 <_dtoa_r+0xa6e>
 8015aa0:	9b02      	ldr	r3, [sp, #8]
 8015aa2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8015aa6:	9b01      	ldr	r3, [sp, #4]
 8015aa8:	f883 9000 	strb.w	r9, [r3]
 8015aac:	e774      	b.n	8015998 <_dtoa_r+0x960>
 8015aae:	4638      	mov	r0, r7
 8015ab0:	e7ba      	b.n	8015a28 <_dtoa_r+0x9f0>
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	e7e1      	b.n	8015a7a <_dtoa_r+0xa42>
 8015ab6:	9b05      	ldr	r3, [sp, #20]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	db04      	blt.n	8015ac6 <_dtoa_r+0xa8e>
 8015abc:	9907      	ldr	r1, [sp, #28]
 8015abe:	430b      	orrs	r3, r1
 8015ac0:	9906      	ldr	r1, [sp, #24]
 8015ac2:	430b      	orrs	r3, r1
 8015ac4:	d120      	bne.n	8015b08 <_dtoa_r+0xad0>
 8015ac6:	2a00      	cmp	r2, #0
 8015ac8:	dded      	ble.n	8015aa6 <_dtoa_r+0xa6e>
 8015aca:	4651      	mov	r1, sl
 8015acc:	2201      	movs	r2, #1
 8015ace:	4620      	mov	r0, r4
 8015ad0:	f000 fb00 	bl	80160d4 <__lshift>
 8015ad4:	4631      	mov	r1, r6
 8015ad6:	4682      	mov	sl, r0
 8015ad8:	f000 fb68 	bl	80161ac <__mcmp>
 8015adc:	2800      	cmp	r0, #0
 8015ade:	dc03      	bgt.n	8015ae8 <_dtoa_r+0xab0>
 8015ae0:	d1e1      	bne.n	8015aa6 <_dtoa_r+0xa6e>
 8015ae2:	f019 0f01 	tst.w	r9, #1
 8015ae6:	d0de      	beq.n	8015aa6 <_dtoa_r+0xa6e>
 8015ae8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015aec:	d1d8      	bne.n	8015aa0 <_dtoa_r+0xa68>
 8015aee:	9a01      	ldr	r2, [sp, #4]
 8015af0:	2339      	movs	r3, #57	; 0x39
 8015af2:	7013      	strb	r3, [r2, #0]
 8015af4:	462b      	mov	r3, r5
 8015af6:	461d      	mov	r5, r3
 8015af8:	3b01      	subs	r3, #1
 8015afa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015afe:	2a39      	cmp	r2, #57	; 0x39
 8015b00:	d06c      	beq.n	8015bdc <_dtoa_r+0xba4>
 8015b02:	3201      	adds	r2, #1
 8015b04:	701a      	strb	r2, [r3, #0]
 8015b06:	e747      	b.n	8015998 <_dtoa_r+0x960>
 8015b08:	2a00      	cmp	r2, #0
 8015b0a:	dd07      	ble.n	8015b1c <_dtoa_r+0xae4>
 8015b0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015b10:	d0ed      	beq.n	8015aee <_dtoa_r+0xab6>
 8015b12:	9a01      	ldr	r2, [sp, #4]
 8015b14:	f109 0301 	add.w	r3, r9, #1
 8015b18:	7013      	strb	r3, [r2, #0]
 8015b1a:	e73d      	b.n	8015998 <_dtoa_r+0x960>
 8015b1c:	9b04      	ldr	r3, [sp, #16]
 8015b1e:	9a08      	ldr	r2, [sp, #32]
 8015b20:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015b24:	4293      	cmp	r3, r2
 8015b26:	d043      	beq.n	8015bb0 <_dtoa_r+0xb78>
 8015b28:	4651      	mov	r1, sl
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	220a      	movs	r2, #10
 8015b2e:	4620      	mov	r0, r4
 8015b30:	f000 f922 	bl	8015d78 <__multadd>
 8015b34:	45b8      	cmp	r8, r7
 8015b36:	4682      	mov	sl, r0
 8015b38:	f04f 0300 	mov.w	r3, #0
 8015b3c:	f04f 020a 	mov.w	r2, #10
 8015b40:	4641      	mov	r1, r8
 8015b42:	4620      	mov	r0, r4
 8015b44:	d107      	bne.n	8015b56 <_dtoa_r+0xb1e>
 8015b46:	f000 f917 	bl	8015d78 <__multadd>
 8015b4a:	4680      	mov	r8, r0
 8015b4c:	4607      	mov	r7, r0
 8015b4e:	9b04      	ldr	r3, [sp, #16]
 8015b50:	3301      	adds	r3, #1
 8015b52:	9304      	str	r3, [sp, #16]
 8015b54:	e775      	b.n	8015a42 <_dtoa_r+0xa0a>
 8015b56:	f000 f90f 	bl	8015d78 <__multadd>
 8015b5a:	4639      	mov	r1, r7
 8015b5c:	4680      	mov	r8, r0
 8015b5e:	2300      	movs	r3, #0
 8015b60:	220a      	movs	r2, #10
 8015b62:	4620      	mov	r0, r4
 8015b64:	f000 f908 	bl	8015d78 <__multadd>
 8015b68:	4607      	mov	r7, r0
 8015b6a:	e7f0      	b.n	8015b4e <_dtoa_r+0xb16>
 8015b6c:	9b04      	ldr	r3, [sp, #16]
 8015b6e:	9301      	str	r3, [sp, #4]
 8015b70:	9d00      	ldr	r5, [sp, #0]
 8015b72:	4631      	mov	r1, r6
 8015b74:	4650      	mov	r0, sl
 8015b76:	f7ff f9d4 	bl	8014f22 <quorem>
 8015b7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015b7e:	9b00      	ldr	r3, [sp, #0]
 8015b80:	f805 9b01 	strb.w	r9, [r5], #1
 8015b84:	1aea      	subs	r2, r5, r3
 8015b86:	9b01      	ldr	r3, [sp, #4]
 8015b88:	4293      	cmp	r3, r2
 8015b8a:	dd07      	ble.n	8015b9c <_dtoa_r+0xb64>
 8015b8c:	4651      	mov	r1, sl
 8015b8e:	2300      	movs	r3, #0
 8015b90:	220a      	movs	r2, #10
 8015b92:	4620      	mov	r0, r4
 8015b94:	f000 f8f0 	bl	8015d78 <__multadd>
 8015b98:	4682      	mov	sl, r0
 8015b9a:	e7ea      	b.n	8015b72 <_dtoa_r+0xb3a>
 8015b9c:	9b01      	ldr	r3, [sp, #4]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	bfc8      	it	gt
 8015ba2:	461d      	movgt	r5, r3
 8015ba4:	9b00      	ldr	r3, [sp, #0]
 8015ba6:	bfd8      	it	le
 8015ba8:	2501      	movle	r5, #1
 8015baa:	441d      	add	r5, r3
 8015bac:	f04f 0800 	mov.w	r8, #0
 8015bb0:	4651      	mov	r1, sl
 8015bb2:	2201      	movs	r2, #1
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	f000 fa8d 	bl	80160d4 <__lshift>
 8015bba:	4631      	mov	r1, r6
 8015bbc:	4682      	mov	sl, r0
 8015bbe:	f000 faf5 	bl	80161ac <__mcmp>
 8015bc2:	2800      	cmp	r0, #0
 8015bc4:	dc96      	bgt.n	8015af4 <_dtoa_r+0xabc>
 8015bc6:	d102      	bne.n	8015bce <_dtoa_r+0xb96>
 8015bc8:	f019 0f01 	tst.w	r9, #1
 8015bcc:	d192      	bne.n	8015af4 <_dtoa_r+0xabc>
 8015bce:	462b      	mov	r3, r5
 8015bd0:	461d      	mov	r5, r3
 8015bd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015bd6:	2a30      	cmp	r2, #48	; 0x30
 8015bd8:	d0fa      	beq.n	8015bd0 <_dtoa_r+0xb98>
 8015bda:	e6dd      	b.n	8015998 <_dtoa_r+0x960>
 8015bdc:	9a00      	ldr	r2, [sp, #0]
 8015bde:	429a      	cmp	r2, r3
 8015be0:	d189      	bne.n	8015af6 <_dtoa_r+0xabe>
 8015be2:	f10b 0b01 	add.w	fp, fp, #1
 8015be6:	2331      	movs	r3, #49	; 0x31
 8015be8:	e796      	b.n	8015b18 <_dtoa_r+0xae0>
 8015bea:	4b0a      	ldr	r3, [pc, #40]	; (8015c14 <_dtoa_r+0xbdc>)
 8015bec:	f7ff ba99 	b.w	8015122 <_dtoa_r+0xea>
 8015bf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	f47f aa6d 	bne.w	80150d2 <_dtoa_r+0x9a>
 8015bf8:	4b07      	ldr	r3, [pc, #28]	; (8015c18 <_dtoa_r+0xbe0>)
 8015bfa:	f7ff ba92 	b.w	8015122 <_dtoa_r+0xea>
 8015bfe:	9b01      	ldr	r3, [sp, #4]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	dcb5      	bgt.n	8015b70 <_dtoa_r+0xb38>
 8015c04:	9b07      	ldr	r3, [sp, #28]
 8015c06:	2b02      	cmp	r3, #2
 8015c08:	f73f aeb1 	bgt.w	801596e <_dtoa_r+0x936>
 8015c0c:	e7b0      	b.n	8015b70 <_dtoa_r+0xb38>
 8015c0e:	bf00      	nop
 8015c10:	0801884b 	.word	0x0801884b
 8015c14:	080187ab 	.word	0x080187ab
 8015c18:	080187cf 	.word	0x080187cf

08015c1c <_free_r>:
 8015c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c1e:	2900      	cmp	r1, #0
 8015c20:	d044      	beq.n	8015cac <_free_r+0x90>
 8015c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c26:	9001      	str	r0, [sp, #4]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8015c2e:	bfb8      	it	lt
 8015c30:	18e4      	addlt	r4, r4, r3
 8015c32:	f7fe fae3 	bl	80141fc <__malloc_lock>
 8015c36:	4a1e      	ldr	r2, [pc, #120]	; (8015cb0 <_free_r+0x94>)
 8015c38:	9801      	ldr	r0, [sp, #4]
 8015c3a:	6813      	ldr	r3, [r2, #0]
 8015c3c:	b933      	cbnz	r3, 8015c4c <_free_r+0x30>
 8015c3e:	6063      	str	r3, [r4, #4]
 8015c40:	6014      	str	r4, [r2, #0]
 8015c42:	b003      	add	sp, #12
 8015c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c48:	f7fe bade 	b.w	8014208 <__malloc_unlock>
 8015c4c:	42a3      	cmp	r3, r4
 8015c4e:	d908      	bls.n	8015c62 <_free_r+0x46>
 8015c50:	6825      	ldr	r5, [r4, #0]
 8015c52:	1961      	adds	r1, r4, r5
 8015c54:	428b      	cmp	r3, r1
 8015c56:	bf01      	itttt	eq
 8015c58:	6819      	ldreq	r1, [r3, #0]
 8015c5a:	685b      	ldreq	r3, [r3, #4]
 8015c5c:	1949      	addeq	r1, r1, r5
 8015c5e:	6021      	streq	r1, [r4, #0]
 8015c60:	e7ed      	b.n	8015c3e <_free_r+0x22>
 8015c62:	461a      	mov	r2, r3
 8015c64:	685b      	ldr	r3, [r3, #4]
 8015c66:	b10b      	cbz	r3, 8015c6c <_free_r+0x50>
 8015c68:	42a3      	cmp	r3, r4
 8015c6a:	d9fa      	bls.n	8015c62 <_free_r+0x46>
 8015c6c:	6811      	ldr	r1, [r2, #0]
 8015c6e:	1855      	adds	r5, r2, r1
 8015c70:	42a5      	cmp	r5, r4
 8015c72:	d10b      	bne.n	8015c8c <_free_r+0x70>
 8015c74:	6824      	ldr	r4, [r4, #0]
 8015c76:	4421      	add	r1, r4
 8015c78:	1854      	adds	r4, r2, r1
 8015c7a:	42a3      	cmp	r3, r4
 8015c7c:	6011      	str	r1, [r2, #0]
 8015c7e:	d1e0      	bne.n	8015c42 <_free_r+0x26>
 8015c80:	681c      	ldr	r4, [r3, #0]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	6053      	str	r3, [r2, #4]
 8015c86:	440c      	add	r4, r1
 8015c88:	6014      	str	r4, [r2, #0]
 8015c8a:	e7da      	b.n	8015c42 <_free_r+0x26>
 8015c8c:	d902      	bls.n	8015c94 <_free_r+0x78>
 8015c8e:	230c      	movs	r3, #12
 8015c90:	6003      	str	r3, [r0, #0]
 8015c92:	e7d6      	b.n	8015c42 <_free_r+0x26>
 8015c94:	6825      	ldr	r5, [r4, #0]
 8015c96:	1961      	adds	r1, r4, r5
 8015c98:	428b      	cmp	r3, r1
 8015c9a:	bf04      	itt	eq
 8015c9c:	6819      	ldreq	r1, [r3, #0]
 8015c9e:	685b      	ldreq	r3, [r3, #4]
 8015ca0:	6063      	str	r3, [r4, #4]
 8015ca2:	bf04      	itt	eq
 8015ca4:	1949      	addeq	r1, r1, r5
 8015ca6:	6021      	streq	r1, [r4, #0]
 8015ca8:	6054      	str	r4, [r2, #4]
 8015caa:	e7ca      	b.n	8015c42 <_free_r+0x26>
 8015cac:	b003      	add	sp, #12
 8015cae:	bd30      	pop	{r4, r5, pc}
 8015cb0:	20000420 	.word	0x20000420

08015cb4 <_Balloc>:
 8015cb4:	b570      	push	{r4, r5, r6, lr}
 8015cb6:	69c6      	ldr	r6, [r0, #28]
 8015cb8:	4604      	mov	r4, r0
 8015cba:	460d      	mov	r5, r1
 8015cbc:	b976      	cbnz	r6, 8015cdc <_Balloc+0x28>
 8015cbe:	2010      	movs	r0, #16
 8015cc0:	f7fe f9ec 	bl	801409c <malloc>
 8015cc4:	4602      	mov	r2, r0
 8015cc6:	61e0      	str	r0, [r4, #28]
 8015cc8:	b920      	cbnz	r0, 8015cd4 <_Balloc+0x20>
 8015cca:	4b18      	ldr	r3, [pc, #96]	; (8015d2c <_Balloc+0x78>)
 8015ccc:	4818      	ldr	r0, [pc, #96]	; (8015d30 <_Balloc+0x7c>)
 8015cce:	216b      	movs	r1, #107	; 0x6b
 8015cd0:	f000 fd72 	bl	80167b8 <__assert_func>
 8015cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015cd8:	6006      	str	r6, [r0, #0]
 8015cda:	60c6      	str	r6, [r0, #12]
 8015cdc:	69e6      	ldr	r6, [r4, #28]
 8015cde:	68f3      	ldr	r3, [r6, #12]
 8015ce0:	b183      	cbz	r3, 8015d04 <_Balloc+0x50>
 8015ce2:	69e3      	ldr	r3, [r4, #28]
 8015ce4:	68db      	ldr	r3, [r3, #12]
 8015ce6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015cea:	b9b8      	cbnz	r0, 8015d1c <_Balloc+0x68>
 8015cec:	2101      	movs	r1, #1
 8015cee:	fa01 f605 	lsl.w	r6, r1, r5
 8015cf2:	1d72      	adds	r2, r6, #5
 8015cf4:	0092      	lsls	r2, r2, #2
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f000 fd7c 	bl	80167f4 <_calloc_r>
 8015cfc:	b160      	cbz	r0, 8015d18 <_Balloc+0x64>
 8015cfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015d02:	e00e      	b.n	8015d22 <_Balloc+0x6e>
 8015d04:	2221      	movs	r2, #33	; 0x21
 8015d06:	2104      	movs	r1, #4
 8015d08:	4620      	mov	r0, r4
 8015d0a:	f000 fd73 	bl	80167f4 <_calloc_r>
 8015d0e:	69e3      	ldr	r3, [r4, #28]
 8015d10:	60f0      	str	r0, [r6, #12]
 8015d12:	68db      	ldr	r3, [r3, #12]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d1e4      	bne.n	8015ce2 <_Balloc+0x2e>
 8015d18:	2000      	movs	r0, #0
 8015d1a:	bd70      	pop	{r4, r5, r6, pc}
 8015d1c:	6802      	ldr	r2, [r0, #0]
 8015d1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015d22:	2300      	movs	r3, #0
 8015d24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015d28:	e7f7      	b.n	8015d1a <_Balloc+0x66>
 8015d2a:	bf00      	nop
 8015d2c:	080187dc 	.word	0x080187dc
 8015d30:	0801885c 	.word	0x0801885c

08015d34 <_Bfree>:
 8015d34:	b570      	push	{r4, r5, r6, lr}
 8015d36:	69c6      	ldr	r6, [r0, #28]
 8015d38:	4605      	mov	r5, r0
 8015d3a:	460c      	mov	r4, r1
 8015d3c:	b976      	cbnz	r6, 8015d5c <_Bfree+0x28>
 8015d3e:	2010      	movs	r0, #16
 8015d40:	f7fe f9ac 	bl	801409c <malloc>
 8015d44:	4602      	mov	r2, r0
 8015d46:	61e8      	str	r0, [r5, #28]
 8015d48:	b920      	cbnz	r0, 8015d54 <_Bfree+0x20>
 8015d4a:	4b09      	ldr	r3, [pc, #36]	; (8015d70 <_Bfree+0x3c>)
 8015d4c:	4809      	ldr	r0, [pc, #36]	; (8015d74 <_Bfree+0x40>)
 8015d4e:	218f      	movs	r1, #143	; 0x8f
 8015d50:	f000 fd32 	bl	80167b8 <__assert_func>
 8015d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d58:	6006      	str	r6, [r0, #0]
 8015d5a:	60c6      	str	r6, [r0, #12]
 8015d5c:	b13c      	cbz	r4, 8015d6e <_Bfree+0x3a>
 8015d5e:	69eb      	ldr	r3, [r5, #28]
 8015d60:	6862      	ldr	r2, [r4, #4]
 8015d62:	68db      	ldr	r3, [r3, #12]
 8015d64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015d68:	6021      	str	r1, [r4, #0]
 8015d6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015d6e:	bd70      	pop	{r4, r5, r6, pc}
 8015d70:	080187dc 	.word	0x080187dc
 8015d74:	0801885c 	.word	0x0801885c

08015d78 <__multadd>:
 8015d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d7c:	690d      	ldr	r5, [r1, #16]
 8015d7e:	4607      	mov	r7, r0
 8015d80:	460c      	mov	r4, r1
 8015d82:	461e      	mov	r6, r3
 8015d84:	f101 0c14 	add.w	ip, r1, #20
 8015d88:	2000      	movs	r0, #0
 8015d8a:	f8dc 3000 	ldr.w	r3, [ip]
 8015d8e:	b299      	uxth	r1, r3
 8015d90:	fb02 6101 	mla	r1, r2, r1, r6
 8015d94:	0c1e      	lsrs	r6, r3, #16
 8015d96:	0c0b      	lsrs	r3, r1, #16
 8015d98:	fb02 3306 	mla	r3, r2, r6, r3
 8015d9c:	b289      	uxth	r1, r1
 8015d9e:	3001      	adds	r0, #1
 8015da0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015da4:	4285      	cmp	r5, r0
 8015da6:	f84c 1b04 	str.w	r1, [ip], #4
 8015daa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015dae:	dcec      	bgt.n	8015d8a <__multadd+0x12>
 8015db0:	b30e      	cbz	r6, 8015df6 <__multadd+0x7e>
 8015db2:	68a3      	ldr	r3, [r4, #8]
 8015db4:	42ab      	cmp	r3, r5
 8015db6:	dc19      	bgt.n	8015dec <__multadd+0x74>
 8015db8:	6861      	ldr	r1, [r4, #4]
 8015dba:	4638      	mov	r0, r7
 8015dbc:	3101      	adds	r1, #1
 8015dbe:	f7ff ff79 	bl	8015cb4 <_Balloc>
 8015dc2:	4680      	mov	r8, r0
 8015dc4:	b928      	cbnz	r0, 8015dd2 <__multadd+0x5a>
 8015dc6:	4602      	mov	r2, r0
 8015dc8:	4b0c      	ldr	r3, [pc, #48]	; (8015dfc <__multadd+0x84>)
 8015dca:	480d      	ldr	r0, [pc, #52]	; (8015e00 <__multadd+0x88>)
 8015dcc:	21ba      	movs	r1, #186	; 0xba
 8015dce:	f000 fcf3 	bl	80167b8 <__assert_func>
 8015dd2:	6922      	ldr	r2, [r4, #16]
 8015dd4:	3202      	adds	r2, #2
 8015dd6:	f104 010c 	add.w	r1, r4, #12
 8015dda:	0092      	lsls	r2, r2, #2
 8015ddc:	300c      	adds	r0, #12
 8015dde:	f7ff f892 	bl	8014f06 <memcpy>
 8015de2:	4621      	mov	r1, r4
 8015de4:	4638      	mov	r0, r7
 8015de6:	f7ff ffa5 	bl	8015d34 <_Bfree>
 8015dea:	4644      	mov	r4, r8
 8015dec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015df0:	3501      	adds	r5, #1
 8015df2:	615e      	str	r6, [r3, #20]
 8015df4:	6125      	str	r5, [r4, #16]
 8015df6:	4620      	mov	r0, r4
 8015df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dfc:	0801884b 	.word	0x0801884b
 8015e00:	0801885c 	.word	0x0801885c

08015e04 <__hi0bits>:
 8015e04:	0c03      	lsrs	r3, r0, #16
 8015e06:	041b      	lsls	r3, r3, #16
 8015e08:	b9d3      	cbnz	r3, 8015e40 <__hi0bits+0x3c>
 8015e0a:	0400      	lsls	r0, r0, #16
 8015e0c:	2310      	movs	r3, #16
 8015e0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015e12:	bf04      	itt	eq
 8015e14:	0200      	lsleq	r0, r0, #8
 8015e16:	3308      	addeq	r3, #8
 8015e18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015e1c:	bf04      	itt	eq
 8015e1e:	0100      	lsleq	r0, r0, #4
 8015e20:	3304      	addeq	r3, #4
 8015e22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015e26:	bf04      	itt	eq
 8015e28:	0080      	lsleq	r0, r0, #2
 8015e2a:	3302      	addeq	r3, #2
 8015e2c:	2800      	cmp	r0, #0
 8015e2e:	db05      	blt.n	8015e3c <__hi0bits+0x38>
 8015e30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015e34:	f103 0301 	add.w	r3, r3, #1
 8015e38:	bf08      	it	eq
 8015e3a:	2320      	moveq	r3, #32
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	4770      	bx	lr
 8015e40:	2300      	movs	r3, #0
 8015e42:	e7e4      	b.n	8015e0e <__hi0bits+0xa>

08015e44 <__lo0bits>:
 8015e44:	6803      	ldr	r3, [r0, #0]
 8015e46:	f013 0207 	ands.w	r2, r3, #7
 8015e4a:	d00c      	beq.n	8015e66 <__lo0bits+0x22>
 8015e4c:	07d9      	lsls	r1, r3, #31
 8015e4e:	d422      	bmi.n	8015e96 <__lo0bits+0x52>
 8015e50:	079a      	lsls	r2, r3, #30
 8015e52:	bf49      	itett	mi
 8015e54:	085b      	lsrmi	r3, r3, #1
 8015e56:	089b      	lsrpl	r3, r3, #2
 8015e58:	6003      	strmi	r3, [r0, #0]
 8015e5a:	2201      	movmi	r2, #1
 8015e5c:	bf5c      	itt	pl
 8015e5e:	6003      	strpl	r3, [r0, #0]
 8015e60:	2202      	movpl	r2, #2
 8015e62:	4610      	mov	r0, r2
 8015e64:	4770      	bx	lr
 8015e66:	b299      	uxth	r1, r3
 8015e68:	b909      	cbnz	r1, 8015e6e <__lo0bits+0x2a>
 8015e6a:	0c1b      	lsrs	r3, r3, #16
 8015e6c:	2210      	movs	r2, #16
 8015e6e:	b2d9      	uxtb	r1, r3
 8015e70:	b909      	cbnz	r1, 8015e76 <__lo0bits+0x32>
 8015e72:	3208      	adds	r2, #8
 8015e74:	0a1b      	lsrs	r3, r3, #8
 8015e76:	0719      	lsls	r1, r3, #28
 8015e78:	bf04      	itt	eq
 8015e7a:	091b      	lsreq	r3, r3, #4
 8015e7c:	3204      	addeq	r2, #4
 8015e7e:	0799      	lsls	r1, r3, #30
 8015e80:	bf04      	itt	eq
 8015e82:	089b      	lsreq	r3, r3, #2
 8015e84:	3202      	addeq	r2, #2
 8015e86:	07d9      	lsls	r1, r3, #31
 8015e88:	d403      	bmi.n	8015e92 <__lo0bits+0x4e>
 8015e8a:	085b      	lsrs	r3, r3, #1
 8015e8c:	f102 0201 	add.w	r2, r2, #1
 8015e90:	d003      	beq.n	8015e9a <__lo0bits+0x56>
 8015e92:	6003      	str	r3, [r0, #0]
 8015e94:	e7e5      	b.n	8015e62 <__lo0bits+0x1e>
 8015e96:	2200      	movs	r2, #0
 8015e98:	e7e3      	b.n	8015e62 <__lo0bits+0x1e>
 8015e9a:	2220      	movs	r2, #32
 8015e9c:	e7e1      	b.n	8015e62 <__lo0bits+0x1e>
	...

08015ea0 <__i2b>:
 8015ea0:	b510      	push	{r4, lr}
 8015ea2:	460c      	mov	r4, r1
 8015ea4:	2101      	movs	r1, #1
 8015ea6:	f7ff ff05 	bl	8015cb4 <_Balloc>
 8015eaa:	4602      	mov	r2, r0
 8015eac:	b928      	cbnz	r0, 8015eba <__i2b+0x1a>
 8015eae:	4b05      	ldr	r3, [pc, #20]	; (8015ec4 <__i2b+0x24>)
 8015eb0:	4805      	ldr	r0, [pc, #20]	; (8015ec8 <__i2b+0x28>)
 8015eb2:	f240 1145 	movw	r1, #325	; 0x145
 8015eb6:	f000 fc7f 	bl	80167b8 <__assert_func>
 8015eba:	2301      	movs	r3, #1
 8015ebc:	6144      	str	r4, [r0, #20]
 8015ebe:	6103      	str	r3, [r0, #16]
 8015ec0:	bd10      	pop	{r4, pc}
 8015ec2:	bf00      	nop
 8015ec4:	0801884b 	.word	0x0801884b
 8015ec8:	0801885c 	.word	0x0801885c

08015ecc <__multiply>:
 8015ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed0:	4691      	mov	r9, r2
 8015ed2:	690a      	ldr	r2, [r1, #16]
 8015ed4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	bfb8      	it	lt
 8015edc:	460b      	movlt	r3, r1
 8015ede:	460c      	mov	r4, r1
 8015ee0:	bfbc      	itt	lt
 8015ee2:	464c      	movlt	r4, r9
 8015ee4:	4699      	movlt	r9, r3
 8015ee6:	6927      	ldr	r7, [r4, #16]
 8015ee8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015eec:	68a3      	ldr	r3, [r4, #8]
 8015eee:	6861      	ldr	r1, [r4, #4]
 8015ef0:	eb07 060a 	add.w	r6, r7, sl
 8015ef4:	42b3      	cmp	r3, r6
 8015ef6:	b085      	sub	sp, #20
 8015ef8:	bfb8      	it	lt
 8015efa:	3101      	addlt	r1, #1
 8015efc:	f7ff feda 	bl	8015cb4 <_Balloc>
 8015f00:	b930      	cbnz	r0, 8015f10 <__multiply+0x44>
 8015f02:	4602      	mov	r2, r0
 8015f04:	4b44      	ldr	r3, [pc, #272]	; (8016018 <__multiply+0x14c>)
 8015f06:	4845      	ldr	r0, [pc, #276]	; (801601c <__multiply+0x150>)
 8015f08:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015f0c:	f000 fc54 	bl	80167b8 <__assert_func>
 8015f10:	f100 0514 	add.w	r5, r0, #20
 8015f14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015f18:	462b      	mov	r3, r5
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	4543      	cmp	r3, r8
 8015f1e:	d321      	bcc.n	8015f64 <__multiply+0x98>
 8015f20:	f104 0314 	add.w	r3, r4, #20
 8015f24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015f28:	f109 0314 	add.w	r3, r9, #20
 8015f2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015f30:	9202      	str	r2, [sp, #8]
 8015f32:	1b3a      	subs	r2, r7, r4
 8015f34:	3a15      	subs	r2, #21
 8015f36:	f022 0203 	bic.w	r2, r2, #3
 8015f3a:	3204      	adds	r2, #4
 8015f3c:	f104 0115 	add.w	r1, r4, #21
 8015f40:	428f      	cmp	r7, r1
 8015f42:	bf38      	it	cc
 8015f44:	2204      	movcc	r2, #4
 8015f46:	9201      	str	r2, [sp, #4]
 8015f48:	9a02      	ldr	r2, [sp, #8]
 8015f4a:	9303      	str	r3, [sp, #12]
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d80c      	bhi.n	8015f6a <__multiply+0x9e>
 8015f50:	2e00      	cmp	r6, #0
 8015f52:	dd03      	ble.n	8015f5c <__multiply+0x90>
 8015f54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d05b      	beq.n	8016014 <__multiply+0x148>
 8015f5c:	6106      	str	r6, [r0, #16]
 8015f5e:	b005      	add	sp, #20
 8015f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f64:	f843 2b04 	str.w	r2, [r3], #4
 8015f68:	e7d8      	b.n	8015f1c <__multiply+0x50>
 8015f6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8015f6e:	f1ba 0f00 	cmp.w	sl, #0
 8015f72:	d024      	beq.n	8015fbe <__multiply+0xf2>
 8015f74:	f104 0e14 	add.w	lr, r4, #20
 8015f78:	46a9      	mov	r9, r5
 8015f7a:	f04f 0c00 	mov.w	ip, #0
 8015f7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015f82:	f8d9 1000 	ldr.w	r1, [r9]
 8015f86:	fa1f fb82 	uxth.w	fp, r2
 8015f8a:	b289      	uxth	r1, r1
 8015f8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015f90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015f94:	f8d9 2000 	ldr.w	r2, [r9]
 8015f98:	4461      	add	r1, ip
 8015f9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015f9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8015fa2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015fa6:	b289      	uxth	r1, r1
 8015fa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015fac:	4577      	cmp	r7, lr
 8015fae:	f849 1b04 	str.w	r1, [r9], #4
 8015fb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015fb6:	d8e2      	bhi.n	8015f7e <__multiply+0xb2>
 8015fb8:	9a01      	ldr	r2, [sp, #4]
 8015fba:	f845 c002 	str.w	ip, [r5, r2]
 8015fbe:	9a03      	ldr	r2, [sp, #12]
 8015fc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015fc4:	3304      	adds	r3, #4
 8015fc6:	f1b9 0f00 	cmp.w	r9, #0
 8015fca:	d021      	beq.n	8016010 <__multiply+0x144>
 8015fcc:	6829      	ldr	r1, [r5, #0]
 8015fce:	f104 0c14 	add.w	ip, r4, #20
 8015fd2:	46ae      	mov	lr, r5
 8015fd4:	f04f 0a00 	mov.w	sl, #0
 8015fd8:	f8bc b000 	ldrh.w	fp, [ip]
 8015fdc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015fe0:	fb09 220b 	mla	r2, r9, fp, r2
 8015fe4:	4452      	add	r2, sl
 8015fe6:	b289      	uxth	r1, r1
 8015fe8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015fec:	f84e 1b04 	str.w	r1, [lr], #4
 8015ff0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015ff4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015ff8:	f8be 1000 	ldrh.w	r1, [lr]
 8015ffc:	fb09 110a 	mla	r1, r9, sl, r1
 8016000:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016004:	4567      	cmp	r7, ip
 8016006:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801600a:	d8e5      	bhi.n	8015fd8 <__multiply+0x10c>
 801600c:	9a01      	ldr	r2, [sp, #4]
 801600e:	50a9      	str	r1, [r5, r2]
 8016010:	3504      	adds	r5, #4
 8016012:	e799      	b.n	8015f48 <__multiply+0x7c>
 8016014:	3e01      	subs	r6, #1
 8016016:	e79b      	b.n	8015f50 <__multiply+0x84>
 8016018:	0801884b 	.word	0x0801884b
 801601c:	0801885c 	.word	0x0801885c

08016020 <__pow5mult>:
 8016020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016024:	4615      	mov	r5, r2
 8016026:	f012 0203 	ands.w	r2, r2, #3
 801602a:	4606      	mov	r6, r0
 801602c:	460f      	mov	r7, r1
 801602e:	d007      	beq.n	8016040 <__pow5mult+0x20>
 8016030:	4c25      	ldr	r4, [pc, #148]	; (80160c8 <__pow5mult+0xa8>)
 8016032:	3a01      	subs	r2, #1
 8016034:	2300      	movs	r3, #0
 8016036:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801603a:	f7ff fe9d 	bl	8015d78 <__multadd>
 801603e:	4607      	mov	r7, r0
 8016040:	10ad      	asrs	r5, r5, #2
 8016042:	d03d      	beq.n	80160c0 <__pow5mult+0xa0>
 8016044:	69f4      	ldr	r4, [r6, #28]
 8016046:	b97c      	cbnz	r4, 8016068 <__pow5mult+0x48>
 8016048:	2010      	movs	r0, #16
 801604a:	f7fe f827 	bl	801409c <malloc>
 801604e:	4602      	mov	r2, r0
 8016050:	61f0      	str	r0, [r6, #28]
 8016052:	b928      	cbnz	r0, 8016060 <__pow5mult+0x40>
 8016054:	4b1d      	ldr	r3, [pc, #116]	; (80160cc <__pow5mult+0xac>)
 8016056:	481e      	ldr	r0, [pc, #120]	; (80160d0 <__pow5mult+0xb0>)
 8016058:	f240 11b3 	movw	r1, #435	; 0x1b3
 801605c:	f000 fbac 	bl	80167b8 <__assert_func>
 8016060:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016064:	6004      	str	r4, [r0, #0]
 8016066:	60c4      	str	r4, [r0, #12]
 8016068:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801606c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016070:	b94c      	cbnz	r4, 8016086 <__pow5mult+0x66>
 8016072:	f240 2171 	movw	r1, #625	; 0x271
 8016076:	4630      	mov	r0, r6
 8016078:	f7ff ff12 	bl	8015ea0 <__i2b>
 801607c:	2300      	movs	r3, #0
 801607e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016082:	4604      	mov	r4, r0
 8016084:	6003      	str	r3, [r0, #0]
 8016086:	f04f 0900 	mov.w	r9, #0
 801608a:	07eb      	lsls	r3, r5, #31
 801608c:	d50a      	bpl.n	80160a4 <__pow5mult+0x84>
 801608e:	4639      	mov	r1, r7
 8016090:	4622      	mov	r2, r4
 8016092:	4630      	mov	r0, r6
 8016094:	f7ff ff1a 	bl	8015ecc <__multiply>
 8016098:	4639      	mov	r1, r7
 801609a:	4680      	mov	r8, r0
 801609c:	4630      	mov	r0, r6
 801609e:	f7ff fe49 	bl	8015d34 <_Bfree>
 80160a2:	4647      	mov	r7, r8
 80160a4:	106d      	asrs	r5, r5, #1
 80160a6:	d00b      	beq.n	80160c0 <__pow5mult+0xa0>
 80160a8:	6820      	ldr	r0, [r4, #0]
 80160aa:	b938      	cbnz	r0, 80160bc <__pow5mult+0x9c>
 80160ac:	4622      	mov	r2, r4
 80160ae:	4621      	mov	r1, r4
 80160b0:	4630      	mov	r0, r6
 80160b2:	f7ff ff0b 	bl	8015ecc <__multiply>
 80160b6:	6020      	str	r0, [r4, #0]
 80160b8:	f8c0 9000 	str.w	r9, [r0]
 80160bc:	4604      	mov	r4, r0
 80160be:	e7e4      	b.n	801608a <__pow5mult+0x6a>
 80160c0:	4638      	mov	r0, r7
 80160c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160c6:	bf00      	nop
 80160c8:	080189a8 	.word	0x080189a8
 80160cc:	080187dc 	.word	0x080187dc
 80160d0:	0801885c 	.word	0x0801885c

080160d4 <__lshift>:
 80160d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160d8:	460c      	mov	r4, r1
 80160da:	6849      	ldr	r1, [r1, #4]
 80160dc:	6923      	ldr	r3, [r4, #16]
 80160de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80160e2:	68a3      	ldr	r3, [r4, #8]
 80160e4:	4607      	mov	r7, r0
 80160e6:	4691      	mov	r9, r2
 80160e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80160ec:	f108 0601 	add.w	r6, r8, #1
 80160f0:	42b3      	cmp	r3, r6
 80160f2:	db0b      	blt.n	801610c <__lshift+0x38>
 80160f4:	4638      	mov	r0, r7
 80160f6:	f7ff fddd 	bl	8015cb4 <_Balloc>
 80160fa:	4605      	mov	r5, r0
 80160fc:	b948      	cbnz	r0, 8016112 <__lshift+0x3e>
 80160fe:	4602      	mov	r2, r0
 8016100:	4b28      	ldr	r3, [pc, #160]	; (80161a4 <__lshift+0xd0>)
 8016102:	4829      	ldr	r0, [pc, #164]	; (80161a8 <__lshift+0xd4>)
 8016104:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016108:	f000 fb56 	bl	80167b8 <__assert_func>
 801610c:	3101      	adds	r1, #1
 801610e:	005b      	lsls	r3, r3, #1
 8016110:	e7ee      	b.n	80160f0 <__lshift+0x1c>
 8016112:	2300      	movs	r3, #0
 8016114:	f100 0114 	add.w	r1, r0, #20
 8016118:	f100 0210 	add.w	r2, r0, #16
 801611c:	4618      	mov	r0, r3
 801611e:	4553      	cmp	r3, sl
 8016120:	db33      	blt.n	801618a <__lshift+0xb6>
 8016122:	6920      	ldr	r0, [r4, #16]
 8016124:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016128:	f104 0314 	add.w	r3, r4, #20
 801612c:	f019 091f 	ands.w	r9, r9, #31
 8016130:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016134:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016138:	d02b      	beq.n	8016192 <__lshift+0xbe>
 801613a:	f1c9 0e20 	rsb	lr, r9, #32
 801613e:	468a      	mov	sl, r1
 8016140:	2200      	movs	r2, #0
 8016142:	6818      	ldr	r0, [r3, #0]
 8016144:	fa00 f009 	lsl.w	r0, r0, r9
 8016148:	4310      	orrs	r0, r2
 801614a:	f84a 0b04 	str.w	r0, [sl], #4
 801614e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016152:	459c      	cmp	ip, r3
 8016154:	fa22 f20e 	lsr.w	r2, r2, lr
 8016158:	d8f3      	bhi.n	8016142 <__lshift+0x6e>
 801615a:	ebac 0304 	sub.w	r3, ip, r4
 801615e:	3b15      	subs	r3, #21
 8016160:	f023 0303 	bic.w	r3, r3, #3
 8016164:	3304      	adds	r3, #4
 8016166:	f104 0015 	add.w	r0, r4, #21
 801616a:	4584      	cmp	ip, r0
 801616c:	bf38      	it	cc
 801616e:	2304      	movcc	r3, #4
 8016170:	50ca      	str	r2, [r1, r3]
 8016172:	b10a      	cbz	r2, 8016178 <__lshift+0xa4>
 8016174:	f108 0602 	add.w	r6, r8, #2
 8016178:	3e01      	subs	r6, #1
 801617a:	4638      	mov	r0, r7
 801617c:	612e      	str	r6, [r5, #16]
 801617e:	4621      	mov	r1, r4
 8016180:	f7ff fdd8 	bl	8015d34 <_Bfree>
 8016184:	4628      	mov	r0, r5
 8016186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801618a:	f842 0f04 	str.w	r0, [r2, #4]!
 801618e:	3301      	adds	r3, #1
 8016190:	e7c5      	b.n	801611e <__lshift+0x4a>
 8016192:	3904      	subs	r1, #4
 8016194:	f853 2b04 	ldr.w	r2, [r3], #4
 8016198:	f841 2f04 	str.w	r2, [r1, #4]!
 801619c:	459c      	cmp	ip, r3
 801619e:	d8f9      	bhi.n	8016194 <__lshift+0xc0>
 80161a0:	e7ea      	b.n	8016178 <__lshift+0xa4>
 80161a2:	bf00      	nop
 80161a4:	0801884b 	.word	0x0801884b
 80161a8:	0801885c 	.word	0x0801885c

080161ac <__mcmp>:
 80161ac:	b530      	push	{r4, r5, lr}
 80161ae:	6902      	ldr	r2, [r0, #16]
 80161b0:	690c      	ldr	r4, [r1, #16]
 80161b2:	1b12      	subs	r2, r2, r4
 80161b4:	d10e      	bne.n	80161d4 <__mcmp+0x28>
 80161b6:	f100 0314 	add.w	r3, r0, #20
 80161ba:	3114      	adds	r1, #20
 80161bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80161c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80161c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80161c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80161cc:	42a5      	cmp	r5, r4
 80161ce:	d003      	beq.n	80161d8 <__mcmp+0x2c>
 80161d0:	d305      	bcc.n	80161de <__mcmp+0x32>
 80161d2:	2201      	movs	r2, #1
 80161d4:	4610      	mov	r0, r2
 80161d6:	bd30      	pop	{r4, r5, pc}
 80161d8:	4283      	cmp	r3, r0
 80161da:	d3f3      	bcc.n	80161c4 <__mcmp+0x18>
 80161dc:	e7fa      	b.n	80161d4 <__mcmp+0x28>
 80161de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80161e2:	e7f7      	b.n	80161d4 <__mcmp+0x28>

080161e4 <__mdiff>:
 80161e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e8:	460c      	mov	r4, r1
 80161ea:	4606      	mov	r6, r0
 80161ec:	4611      	mov	r1, r2
 80161ee:	4620      	mov	r0, r4
 80161f0:	4690      	mov	r8, r2
 80161f2:	f7ff ffdb 	bl	80161ac <__mcmp>
 80161f6:	1e05      	subs	r5, r0, #0
 80161f8:	d110      	bne.n	801621c <__mdiff+0x38>
 80161fa:	4629      	mov	r1, r5
 80161fc:	4630      	mov	r0, r6
 80161fe:	f7ff fd59 	bl	8015cb4 <_Balloc>
 8016202:	b930      	cbnz	r0, 8016212 <__mdiff+0x2e>
 8016204:	4b3a      	ldr	r3, [pc, #232]	; (80162f0 <__mdiff+0x10c>)
 8016206:	4602      	mov	r2, r0
 8016208:	f240 2137 	movw	r1, #567	; 0x237
 801620c:	4839      	ldr	r0, [pc, #228]	; (80162f4 <__mdiff+0x110>)
 801620e:	f000 fad3 	bl	80167b8 <__assert_func>
 8016212:	2301      	movs	r3, #1
 8016214:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801621c:	bfa4      	itt	ge
 801621e:	4643      	movge	r3, r8
 8016220:	46a0      	movge	r8, r4
 8016222:	4630      	mov	r0, r6
 8016224:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016228:	bfa6      	itte	ge
 801622a:	461c      	movge	r4, r3
 801622c:	2500      	movge	r5, #0
 801622e:	2501      	movlt	r5, #1
 8016230:	f7ff fd40 	bl	8015cb4 <_Balloc>
 8016234:	b920      	cbnz	r0, 8016240 <__mdiff+0x5c>
 8016236:	4b2e      	ldr	r3, [pc, #184]	; (80162f0 <__mdiff+0x10c>)
 8016238:	4602      	mov	r2, r0
 801623a:	f240 2145 	movw	r1, #581	; 0x245
 801623e:	e7e5      	b.n	801620c <__mdiff+0x28>
 8016240:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016244:	6926      	ldr	r6, [r4, #16]
 8016246:	60c5      	str	r5, [r0, #12]
 8016248:	f104 0914 	add.w	r9, r4, #20
 801624c:	f108 0514 	add.w	r5, r8, #20
 8016250:	f100 0e14 	add.w	lr, r0, #20
 8016254:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016258:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801625c:	f108 0210 	add.w	r2, r8, #16
 8016260:	46f2      	mov	sl, lr
 8016262:	2100      	movs	r1, #0
 8016264:	f859 3b04 	ldr.w	r3, [r9], #4
 8016268:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801626c:	fa11 f88b 	uxtah	r8, r1, fp
 8016270:	b299      	uxth	r1, r3
 8016272:	0c1b      	lsrs	r3, r3, #16
 8016274:	eba8 0801 	sub.w	r8, r8, r1
 8016278:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801627c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016280:	fa1f f888 	uxth.w	r8, r8
 8016284:	1419      	asrs	r1, r3, #16
 8016286:	454e      	cmp	r6, r9
 8016288:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801628c:	f84a 3b04 	str.w	r3, [sl], #4
 8016290:	d8e8      	bhi.n	8016264 <__mdiff+0x80>
 8016292:	1b33      	subs	r3, r6, r4
 8016294:	3b15      	subs	r3, #21
 8016296:	f023 0303 	bic.w	r3, r3, #3
 801629a:	3304      	adds	r3, #4
 801629c:	3415      	adds	r4, #21
 801629e:	42a6      	cmp	r6, r4
 80162a0:	bf38      	it	cc
 80162a2:	2304      	movcc	r3, #4
 80162a4:	441d      	add	r5, r3
 80162a6:	4473      	add	r3, lr
 80162a8:	469e      	mov	lr, r3
 80162aa:	462e      	mov	r6, r5
 80162ac:	4566      	cmp	r6, ip
 80162ae:	d30e      	bcc.n	80162ce <__mdiff+0xea>
 80162b0:	f10c 0203 	add.w	r2, ip, #3
 80162b4:	1b52      	subs	r2, r2, r5
 80162b6:	f022 0203 	bic.w	r2, r2, #3
 80162ba:	3d03      	subs	r5, #3
 80162bc:	45ac      	cmp	ip, r5
 80162be:	bf38      	it	cc
 80162c0:	2200      	movcc	r2, #0
 80162c2:	4413      	add	r3, r2
 80162c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80162c8:	b17a      	cbz	r2, 80162ea <__mdiff+0x106>
 80162ca:	6107      	str	r7, [r0, #16]
 80162cc:	e7a4      	b.n	8016218 <__mdiff+0x34>
 80162ce:	f856 8b04 	ldr.w	r8, [r6], #4
 80162d2:	fa11 f288 	uxtah	r2, r1, r8
 80162d6:	1414      	asrs	r4, r2, #16
 80162d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80162dc:	b292      	uxth	r2, r2
 80162de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80162e2:	f84e 2b04 	str.w	r2, [lr], #4
 80162e6:	1421      	asrs	r1, r4, #16
 80162e8:	e7e0      	b.n	80162ac <__mdiff+0xc8>
 80162ea:	3f01      	subs	r7, #1
 80162ec:	e7ea      	b.n	80162c4 <__mdiff+0xe0>
 80162ee:	bf00      	nop
 80162f0:	0801884b 	.word	0x0801884b
 80162f4:	0801885c 	.word	0x0801885c

080162f8 <__d2b>:
 80162f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80162fc:	460f      	mov	r7, r1
 80162fe:	2101      	movs	r1, #1
 8016300:	ec59 8b10 	vmov	r8, r9, d0
 8016304:	4616      	mov	r6, r2
 8016306:	f7ff fcd5 	bl	8015cb4 <_Balloc>
 801630a:	4604      	mov	r4, r0
 801630c:	b930      	cbnz	r0, 801631c <__d2b+0x24>
 801630e:	4602      	mov	r2, r0
 8016310:	4b24      	ldr	r3, [pc, #144]	; (80163a4 <__d2b+0xac>)
 8016312:	4825      	ldr	r0, [pc, #148]	; (80163a8 <__d2b+0xb0>)
 8016314:	f240 310f 	movw	r1, #783	; 0x30f
 8016318:	f000 fa4e 	bl	80167b8 <__assert_func>
 801631c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016324:	bb2d      	cbnz	r5, 8016372 <__d2b+0x7a>
 8016326:	9301      	str	r3, [sp, #4]
 8016328:	f1b8 0300 	subs.w	r3, r8, #0
 801632c:	d026      	beq.n	801637c <__d2b+0x84>
 801632e:	4668      	mov	r0, sp
 8016330:	9300      	str	r3, [sp, #0]
 8016332:	f7ff fd87 	bl	8015e44 <__lo0bits>
 8016336:	e9dd 1200 	ldrd	r1, r2, [sp]
 801633a:	b1e8      	cbz	r0, 8016378 <__d2b+0x80>
 801633c:	f1c0 0320 	rsb	r3, r0, #32
 8016340:	fa02 f303 	lsl.w	r3, r2, r3
 8016344:	430b      	orrs	r3, r1
 8016346:	40c2      	lsrs	r2, r0
 8016348:	6163      	str	r3, [r4, #20]
 801634a:	9201      	str	r2, [sp, #4]
 801634c:	9b01      	ldr	r3, [sp, #4]
 801634e:	61a3      	str	r3, [r4, #24]
 8016350:	2b00      	cmp	r3, #0
 8016352:	bf14      	ite	ne
 8016354:	2202      	movne	r2, #2
 8016356:	2201      	moveq	r2, #1
 8016358:	6122      	str	r2, [r4, #16]
 801635a:	b1bd      	cbz	r5, 801638c <__d2b+0x94>
 801635c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016360:	4405      	add	r5, r0
 8016362:	603d      	str	r5, [r7, #0]
 8016364:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016368:	6030      	str	r0, [r6, #0]
 801636a:	4620      	mov	r0, r4
 801636c:	b003      	add	sp, #12
 801636e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016376:	e7d6      	b.n	8016326 <__d2b+0x2e>
 8016378:	6161      	str	r1, [r4, #20]
 801637a:	e7e7      	b.n	801634c <__d2b+0x54>
 801637c:	a801      	add	r0, sp, #4
 801637e:	f7ff fd61 	bl	8015e44 <__lo0bits>
 8016382:	9b01      	ldr	r3, [sp, #4]
 8016384:	6163      	str	r3, [r4, #20]
 8016386:	3020      	adds	r0, #32
 8016388:	2201      	movs	r2, #1
 801638a:	e7e5      	b.n	8016358 <__d2b+0x60>
 801638c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016390:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016394:	6038      	str	r0, [r7, #0]
 8016396:	6918      	ldr	r0, [r3, #16]
 8016398:	f7ff fd34 	bl	8015e04 <__hi0bits>
 801639c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80163a0:	e7e2      	b.n	8016368 <__d2b+0x70>
 80163a2:	bf00      	nop
 80163a4:	0801884b 	.word	0x0801884b
 80163a8:	0801885c 	.word	0x0801885c

080163ac <__ssputs_r>:
 80163ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163b0:	688e      	ldr	r6, [r1, #8]
 80163b2:	461f      	mov	r7, r3
 80163b4:	42be      	cmp	r6, r7
 80163b6:	680b      	ldr	r3, [r1, #0]
 80163b8:	4682      	mov	sl, r0
 80163ba:	460c      	mov	r4, r1
 80163bc:	4690      	mov	r8, r2
 80163be:	d82c      	bhi.n	801641a <__ssputs_r+0x6e>
 80163c0:	898a      	ldrh	r2, [r1, #12]
 80163c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80163c6:	d026      	beq.n	8016416 <__ssputs_r+0x6a>
 80163c8:	6965      	ldr	r5, [r4, #20]
 80163ca:	6909      	ldr	r1, [r1, #16]
 80163cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80163d0:	eba3 0901 	sub.w	r9, r3, r1
 80163d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80163d8:	1c7b      	adds	r3, r7, #1
 80163da:	444b      	add	r3, r9
 80163dc:	106d      	asrs	r5, r5, #1
 80163de:	429d      	cmp	r5, r3
 80163e0:	bf38      	it	cc
 80163e2:	461d      	movcc	r5, r3
 80163e4:	0553      	lsls	r3, r2, #21
 80163e6:	d527      	bpl.n	8016438 <__ssputs_r+0x8c>
 80163e8:	4629      	mov	r1, r5
 80163ea:	f7fd fe87 	bl	80140fc <_malloc_r>
 80163ee:	4606      	mov	r6, r0
 80163f0:	b360      	cbz	r0, 801644c <__ssputs_r+0xa0>
 80163f2:	6921      	ldr	r1, [r4, #16]
 80163f4:	464a      	mov	r2, r9
 80163f6:	f7fe fd86 	bl	8014f06 <memcpy>
 80163fa:	89a3      	ldrh	r3, [r4, #12]
 80163fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016404:	81a3      	strh	r3, [r4, #12]
 8016406:	6126      	str	r6, [r4, #16]
 8016408:	6165      	str	r5, [r4, #20]
 801640a:	444e      	add	r6, r9
 801640c:	eba5 0509 	sub.w	r5, r5, r9
 8016410:	6026      	str	r6, [r4, #0]
 8016412:	60a5      	str	r5, [r4, #8]
 8016414:	463e      	mov	r6, r7
 8016416:	42be      	cmp	r6, r7
 8016418:	d900      	bls.n	801641c <__ssputs_r+0x70>
 801641a:	463e      	mov	r6, r7
 801641c:	6820      	ldr	r0, [r4, #0]
 801641e:	4632      	mov	r2, r6
 8016420:	4641      	mov	r1, r8
 8016422:	f7fe fc82 	bl	8014d2a <memmove>
 8016426:	68a3      	ldr	r3, [r4, #8]
 8016428:	1b9b      	subs	r3, r3, r6
 801642a:	60a3      	str	r3, [r4, #8]
 801642c:	6823      	ldr	r3, [r4, #0]
 801642e:	4433      	add	r3, r6
 8016430:	6023      	str	r3, [r4, #0]
 8016432:	2000      	movs	r0, #0
 8016434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016438:	462a      	mov	r2, r5
 801643a:	f000 fa03 	bl	8016844 <_realloc_r>
 801643e:	4606      	mov	r6, r0
 8016440:	2800      	cmp	r0, #0
 8016442:	d1e0      	bne.n	8016406 <__ssputs_r+0x5a>
 8016444:	6921      	ldr	r1, [r4, #16]
 8016446:	4650      	mov	r0, sl
 8016448:	f7ff fbe8 	bl	8015c1c <_free_r>
 801644c:	230c      	movs	r3, #12
 801644e:	f8ca 3000 	str.w	r3, [sl]
 8016452:	89a3      	ldrh	r3, [r4, #12]
 8016454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016458:	81a3      	strh	r3, [r4, #12]
 801645a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801645e:	e7e9      	b.n	8016434 <__ssputs_r+0x88>

08016460 <_svfiprintf_r>:
 8016460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016464:	4698      	mov	r8, r3
 8016466:	898b      	ldrh	r3, [r1, #12]
 8016468:	061b      	lsls	r3, r3, #24
 801646a:	b09d      	sub	sp, #116	; 0x74
 801646c:	4607      	mov	r7, r0
 801646e:	460d      	mov	r5, r1
 8016470:	4614      	mov	r4, r2
 8016472:	d50e      	bpl.n	8016492 <_svfiprintf_r+0x32>
 8016474:	690b      	ldr	r3, [r1, #16]
 8016476:	b963      	cbnz	r3, 8016492 <_svfiprintf_r+0x32>
 8016478:	2140      	movs	r1, #64	; 0x40
 801647a:	f7fd fe3f 	bl	80140fc <_malloc_r>
 801647e:	6028      	str	r0, [r5, #0]
 8016480:	6128      	str	r0, [r5, #16]
 8016482:	b920      	cbnz	r0, 801648e <_svfiprintf_r+0x2e>
 8016484:	230c      	movs	r3, #12
 8016486:	603b      	str	r3, [r7, #0]
 8016488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801648c:	e0d0      	b.n	8016630 <_svfiprintf_r+0x1d0>
 801648e:	2340      	movs	r3, #64	; 0x40
 8016490:	616b      	str	r3, [r5, #20]
 8016492:	2300      	movs	r3, #0
 8016494:	9309      	str	r3, [sp, #36]	; 0x24
 8016496:	2320      	movs	r3, #32
 8016498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801649c:	f8cd 800c 	str.w	r8, [sp, #12]
 80164a0:	2330      	movs	r3, #48	; 0x30
 80164a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016648 <_svfiprintf_r+0x1e8>
 80164a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80164aa:	f04f 0901 	mov.w	r9, #1
 80164ae:	4623      	mov	r3, r4
 80164b0:	469a      	mov	sl, r3
 80164b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164b6:	b10a      	cbz	r2, 80164bc <_svfiprintf_r+0x5c>
 80164b8:	2a25      	cmp	r2, #37	; 0x25
 80164ba:	d1f9      	bne.n	80164b0 <_svfiprintf_r+0x50>
 80164bc:	ebba 0b04 	subs.w	fp, sl, r4
 80164c0:	d00b      	beq.n	80164da <_svfiprintf_r+0x7a>
 80164c2:	465b      	mov	r3, fp
 80164c4:	4622      	mov	r2, r4
 80164c6:	4629      	mov	r1, r5
 80164c8:	4638      	mov	r0, r7
 80164ca:	f7ff ff6f 	bl	80163ac <__ssputs_r>
 80164ce:	3001      	adds	r0, #1
 80164d0:	f000 80a9 	beq.w	8016626 <_svfiprintf_r+0x1c6>
 80164d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164d6:	445a      	add	r2, fp
 80164d8:	9209      	str	r2, [sp, #36]	; 0x24
 80164da:	f89a 3000 	ldrb.w	r3, [sl]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	f000 80a1 	beq.w	8016626 <_svfiprintf_r+0x1c6>
 80164e4:	2300      	movs	r3, #0
 80164e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80164ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164ee:	f10a 0a01 	add.w	sl, sl, #1
 80164f2:	9304      	str	r3, [sp, #16]
 80164f4:	9307      	str	r3, [sp, #28]
 80164f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80164fa:	931a      	str	r3, [sp, #104]	; 0x68
 80164fc:	4654      	mov	r4, sl
 80164fe:	2205      	movs	r2, #5
 8016500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016504:	4850      	ldr	r0, [pc, #320]	; (8016648 <_svfiprintf_r+0x1e8>)
 8016506:	f7e9 fe93 	bl	8000230 <memchr>
 801650a:	9a04      	ldr	r2, [sp, #16]
 801650c:	b9d8      	cbnz	r0, 8016546 <_svfiprintf_r+0xe6>
 801650e:	06d0      	lsls	r0, r2, #27
 8016510:	bf44      	itt	mi
 8016512:	2320      	movmi	r3, #32
 8016514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016518:	0711      	lsls	r1, r2, #28
 801651a:	bf44      	itt	mi
 801651c:	232b      	movmi	r3, #43	; 0x2b
 801651e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016522:	f89a 3000 	ldrb.w	r3, [sl]
 8016526:	2b2a      	cmp	r3, #42	; 0x2a
 8016528:	d015      	beq.n	8016556 <_svfiprintf_r+0xf6>
 801652a:	9a07      	ldr	r2, [sp, #28]
 801652c:	4654      	mov	r4, sl
 801652e:	2000      	movs	r0, #0
 8016530:	f04f 0c0a 	mov.w	ip, #10
 8016534:	4621      	mov	r1, r4
 8016536:	f811 3b01 	ldrb.w	r3, [r1], #1
 801653a:	3b30      	subs	r3, #48	; 0x30
 801653c:	2b09      	cmp	r3, #9
 801653e:	d94d      	bls.n	80165dc <_svfiprintf_r+0x17c>
 8016540:	b1b0      	cbz	r0, 8016570 <_svfiprintf_r+0x110>
 8016542:	9207      	str	r2, [sp, #28]
 8016544:	e014      	b.n	8016570 <_svfiprintf_r+0x110>
 8016546:	eba0 0308 	sub.w	r3, r0, r8
 801654a:	fa09 f303 	lsl.w	r3, r9, r3
 801654e:	4313      	orrs	r3, r2
 8016550:	9304      	str	r3, [sp, #16]
 8016552:	46a2      	mov	sl, r4
 8016554:	e7d2      	b.n	80164fc <_svfiprintf_r+0x9c>
 8016556:	9b03      	ldr	r3, [sp, #12]
 8016558:	1d19      	adds	r1, r3, #4
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	9103      	str	r1, [sp, #12]
 801655e:	2b00      	cmp	r3, #0
 8016560:	bfbb      	ittet	lt
 8016562:	425b      	neglt	r3, r3
 8016564:	f042 0202 	orrlt.w	r2, r2, #2
 8016568:	9307      	strge	r3, [sp, #28]
 801656a:	9307      	strlt	r3, [sp, #28]
 801656c:	bfb8      	it	lt
 801656e:	9204      	strlt	r2, [sp, #16]
 8016570:	7823      	ldrb	r3, [r4, #0]
 8016572:	2b2e      	cmp	r3, #46	; 0x2e
 8016574:	d10c      	bne.n	8016590 <_svfiprintf_r+0x130>
 8016576:	7863      	ldrb	r3, [r4, #1]
 8016578:	2b2a      	cmp	r3, #42	; 0x2a
 801657a:	d134      	bne.n	80165e6 <_svfiprintf_r+0x186>
 801657c:	9b03      	ldr	r3, [sp, #12]
 801657e:	1d1a      	adds	r2, r3, #4
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	9203      	str	r2, [sp, #12]
 8016584:	2b00      	cmp	r3, #0
 8016586:	bfb8      	it	lt
 8016588:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801658c:	3402      	adds	r4, #2
 801658e:	9305      	str	r3, [sp, #20]
 8016590:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016658 <_svfiprintf_r+0x1f8>
 8016594:	7821      	ldrb	r1, [r4, #0]
 8016596:	2203      	movs	r2, #3
 8016598:	4650      	mov	r0, sl
 801659a:	f7e9 fe49 	bl	8000230 <memchr>
 801659e:	b138      	cbz	r0, 80165b0 <_svfiprintf_r+0x150>
 80165a0:	9b04      	ldr	r3, [sp, #16]
 80165a2:	eba0 000a 	sub.w	r0, r0, sl
 80165a6:	2240      	movs	r2, #64	; 0x40
 80165a8:	4082      	lsls	r2, r0
 80165aa:	4313      	orrs	r3, r2
 80165ac:	3401      	adds	r4, #1
 80165ae:	9304      	str	r3, [sp, #16]
 80165b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165b4:	4825      	ldr	r0, [pc, #148]	; (801664c <_svfiprintf_r+0x1ec>)
 80165b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80165ba:	2206      	movs	r2, #6
 80165bc:	f7e9 fe38 	bl	8000230 <memchr>
 80165c0:	2800      	cmp	r0, #0
 80165c2:	d038      	beq.n	8016636 <_svfiprintf_r+0x1d6>
 80165c4:	4b22      	ldr	r3, [pc, #136]	; (8016650 <_svfiprintf_r+0x1f0>)
 80165c6:	bb1b      	cbnz	r3, 8016610 <_svfiprintf_r+0x1b0>
 80165c8:	9b03      	ldr	r3, [sp, #12]
 80165ca:	3307      	adds	r3, #7
 80165cc:	f023 0307 	bic.w	r3, r3, #7
 80165d0:	3308      	adds	r3, #8
 80165d2:	9303      	str	r3, [sp, #12]
 80165d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165d6:	4433      	add	r3, r6
 80165d8:	9309      	str	r3, [sp, #36]	; 0x24
 80165da:	e768      	b.n	80164ae <_svfiprintf_r+0x4e>
 80165dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80165e0:	460c      	mov	r4, r1
 80165e2:	2001      	movs	r0, #1
 80165e4:	e7a6      	b.n	8016534 <_svfiprintf_r+0xd4>
 80165e6:	2300      	movs	r3, #0
 80165e8:	3401      	adds	r4, #1
 80165ea:	9305      	str	r3, [sp, #20]
 80165ec:	4619      	mov	r1, r3
 80165ee:	f04f 0c0a 	mov.w	ip, #10
 80165f2:	4620      	mov	r0, r4
 80165f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165f8:	3a30      	subs	r2, #48	; 0x30
 80165fa:	2a09      	cmp	r2, #9
 80165fc:	d903      	bls.n	8016606 <_svfiprintf_r+0x1a6>
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d0c6      	beq.n	8016590 <_svfiprintf_r+0x130>
 8016602:	9105      	str	r1, [sp, #20]
 8016604:	e7c4      	b.n	8016590 <_svfiprintf_r+0x130>
 8016606:	fb0c 2101 	mla	r1, ip, r1, r2
 801660a:	4604      	mov	r4, r0
 801660c:	2301      	movs	r3, #1
 801660e:	e7f0      	b.n	80165f2 <_svfiprintf_r+0x192>
 8016610:	ab03      	add	r3, sp, #12
 8016612:	9300      	str	r3, [sp, #0]
 8016614:	462a      	mov	r2, r5
 8016616:	4b0f      	ldr	r3, [pc, #60]	; (8016654 <_svfiprintf_r+0x1f4>)
 8016618:	a904      	add	r1, sp, #16
 801661a:	4638      	mov	r0, r7
 801661c:	f7fd fe9a 	bl	8014354 <_printf_float>
 8016620:	1c42      	adds	r2, r0, #1
 8016622:	4606      	mov	r6, r0
 8016624:	d1d6      	bne.n	80165d4 <_svfiprintf_r+0x174>
 8016626:	89ab      	ldrh	r3, [r5, #12]
 8016628:	065b      	lsls	r3, r3, #25
 801662a:	f53f af2d 	bmi.w	8016488 <_svfiprintf_r+0x28>
 801662e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016630:	b01d      	add	sp, #116	; 0x74
 8016632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016636:	ab03      	add	r3, sp, #12
 8016638:	9300      	str	r3, [sp, #0]
 801663a:	462a      	mov	r2, r5
 801663c:	4b05      	ldr	r3, [pc, #20]	; (8016654 <_svfiprintf_r+0x1f4>)
 801663e:	a904      	add	r1, sp, #16
 8016640:	4638      	mov	r0, r7
 8016642:	f7fe f92b 	bl	801489c <_printf_i>
 8016646:	e7eb      	b.n	8016620 <_svfiprintf_r+0x1c0>
 8016648:	080189b4 	.word	0x080189b4
 801664c:	080189be 	.word	0x080189be
 8016650:	08014355 	.word	0x08014355
 8016654:	080163ad 	.word	0x080163ad
 8016658:	080189ba 	.word	0x080189ba

0801665c <__sflush_r>:
 801665c:	898a      	ldrh	r2, [r1, #12]
 801665e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016662:	4605      	mov	r5, r0
 8016664:	0710      	lsls	r0, r2, #28
 8016666:	460c      	mov	r4, r1
 8016668:	d458      	bmi.n	801671c <__sflush_r+0xc0>
 801666a:	684b      	ldr	r3, [r1, #4]
 801666c:	2b00      	cmp	r3, #0
 801666e:	dc05      	bgt.n	801667c <__sflush_r+0x20>
 8016670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016672:	2b00      	cmp	r3, #0
 8016674:	dc02      	bgt.n	801667c <__sflush_r+0x20>
 8016676:	2000      	movs	r0, #0
 8016678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801667c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801667e:	2e00      	cmp	r6, #0
 8016680:	d0f9      	beq.n	8016676 <__sflush_r+0x1a>
 8016682:	2300      	movs	r3, #0
 8016684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016688:	682f      	ldr	r7, [r5, #0]
 801668a:	6a21      	ldr	r1, [r4, #32]
 801668c:	602b      	str	r3, [r5, #0]
 801668e:	d032      	beq.n	80166f6 <__sflush_r+0x9a>
 8016690:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016692:	89a3      	ldrh	r3, [r4, #12]
 8016694:	075a      	lsls	r2, r3, #29
 8016696:	d505      	bpl.n	80166a4 <__sflush_r+0x48>
 8016698:	6863      	ldr	r3, [r4, #4]
 801669a:	1ac0      	subs	r0, r0, r3
 801669c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801669e:	b10b      	cbz	r3, 80166a4 <__sflush_r+0x48>
 80166a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80166a2:	1ac0      	subs	r0, r0, r3
 80166a4:	2300      	movs	r3, #0
 80166a6:	4602      	mov	r2, r0
 80166a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80166aa:	6a21      	ldr	r1, [r4, #32]
 80166ac:	4628      	mov	r0, r5
 80166ae:	47b0      	blx	r6
 80166b0:	1c43      	adds	r3, r0, #1
 80166b2:	89a3      	ldrh	r3, [r4, #12]
 80166b4:	d106      	bne.n	80166c4 <__sflush_r+0x68>
 80166b6:	6829      	ldr	r1, [r5, #0]
 80166b8:	291d      	cmp	r1, #29
 80166ba:	d82b      	bhi.n	8016714 <__sflush_r+0xb8>
 80166bc:	4a29      	ldr	r2, [pc, #164]	; (8016764 <__sflush_r+0x108>)
 80166be:	410a      	asrs	r2, r1
 80166c0:	07d6      	lsls	r6, r2, #31
 80166c2:	d427      	bmi.n	8016714 <__sflush_r+0xb8>
 80166c4:	2200      	movs	r2, #0
 80166c6:	6062      	str	r2, [r4, #4]
 80166c8:	04d9      	lsls	r1, r3, #19
 80166ca:	6922      	ldr	r2, [r4, #16]
 80166cc:	6022      	str	r2, [r4, #0]
 80166ce:	d504      	bpl.n	80166da <__sflush_r+0x7e>
 80166d0:	1c42      	adds	r2, r0, #1
 80166d2:	d101      	bne.n	80166d8 <__sflush_r+0x7c>
 80166d4:	682b      	ldr	r3, [r5, #0]
 80166d6:	b903      	cbnz	r3, 80166da <__sflush_r+0x7e>
 80166d8:	6560      	str	r0, [r4, #84]	; 0x54
 80166da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166dc:	602f      	str	r7, [r5, #0]
 80166de:	2900      	cmp	r1, #0
 80166e0:	d0c9      	beq.n	8016676 <__sflush_r+0x1a>
 80166e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166e6:	4299      	cmp	r1, r3
 80166e8:	d002      	beq.n	80166f0 <__sflush_r+0x94>
 80166ea:	4628      	mov	r0, r5
 80166ec:	f7ff fa96 	bl	8015c1c <_free_r>
 80166f0:	2000      	movs	r0, #0
 80166f2:	6360      	str	r0, [r4, #52]	; 0x34
 80166f4:	e7c0      	b.n	8016678 <__sflush_r+0x1c>
 80166f6:	2301      	movs	r3, #1
 80166f8:	4628      	mov	r0, r5
 80166fa:	47b0      	blx	r6
 80166fc:	1c41      	adds	r1, r0, #1
 80166fe:	d1c8      	bne.n	8016692 <__sflush_r+0x36>
 8016700:	682b      	ldr	r3, [r5, #0]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d0c5      	beq.n	8016692 <__sflush_r+0x36>
 8016706:	2b1d      	cmp	r3, #29
 8016708:	d001      	beq.n	801670e <__sflush_r+0xb2>
 801670a:	2b16      	cmp	r3, #22
 801670c:	d101      	bne.n	8016712 <__sflush_r+0xb6>
 801670e:	602f      	str	r7, [r5, #0]
 8016710:	e7b1      	b.n	8016676 <__sflush_r+0x1a>
 8016712:	89a3      	ldrh	r3, [r4, #12]
 8016714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016718:	81a3      	strh	r3, [r4, #12]
 801671a:	e7ad      	b.n	8016678 <__sflush_r+0x1c>
 801671c:	690f      	ldr	r7, [r1, #16]
 801671e:	2f00      	cmp	r7, #0
 8016720:	d0a9      	beq.n	8016676 <__sflush_r+0x1a>
 8016722:	0793      	lsls	r3, r2, #30
 8016724:	680e      	ldr	r6, [r1, #0]
 8016726:	bf08      	it	eq
 8016728:	694b      	ldreq	r3, [r1, #20]
 801672a:	600f      	str	r7, [r1, #0]
 801672c:	bf18      	it	ne
 801672e:	2300      	movne	r3, #0
 8016730:	eba6 0807 	sub.w	r8, r6, r7
 8016734:	608b      	str	r3, [r1, #8]
 8016736:	f1b8 0f00 	cmp.w	r8, #0
 801673a:	dd9c      	ble.n	8016676 <__sflush_r+0x1a>
 801673c:	6a21      	ldr	r1, [r4, #32]
 801673e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016740:	4643      	mov	r3, r8
 8016742:	463a      	mov	r2, r7
 8016744:	4628      	mov	r0, r5
 8016746:	47b0      	blx	r6
 8016748:	2800      	cmp	r0, #0
 801674a:	dc06      	bgt.n	801675a <__sflush_r+0xfe>
 801674c:	89a3      	ldrh	r3, [r4, #12]
 801674e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016752:	81a3      	strh	r3, [r4, #12]
 8016754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016758:	e78e      	b.n	8016678 <__sflush_r+0x1c>
 801675a:	4407      	add	r7, r0
 801675c:	eba8 0800 	sub.w	r8, r8, r0
 8016760:	e7e9      	b.n	8016736 <__sflush_r+0xda>
 8016762:	bf00      	nop
 8016764:	dfbffffe 	.word	0xdfbffffe

08016768 <_fflush_r>:
 8016768:	b538      	push	{r3, r4, r5, lr}
 801676a:	690b      	ldr	r3, [r1, #16]
 801676c:	4605      	mov	r5, r0
 801676e:	460c      	mov	r4, r1
 8016770:	b913      	cbnz	r3, 8016778 <_fflush_r+0x10>
 8016772:	2500      	movs	r5, #0
 8016774:	4628      	mov	r0, r5
 8016776:	bd38      	pop	{r3, r4, r5, pc}
 8016778:	b118      	cbz	r0, 8016782 <_fflush_r+0x1a>
 801677a:	6a03      	ldr	r3, [r0, #32]
 801677c:	b90b      	cbnz	r3, 8016782 <_fflush_r+0x1a>
 801677e:	f7fe fa3b 	bl	8014bf8 <__sinit>
 8016782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d0f3      	beq.n	8016772 <_fflush_r+0xa>
 801678a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801678c:	07d0      	lsls	r0, r2, #31
 801678e:	d404      	bmi.n	801679a <_fflush_r+0x32>
 8016790:	0599      	lsls	r1, r3, #22
 8016792:	d402      	bmi.n	801679a <_fflush_r+0x32>
 8016794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016796:	f7fe fbb4 	bl	8014f02 <__retarget_lock_acquire_recursive>
 801679a:	4628      	mov	r0, r5
 801679c:	4621      	mov	r1, r4
 801679e:	f7ff ff5d 	bl	801665c <__sflush_r>
 80167a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80167a4:	07da      	lsls	r2, r3, #31
 80167a6:	4605      	mov	r5, r0
 80167a8:	d4e4      	bmi.n	8016774 <_fflush_r+0xc>
 80167aa:	89a3      	ldrh	r3, [r4, #12]
 80167ac:	059b      	lsls	r3, r3, #22
 80167ae:	d4e1      	bmi.n	8016774 <_fflush_r+0xc>
 80167b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167b2:	f7fe fba7 	bl	8014f04 <__retarget_lock_release_recursive>
 80167b6:	e7dd      	b.n	8016774 <_fflush_r+0xc>

080167b8 <__assert_func>:
 80167b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167ba:	4614      	mov	r4, r2
 80167bc:	461a      	mov	r2, r3
 80167be:	4b09      	ldr	r3, [pc, #36]	; (80167e4 <__assert_func+0x2c>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	4605      	mov	r5, r0
 80167c4:	68d8      	ldr	r0, [r3, #12]
 80167c6:	b14c      	cbz	r4, 80167dc <__assert_func+0x24>
 80167c8:	4b07      	ldr	r3, [pc, #28]	; (80167e8 <__assert_func+0x30>)
 80167ca:	9100      	str	r1, [sp, #0]
 80167cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167d0:	4906      	ldr	r1, [pc, #24]	; (80167ec <__assert_func+0x34>)
 80167d2:	462b      	mov	r3, r5
 80167d4:	f000 f872 	bl	80168bc <fiprintf>
 80167d8:	f7fd fc58 	bl	801408c <abort>
 80167dc:	4b04      	ldr	r3, [pc, #16]	; (80167f0 <__assert_func+0x38>)
 80167de:	461c      	mov	r4, r3
 80167e0:	e7f3      	b.n	80167ca <__assert_func+0x12>
 80167e2:	bf00      	nop
 80167e4:	2000006c 	.word	0x2000006c
 80167e8:	080189cf 	.word	0x080189cf
 80167ec:	080189dc 	.word	0x080189dc
 80167f0:	08018a0a 	.word	0x08018a0a

080167f4 <_calloc_r>:
 80167f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80167f6:	fba1 2402 	umull	r2, r4, r1, r2
 80167fa:	b94c      	cbnz	r4, 8016810 <_calloc_r+0x1c>
 80167fc:	4611      	mov	r1, r2
 80167fe:	9201      	str	r2, [sp, #4]
 8016800:	f7fd fc7c 	bl	80140fc <_malloc_r>
 8016804:	9a01      	ldr	r2, [sp, #4]
 8016806:	4605      	mov	r5, r0
 8016808:	b930      	cbnz	r0, 8016818 <_calloc_r+0x24>
 801680a:	4628      	mov	r0, r5
 801680c:	b003      	add	sp, #12
 801680e:	bd30      	pop	{r4, r5, pc}
 8016810:	220c      	movs	r2, #12
 8016812:	6002      	str	r2, [r0, #0]
 8016814:	2500      	movs	r5, #0
 8016816:	e7f8      	b.n	801680a <_calloc_r+0x16>
 8016818:	4621      	mov	r1, r4
 801681a:	f7fe faa0 	bl	8014d5e <memset>
 801681e:	e7f4      	b.n	801680a <_calloc_r+0x16>

08016820 <__ascii_mbtowc>:
 8016820:	b082      	sub	sp, #8
 8016822:	b901      	cbnz	r1, 8016826 <__ascii_mbtowc+0x6>
 8016824:	a901      	add	r1, sp, #4
 8016826:	b142      	cbz	r2, 801683a <__ascii_mbtowc+0x1a>
 8016828:	b14b      	cbz	r3, 801683e <__ascii_mbtowc+0x1e>
 801682a:	7813      	ldrb	r3, [r2, #0]
 801682c:	600b      	str	r3, [r1, #0]
 801682e:	7812      	ldrb	r2, [r2, #0]
 8016830:	1e10      	subs	r0, r2, #0
 8016832:	bf18      	it	ne
 8016834:	2001      	movne	r0, #1
 8016836:	b002      	add	sp, #8
 8016838:	4770      	bx	lr
 801683a:	4610      	mov	r0, r2
 801683c:	e7fb      	b.n	8016836 <__ascii_mbtowc+0x16>
 801683e:	f06f 0001 	mvn.w	r0, #1
 8016842:	e7f8      	b.n	8016836 <__ascii_mbtowc+0x16>

08016844 <_realloc_r>:
 8016844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016848:	4680      	mov	r8, r0
 801684a:	4614      	mov	r4, r2
 801684c:	460e      	mov	r6, r1
 801684e:	b921      	cbnz	r1, 801685a <_realloc_r+0x16>
 8016850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016854:	4611      	mov	r1, r2
 8016856:	f7fd bc51 	b.w	80140fc <_malloc_r>
 801685a:	b92a      	cbnz	r2, 8016868 <_realloc_r+0x24>
 801685c:	f7ff f9de 	bl	8015c1c <_free_r>
 8016860:	4625      	mov	r5, r4
 8016862:	4628      	mov	r0, r5
 8016864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016868:	f000 f83a 	bl	80168e0 <_malloc_usable_size_r>
 801686c:	4284      	cmp	r4, r0
 801686e:	4607      	mov	r7, r0
 8016870:	d802      	bhi.n	8016878 <_realloc_r+0x34>
 8016872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016876:	d812      	bhi.n	801689e <_realloc_r+0x5a>
 8016878:	4621      	mov	r1, r4
 801687a:	4640      	mov	r0, r8
 801687c:	f7fd fc3e 	bl	80140fc <_malloc_r>
 8016880:	4605      	mov	r5, r0
 8016882:	2800      	cmp	r0, #0
 8016884:	d0ed      	beq.n	8016862 <_realloc_r+0x1e>
 8016886:	42bc      	cmp	r4, r7
 8016888:	4622      	mov	r2, r4
 801688a:	4631      	mov	r1, r6
 801688c:	bf28      	it	cs
 801688e:	463a      	movcs	r2, r7
 8016890:	f7fe fb39 	bl	8014f06 <memcpy>
 8016894:	4631      	mov	r1, r6
 8016896:	4640      	mov	r0, r8
 8016898:	f7ff f9c0 	bl	8015c1c <_free_r>
 801689c:	e7e1      	b.n	8016862 <_realloc_r+0x1e>
 801689e:	4635      	mov	r5, r6
 80168a0:	e7df      	b.n	8016862 <_realloc_r+0x1e>

080168a2 <__ascii_wctomb>:
 80168a2:	b149      	cbz	r1, 80168b8 <__ascii_wctomb+0x16>
 80168a4:	2aff      	cmp	r2, #255	; 0xff
 80168a6:	bf85      	ittet	hi
 80168a8:	238a      	movhi	r3, #138	; 0x8a
 80168aa:	6003      	strhi	r3, [r0, #0]
 80168ac:	700a      	strbls	r2, [r1, #0]
 80168ae:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80168b2:	bf98      	it	ls
 80168b4:	2001      	movls	r0, #1
 80168b6:	4770      	bx	lr
 80168b8:	4608      	mov	r0, r1
 80168ba:	4770      	bx	lr

080168bc <fiprintf>:
 80168bc:	b40e      	push	{r1, r2, r3}
 80168be:	b503      	push	{r0, r1, lr}
 80168c0:	4601      	mov	r1, r0
 80168c2:	ab03      	add	r3, sp, #12
 80168c4:	4805      	ldr	r0, [pc, #20]	; (80168dc <fiprintf+0x20>)
 80168c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80168ca:	6800      	ldr	r0, [r0, #0]
 80168cc:	9301      	str	r3, [sp, #4]
 80168ce:	f000 f839 	bl	8016944 <_vfiprintf_r>
 80168d2:	b002      	add	sp, #8
 80168d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80168d8:	b003      	add	sp, #12
 80168da:	4770      	bx	lr
 80168dc:	2000006c 	.word	0x2000006c

080168e0 <_malloc_usable_size_r>:
 80168e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168e4:	1f18      	subs	r0, r3, #4
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	bfbc      	itt	lt
 80168ea:	580b      	ldrlt	r3, [r1, r0]
 80168ec:	18c0      	addlt	r0, r0, r3
 80168ee:	4770      	bx	lr

080168f0 <__sfputc_r>:
 80168f0:	6893      	ldr	r3, [r2, #8]
 80168f2:	3b01      	subs	r3, #1
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	b410      	push	{r4}
 80168f8:	6093      	str	r3, [r2, #8]
 80168fa:	da08      	bge.n	801690e <__sfputc_r+0x1e>
 80168fc:	6994      	ldr	r4, [r2, #24]
 80168fe:	42a3      	cmp	r3, r4
 8016900:	db01      	blt.n	8016906 <__sfputc_r+0x16>
 8016902:	290a      	cmp	r1, #10
 8016904:	d103      	bne.n	801690e <__sfputc_r+0x1e>
 8016906:	f85d 4b04 	ldr.w	r4, [sp], #4
 801690a:	f000 b935 	b.w	8016b78 <__swbuf_r>
 801690e:	6813      	ldr	r3, [r2, #0]
 8016910:	1c58      	adds	r0, r3, #1
 8016912:	6010      	str	r0, [r2, #0]
 8016914:	7019      	strb	r1, [r3, #0]
 8016916:	4608      	mov	r0, r1
 8016918:	f85d 4b04 	ldr.w	r4, [sp], #4
 801691c:	4770      	bx	lr

0801691e <__sfputs_r>:
 801691e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016920:	4606      	mov	r6, r0
 8016922:	460f      	mov	r7, r1
 8016924:	4614      	mov	r4, r2
 8016926:	18d5      	adds	r5, r2, r3
 8016928:	42ac      	cmp	r4, r5
 801692a:	d101      	bne.n	8016930 <__sfputs_r+0x12>
 801692c:	2000      	movs	r0, #0
 801692e:	e007      	b.n	8016940 <__sfputs_r+0x22>
 8016930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016934:	463a      	mov	r2, r7
 8016936:	4630      	mov	r0, r6
 8016938:	f7ff ffda 	bl	80168f0 <__sfputc_r>
 801693c:	1c43      	adds	r3, r0, #1
 801693e:	d1f3      	bne.n	8016928 <__sfputs_r+0xa>
 8016940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016944 <_vfiprintf_r>:
 8016944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016948:	460d      	mov	r5, r1
 801694a:	b09d      	sub	sp, #116	; 0x74
 801694c:	4614      	mov	r4, r2
 801694e:	4698      	mov	r8, r3
 8016950:	4606      	mov	r6, r0
 8016952:	b118      	cbz	r0, 801695c <_vfiprintf_r+0x18>
 8016954:	6a03      	ldr	r3, [r0, #32]
 8016956:	b90b      	cbnz	r3, 801695c <_vfiprintf_r+0x18>
 8016958:	f7fe f94e 	bl	8014bf8 <__sinit>
 801695c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801695e:	07d9      	lsls	r1, r3, #31
 8016960:	d405      	bmi.n	801696e <_vfiprintf_r+0x2a>
 8016962:	89ab      	ldrh	r3, [r5, #12]
 8016964:	059a      	lsls	r2, r3, #22
 8016966:	d402      	bmi.n	801696e <_vfiprintf_r+0x2a>
 8016968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801696a:	f7fe faca 	bl	8014f02 <__retarget_lock_acquire_recursive>
 801696e:	89ab      	ldrh	r3, [r5, #12]
 8016970:	071b      	lsls	r3, r3, #28
 8016972:	d501      	bpl.n	8016978 <_vfiprintf_r+0x34>
 8016974:	692b      	ldr	r3, [r5, #16]
 8016976:	b99b      	cbnz	r3, 80169a0 <_vfiprintf_r+0x5c>
 8016978:	4629      	mov	r1, r5
 801697a:	4630      	mov	r0, r6
 801697c:	f000 f93a 	bl	8016bf4 <__swsetup_r>
 8016980:	b170      	cbz	r0, 80169a0 <_vfiprintf_r+0x5c>
 8016982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016984:	07dc      	lsls	r4, r3, #31
 8016986:	d504      	bpl.n	8016992 <_vfiprintf_r+0x4e>
 8016988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801698c:	b01d      	add	sp, #116	; 0x74
 801698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016992:	89ab      	ldrh	r3, [r5, #12]
 8016994:	0598      	lsls	r0, r3, #22
 8016996:	d4f7      	bmi.n	8016988 <_vfiprintf_r+0x44>
 8016998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801699a:	f7fe fab3 	bl	8014f04 <__retarget_lock_release_recursive>
 801699e:	e7f3      	b.n	8016988 <_vfiprintf_r+0x44>
 80169a0:	2300      	movs	r3, #0
 80169a2:	9309      	str	r3, [sp, #36]	; 0x24
 80169a4:	2320      	movs	r3, #32
 80169a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80169ae:	2330      	movs	r3, #48	; 0x30
 80169b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016b64 <_vfiprintf_r+0x220>
 80169b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169b8:	f04f 0901 	mov.w	r9, #1
 80169bc:	4623      	mov	r3, r4
 80169be:	469a      	mov	sl, r3
 80169c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169c4:	b10a      	cbz	r2, 80169ca <_vfiprintf_r+0x86>
 80169c6:	2a25      	cmp	r2, #37	; 0x25
 80169c8:	d1f9      	bne.n	80169be <_vfiprintf_r+0x7a>
 80169ca:	ebba 0b04 	subs.w	fp, sl, r4
 80169ce:	d00b      	beq.n	80169e8 <_vfiprintf_r+0xa4>
 80169d0:	465b      	mov	r3, fp
 80169d2:	4622      	mov	r2, r4
 80169d4:	4629      	mov	r1, r5
 80169d6:	4630      	mov	r0, r6
 80169d8:	f7ff ffa1 	bl	801691e <__sfputs_r>
 80169dc:	3001      	adds	r0, #1
 80169de:	f000 80a9 	beq.w	8016b34 <_vfiprintf_r+0x1f0>
 80169e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169e4:	445a      	add	r2, fp
 80169e6:	9209      	str	r2, [sp, #36]	; 0x24
 80169e8:	f89a 3000 	ldrb.w	r3, [sl]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	f000 80a1 	beq.w	8016b34 <_vfiprintf_r+0x1f0>
 80169f2:	2300      	movs	r3, #0
 80169f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80169f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169fc:	f10a 0a01 	add.w	sl, sl, #1
 8016a00:	9304      	str	r3, [sp, #16]
 8016a02:	9307      	str	r3, [sp, #28]
 8016a04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a08:	931a      	str	r3, [sp, #104]	; 0x68
 8016a0a:	4654      	mov	r4, sl
 8016a0c:	2205      	movs	r2, #5
 8016a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a12:	4854      	ldr	r0, [pc, #336]	; (8016b64 <_vfiprintf_r+0x220>)
 8016a14:	f7e9 fc0c 	bl	8000230 <memchr>
 8016a18:	9a04      	ldr	r2, [sp, #16]
 8016a1a:	b9d8      	cbnz	r0, 8016a54 <_vfiprintf_r+0x110>
 8016a1c:	06d1      	lsls	r1, r2, #27
 8016a1e:	bf44      	itt	mi
 8016a20:	2320      	movmi	r3, #32
 8016a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a26:	0713      	lsls	r3, r2, #28
 8016a28:	bf44      	itt	mi
 8016a2a:	232b      	movmi	r3, #43	; 0x2b
 8016a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a30:	f89a 3000 	ldrb.w	r3, [sl]
 8016a34:	2b2a      	cmp	r3, #42	; 0x2a
 8016a36:	d015      	beq.n	8016a64 <_vfiprintf_r+0x120>
 8016a38:	9a07      	ldr	r2, [sp, #28]
 8016a3a:	4654      	mov	r4, sl
 8016a3c:	2000      	movs	r0, #0
 8016a3e:	f04f 0c0a 	mov.w	ip, #10
 8016a42:	4621      	mov	r1, r4
 8016a44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a48:	3b30      	subs	r3, #48	; 0x30
 8016a4a:	2b09      	cmp	r3, #9
 8016a4c:	d94d      	bls.n	8016aea <_vfiprintf_r+0x1a6>
 8016a4e:	b1b0      	cbz	r0, 8016a7e <_vfiprintf_r+0x13a>
 8016a50:	9207      	str	r2, [sp, #28]
 8016a52:	e014      	b.n	8016a7e <_vfiprintf_r+0x13a>
 8016a54:	eba0 0308 	sub.w	r3, r0, r8
 8016a58:	fa09 f303 	lsl.w	r3, r9, r3
 8016a5c:	4313      	orrs	r3, r2
 8016a5e:	9304      	str	r3, [sp, #16]
 8016a60:	46a2      	mov	sl, r4
 8016a62:	e7d2      	b.n	8016a0a <_vfiprintf_r+0xc6>
 8016a64:	9b03      	ldr	r3, [sp, #12]
 8016a66:	1d19      	adds	r1, r3, #4
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	9103      	str	r1, [sp, #12]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	bfbb      	ittet	lt
 8016a70:	425b      	neglt	r3, r3
 8016a72:	f042 0202 	orrlt.w	r2, r2, #2
 8016a76:	9307      	strge	r3, [sp, #28]
 8016a78:	9307      	strlt	r3, [sp, #28]
 8016a7a:	bfb8      	it	lt
 8016a7c:	9204      	strlt	r2, [sp, #16]
 8016a7e:	7823      	ldrb	r3, [r4, #0]
 8016a80:	2b2e      	cmp	r3, #46	; 0x2e
 8016a82:	d10c      	bne.n	8016a9e <_vfiprintf_r+0x15a>
 8016a84:	7863      	ldrb	r3, [r4, #1]
 8016a86:	2b2a      	cmp	r3, #42	; 0x2a
 8016a88:	d134      	bne.n	8016af4 <_vfiprintf_r+0x1b0>
 8016a8a:	9b03      	ldr	r3, [sp, #12]
 8016a8c:	1d1a      	adds	r2, r3, #4
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	9203      	str	r2, [sp, #12]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	bfb8      	it	lt
 8016a96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016a9a:	3402      	adds	r4, #2
 8016a9c:	9305      	str	r3, [sp, #20]
 8016a9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016b74 <_vfiprintf_r+0x230>
 8016aa2:	7821      	ldrb	r1, [r4, #0]
 8016aa4:	2203      	movs	r2, #3
 8016aa6:	4650      	mov	r0, sl
 8016aa8:	f7e9 fbc2 	bl	8000230 <memchr>
 8016aac:	b138      	cbz	r0, 8016abe <_vfiprintf_r+0x17a>
 8016aae:	9b04      	ldr	r3, [sp, #16]
 8016ab0:	eba0 000a 	sub.w	r0, r0, sl
 8016ab4:	2240      	movs	r2, #64	; 0x40
 8016ab6:	4082      	lsls	r2, r0
 8016ab8:	4313      	orrs	r3, r2
 8016aba:	3401      	adds	r4, #1
 8016abc:	9304      	str	r3, [sp, #16]
 8016abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ac2:	4829      	ldr	r0, [pc, #164]	; (8016b68 <_vfiprintf_r+0x224>)
 8016ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ac8:	2206      	movs	r2, #6
 8016aca:	f7e9 fbb1 	bl	8000230 <memchr>
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	d03f      	beq.n	8016b52 <_vfiprintf_r+0x20e>
 8016ad2:	4b26      	ldr	r3, [pc, #152]	; (8016b6c <_vfiprintf_r+0x228>)
 8016ad4:	bb1b      	cbnz	r3, 8016b1e <_vfiprintf_r+0x1da>
 8016ad6:	9b03      	ldr	r3, [sp, #12]
 8016ad8:	3307      	adds	r3, #7
 8016ada:	f023 0307 	bic.w	r3, r3, #7
 8016ade:	3308      	adds	r3, #8
 8016ae0:	9303      	str	r3, [sp, #12]
 8016ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ae4:	443b      	add	r3, r7
 8016ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ae8:	e768      	b.n	80169bc <_vfiprintf_r+0x78>
 8016aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8016aee:	460c      	mov	r4, r1
 8016af0:	2001      	movs	r0, #1
 8016af2:	e7a6      	b.n	8016a42 <_vfiprintf_r+0xfe>
 8016af4:	2300      	movs	r3, #0
 8016af6:	3401      	adds	r4, #1
 8016af8:	9305      	str	r3, [sp, #20]
 8016afa:	4619      	mov	r1, r3
 8016afc:	f04f 0c0a 	mov.w	ip, #10
 8016b00:	4620      	mov	r0, r4
 8016b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b06:	3a30      	subs	r2, #48	; 0x30
 8016b08:	2a09      	cmp	r2, #9
 8016b0a:	d903      	bls.n	8016b14 <_vfiprintf_r+0x1d0>
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d0c6      	beq.n	8016a9e <_vfiprintf_r+0x15a>
 8016b10:	9105      	str	r1, [sp, #20]
 8016b12:	e7c4      	b.n	8016a9e <_vfiprintf_r+0x15a>
 8016b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b18:	4604      	mov	r4, r0
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	e7f0      	b.n	8016b00 <_vfiprintf_r+0x1bc>
 8016b1e:	ab03      	add	r3, sp, #12
 8016b20:	9300      	str	r3, [sp, #0]
 8016b22:	462a      	mov	r2, r5
 8016b24:	4b12      	ldr	r3, [pc, #72]	; (8016b70 <_vfiprintf_r+0x22c>)
 8016b26:	a904      	add	r1, sp, #16
 8016b28:	4630      	mov	r0, r6
 8016b2a:	f7fd fc13 	bl	8014354 <_printf_float>
 8016b2e:	4607      	mov	r7, r0
 8016b30:	1c78      	adds	r0, r7, #1
 8016b32:	d1d6      	bne.n	8016ae2 <_vfiprintf_r+0x19e>
 8016b34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b36:	07d9      	lsls	r1, r3, #31
 8016b38:	d405      	bmi.n	8016b46 <_vfiprintf_r+0x202>
 8016b3a:	89ab      	ldrh	r3, [r5, #12]
 8016b3c:	059a      	lsls	r2, r3, #22
 8016b3e:	d402      	bmi.n	8016b46 <_vfiprintf_r+0x202>
 8016b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b42:	f7fe f9df 	bl	8014f04 <__retarget_lock_release_recursive>
 8016b46:	89ab      	ldrh	r3, [r5, #12]
 8016b48:	065b      	lsls	r3, r3, #25
 8016b4a:	f53f af1d 	bmi.w	8016988 <_vfiprintf_r+0x44>
 8016b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b50:	e71c      	b.n	801698c <_vfiprintf_r+0x48>
 8016b52:	ab03      	add	r3, sp, #12
 8016b54:	9300      	str	r3, [sp, #0]
 8016b56:	462a      	mov	r2, r5
 8016b58:	4b05      	ldr	r3, [pc, #20]	; (8016b70 <_vfiprintf_r+0x22c>)
 8016b5a:	a904      	add	r1, sp, #16
 8016b5c:	4630      	mov	r0, r6
 8016b5e:	f7fd fe9d 	bl	801489c <_printf_i>
 8016b62:	e7e4      	b.n	8016b2e <_vfiprintf_r+0x1ea>
 8016b64:	080189b4 	.word	0x080189b4
 8016b68:	080189be 	.word	0x080189be
 8016b6c:	08014355 	.word	0x08014355
 8016b70:	0801691f 	.word	0x0801691f
 8016b74:	080189ba 	.word	0x080189ba

08016b78 <__swbuf_r>:
 8016b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b7a:	460e      	mov	r6, r1
 8016b7c:	4614      	mov	r4, r2
 8016b7e:	4605      	mov	r5, r0
 8016b80:	b118      	cbz	r0, 8016b8a <__swbuf_r+0x12>
 8016b82:	6a03      	ldr	r3, [r0, #32]
 8016b84:	b90b      	cbnz	r3, 8016b8a <__swbuf_r+0x12>
 8016b86:	f7fe f837 	bl	8014bf8 <__sinit>
 8016b8a:	69a3      	ldr	r3, [r4, #24]
 8016b8c:	60a3      	str	r3, [r4, #8]
 8016b8e:	89a3      	ldrh	r3, [r4, #12]
 8016b90:	071a      	lsls	r2, r3, #28
 8016b92:	d525      	bpl.n	8016be0 <__swbuf_r+0x68>
 8016b94:	6923      	ldr	r3, [r4, #16]
 8016b96:	b31b      	cbz	r3, 8016be0 <__swbuf_r+0x68>
 8016b98:	6823      	ldr	r3, [r4, #0]
 8016b9a:	6922      	ldr	r2, [r4, #16]
 8016b9c:	1a98      	subs	r0, r3, r2
 8016b9e:	6963      	ldr	r3, [r4, #20]
 8016ba0:	b2f6      	uxtb	r6, r6
 8016ba2:	4283      	cmp	r3, r0
 8016ba4:	4637      	mov	r7, r6
 8016ba6:	dc04      	bgt.n	8016bb2 <__swbuf_r+0x3a>
 8016ba8:	4621      	mov	r1, r4
 8016baa:	4628      	mov	r0, r5
 8016bac:	f7ff fddc 	bl	8016768 <_fflush_r>
 8016bb0:	b9e0      	cbnz	r0, 8016bec <__swbuf_r+0x74>
 8016bb2:	68a3      	ldr	r3, [r4, #8]
 8016bb4:	3b01      	subs	r3, #1
 8016bb6:	60a3      	str	r3, [r4, #8]
 8016bb8:	6823      	ldr	r3, [r4, #0]
 8016bba:	1c5a      	adds	r2, r3, #1
 8016bbc:	6022      	str	r2, [r4, #0]
 8016bbe:	701e      	strb	r6, [r3, #0]
 8016bc0:	6962      	ldr	r2, [r4, #20]
 8016bc2:	1c43      	adds	r3, r0, #1
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	d004      	beq.n	8016bd2 <__swbuf_r+0x5a>
 8016bc8:	89a3      	ldrh	r3, [r4, #12]
 8016bca:	07db      	lsls	r3, r3, #31
 8016bcc:	d506      	bpl.n	8016bdc <__swbuf_r+0x64>
 8016bce:	2e0a      	cmp	r6, #10
 8016bd0:	d104      	bne.n	8016bdc <__swbuf_r+0x64>
 8016bd2:	4621      	mov	r1, r4
 8016bd4:	4628      	mov	r0, r5
 8016bd6:	f7ff fdc7 	bl	8016768 <_fflush_r>
 8016bda:	b938      	cbnz	r0, 8016bec <__swbuf_r+0x74>
 8016bdc:	4638      	mov	r0, r7
 8016bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016be0:	4621      	mov	r1, r4
 8016be2:	4628      	mov	r0, r5
 8016be4:	f000 f806 	bl	8016bf4 <__swsetup_r>
 8016be8:	2800      	cmp	r0, #0
 8016bea:	d0d5      	beq.n	8016b98 <__swbuf_r+0x20>
 8016bec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016bf0:	e7f4      	b.n	8016bdc <__swbuf_r+0x64>
	...

08016bf4 <__swsetup_r>:
 8016bf4:	b538      	push	{r3, r4, r5, lr}
 8016bf6:	4b2a      	ldr	r3, [pc, #168]	; (8016ca0 <__swsetup_r+0xac>)
 8016bf8:	4605      	mov	r5, r0
 8016bfa:	6818      	ldr	r0, [r3, #0]
 8016bfc:	460c      	mov	r4, r1
 8016bfe:	b118      	cbz	r0, 8016c08 <__swsetup_r+0x14>
 8016c00:	6a03      	ldr	r3, [r0, #32]
 8016c02:	b90b      	cbnz	r3, 8016c08 <__swsetup_r+0x14>
 8016c04:	f7fd fff8 	bl	8014bf8 <__sinit>
 8016c08:	89a3      	ldrh	r3, [r4, #12]
 8016c0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c0e:	0718      	lsls	r0, r3, #28
 8016c10:	d422      	bmi.n	8016c58 <__swsetup_r+0x64>
 8016c12:	06d9      	lsls	r1, r3, #27
 8016c14:	d407      	bmi.n	8016c26 <__swsetup_r+0x32>
 8016c16:	2309      	movs	r3, #9
 8016c18:	602b      	str	r3, [r5, #0]
 8016c1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016c1e:	81a3      	strh	r3, [r4, #12]
 8016c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c24:	e034      	b.n	8016c90 <__swsetup_r+0x9c>
 8016c26:	0758      	lsls	r0, r3, #29
 8016c28:	d512      	bpl.n	8016c50 <__swsetup_r+0x5c>
 8016c2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c2c:	b141      	cbz	r1, 8016c40 <__swsetup_r+0x4c>
 8016c2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c32:	4299      	cmp	r1, r3
 8016c34:	d002      	beq.n	8016c3c <__swsetup_r+0x48>
 8016c36:	4628      	mov	r0, r5
 8016c38:	f7fe fff0 	bl	8015c1c <_free_r>
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	6363      	str	r3, [r4, #52]	; 0x34
 8016c40:	89a3      	ldrh	r3, [r4, #12]
 8016c42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c46:	81a3      	strh	r3, [r4, #12]
 8016c48:	2300      	movs	r3, #0
 8016c4a:	6063      	str	r3, [r4, #4]
 8016c4c:	6923      	ldr	r3, [r4, #16]
 8016c4e:	6023      	str	r3, [r4, #0]
 8016c50:	89a3      	ldrh	r3, [r4, #12]
 8016c52:	f043 0308 	orr.w	r3, r3, #8
 8016c56:	81a3      	strh	r3, [r4, #12]
 8016c58:	6923      	ldr	r3, [r4, #16]
 8016c5a:	b94b      	cbnz	r3, 8016c70 <__swsetup_r+0x7c>
 8016c5c:	89a3      	ldrh	r3, [r4, #12]
 8016c5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c66:	d003      	beq.n	8016c70 <__swsetup_r+0x7c>
 8016c68:	4621      	mov	r1, r4
 8016c6a:	4628      	mov	r0, r5
 8016c6c:	f000 f840 	bl	8016cf0 <__smakebuf_r>
 8016c70:	89a0      	ldrh	r0, [r4, #12]
 8016c72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c76:	f010 0301 	ands.w	r3, r0, #1
 8016c7a:	d00a      	beq.n	8016c92 <__swsetup_r+0x9e>
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	60a3      	str	r3, [r4, #8]
 8016c80:	6963      	ldr	r3, [r4, #20]
 8016c82:	425b      	negs	r3, r3
 8016c84:	61a3      	str	r3, [r4, #24]
 8016c86:	6923      	ldr	r3, [r4, #16]
 8016c88:	b943      	cbnz	r3, 8016c9c <__swsetup_r+0xa8>
 8016c8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016c8e:	d1c4      	bne.n	8016c1a <__swsetup_r+0x26>
 8016c90:	bd38      	pop	{r3, r4, r5, pc}
 8016c92:	0781      	lsls	r1, r0, #30
 8016c94:	bf58      	it	pl
 8016c96:	6963      	ldrpl	r3, [r4, #20]
 8016c98:	60a3      	str	r3, [r4, #8]
 8016c9a:	e7f4      	b.n	8016c86 <__swsetup_r+0x92>
 8016c9c:	2000      	movs	r0, #0
 8016c9e:	e7f7      	b.n	8016c90 <__swsetup_r+0x9c>
 8016ca0:	2000006c 	.word	0x2000006c

08016ca4 <__swhatbuf_r>:
 8016ca4:	b570      	push	{r4, r5, r6, lr}
 8016ca6:	460c      	mov	r4, r1
 8016ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cac:	2900      	cmp	r1, #0
 8016cae:	b096      	sub	sp, #88	; 0x58
 8016cb0:	4615      	mov	r5, r2
 8016cb2:	461e      	mov	r6, r3
 8016cb4:	da0d      	bge.n	8016cd2 <__swhatbuf_r+0x2e>
 8016cb6:	89a3      	ldrh	r3, [r4, #12]
 8016cb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016cbc:	f04f 0100 	mov.w	r1, #0
 8016cc0:	bf0c      	ite	eq
 8016cc2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016cc6:	2340      	movne	r3, #64	; 0x40
 8016cc8:	2000      	movs	r0, #0
 8016cca:	6031      	str	r1, [r6, #0]
 8016ccc:	602b      	str	r3, [r5, #0]
 8016cce:	b016      	add	sp, #88	; 0x58
 8016cd0:	bd70      	pop	{r4, r5, r6, pc}
 8016cd2:	466a      	mov	r2, sp
 8016cd4:	f000 f848 	bl	8016d68 <_fstat_r>
 8016cd8:	2800      	cmp	r0, #0
 8016cda:	dbec      	blt.n	8016cb6 <__swhatbuf_r+0x12>
 8016cdc:	9901      	ldr	r1, [sp, #4]
 8016cde:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016ce2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016ce6:	4259      	negs	r1, r3
 8016ce8:	4159      	adcs	r1, r3
 8016cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016cee:	e7eb      	b.n	8016cc8 <__swhatbuf_r+0x24>

08016cf0 <__smakebuf_r>:
 8016cf0:	898b      	ldrh	r3, [r1, #12]
 8016cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016cf4:	079d      	lsls	r5, r3, #30
 8016cf6:	4606      	mov	r6, r0
 8016cf8:	460c      	mov	r4, r1
 8016cfa:	d507      	bpl.n	8016d0c <__smakebuf_r+0x1c>
 8016cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016d00:	6023      	str	r3, [r4, #0]
 8016d02:	6123      	str	r3, [r4, #16]
 8016d04:	2301      	movs	r3, #1
 8016d06:	6163      	str	r3, [r4, #20]
 8016d08:	b002      	add	sp, #8
 8016d0a:	bd70      	pop	{r4, r5, r6, pc}
 8016d0c:	ab01      	add	r3, sp, #4
 8016d0e:	466a      	mov	r2, sp
 8016d10:	f7ff ffc8 	bl	8016ca4 <__swhatbuf_r>
 8016d14:	9900      	ldr	r1, [sp, #0]
 8016d16:	4605      	mov	r5, r0
 8016d18:	4630      	mov	r0, r6
 8016d1a:	f7fd f9ef 	bl	80140fc <_malloc_r>
 8016d1e:	b948      	cbnz	r0, 8016d34 <__smakebuf_r+0x44>
 8016d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d24:	059a      	lsls	r2, r3, #22
 8016d26:	d4ef      	bmi.n	8016d08 <__smakebuf_r+0x18>
 8016d28:	f023 0303 	bic.w	r3, r3, #3
 8016d2c:	f043 0302 	orr.w	r3, r3, #2
 8016d30:	81a3      	strh	r3, [r4, #12]
 8016d32:	e7e3      	b.n	8016cfc <__smakebuf_r+0xc>
 8016d34:	89a3      	ldrh	r3, [r4, #12]
 8016d36:	6020      	str	r0, [r4, #0]
 8016d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d3c:	81a3      	strh	r3, [r4, #12]
 8016d3e:	9b00      	ldr	r3, [sp, #0]
 8016d40:	6163      	str	r3, [r4, #20]
 8016d42:	9b01      	ldr	r3, [sp, #4]
 8016d44:	6120      	str	r0, [r4, #16]
 8016d46:	b15b      	cbz	r3, 8016d60 <__smakebuf_r+0x70>
 8016d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d4c:	4630      	mov	r0, r6
 8016d4e:	f000 f81d 	bl	8016d8c <_isatty_r>
 8016d52:	b128      	cbz	r0, 8016d60 <__smakebuf_r+0x70>
 8016d54:	89a3      	ldrh	r3, [r4, #12]
 8016d56:	f023 0303 	bic.w	r3, r3, #3
 8016d5a:	f043 0301 	orr.w	r3, r3, #1
 8016d5e:	81a3      	strh	r3, [r4, #12]
 8016d60:	89a3      	ldrh	r3, [r4, #12]
 8016d62:	431d      	orrs	r5, r3
 8016d64:	81a5      	strh	r5, [r4, #12]
 8016d66:	e7cf      	b.n	8016d08 <__smakebuf_r+0x18>

08016d68 <_fstat_r>:
 8016d68:	b538      	push	{r3, r4, r5, lr}
 8016d6a:	4d07      	ldr	r5, [pc, #28]	; (8016d88 <_fstat_r+0x20>)
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	4604      	mov	r4, r0
 8016d70:	4608      	mov	r0, r1
 8016d72:	4611      	mov	r1, r2
 8016d74:	602b      	str	r3, [r5, #0]
 8016d76:	f7f8 fd60 	bl	800f83a <_fstat>
 8016d7a:	1c43      	adds	r3, r0, #1
 8016d7c:	d102      	bne.n	8016d84 <_fstat_r+0x1c>
 8016d7e:	682b      	ldr	r3, [r5, #0]
 8016d80:	b103      	cbz	r3, 8016d84 <_fstat_r+0x1c>
 8016d82:	6023      	str	r3, [r4, #0]
 8016d84:	bd38      	pop	{r3, r4, r5, pc}
 8016d86:	bf00      	nop
 8016d88:	20000564 	.word	0x20000564

08016d8c <_isatty_r>:
 8016d8c:	b538      	push	{r3, r4, r5, lr}
 8016d8e:	4d06      	ldr	r5, [pc, #24]	; (8016da8 <_isatty_r+0x1c>)
 8016d90:	2300      	movs	r3, #0
 8016d92:	4604      	mov	r4, r0
 8016d94:	4608      	mov	r0, r1
 8016d96:	602b      	str	r3, [r5, #0]
 8016d98:	f7f8 fd5f 	bl	800f85a <_isatty>
 8016d9c:	1c43      	adds	r3, r0, #1
 8016d9e:	d102      	bne.n	8016da6 <_isatty_r+0x1a>
 8016da0:	682b      	ldr	r3, [r5, #0]
 8016da2:	b103      	cbz	r3, 8016da6 <_isatty_r+0x1a>
 8016da4:	6023      	str	r3, [r4, #0]
 8016da6:	bd38      	pop	{r3, r4, r5, pc}
 8016da8:	20000564 	.word	0x20000564

08016dac <_Unwind_GetDataRelBase>:
 8016dac:	b508      	push	{r3, lr}
 8016dae:	f7fd f96d 	bl	801408c <abort>

08016db2 <_Unwind_GetTextRelBase>:
 8016db2:	b508      	push	{r3, lr}
 8016db4:	f7ff fffa 	bl	8016dac <_Unwind_GetDataRelBase>

08016db8 <_init>:
 8016db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dba:	bf00      	nop
 8016dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016dbe:	bc08      	pop	{r3}
 8016dc0:	469e      	mov	lr, r3
 8016dc2:	4770      	bx	lr

08016dc4 <_fini>:
 8016dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dc6:	bf00      	nop
 8016dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016dca:	bc08      	pop	{r3}
 8016dcc:	469e      	mov	lr, r3
 8016dce:	4770      	bx	lr
