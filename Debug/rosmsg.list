
rosmsg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cfc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08005ec0  08005ec0  00015ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a4  080060a4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060ac  080060ac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080060bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  08006118  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08006118  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e5e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025ac  00000000  00000000  00034f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  000374e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b16  00000000  00000000  00038388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025057  00000000  00000000  00038e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c651  00000000  00000000  0005def5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd7b6  00000000  00000000  0006a546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004828  00000000  00000000  00147cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0014c524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005ea8 	.word	0x08005ea8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08005ea8 	.word	0x08005ea8

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000238:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f805 	bl	8000554 <_ZNSt8__detail17_List_node_header7_M_initEv>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	685a      	ldr	r2, [r3, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
#endif
      }
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <_ZN11AbstractMsgD1Ev>:

class AbstractMsg
{
	public:
		AbstractMsg() = default;
		virtual ~AbstractMsg() {};
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <_ZN11AbstractMsgD1Ev+0x1c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	08005f2c 	.word	0x08005f2c

0800059c <_ZN11AbstractMsgD0Ev>:
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff ffe9 	bl	800057c <_ZN11AbstractMsgD1Ev>
 80005aa:	2104      	movs	r1, #4
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f005 fa17 	bl	80059e0 <_ZdlPvj>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <_ZN11AbstractMsgC1Ev>:
		AbstractMsg() = default;
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <_ZN11AbstractMsgC1Ev+0x1c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	08005f2c 	.word	0x08005f2c

080005dc <_ZN11HeaderClassC1Ehh>:
{
	static const msg_type header_msg_type = header;
	static const uint8_t header_size = 3;
	public:
		HeaderClass() = delete;
		HeaderClass(uint8_t msg_id, uint8_t msg_len): _data(new uint8_t[HeaderClass::header_msg_type])
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
 80005e8:	4613      	mov	r3, r2
 80005ea:	70bb      	strb	r3, [r7, #2]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ffe4 	bl	80005bc <_ZN11AbstractMsgC1Ev>
 80005f4:	4a16      	ldr	r2, [pc, #88]	; (8000650 <_ZN11HeaderClassC1Ehh+0x74>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	1d1c      	adds	r4, r3, #4
 80005fe:	2000      	movs	r0, #0
 8000600:	f005 fa03 	bl	8005a0a <_Znaj>
 8000604:	4603      	mov	r3, r0
 8000606:	4619      	mov	r1, r3
 8000608:	4620      	mov	r0, r4
 800060a:	f000 fc5c 	bl	8000ec6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
		{
			_data[0] = SerialID::MSG_START;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	3304      	adds	r3, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fc84 	bl	8000f22 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800061a:	4603      	mov	r3, r0
 800061c:	22fe      	movs	r2, #254	; 0xfe
 800061e:	701a      	strb	r2, [r3, #0]
			_data[1] = msg_id;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3304      	adds	r3, #4
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fc7b 	bl	8000f22 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800062c:	4602      	mov	r2, r0
 800062e:	78fb      	ldrb	r3, [r7, #3]
 8000630:	7013      	strb	r3, [r2, #0]
			_data[2] = msg_len;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3304      	adds	r3, #4
 8000636:	2102      	movs	r1, #2
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fc72 	bl	8000f22 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800063e:	4602      	mov	r2, r0
 8000640:	78bb      	ldrb	r3, [r7, #2]
 8000642:	7013      	strb	r3, [r2, #0]
		};
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bd90      	pop	{r4, r7, pc}
 800064e:	bf00      	nop
 8000650:	08005f10 	.word	0x08005f10

08000654 <_ZNK11HeaderClass8get_dataEv>:
		~HeaderClass() = default;
		uint8_t* get_data() const noexcept override {return _data.get();};
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3304      	adds	r3, #4
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fc6f 	bl	8000f44 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8000666:	4603      	mov	r3, r0
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <_ZNK11HeaderClass8get_typeEv>:
		msg_type get_type() const noexcept override {return HeaderClass::header_msg_type;}
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	2300      	movs	r3, #0
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <_ZNK11HeaderClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return HeaderClass::header_size;}
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	2303      	movs	r3, #3
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <_ZNK12PayloadClass8get_dataEv>:
				_data[i] = data_ptr[i];
			}

		};
		~PayloadClass() = default;
		uint8_t* get_data() const noexcept override {return _data.get();}
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3308      	adds	r3, #8
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fc4b 	bl	8000f44 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <_ZNK12PayloadClass8get_typeEv>:
		msg_type get_type() const noexcept override {return PayloadClass::payload_msg_type;}
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	2301      	movs	r3, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <_ZNK12PayloadClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return _data_size;}
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <_ZN16AcknowledgeClassC1Ev>:
class AcknowledgeClass : public AbstractMsg
{
	static const msg_type ack_msg_type = header;
	static const uint8_t ack_size = 2;
	public:
		AcknowledgeClass(): _data(new uint8_t[AcknowledgeClass::ack_size])
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff62 	bl	80005bc <_ZN11AbstractMsgC1Ev>
 80006f8:	4a11      	ldr	r2, [pc, #68]	; (8000740 <_ZN16AcknowledgeClassC1Ev+0x58>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	1d1c      	adds	r4, r3, #4
 8000702:	2002      	movs	r0, #2
 8000704:	f005 f981 	bl	8005a0a <_Znaj>
 8000708:	4603      	mov	r3, r0
 800070a:	4619      	mov	r1, r3
 800070c:	4620      	mov	r0, r4
 800070e:	f000 fbda 	bl	8000ec6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
		{
			_data[0] = SerialID::MSG_NO_ACK;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3304      	adds	r3, #4
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fc02 	bl	8000f22 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800071e:	4603      	mov	r3, r0
 8000720:	22fd      	movs	r2, #253	; 0xfd
 8000722:	701a      	strb	r2, [r3, #0]
			_data[1] = SerialID::MSG_NO_ID;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3304      	adds	r3, #4
 8000728:	2101      	movs	r1, #1
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fbf9 	bl	8000f22 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8000730:	4603      	mov	r3, r0
 8000732:	22fc      	movs	r2, #252	; 0xfc
 8000734:	701a      	strb	r2, [r3, #0]
		};
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	08005ed8 	.word	0x08005ed8

08000744 <_ZNK16AcknowledgeClass8get_dataEv>:
		~AcknowledgeClass() = default;
		uint8_t* get_data() const noexcept override {return _data.get();}
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3304      	adds	r3, #4
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fbf7 	bl	8000f44 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8000756:	4603      	mov	r3, r0
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <_ZNK16AcknowledgeClass8get_typeEv>:
		msg_type get_type() const noexcept override {return AcknowledgeClass::ack_msg_type;}
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	2300      	movs	r3, #0
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <_ZNK16AcknowledgeClass13get_data_sizeEv>:
		uint8_t get_data_size() const noexcept override {return AcknowledgeClass::ack_size;}
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	2302      	movs	r3, #2
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 fbf2 	bl	8000f7e <_ZNSaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEED1Ev>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fbd5 	bl	8000f5e <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE10_List_implC1Ev>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ffeb 	bl	80007a4 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EEC1Ev>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_Z18transmit_front_msgv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void transmit_front_msg()
{
 80007d8:	b598      	push	{r3, r4, r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)tx_msg_list.front()->get_data(), tx_msg_list.front()->get_data_size());
 80007dc:	4811      	ldr	r0, [pc, #68]	; (8000824 <_Z18transmit_front_msgv+0x4c>)
 80007de:	f000 fbea 	bl	8000fb6 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5frontEv>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fbf9 	bl	8000fdc <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEptEv>
 80007ea:	4603      	mov	r3, r0
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	3208      	adds	r2, #8
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	4790      	blx	r2
 80007f6:	4604      	mov	r4, r0
 80007f8:	480a      	ldr	r0, [pc, #40]	; (8000824 <_Z18transmit_front_msgv+0x4c>)
 80007fa:	f000 fbdc 	bl	8000fb6 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5frontEv>
 80007fe:	4603      	mov	r3, r0
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fbeb 	bl	8000fdc <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEptEv>
 8000806:	4603      	mov	r3, r0
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	3210      	adds	r2, #16
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	4790      	blx	r2
 8000812:	4603      	mov	r3, r0
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	4621      	mov	r1, r4
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <_Z18transmit_front_msgv+0x50>)
 800081c:	f003 fede 	bl	80045dc <HAL_UART_Transmit_DMA>
}
 8000820:	bf00      	nop
 8000822:	bd98      	pop	{r3, r4, r7, pc}
 8000824:	20000188 	.word	0x20000188
 8000828:	20000078 	.word	0x20000078

0800082c <_Z11receive_ackv>:

void receive_ack()
{
 800082c:	b598      	push	{r3, r4, r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, singleack.get_data(), singleack.get_data_size());
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <_Z11receive_ackv+0x24>)
 8000832:	f7ff ff87 	bl	8000744 <_ZNK16AcknowledgeClass8get_dataEv>
 8000836:	4604      	mov	r4, r0
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <_Z11receive_ackv+0x24>)
 800083a:	f7ff ff9c 	bl	8000776 <_ZNK16AcknowledgeClass13get_data_sizeEv>
 800083e:	4603      	mov	r3, r0
 8000840:	b29b      	uxth	r3, r3
 8000842:	461a      	mov	r2, r3
 8000844:	4621      	mov	r1, r4
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <_Z11receive_ackv+0x28>)
 8000848:	f003 ff46 	bl	80046d8 <HAL_UART_Receive_DMA>
}
 800084c:	bf00      	nop
 800084e:	bd98      	pop	{r3, r4, r7, pc}
 8000850:	20000180 	.word	0x20000180
 8000854:	20000078 	.word	0x20000078

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b08f      	sub	sp, #60	; 0x3c
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f002 f915 	bl	8002a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f82d 	bl	80008c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f000 f8f9 	bl	8000a5c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800086a:	f000 f8cf 	bl	8000a0c <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800086e:	f000 f89f 	bl	80009b0 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  char print_msg[50] = "Hello World\n";
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <main+0x60>)
 8000874:	463b      	mov	r3, r7
 8000876:	4614      	mov	r4, r2
 8000878:	6820      	ldr	r0, [r4, #0]
 800087a:	6861      	ldr	r1, [r4, #4]
 800087c:	68a2      	ldr	r2, [r4, #8]
 800087e:	c307      	stmia	r3!, {r0, r1, r2}
 8000880:	7b22      	ldrb	r2, [r4, #12]
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	f107 030d 	add.w	r3, r7, #13
 8000888:	2225      	movs	r2, #37	; 0x25
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f005 fa37 	bl	8005d00 <memset>
  float tosend1 = 0.1;
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <main+0x64>)
 8000894:	637b      	str	r3, [r7, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_Delay(1000);
 8000896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089a:	f002 f969 	bl	8002b70 <HAL_Delay>
	 send_print(print_msg);
 800089e:	463b      	mov	r3, r7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f949 	bl	8000b38 <_Z10send_printPKc>
	 send_float(tosend1);
 80008a6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80008aa:	f000 f9b1 	bl	8000c10 <_Z10send_floatf>
	 HAL_Delay(1000);
 80008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b2:	f002 f95d 	bl	8002b70 <HAL_Delay>
	 HAL_Delay(1000);
 80008b6:	e7ee      	b.n	8000896 <main+0x3e>
 80008b8:	08005ec0 	.word	0x08005ec0
 80008bc:	3dcccccd 	.word	0x3dcccccd

080008c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2234      	movs	r2, #52	; 0x34
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f005 fa16 	bl	8005d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <_Z18SystemClock_Configv+0xe8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <_Z18SystemClock_Configv+0xe8>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <_Z18SystemClock_Configv+0xe8>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000900:	2300      	movs	r3, #0
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	4b29      	ldr	r3, [pc, #164]	; (80009ac <_Z18SystemClock_Configv+0xec>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <_Z18SystemClock_Configv+0xec>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <_Z18SystemClock_Configv+0xec>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	2301      	movs	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	2310      	movs	r3, #16
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092c:	2302      	movs	r3, #2
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000930:	2300      	movs	r3, #0
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000934:	2310      	movs	r3, #16
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000938:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800093c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800093e:	2304      	movs	r3, #4
 8000940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000942:	2302      	movs	r3, #2
 8000944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4618      	mov	r0, r3
 8000950:	f003 fb58 	bl	8004004 <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf14      	ite	ne
 800095a:	2301      	movne	r3, #1
 800095c:	2300      	moveq	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8000964:	f000 fa9a 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000968:	230f      	movs	r3, #15
 800096a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096c:	2302      	movs	r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	2102      	movs	r1, #2
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fff3 	bl	8003970 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	bf14      	ite	ne
 8000990:	2301      	movne	r3, #1
 8000992:	2300      	moveq	r3, #0
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800099a:	f000 fa7f 	bl	8000e9c <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <_ZL19MX_USART2_UART_Initv+0x58>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0x54>)
 80009e8:	f003 fdaa 	bl	8004540 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80009fc:	f000 fa4e 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000078 	.word	0x20000078
 8000a08:	40004400 	.word	0x40004400

08000a0c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <_ZL11MX_DMA_Initv+0x4c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <_ZL11MX_DMA_Initv+0x4c>)
 8000a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <_ZL11MX_DMA_Initv+0x4c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2010      	movs	r0, #16
 8000a34:	f002 f99b 	bl	8002d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a38:	2010      	movs	r0, #16
 8000a3a:	f002 f9b4 	bl	8002da6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2011      	movs	r0, #17
 8000a44:	f002 f993 	bl	8002d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a48:	2011      	movs	r0, #17
 8000a4a:	f002 f9ac 	bl	8002da6 <HAL_NVIC_EnableIRQ>

}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a2c      	ldr	r2, [pc, #176]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <_ZL12MX_GPIO_Initv+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4812      	ldr	r0, [pc, #72]	; (8000b30 <_ZL12MX_GPIO_Initv+0xd4>)
 8000ae8:	f002 ff0e 	bl	8003908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <_ZL12MX_GPIO_Initv+0xd8>)
 8000b04:	f002 fd6c 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4804      	ldr	r0, [pc, #16]	; (8000b30 <_ZL12MX_GPIO_Initv+0xd4>)
 8000b20:	f002 fd5e 	bl	80035e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020800 	.word	0x40020800

08000b38 <_Z10send_printPKc>:

/* USER CODE BEGIN 4 */
void send_print(const char* msg)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	if( strlen(msg) < UINT8_MAX)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb68 	bl	8000218 <strlen>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bfe      	cmp	r3, #254	; 0xfe
 8000b4c:	d858      	bhi.n	8000c00 <_Z10send_printPKc+0xc8>
	{
		tx_msg_list.push_back(std::make_unique<HeaderClass>(SerialID::MSG_PRINT,strlen(msg)));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fb61 	bl	8000218 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	f107 0210 	add.w	r2, r7, #16
 8000b62:	4929      	ldr	r1, [pc, #164]	; (8000c08 <_Z10send_printPKc+0xd0>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa50 	bl	800100a <_ZSt11make_uniqueI11HeaderClassJRKhjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b6a:	f107 020c 	add.w	r2, r7, #12
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fa9e 	bl	80010b6 <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEC1I11HeaderClassS1_IS5_EvEEOS_IT_T0_E>
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4822      	ldr	r0, [pc, #136]	; (8000c0c <_Z10send_printPKc+0xd4>)
 8000b82:	f000 fad6 	bl	8001132 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE9push_backEOS5_>
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 faaf 	bl	80010ee <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EED1Ev>
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fa5b 	bl	8001050 <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EED1Ev>
		tx_msg_list.push_back(std::make_unique<PayloadClass>(msg,strlen(msg)));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fb3b 	bl	8000218 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	61fb      	str	r3, [r7, #28]
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	f107 021c 	add.w	r2, r7, #28
 8000bae:	1d39      	adds	r1, r7, #4
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fad4 	bl	800115e <_ZSt11make_uniqueI12PayloadClassJRPKcjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000bb6:	f107 0218 	add.w	r2, r7, #24
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fb22 	bl	800120a <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEC1I12PayloadClassS1_IS5_EvEEOS_IT_T0_E>
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480f      	ldr	r0, [pc, #60]	; (8000c0c <_Z10send_printPKc+0xd4>)
 8000bce:	f000 fab0 	bl	8001132 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE9push_backEOS5_>
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fa89 	bl	80010ee <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EED1Ev>
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fadf 	bl	80011a4 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>
		if( tx_msg_list.size() == 2)
 8000be6:	4809      	ldr	r0, [pc, #36]	; (8000c0c <_Z10send_printPKc+0xd4>)
 8000be8:	f000 fb2b 	bl	8001242 <_ZNKSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE4sizeEv>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2301      	moveq	r3, #1
 8000bf4:	2300      	movne	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <_Z10send_printPKc+0xc8>
		{
			transmit_front_msg();
 8000bfc:	f7ff fdec 	bl	80007d8 <_Z18transmit_front_msgv>
		}
	}

}
 8000c00:	bf00      	nop
 8000c02:	3720      	adds	r7, #32
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08005ecd 	.word	0x08005ecd
 8000c0c:	20000188 	.word	0x20000188

08000c10 <_Z10send_floatf>:

void send_float(float float_to_send)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	ed87 0a01 	vstr	s0, [r7, #4]
	tx_msg_list.push_back(std::make_unique<HeaderClass>(SerialID::MSG_DATA_1,sizeof(float)));
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	f107 0214 	add.w	r2, r7, #20
 8000c26:	4929      	ldr	r1, [pc, #164]	; (8000ccc <_Z10send_floatf+0xbc>)
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f9ee 	bl	800100a <_ZSt11make_uniqueI11HeaderClassJRKhjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000c2e:	f107 0210 	add.w	r2, r7, #16
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fa3c 	bl	80010b6 <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEC1I11HeaderClassS1_IS5_EvEEOS_IT_T0_E>
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	4619      	mov	r1, r3
 8000c44:	4822      	ldr	r0, [pc, #136]	; (8000cd0 <_Z10send_floatf+0xc0>)
 8000c46:	f000 fa74 	bl	8001132 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE9push_backEOS5_>
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fa4d 	bl	80010ee <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EED1Ev>
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f9f9 	bl	8001050 <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EED1Ev>
	tx_msg_list.push_back(std::make_unique<PayloadClass>(&float_to_send,sizeof(float)));
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	623b      	str	r3, [r7, #32]
 8000c62:	2304      	movs	r3, #4
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000c6e:	f107 0120 	add.w	r1, r7, #32
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 faf1 	bl	800125a <_ZSt11make_uniqueI12PayloadClassJPfjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000c78:	f107 021c 	add.w	r2, r7, #28
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fac1 	bl	800120a <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEC1I12PayloadClassS1_IS5_EvEEOS_IT_T0_E>
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <_Z10send_floatf+0xc0>)
 8000c90:	f000 fa4f 	bl	8001132 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE9push_backEOS5_>
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fa28 	bl	80010ee <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EED1Ev>
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fa7e 	bl	80011a4 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>
	if( tx_msg_list.size() == 2)
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <_Z10send_floatf+0xc0>)
 8000caa:	f000 faca 	bl	8001242 <_ZNKSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE4sizeEv>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	bf0c      	ite	eq
 8000cb4:	2301      	moveq	r3, #1
 8000cb6:	2300      	movne	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <_Z10send_floatf+0xb2>
	{
		transmit_front_msg();
 8000cbe:	f7ff fd8b 	bl	80007d8 <_Z18transmit_front_msgv>
	}

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	08005ece 	.word	0x08005ece
 8000cd0:	20000188 	.word	0x20000188

08000cd4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	if ( huart == &huart2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a31      	ldr	r2, [pc, #196]	; (8000da4 <HAL_UART_TxCpltCallback+0xd0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d15a      	bne.n	8000d9a <HAL_UART_TxCpltCallback+0xc6>
	{
		if ( !tx_msg_list.empty())
 8000ce4:	4830      	ldr	r0, [pc, #192]	; (8000da8 <HAL_UART_TxCpltCallback+0xd4>)
 8000ce6:	f000 fadb 	bl	80012a0 <_ZNKSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5emptyEv>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f083 0301 	eor.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d051      	beq.n	8000d9a <HAL_UART_TxCpltCallback+0xc6>
		{
			if( tx_msg_list.front()->get_type() == msg_type::payload)
 8000cf6:	482c      	ldr	r0, [pc, #176]	; (8000da8 <HAL_UART_TxCpltCallback+0xd4>)
 8000cf8:	f000 f95d 	bl	8000fb6 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5frontEv>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f96c 	bl	8000fdc <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEptEv>
 8000d04:	4603      	mov	r3, r0
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	320c      	adds	r2, #12
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	4790      	blx	r2
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	bf0c      	ite	eq
 8000d16:	2301      	moveq	r3, #1
 8000d18:	2300      	movne	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d025      	beq.n	8000d6c <HAL_UART_TxCpltCallback+0x98>
			{
				tx_msg_list.pop_front();
 8000d20:	4821      	ldr	r0, [pc, #132]	; (8000da8 <HAL_UART_TxCpltCallback+0xd4>)
 8000d22:	f000 facf 	bl	80012c4 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE9pop_frontEv>
				if ( !tx_msg_list.empty())
 8000d26:	4820      	ldr	r0, [pc, #128]	; (8000da8 <HAL_UART_TxCpltCallback+0xd4>)
 8000d28:	f000 faba 	bl	80012a0 <_ZNKSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5emptyEv>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f083 0301 	eor.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d030      	beq.n	8000d9a <HAL_UART_TxCpltCallback+0xc6>
				{
					if(tx_msg_list.front()->get_type() == msg_type::header)
 8000d38:	481b      	ldr	r0, [pc, #108]	; (8000da8 <HAL_UART_TxCpltCallback+0xd4>)
 8000d3a:	f000 f93c 	bl	8000fb6 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5frontEv>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f94b 	bl	8000fdc <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEptEv>
 8000d46:	4603      	mov	r3, r0
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	320c      	adds	r2, #12
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	4790      	blx	r2
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bf0c      	ite	eq
 8000d58:	2301      	moveq	r3, #1
 8000d5a:	2300      	movne	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d01b      	beq.n	8000d9a <HAL_UART_TxCpltCallback+0xc6>
					{
						transmit_front_msg();
 8000d62:	f7ff fd39 	bl	80007d8 <_Z18transmit_front_msgv>
						receive_ack();
 8000d66:	f7ff fd61 	bl	800082c <_Z11receive_ackv>



	}

}
 8000d6a:	e016      	b.n	8000d9a <HAL_UART_TxCpltCallback+0xc6>
			else if ( tx_msg_list.front()->get_type() == msg_type::header)
 8000d6c:	480e      	ldr	r0, [pc, #56]	; (8000da8 <HAL_UART_TxCpltCallback+0xd4>)
 8000d6e:	f000 f922 	bl	8000fb6 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5frontEv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f931 	bl	8000fdc <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEptEv>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	320c      	adds	r2, #12
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	4790      	blx	r2
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf0c      	ite	eq
 8000d8c:	2301      	moveq	r3, #1
 8000d8e:	2300      	movne	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_TxCpltCallback+0xc6>
				receive_ack();
 8000d96:	f7ff fd49 	bl	800082c <_Z11receive_ackv>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000078 	.word	0x20000078
 8000da8:	20000188 	.word	0x20000188

08000dac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	if ( huart == &huart2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a34      	ldr	r2, [pc, #208]	; (8000e88 <HAL_UART_RxCpltCallback+0xdc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d161      	bne.n	8000e80 <HAL_UART_RxCpltCallback+0xd4>
	{
		if(singleack.get_data()[0] == SerialID::MSG_ACK)
 8000dbc:	4833      	ldr	r0, [pc, #204]	; (8000e8c <HAL_UART_RxCpltCallback+0xe0>)
 8000dbe:	f7ff fcc1 	bl	8000744 <_ZNK16AcknowledgeClass8get_dataEv>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2bff      	cmp	r3, #255	; 0xff
 8000dc8:	bf0c      	ite	eq
 8000dca:	2301      	moveq	r3, #1
 8000dcc:	2300      	movne	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d055      	beq.n	8000e80 <HAL_UART_RxCpltCallback+0xd4>
		{
			if( tx_msg_list.front()->get_type() == msg_type::header && tx_msg_list.front()->get_data()[1] == singleack.get_data()[1])
 8000dd4:	482e      	ldr	r0, [pc, #184]	; (8000e90 <HAL_UART_RxCpltCallback+0xe4>)
 8000dd6:	f000 f8ee 	bl	8000fb6 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5frontEv>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f8fd 	bl	8000fdc <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEptEv>
 8000de2:	4603      	mov	r3, r0
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	320c      	adds	r2, #12
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	4790      	blx	r2
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d119      	bne.n	8000e28 <HAL_UART_RxCpltCallback+0x7c>
 8000df4:	4826      	ldr	r0, [pc, #152]	; (8000e90 <HAL_UART_RxCpltCallback+0xe4>)
 8000df6:	f000 f8de 	bl	8000fb6 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5frontEv>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f8ed 	bl	8000fdc <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEptEv>
 8000e02:	4603      	mov	r3, r0
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	3208      	adds	r2, #8
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	4790      	blx	r2
 8000e0e:	4603      	mov	r3, r0
 8000e10:	3301      	adds	r3, #1
 8000e12:	781c      	ldrb	r4, [r3, #0]
 8000e14:	481d      	ldr	r0, [pc, #116]	; (8000e8c <HAL_UART_RxCpltCallback+0xe0>)
 8000e16:	f7ff fc95 	bl	8000744 <_ZNK16AcknowledgeClass8get_dataEv>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	429c      	cmp	r4, r3
 8000e22:	d101      	bne.n	8000e28 <HAL_UART_RxCpltCallback+0x7c>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e000      	b.n	8000e2a <HAL_UART_RxCpltCallback+0x7e>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d028      	beq.n	8000e80 <HAL_UART_RxCpltCallback+0xd4>
			{
				if(oneof2led == false)
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_UART_RxCpltCallback+0xe8>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d107      	bne.n	8000e46 <HAL_UART_RxCpltCallback+0x9a>
				{
					HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000e36:	2120      	movs	r1, #32
 8000e38:	4817      	ldr	r0, [pc, #92]	; (8000e98 <HAL_UART_RxCpltCallback+0xec>)
 8000e3a:	f002 fd7e 	bl	800393a <HAL_GPIO_TogglePin>
					oneof2led = true;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_RxCpltCallback+0xe8>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	e002      	b.n	8000e4c <HAL_UART_RxCpltCallback+0xa0>
				}
				else
				{
					oneof2led = false;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_UART_RxCpltCallback+0xe8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
				}
				tx_msg_list.pop_front();
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <HAL_UART_RxCpltCallback+0xe4>)
 8000e4e:	f000 fa39 	bl	80012c4 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE9pop_frontEv>
				if( tx_msg_list.front()->get_type() == msg_type::payload)
 8000e52:	480f      	ldr	r0, [pc, #60]	; (8000e90 <HAL_UART_RxCpltCallback+0xe4>)
 8000e54:	f000 f8af 	bl	8000fb6 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5frontEv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f8be 	bl	8000fdc <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEptEv>
 8000e60:	4603      	mov	r3, r0
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	320c      	adds	r2, #12
 8000e66:	6812      	ldr	r2, [r2, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	4790      	blx	r2
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	bf0c      	ite	eq
 8000e72:	2301      	moveq	r3, #1
 8000e74:	2300      	movne	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_UART_RxCpltCallback+0xd4>
				{
					transmit_front_msg();
 8000e7c:	f7ff fcac 	bl	80007d8 <_Z18transmit_front_msgv>

			}
		}

	}
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd90      	pop	{r4, r7, pc}
 8000e88:	20000078 	.word	0x20000078
 8000e8c:	20000180 	.word	0x20000180
 8000e90:	20000188 	.word	0x20000188
 8000e94:	2000017c 	.word	0x2000017c
 8000e98:	40020000 	.word	0x40020000

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>

08000ea6 <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fa14 	bl	80012e4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6839      	ldr	r1, [r7, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ffe6 	bl	8000ea6 <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>
        { }
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fa0c 	bl	800130c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8000ef4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d009      	beq.n	8000f12 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 fa11 	bl	8001326 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE11get_deleterEv>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	f000 fa17 	bl	8001340 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>
	__ptr = pointer();
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
      }
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:

      // Observers.

      /// Access an element of owned array.
      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_assert(get() != pointer());
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2b00      	cmp	r3, #0
	return get()[__i];
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f807 	bl	8000f44 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	4413      	add	r3, r2
      }
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fa05 	bl	800135e <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fa07 	bl	800137a <_ZNSaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEEC1Ev>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fae4 	bl	800053c <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_ZNSaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fa03 	bl	8001392 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEED1Ev>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fa02 	bl	80013a8 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE8_M_clearEv>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fbf0 	bl	800078c <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE10_List_implD1Ev>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fa18 	bl	80013f4 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5beginEv>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fa22 	bl	8001416 <_ZNKSt14_List_iteratorISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEdeEv>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	return get();
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 fa24 	bl	8001432 <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EE3getEv>
 8000fea:	4603      	mov	r3, r0
      }
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_ZSt11make_uniqueI11HeaderClassJRKhjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
  /// @endcond

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 800100a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001016:	68b8      	ldr	r0, [r7, #8]
 8001018:	f000 fa18 	bl	800144c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800101c:	4603      	mov	r3, r0
 800101e:	781c      	ldrb	r4, [r3, #0]
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffe7 	bl	8000ff4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8001026:	4603      	mov	r3, r0
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b2dd      	uxtb	r5, r3
 800102c:	2008      	movs	r0, #8
 800102e:	f004 fcdb 	bl	80059e8 <_Znwj>
 8001032:	4603      	mov	r3, r0
 8001034:	461e      	mov	r6, r3
 8001036:	462a      	mov	r2, r5
 8001038:	4621      	mov	r1, r4
 800103a:	4630      	mov	r0, r6
 800103c:	f7ff face 	bl	80005dc <_ZN11HeaderClassC1Ehh>
 8001040:	4631      	mov	r1, r6
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 fa1d 	bl	8001482 <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001050 <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fa20 	bl	80014a0 <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EE6_M_ptrEv>
 8001060:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00c      	beq.n	8001084 <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fa25 	bl	80014ba <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EE11get_deleterEv>
 8001070:	4604      	mov	r4, r0
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 fa2e 	bl	80014d4 <_ZSt4moveIRP11HeaderClassEONSt16remove_referenceIT_E4typeEOS4_>
 8001078:	4603      	mov	r3, r0
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	4620      	mov	r0, r4
 8001080:	f000 fa5c 	bl	800153c <_ZNKSt14default_deleteI11HeaderClassEclEPS0_>
	__ptr = pointer();
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
      }
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	bd90      	pop	{r4, r7, pc}

08001094 <_ZNSt15__uniq_ptr_dataI11AbstractMsgSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I11HeaderClassEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fa71 	bl	800158e <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EEC1IS1_I11HeaderClassEEEPS0_OT_>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEC1I11HeaderClassS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 80010b6:	b5b0      	push	{r4, r5, r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 80010c0:	687c      	ldr	r4, [r7, #4]
 80010c2:	6838      	ldr	r0, [r7, #0]
 80010c4:	f000 fa4b 	bl	800155e <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EE7releaseEv>
 80010c8:	4605      	mov	r5, r0
 80010ca:	6838      	ldr	r0, [r7, #0]
 80010cc:	f000 f9f5 	bl	80014ba <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EE11get_deleterEv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fa50 	bl	8001578 <_ZSt7forwardISt14default_deleteI11HeaderClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4629      	mov	r1, r5
 80010de:	4620      	mov	r0, r4
 80010e0:	f7ff ffd8 	bl	8001094 <_ZNSt15__uniq_ptr_dataI11AbstractMsgSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I11HeaderClassEEEPS0_OT_>
	{ }
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bdb0      	pop	{r4, r5, r7, pc}

080010ee <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80010ee:	b590      	push	{r4, r7, lr}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fa5e 	bl	80015ba <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EE6_M_ptrEv>
 80010fe:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00c      	beq.n	8001122 <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 fa63 	bl	80015d4 <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EE11get_deleterEv>
 800110e:	4604      	mov	r4, r0
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 fa6c 	bl	80015ee <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>
 8001116:	4603      	mov	r3, r0
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	4620      	mov	r0, r4
 800111e:	f000 fa71 	bl	8001604 <_ZNKSt14default_deleteI11AbstractMsgEclEPS0_>
	__ptr = pointer();
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
      }
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}

08001132 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE9push_backEOS5_>:
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8001132:	b590      	push	{r4, r7, lr}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), std::move(__x)); }
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 fa72 	bl	8001626 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE3endEv>
 8001142:	4604      	mov	r4, r0
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f000 fa7e 	bl	8001646 <_ZSt4moveIRSt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4621      	mov	r1, r4
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fa83 	bl	800165c <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE9_M_insertIJS5_EEEvSt14_List_iteratorIS5_EDpOT_>
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}

0800115e <_ZSt11make_uniqueI12PayloadClassJRPKcjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800115e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001160:	b085      	sub	sp, #20
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800116a:	68b8      	ldr	r0, [r7, #8]
 800116c:	f000 fa94 	bl	8001698 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001170:	4603      	mov	r3, r0
 8001172:	681c      	ldr	r4, [r3, #0]
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff3d 	bl	8000ff4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800117a:	4603      	mov	r3, r0
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b2dd      	uxtb	r5, r3
 8001180:	200c      	movs	r0, #12
 8001182:	f004 fc31 	bl	80059e8 <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461e      	mov	r6, r3
 800118a:	462a      	mov	r2, r5
 800118c:	4621      	mov	r1, r4
 800118e:	4630      	mov	r0, r6
 8001190:	f000 fa8e 	bl	80016b0 <_ZN12PayloadClassC1IKcEEPT_h>
 8001194:	4631      	mov	r1, r6
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 fad8 	bl	800174c <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011a4 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fadb 	bl	800176a <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 80011b4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00c      	beq.n	80011d8 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fae0 	bl	8001784 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE11get_deleterEv>
 80011c4:	4604      	mov	r4, r0
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 fae9 	bl	800179e <_ZSt4moveIRP12PayloadClassEONSt16remove_referenceIT_E4typeEOS4_>
 80011cc:	4603      	mov	r3, r0
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4620      	mov	r0, r4
 80011d4:	f000 fb16 	bl	8001804 <_ZNKSt14default_deleteI12PayloadClassEclEPS0_>
	__ptr = pointer();
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
      }
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}

080011e8 <_ZNSt15__uniq_ptr_dataI11AbstractMsgSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I12PayloadClassEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fb2b 	bl	8001856 <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EEC1IS1_I12PayloadClassEEEPS0_OT_>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEC1I12PayloadClassS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800120a:	b5b0      	push	{r4, r5, r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 8001214:	687c      	ldr	r4, [r7, #4]
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f000 fb05 	bl	8001826 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE7releaseEv>
 800121c:	4605      	mov	r5, r0
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f000 fab0 	bl	8001784 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE11get_deleterEv>
 8001224:	4603      	mov	r3, r0
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fb0a 	bl	8001840 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4629      	mov	r1, r5
 8001232:	4620      	mov	r0, r4
 8001234:	f7ff ffd8 	bl	80011e8 <_ZNSt15__uniq_ptr_dataI11AbstractMsgSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I12PayloadClassEEEPS0_OT_>
	{ }
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bdb0      	pop	{r4, r5, r7, pc}

08001242 <_ZNKSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 fb19 	bl	8001882 <_ZNKSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE13_M_node_countEv>
 8001250:	4603      	mov	r3, r0
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_ZSt11make_uniqueI12PayloadClassJPfjEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800125a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125c:	b085      	sub	sp, #20
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001266:	68b8      	ldr	r0, [r7, #8]
 8001268:	f000 fb18 	bl	800189c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800126c:	4603      	mov	r3, r0
 800126e:	681c      	ldr	r4, [r3, #0]
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff febf 	bl	8000ff4 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8001276:	4603      	mov	r3, r0
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b2dd      	uxtb	r5, r3
 800127c:	200c      	movs	r0, #12
 800127e:	f004 fbb3 	bl	80059e8 <_Znwj>
 8001282:	4603      	mov	r3, r0
 8001284:	461e      	mov	r6, r3
 8001286:	462a      	mov	r2, r5
 8001288:	4621      	mov	r1, r4
 800128a:	4630      	mov	r0, r6
 800128c:	f000 fb12 	bl	80018b4 <_ZN12PayloadClassC1IfEEPT_h>
 8001290:	4631      	mov	r1, r6
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 fa5a 	bl	800174c <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012a0 <_ZNKSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f891 	bl	80013f4 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5beginEv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4619      	mov	r1, r3
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fb2a 	bl	8001930 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE8_M_eraseESt14_List_iteratorIS5_E>
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fb43 	bl	800197c <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f808 	bl	800130c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80012fc:	4602      	mov	r2, r0
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fb3d 	bl	8001996 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800131c:	4603      	mov	r3, r0
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fb3d 	bl	80019b0 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>
 8001336:	4603      	mov	r3, r0
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_>:
	operator()(_Up* __ptr) const
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <_ZNKSt14default_deleteIA_hEclIhEENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS0_E5valueEvE4typeEPS5_+0x16>
 8001350:	6838      	ldr	r0, [r7, #0]
 8001352:	f004 fb47 	bl	80059e4 <_ZdaPv>
	}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fb2e 	bl	80019ca <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800136e:	4603      	mov	r3, r0
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_ZNSaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fb2e 	bl	80019e4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEEC1Ev>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 80013b6:	e014      	b.n	80013e2 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE8_M_clearEv+0x3a>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 80013c2:	6938      	ldr	r0, [r7, #16]
 80013c4:	f000 fb19 	bl	80019fa <_ZNSt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEE9_M_valptrEv>
 80013c8:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fb23 	bl	8001a16 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE21_M_get_Node_allocatorEv>
 80013d0:	4603      	mov	r3, r0
 80013d2:	68f9      	ldr	r1, [r7, #12]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fb29 	bl	8001a2c <_ZNSt16allocator_traitsISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEE7destroyIS5_EEvRS7_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 80013da:	6939      	ldr	r1, [r7, #16]
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fb32 	bl	8001a46 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_put_nodeEPSt10_List_nodeIS5_E>
      while (__cur != &_M_impl._M_node)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d1e6      	bne.n	80013b8 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE8_M_clearEv+0x10>
	}
    }
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fb2c 	bl	8001a64 <_ZNSt14_List_iteratorISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEC1EPNSt8__detail15_List_node_baseE>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_ZNKSt14_List_iteratorISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fae9 	bl	80019fa <_ZNSt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEE9_M_valptrEv>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_ZNKSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fb20 	bl	8001a82 <_ZNKSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EE6_M_ptrEv>
 8001442:	4603      	mov	r3, r0
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_ZNSt15__uniq_ptr_dataI11HeaderClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fb13 	bl	8001a9e <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EEC1EPS0_>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6839      	ldr	r1, [r7, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ffe6 	bl	8001462 <_ZNSt15__uniq_ptr_dataI11HeaderClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fb0b 	bl	8001ac6 <_ZSt3getILj0EJP11HeaderClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fb0b 	bl	8001ae0 <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EE10_M_deleterEv>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_ZSt4moveIRP11HeaderClassEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <_ZN11HeaderClassD1Ev>:
		~HeaderClass() = default;
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <_ZN11HeaderClassD1Ev+0x2c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fcf0 	bl	8000ee4 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f838 	bl	800057c <_ZN11AbstractMsgD1Ev>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	08005f10 	.word	0x08005f10

0800151c <_ZN11HeaderClassD0Ev>:
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffe1 	bl	80014ec <_ZN11HeaderClassD1Ev>
 800152a:	2108      	movs	r1, #8
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f004 fa57 	bl	80059e0 <_ZdlPvj>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_ZNKSt14default_deleteI11HeaderClassEclEPS0_>:
      operator()(_Tp* __ptr) const
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <_ZNKSt14default_deleteI11HeaderClassEclEPS0_+0x1a>
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	3204      	adds	r2, #4
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	4790      	blx	r2
      }
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_ZNSt10unique_ptrI11HeaderClassSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fac6 	bl	8001afa <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EE7releaseEv>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_ZSt7forwardISt14default_deleteI11HeaderClassEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EEC1IS1_I11HeaderClassEEEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800159a:	68fc      	ldr	r4, [r7, #12]
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffeb 	bl	8001578 <_ZSt7forwardISt14default_deleteI11HeaderClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 80015a2:	4602      	mov	r2, r0
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	4619      	mov	r1, r3
 80015aa:	4620      	mov	r0, r4
 80015ac:	f000 faba 	bl	8001b24 <_ZNSt5tupleIJP11AbstractMsgSt14default_deleteIS0_EEEC1IRS1_S2_I11HeaderClassELb1EEEOT_OT0_>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd90      	pop	{r4, r7, pc}

080015ba <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fac6 	bl	8001b56 <_ZSt3getILj0EJP11AbstractMsgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fac6 	bl	8001b70 <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EE10_M_deleterEv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_ZSt4moveIRP11AbstractMsgEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_ZNKSt14default_deleteI11AbstractMsgEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d004      	beq.n	800161e <_ZNKSt14default_deleteI11AbstractMsgEclEPS0_+0x1a>
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	3204      	adds	r2, #4
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	4790      	blx	r2
      }
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fa14 	bl	8001a64 <_ZNSt14_List_iteratorISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEC1EPNSt8__detail15_List_node_baseE>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_ZSt4moveIRSt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE9_M_insertIJS5_EEEvSt14_List_iteratorIS5_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa8e 	bl	8001b8a <_ZSt7forwardISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800166e:	4603      	mov	r3, r0
 8001670:	4619      	mov	r1, r3
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fa94 	bl	8001ba0 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE14_M_create_nodeIJS5_EEEPSt10_List_nodeIS5_EDpOT_>
 8001678:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f004 fa5d 	bl	8005b40 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2101      	movs	r1, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fabc 	bl	8001c08 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_inc_sizeEj>
       }
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <_ZN12PayloadClassC1IKcEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	4613      	mov	r3, r2
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff7b 	bl	80005bc <_ZN11AbstractMsgC1Ev>
 80016c6:	4a18      	ldr	r2, [pc, #96]	; (8001728 <_ZN12PayloadClassC1IKcEEPT_h+0x78>)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	79fa      	ldrb	r2, [r7, #7]
 80016d0:	711a      	strb	r2, [r3, #4]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f103 0408 	add.w	r4, r3, #8
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 f995 	bl	8005a0a <_Znaj>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff fbee 	bl	8000ec6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]
 80016f2:	e00f      	b.n	8001714 <_ZN12PayloadClassC1IKcEEPT_h+0x64>
				_data[i] = data_ptr[i];
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	18d4      	adds	r4, r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3308      	adds	r3, #8
 80016fe:	7dfa      	ldrb	r2, [r7, #23]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fc0d 	bl	8000f22 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8001708:	4603      	mov	r3, r0
 800170a:	7822      	ldrb	r2, [r4, #0]
 800170c:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	3301      	adds	r3, #1
 8001712:	75fb      	strb	r3, [r7, #23]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	791b      	ldrb	r3, [r3, #4]
 8001718:	7dfa      	ldrb	r2, [r7, #23]
 800171a:	429a      	cmp	r2, r3
 800171c:	d3ea      	bcc.n	80016f4 <_ZN12PayloadClassC1IKcEEPT_h+0x44>
		};
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4618      	mov	r0, r3
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	08005ef4 	.word	0x08005ef4

0800172c <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fa74 	bl	8001c2a <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEC1EPS0_>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ffe6 	bl	800172c <_ZNSt15__uniq_ptr_dataI12PayloadClassSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fa6c 	bl	8001c52 <_ZSt3getILj0EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800177a:	4603      	mov	r3, r0
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fa6c 	bl	8001c6c <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>
 8001794:	4603      	mov	r3, r0
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZSt4moveIRP12PayloadClassEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <_ZN12PayloadClassD1Ev>:
		~PayloadClass() = default;
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <_ZN12PayloadClassD1Ev+0x2c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3308      	adds	r3, #8
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fb8c 	bl	8000ee4 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fed4 	bl	800057c <_ZN11AbstractMsgD1Ev>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	08005ef4 	.word	0x08005ef4

080017e4 <_ZN12PayloadClassD0Ev>:
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe1 	bl	80017b4 <_ZN12PayloadClassD1Ev>
 80017f2:	210c      	movs	r1, #12
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f004 f8f3 	bl	80059e0 <_ZdlPvj>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_ZNKSt14default_deleteI12PayloadClassEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <_ZNKSt14default_deleteI12PayloadClassEclEPS0_+0x1a>
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	3204      	adds	r2, #4
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	4790      	blx	r2
      }
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_ZNSt10unique_ptrI12PayloadClassSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fa28 	bl	8001c86 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE7releaseEv>
 8001836:	4603      	mov	r3, r0
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EEC1IS1_I12PayloadClassEEEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8001856:	b590      	push	{r4, r7, lr}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8001862:	68fc      	ldr	r4, [r7, #12]
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffeb 	bl	8001840 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 800186a:	4602      	mov	r2, r0
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	4619      	mov	r1, r3
 8001872:	4620      	mov	r0, r4
 8001874:	f000 fa1c 	bl	8001cb0 <_ZNSt5tupleIJP11AbstractMsgSt14default_deleteIS0_EEEC1IRS1_S2_I12PayloadClassELb1EEEOT_OT0_>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}

08001882 <_ZNKSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE13_M_node_countEv>:
      _M_node_count() const
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fa28 	bl	8001ce2 <_ZNKSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_get_sizeEv>
 8001892:	4603      	mov	r3, r0
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_ZN12PayloadClassC1IfEEPT_h>:
		PayloadClass(T* struct_or_plain_type_data, uint8_t data_size): _data_size(data_size), _data(new uint8_t[data_size])
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	4613      	mov	r3, r2
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe79 	bl	80005bc <_ZN11AbstractMsgC1Ev>
 80018ca:	4a18      	ldr	r2, [pc, #96]	; (800192c <_ZN12PayloadClassC1IfEEPT_h+0x78>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	711a      	strb	r2, [r3, #4]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f103 0408 	add.w	r4, r3, #8
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 f893 	bl	8005a0a <_Znaj>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4619      	mov	r1, r3
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff faec 	bl	8000ec6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
			uint8_t* data_ptr = (uint8_t*) struct_or_plain_type_data;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	613b      	str	r3, [r7, #16]
			for( uint8_t i = 0; i < _data_size; i ++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]
 80018f6:	e00f      	b.n	8001918 <_ZN12PayloadClassC1IfEEPT_h+0x64>
				_data[i] = data_ptr[i];
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	18d4      	adds	r4, r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3308      	adds	r3, #8
 8001902:	7dfa      	ldrb	r2, [r7, #23]
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb0b 	bl	8000f22 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800190c:	4603      	mov	r3, r0
 800190e:	7822      	ldrb	r2, [r4, #0]
 8001910:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0; i < _data_size; i ++)
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	3301      	adds	r3, #1
 8001916:	75fb      	strb	r3, [r7, #23]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	791b      	ldrb	r3, [r3, #4]
 800191c:	7dfa      	ldrb	r2, [r7, #23]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3ea      	bcc.n	80018f8 <_ZN12PayloadClassC1IfEEPT_h+0x44>
		};
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4618      	mov	r0, r3
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}
 800192c:	08005ef4 	.word	0x08005ef4

08001930 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE8_M_eraseESt14_List_iteratorIS5_E>:
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2101      	movs	r1, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f9db 	bl	8001cfa <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f004 f901 	bl	8005b4e <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f85f 	bl	8001a16 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE21_M_get_Node_allocatorEv>
 8001958:	4604      	mov	r4, r0
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f84d 	bl	80019fa <_ZNSt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEE9_M_valptrEv>
 8001960:	4603      	mov	r3, r0
 8001962:	4619      	mov	r1, r3
 8001964:	4620      	mov	r0, r4
 8001966:	f000 f861 	bl	8001a2c <_ZNSt16allocator_traitsISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEE7destroyIS5_EEvRS7_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f869 	bl	8001a46 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_put_nodeEPSt10_List_nodeIS5_E>
      }
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}

0800197c <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f9c8 	bl	8001d1c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f9cb 	bl	8001d3c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f9ca 	bl	8001d54 <_ZSt3getILj1EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f9c9 	bl	8001d6c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80019da:	4603      	mov	r3, r0
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_ZNSt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3308      	adds	r3, #8
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f9bc 	bl	8001d84 <_ZN9__gnu_cxx16__aligned_membufISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEE6_M_ptrEv>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_ZNSt16allocator_traitsISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEE7destroyIS5_EEvRS7_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001a36:	6839      	ldr	r1, [r7, #0]
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f9af 	bl	8001d9c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE7destroyIS6_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_put_nodeEPSt10_List_nodeIS5_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f9ac 	bl	8001db4 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEE10deallocateERS7_PS6_j>
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_ZNSt14_List_iteratorISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_ZNKSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 f9a0 	bl	8001dd2 <_ZSt3getILj0EJP11AbstractMsgSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8001a92:	4603      	mov	r3, r0
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f99e 	bl	8001dec <_ZNSt5tupleIJP11HeaderClassSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fcf5 	bl	80014a0 <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EE6_M_ptrEv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_ZSt3getILj0EJP11HeaderClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f998 	bl	8001e06 <_ZSt12__get_helperILj0EP11HeaderClassJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f997 	bl	8001e1e <_ZSt3getILj1EJP11HeaderClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fccc 	bl	80014a0 <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EE6_M_ptrEv>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fcc6 	bl	80014a0 <_ZNSt15__uniq_ptr_implI11HeaderClassSt14default_deleteIS0_EE6_M_ptrEv>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
	return __p;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
      }
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_ZNSt5tupleIJP11AbstractMsgSt14default_deleteIS0_EEEC1IRS1_S2_I11HeaderClassELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8001b30:	68fc      	ldr	r4, [r7, #12]
 8001b32:	68b8      	ldr	r0, [r7, #8]
 8001b34:	f000 f97f 	bl	8001e36 <_ZSt7forwardIRP11AbstractMsgEOT_RNSt16remove_referenceIS3_E4typeE>
 8001b38:	4605      	mov	r5, r0
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fd1c 	bl	8001578 <_ZSt7forwardISt14default_deleteI11HeaderClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4629      	mov	r1, r5
 8001b46:	4620      	mov	r0, r4
 8001b48:	f000 f980 	bl	8001e4c <_ZNSt11_Tuple_implILj0EJP11AbstractMsgSt14default_deleteIS0_EEEC1IRS1_JS2_I11HeaderClassEEvEEOT_DpOT0_>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bdb0      	pop	{r4, r5, r7, pc}

08001b56 <_ZSt3getILj0EJP11AbstractMsgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f98f 	bl	8001e84 <_ZSt12__get_helperILj0EP11AbstractMsgJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f98e 	bl	8001e9c <_ZSt3getILj1EJP11AbstractMsgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_ZSt7forwardISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE14_M_create_nodeIJS5_EEEPSt10_List_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f981 	bl	8001eb4 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_get_nodeEv>
 8001bb2:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff2d 	bl	8001a16 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE21_M_get_Node_allocatorEv>
 8001bbc:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	6939      	ldr	r1, [r7, #16]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f982 	bl	8001ed0 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEEC1ERS7_PS6_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8001bcc:	6978      	ldr	r0, [r7, #20]
 8001bce:	f7ff ff14 	bl	80019fa <_ZNSt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEE9_M_valptrEv>
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	6838      	ldr	r0, [r7, #0]
 8001bd6:	f7ff ffd8 	bl	8001b8a <_ZSt7forwardISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4621      	mov	r1, r4
 8001be0:	6938      	ldr	r0, [r7, #16]
 8001be2:	f000 f99e 	bl	8001f22 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEE9constructIS5_JS5_EEEvRS7_PT_DpOT0_>
	  __guard = nullptr;
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f9ab 	bl	8001f48 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEEaSEDn>
	  return __p;
 8001bf2:	697c      	ldr	r4, [r7, #20]
	}
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f97d 	bl	8001ef8 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEED1Ev>
	  return __p;
 8001bfe:	4623      	mov	r3, r4
	}
 8001c00:	4618      	mov	r0, r3
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	441a      	add	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f995 	bl	8001f66 <_ZNSt5tupleIJP12PayloadClassSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fd94 	bl	800176a <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 8001c42:	4602      	mov	r2, r0
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_ZSt3getILj0EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 f98f 	bl	8001f80 <_ZSt12__get_helperILj0EP12PayloadClassJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f98e 	bl	8001f98 <_ZSt3getILj1EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fd6b 	bl	800176a <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 8001c94:	4603      	mov	r3, r0
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fd65 	bl	800176a <_ZNSt15__uniq_ptr_implI12PayloadClassSt14default_deleteIS0_EE6_M_ptrEv>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
	return __p;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
      }
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZNSt5tupleIJP11AbstractMsgSt14default_deleteIS0_EEEC1IRS1_S2_I12PayloadClassELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8001cbc:	68fc      	ldr	r4, [r7, #12]
 8001cbe:	68b8      	ldr	r0, [r7, #8]
 8001cc0:	f000 f8b9 	bl	8001e36 <_ZSt7forwardIRP11AbstractMsgEOT_RNSt16remove_referenceIS3_E4typeE>
 8001cc4:	4605      	mov	r5, r0
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fdba 	bl	8001840 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f000 f96c 	bl	8001fb0 <_ZNSt11_Tuple_implILj0EJP11AbstractMsgSt14default_deleteIS0_EEEC1IRS1_JS2_I12PayloadClassEEvEEOT_DpOT0_>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdb0      	pop	{r4, r5, r7, pc}

08001ce2 <_ZNKSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	1ad2      	subs	r2, r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f95f 	bl	8001fe8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f967 	bl	8002000 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f969 	bl	800201c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_ZSt3getILj1EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f96a 	bl	8002036 <_ZSt12__get_helperILj1ESt14default_deleteIA_hEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f96a 	bl	800204e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_ZN9__gnu_cxx16__aligned_membufISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f96b 	bl	8002068 <_ZN9__gnu_cxx16__aligned_membufISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEE7_M_addrEv>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE7destroyIS6_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f7ff f9a1 	bl	80010ee <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EED1Ev>
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f95a 	bl	800207e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE10deallocateEPS7_j>
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_ZSt3getILj0EJP11AbstractMsgSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f961 	bl	80020a4 <_ZSt12__get_helperILj0EP11AbstractMsgJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_ZNSt5tupleIJP11HeaderClassSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f960 	bl	80020bc <_ZNSt11_Tuple_implILj0EJP11HeaderClassSt14default_deleteIS0_EEEC1Ev>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_ZSt12__get_helperILj0EP11HeaderClassJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f964 	bl	80020dc <_ZNSt11_Tuple_implILj0EJP11HeaderClassSt14default_deleteIS0_EEE7_M_headERS4_>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_ZSt3getILj1EJP11HeaderClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f965 	bl	80020f6 <_ZSt12__get_helperILj1ESt14default_deleteI11HeaderClassEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_ZSt7forwardIRP11AbstractMsgEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_ZNSt11_Tuple_implILj0EJP11AbstractMsgSt14default_deleteIS0_EEEC1IRS1_JS2_I11HeaderClassEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fb8d 	bl	8001578 <_ZSt7forwardISt14default_deleteI11HeaderClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4619      	mov	r1, r3
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f953 	bl	800210e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11AbstractMsgEEEC1IS0_I11HeaderClassEEEOT_>
 8001e68:	68fc      	ldr	r4, [r7, #12]
 8001e6a:	68b8      	ldr	r0, [r7, #8]
 8001e6c:	f7ff ffe3 	bl	8001e36 <_ZSt7forwardIRP11AbstractMsgEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	4620      	mov	r0, r4
 8001e76:	f000 f95c 	bl	8002132 <_ZNSt10_Head_baseILj0EP11AbstractMsgLb0EEC1IRS1_EEOT_>
	{ }
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd90      	pop	{r4, r7, pc}

08001e84 <_ZSt12__get_helperILj0EP11AbstractMsgJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f961 	bl	8002154 <_ZNSt11_Tuple_implILj0EJP11AbstractMsgSt14default_deleteIS0_EEE7_M_headERS4_>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_ZSt3getILj1EJP11AbstractMsgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f962 	bl	800216e <_ZSt12__get_helperILj1ESt14default_deleteI11AbstractMsgEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 f960 	bl	8002186 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEE8allocateERS7_j>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEEC1ERS7_PS6_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8001edc:	68b8      	ldr	r0, [r7, #8]
 8001ede:	f000 f961 	bl	80021a4 <_ZSt11__addressofISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEEPT_RS8_>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	605a      	str	r2, [r3, #4]
      { }
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7ff ff4e 	bl	8001db4 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEE10deallocateERS7_PS6_j>
      }
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEE9constructIS5_JS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fe2b 	bl	8001b8a <_ZSt7forwardISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f95d 	bl	80021fa <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE9constructIS6_JS6_EEEvPT_DpOT0_>
	}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_ZNSt15__allocated_ptrISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
	return *this;
 8001f58:	687b      	ldr	r3, [r7, #4]
      }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZNSt5tupleIJP12PayloadClassSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 f95a 	bl	800222a <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEEC1Ev>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ZSt12__get_helperILj0EP12PayloadClassJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f95e 	bl	800224a <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEE7_M_headERS4_>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_ZSt3getILj1EJP12PayloadClassSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f95f 	bl	8002264 <_ZSt12__get_helperILj1ESt14default_deleteI12PayloadClassEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZNSt11_Tuple_implILj0EJP11AbstractMsgSt14default_deleteIS0_EEEC1IRS1_JS2_I12PayloadClassEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fc3f 	bl	8001840 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f958 	bl	800227c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11AbstractMsgEEEC1IS0_I12PayloadClassEEEOT_>
 8001fcc:	68fc      	ldr	r4, [r7, #12]
 8001fce:	68b8      	ldr	r0, [r7, #8]
 8001fd0:	f7ff ff31 	bl	8001e36 <_ZSt7forwardIRP11AbstractMsgEOT_RNSt16remove_referenceIS3_E4typeE>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f000 f8aa 	bl	8002132 <_ZNSt10_Head_baseILj0EP11AbstractMsgLb0EEC1IRS1_EEOT_>
	{ }
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd90      	pop	{r4, r7, pc}

08001fe8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      _Tuple_impl()
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f955 	bl	80022a0 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f945 	bl	80022b6 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 800202c:	4603      	mov	r3, r0
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_ZSt12__get_helperILj1ESt14default_deleteIA_hEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f944 	bl	80022cc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEE7_M_headERS3_>
 8002044:	4603      	mov	r3, r0
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f943 	bl	80022e4 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800205e:	4603      	mov	r3, r0
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_ZN9__gnu_cxx16__aligned_membufISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEE7_M_addrEv>:
      _M_addr() noexcept
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4619      	mov	r1, r3
 8002096:	68b8      	ldr	r0, [r7, #8]
 8002098:	f003 fca2 	bl	80059e0 <_ZdlPvj>
      }
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZSt12__get_helperILj0EP11AbstractMsgJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f924 	bl	80022fa <_ZNSt11_Tuple_implILj0EJP11AbstractMsgSt14default_deleteIS0_EEE7_M_headERKS4_>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZNSt11_Tuple_implILj0EJP11HeaderClassSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f925 	bl	8002314 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11HeaderClassEEEC1Ev>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f92d 	bl	800232c <_ZNSt10_Head_baseILj0EP11HeaderClassLb0EEC1Ev>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_ZNSt11_Tuple_implILj0EJP11HeaderClassSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f92e 	bl	8002348 <_ZNSt10_Head_baseILj0EP11HeaderClassLb0EE7_M_headERS2_>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_ZSt12__get_helperILj1ESt14default_deleteI11HeaderClassEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f92d 	bl	800235e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11HeaderClassEEE7_M_headERS3_>
 8002104:	4603      	mov	r3, r0
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11AbstractMsgEEEC1IS0_I11HeaderClassEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8002118:	6838      	ldr	r0, [r7, #0]
 800211a:	f7ff fa2d 	bl	8001578 <_ZSt7forwardISt14default_deleteI11HeaderClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 800211e:	4603      	mov	r3, r0
 8002120:	4619      	mov	r1, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f927 	bl	8002376 <_ZNSt10_Head_baseILj1ESt14default_deleteI11AbstractMsgELb1EEC1IS0_I11HeaderClassEEEOT_>
	{ }
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_ZNSt10_Head_baseILj0EP11AbstractMsgLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800213c:	6838      	ldr	r0, [r7, #0]
 800213e:	f7ff fe7a 	bl	8001e36 <_ZSt7forwardIRP11AbstractMsgEOT_RNSt16remove_referenceIS3_E4typeE>
 8002142:	4603      	mov	r3, r0
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZNSt11_Tuple_implILj0EJP11AbstractMsgSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f91c 	bl	800239c <_ZNSt10_Head_baseILj0EP11AbstractMsgLb0EE7_M_headERS2_>
 8002164:	4603      	mov	r3, r0
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_ZSt12__get_helperILj1ESt14default_deleteI11AbstractMsgEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f91b 	bl	80023b2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11AbstractMsgEEE7_M_headERS3_>
 800217c:	4603      	mov	r3, r0
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_ZNSt16allocator_traitsISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002190:	2200      	movs	r2, #0
 8002192:	6839      	ldr	r1, [r7, #0]
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f927 	bl	80023e8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE8allocateEjPKv>
 800219a:	4603      	mov	r3, r0
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_ZSt11__addressofISaISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EEEEEPT_RS8_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt15__uniq_ptr_dataI11AbstractMsgSt14default_deleteIS0_ELb1ELb1EEC1EOS3_>:
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f95c 	bl	8002488 <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EEC1EOS3_>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEC1EOS3_>:
      unique_ptr(unique_ptr&&) = default;
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ffe5 	bl	80021ba <_ZNSt15__uniq_ptr_dataI11AbstractMsgSt14default_deleteIS0_ELb1ELb1EEC1EOS3_>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80021fa:	b590      	push	{r4, r7, lr}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fcbf 	bl	8001b8a <_ZSt7forwardISt10unique_ptrI11AbstractMsgSt14default_deleteIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800220c:	4604      	mov	r4, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4619      	mov	r1, r3
 8002212:	2004      	movs	r0, #4
 8002214:	f7fe f986 	bl	8000524 <_ZnwjPv>
 8002218:	4603      	mov	r3, r0
 800221a:	4621      	mov	r1, r4
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ffdc 	bl	80021da <_ZNSt10unique_ptrI11AbstractMsgSt14default_deleteIS0_EEC1EOS3_>
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}

0800222a <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f942 	bl	80024bc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEEC1Ev>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f94a 	bl	80024d4 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EEC1Ev>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_ZNSt11_Tuple_implILj0EJP12PayloadClassSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f94b 	bl	80024f0 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EE7_M_headERS2_>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_ZSt12__get_helperILj1ESt14default_deleteI12PayloadClassEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f94a 	bl	8002506 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEE7_M_headERS3_>
 8002272:	4603      	mov	r3, r0
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11AbstractMsgEEEC1IS0_I12PayloadClassEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8002286:	6838      	ldr	r0, [r7, #0]
 8002288:	f7ff fada 	bl	8001840 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 800228c:	4603      	mov	r3, r0
 800228e:	4619      	mov	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f944 	bl	800251e <_ZNSt10_Head_baseILj1ESt14default_deleteI11AbstractMsgELb1EEC1IS0_I12PayloadClassEEEOT_>
	{ }
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f935 	bl	8002544 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EE7_M_headERS3_>
 80022da:	4603      	mov	r3, r0
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_ZNSt11_Tuple_implILj0EJP11AbstractMsgSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f928 	bl	800255a <_ZNSt10_Head_baseILj0EP11AbstractMsgLb0EE7_M_headERKS2_>
 800230a:	4603      	mov	r3, r0
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11HeaderClassEEEC1Ev>:
      _Tuple_impl()
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f927 	bl	8002570 <_ZNSt10_Head_baseILj1ESt14default_deleteI11HeaderClassELb1EEC1Ev>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZNSt10_Head_baseILj0EP11HeaderClassLb0EEC1Ev>:
      constexpr _Head_base()
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_ZNSt10_Head_baseILj0EP11HeaderClassLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11HeaderClassEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f90d 	bl	8002586 <_ZNSt10_Head_baseILj1ESt14default_deleteI11HeaderClassELb1EE7_M_headERS3_>
 800236c:	4603      	mov	r3, r0
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_ZNSt10_Head_baseILj1ESt14default_deleteI11AbstractMsgELb1EEC1IS0_I11HeaderClassEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 8002376:	b590      	push	{r4, r7, lr}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8002380:	687c      	ldr	r4, [r7, #4]
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	f7ff f8f8 	bl	8001578 <_ZSt7forwardISt14default_deleteI11HeaderClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002388:	4603      	mov	r3, r0
 800238a:	4619      	mov	r1, r3
 800238c:	4620      	mov	r0, r4
 800238e:	f000 f905 	bl	800259c <_ZNSt14default_deleteI11AbstractMsgEC1I11HeaderClassvEERKS_IT_E>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}

0800239c <_ZNSt10_Head_baseILj0EP11AbstractMsgLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11AbstractMsgEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8fa 	bl	80025b4 <_ZNSt10_Head_baseILj1ESt14default_deleteI11AbstractMsgELb1EE7_M_headERS3_>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	0aaaaaaa 	.word	0x0aaaaaaa

080023e8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f7ff ffe9 	bl	80023cc <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE11_M_max_sizeEv>
 80023fa:	4602      	mov	r2, r0
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4293      	cmp	r3, r2
 8002400:	bf8c      	ite	hi
 8002402:	2301      	movhi	r3, #1
 8002404:	2300      	movls	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf14      	ite	ne
 800240c:	2301      	movne	r3, #1
 800240e:	2300      	moveq	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE8allocateEjPKv+0x58>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt10unique_ptrI11AbstractMsgSt14default_deleteIS3_EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800241e:	f003 fb9e 	bl	8005b5e <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002422:	f003 fb99 	bl	8005b58 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4618      	mov	r0, r3
 8002432:	f003 fad9 	bl	80059e8 <_Znwj>
 8002436:	4603      	mov	r3, r0
      }
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	15555555 	.word	0x15555555

08002444 <_ZNSt11_Tuple_implILj0EJP11AbstractMsgSt14default_deleteIS0_EEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&&) = default;
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8c5 	bl	80025e0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11AbstractMsgEEEC1EOS3_>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZNSt5tupleIJP11AbstractMsgSt14default_deleteIS0_EEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ffe3 	bl	8002444 <_ZNSt11_Tuple_implILj0EJP11AbstractMsgSt14default_deleteIS0_EEEC1EOS4_>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EEC1EOS3_>:
      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
      : _M_t(std::move(__u._M_t))
 8002492:	687c      	ldr	r4, [r7, #4]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f897 	bl	80025ca <_ZSt4moveIRSt5tupleIJP11AbstractMsgSt14default_deleteIS1_EEEEONSt16remove_referenceIT_E4typeEOS8_>
 800249c:	4603      	mov	r3, r0
 800249e:	4619      	mov	r1, r3
 80024a0:	4620      	mov	r0, r4
 80024a2:	f7ff ffe1 	bl	8002468 <_ZNSt5tupleIJP11AbstractMsgSt14default_deleteIS0_EEEC1EOS4_>
      { __u._M_ptr() = nullptr; }
 80024a6:	6838      	ldr	r0, [r7, #0]
 80024a8:	f7ff f887 	bl	80015ba <_ZNSt15__uniq_ptr_implI11AbstractMsgSt14default_deleteIS0_EE6_M_ptrEv>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}

080024bc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEEC1Ev>:
      _Tuple_impl()
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f897 	bl	80025f8 <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EEC1Ev>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EEC1Ev>:
      constexpr _Head_base()
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_ZNSt10_Head_baseILj0EP12PayloadClassLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12PayloadClassEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f87d 	bl	800260e <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EE7_M_headERS3_>
 8002514:	4603      	mov	r3, r0
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_ZNSt10_Head_baseILj1ESt14default_deleteI11AbstractMsgELb1EEC1IS0_I12PayloadClassEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800251e:	b590      	push	{r4, r7, lr}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8002528:	687c      	ldr	r4, [r7, #4]
 800252a:	6838      	ldr	r0, [r7, #0]
 800252c:	f7ff f988 	bl	8001840 <_ZSt7forwardISt14default_deleteI12PayloadClassEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002530:	4603      	mov	r3, r0
 8002532:	4619      	mov	r1, r3
 8002534:	4620      	mov	r0, r4
 8002536:	f000 f875 	bl	8002624 <_ZNSt14default_deleteI11AbstractMsgEC1I12PayloadClassvEERKS_IT_E>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}

08002544 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_ZNSt10_Head_baseILj0EP11AbstractMsgLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_ZNSt10_Head_baseILj1ESt14default_deleteI11HeaderClassELb1EEC1Ev>:
      constexpr _Head_base()
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <_ZNSt10_Head_baseILj1ESt14default_deleteI11HeaderClassELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_ZNSt14default_deleteI11AbstractMsgEC1I11HeaderClassvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <_ZNSt10_Head_baseILj1ESt14default_deleteI11AbstractMsgELb1EE7_M_headERS3_>:
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <_ZSt4moveIRSt5tupleIJP11AbstractMsgSt14default_deleteIS1_EEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11AbstractMsgEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
      { }
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EEC1Ev>:
      constexpr _Head_base()
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_ZNSt10_Head_baseILj1ESt14default_deleteI12PayloadClassELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_ZNSt14default_deleteI11AbstractMsgEC1I12PayloadClassvEERKS_IT_E>:
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_ZN16AcknowledgeClassD1Ev>:
		~AcknowledgeClass() = default;
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	4a08      	ldr	r2, [pc, #32]	; (8002668 <_ZN16AcknowledgeClassD1Ev+0x2c>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3304      	adds	r3, #4
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fc48 	bl	8000ee4 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EED1Ev>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd ff90 	bl	800057c <_ZN11AbstractMsgD1Ev>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08005ed8 	.word	0x08005ed8

0800266c <_ZN16AcknowledgeClassD0Ev>:
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffe1 	bl	800263c <_ZN16AcknowledgeClassD1Ev>
 800267a:	2108      	movs	r1, #8
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f003 f9af 	bl	80059e0 <_ZdlPvj>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EED1Ev>:
      ~list() = default;
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fc7d 	bl	8000f96 <_ZNSt7__cxx1110_List_baseISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EED1Ev>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d10a      	bne.n	80026ce <_Z41__static_initialization_and_destruction_0ii+0x26>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026be:	4293      	cmp	r3, r2
 80026c0:	d105      	bne.n	80026ce <_Z41__static_initialization_and_destruction_0ii+0x26>
AcknowledgeClass singleack;
 80026c2:	480c      	ldr	r0, [pc, #48]	; (80026f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80026c4:	f7fe f810 	bl	80006e8 <_ZN16AcknowledgeClassC1Ev>
std::list<std::unique_ptr<AbstractMsg>> tx_msg_list;
 80026c8:	480b      	ldr	r0, [pc, #44]	; (80026f8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80026ca:	f7fe f878 	bl	80007be <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EEC1Ev>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <_Z41__static_initialization_and_destruction_0ii+0x42>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026da:	4293      	cmp	r3, r2
 80026dc:	d105      	bne.n	80026ea <_Z41__static_initialization_and_destruction_0ii+0x42>
 80026de:	4806      	ldr	r0, [pc, #24]	; (80026f8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80026e0:	f7ff ffd4 	bl	800268c <_ZNSt7__cxx114listISt10unique_ptrI11AbstractMsgSt14default_deleteIS2_EESaIS5_EED1Ev>
AcknowledgeClass singleack;
 80026e4:	4803      	ldr	r0, [pc, #12]	; (80026f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80026e6:	f7ff ffa9 	bl	800263c <_ZN16AcknowledgeClassD1Ev>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000180 	.word	0x20000180
 80026f8:	20000188 	.word	0x20000188

080026fc <_GLOBAL__sub_I_huart2>:
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
 8002700:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002704:	2001      	movs	r0, #1
 8002706:	f7ff ffcf 	bl	80026a8 <_Z41__static_initialization_and_destruction_0ii>
 800270a:	bd80      	pop	{r7, pc}

0800270c <_GLOBAL__sub_D_huart2>:
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
 8002710:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002714:	2000      	movs	r0, #0
 8002716:	f7ff ffc7 	bl	80026a8 <_Z41__static_initialization_and_destruction_0ii>
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_MspInit+0x4c>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <HAL_MspInit+0x4c>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002730:	6453      	str	r3, [r2, #68]	; 0x44
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_MspInit+0x4c>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_MspInit+0x4c>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_MspInit+0x4c>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_MspInit+0x4c>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800275a:	2007      	movs	r0, #7
 800275c:	f000 fafc 	bl	8002d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800

0800276c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a4b      	ldr	r2, [pc, #300]	; (80028b8 <HAL_UART_MspInit+0x14c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	f040 8090 	bne.w	80028b0 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	4b49      	ldr	r3, [pc, #292]	; (80028bc <HAL_UART_MspInit+0x150>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	4a48      	ldr	r2, [pc, #288]	; (80028bc <HAL_UART_MspInit+0x150>)
 800279a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
 80027a0:	4b46      	ldr	r3, [pc, #280]	; (80028bc <HAL_UART_MspInit+0x150>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	4b42      	ldr	r3, [pc, #264]	; (80028bc <HAL_UART_MspInit+0x150>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	4a41      	ldr	r2, [pc, #260]	; (80028bc <HAL_UART_MspInit+0x150>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6313      	str	r3, [r2, #48]	; 0x30
 80027bc:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_UART_MspInit+0x150>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027c8:	230c      	movs	r3, #12
 80027ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027d8:	2307      	movs	r3, #7
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	4837      	ldr	r0, [pc, #220]	; (80028c0 <HAL_UART_MspInit+0x154>)
 80027e4:	f000 fefc 	bl	80035e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80027e8:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_UART_MspInit+0x158>)
 80027ea:	4a37      	ldr	r2, [pc, #220]	; (80028c8 <HAL_UART_MspInit+0x15c>)
 80027ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80027ee:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_UART_MspInit+0x158>)
 80027f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027f6:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <HAL_UART_MspInit+0x158>)
 80027f8:	2240      	movs	r2, #64	; 0x40
 80027fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027fc:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_UART_MspInit+0x158>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002802:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <HAL_UART_MspInit+0x158>)
 8002804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002808:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280a:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <HAL_UART_MspInit+0x158>)
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002810:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_UART_MspInit+0x158>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002816:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_UART_MspInit+0x158>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_UART_MspInit+0x158>)
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_UART_MspInit+0x158>)
 8002824:	2200      	movs	r2, #0
 8002826:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002828:	4826      	ldr	r0, [pc, #152]	; (80028c4 <HAL_UART_MspInit+0x158>)
 800282a:	f000 fad7 	bl	8002ddc <HAL_DMA_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002834:	f7fe fb32 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a22      	ldr	r2, [pc, #136]	; (80028c4 <HAL_UART_MspInit+0x158>)
 800283c:	635a      	str	r2, [r3, #52]	; 0x34
 800283e:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <HAL_UART_MspInit+0x158>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_UART_MspInit+0x160>)
 8002846:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <HAL_UART_MspInit+0x164>)
 8002848:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_UART_MspInit+0x160>)
 800284c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002850:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_UART_MspInit+0x160>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_UART_MspInit+0x160>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_UART_MspInit+0x160>)
 8002860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002864:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_UART_MspInit+0x160>)
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_UART_MspInit+0x160>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_UART_MspInit+0x160>)
 8002874:	2200      	movs	r2, #0
 8002876:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_UART_MspInit+0x160>)
 800287a:	2200      	movs	r2, #0
 800287c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_UART_MspInit+0x160>)
 8002880:	2200      	movs	r2, #0
 8002882:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002884:	4811      	ldr	r0, [pc, #68]	; (80028cc <HAL_UART_MspInit+0x160>)
 8002886:	f000 faa9 	bl	8002ddc <HAL_DMA_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002890:	f7fe fb04 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_UART_MspInit+0x160>)
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
 800289a:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_UART_MspInit+0x160>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	2026      	movs	r0, #38	; 0x26
 80028a6:	f000 fa62 	bl	8002d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028aa:	2026      	movs	r0, #38	; 0x26
 80028ac:	f000 fa7b 	bl	8002da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40004400 	.word	0x40004400
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	200000bc 	.word	0x200000bc
 80028c8:	400260a0 	.word	0x400260a0
 80028cc:	2000011c 	.word	0x2000011c
 80028d0:	40026088 	.word	0x40026088

080028d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <NMI_Handler+0x4>

080028da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028de:	e7fe      	b.n	80028de <HardFault_Handler+0x4>

080028e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <MemManage_Handler+0x4>

080028e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <BusFault_Handler+0x4>

080028ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <UsageFault_Handler+0x4>

080028f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002920:	f000 f906 	bl	8002b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}

08002928 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <DMA1_Stream5_IRQHandler+0x10>)
 800292e:	f000 fbed 	bl	800310c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000011c 	.word	0x2000011c

0800293c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <DMA1_Stream6_IRQHandler+0x10>)
 8002942:	f000 fbe3 	bl	800310c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200000bc 	.word	0x200000bc

08002950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <USART2_IRQHandler+0x10>)
 8002956:	f001 feef 	bl	8004738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000078 	.word	0x20000078

08002964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return 1;
 8002968:	2301      	movs	r3, #1
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_kill>:

int _kill(int pid, int sig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800297e:	f003 fa1b 	bl	8005db8 <__errno>
 8002982:	4603      	mov	r3, r0
 8002984:	2216      	movs	r2, #22
 8002986:	601a      	str	r2, [r3, #0]
  return -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <_exit>:

void _exit (int status)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800299c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ffe7 	bl	8002974 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029a6:	e7fe      	b.n	80029a6 <_exit+0x12>

080029a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <_sbrk+0x5c>)
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <_sbrk+0x60>)
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <_sbrk+0x64>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <_sbrk+0x64>)
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <_sbrk+0x68>)
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <_sbrk+0x64>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d207      	bcs.n	80029e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d8:	f003 f9ee 	bl	8005db8 <__errno>
 80029dc:	4603      	mov	r3, r0
 80029de:	220c      	movs	r2, #12
 80029e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029e6:	e009      	b.n	80029fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <_sbrk+0x64>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <_sbrk+0x64>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <_sbrk+0x64>)
 80029f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029fa:	68fb      	ldr	r3, [r7, #12]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20020000 	.word	0x20020000
 8002a08:	00000400 	.word	0x00000400
 8002a0c:	20000194 	.word	0x20000194
 8002a10:	200002e8 	.word	0x200002e8

08002a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <SystemInit+0x20>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <SystemInit+0x20>)
 8002a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a3e:	490e      	ldr	r1, [pc, #56]	; (8002a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a40:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a44:	e002      	b.n	8002a4c <LoopCopyDataInit>

08002a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4a:	3304      	adds	r3, #4

08002a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a50:	d3f9      	bcc.n	8002a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a54:	4c0b      	ldr	r4, [pc, #44]	; (8002a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a58:	e001      	b.n	8002a5e <LoopFillZerobss>

08002a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a5c:	3204      	adds	r2, #4

08002a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a60:	d3fb      	bcc.n	8002a5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a62:	f7ff ffd7 	bl	8002a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a66:	f003 f9ad 	bl	8005dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a6a:	f7fd fef5 	bl	8000858 <main>
  bx  lr    
 8002a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002a7c:	080060bc 	.word	0x080060bc
  ldr r2, =_sbss
 8002a80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002a84:	200002e8 	.word	0x200002e8

08002a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a88:	e7fe      	b.n	8002a88 <ADC_IRQHandler>
	...

08002a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_Init+0x40>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_Init+0x40>)
 8002a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_Init+0x40>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_Init+0x40>)
 8002aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_Init+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a07      	ldr	r2, [pc, #28]	; (8002acc <HAL_Init+0x40>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f000 f94f 	bl	8002d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f000 f808 	bl	8002ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac0:	f7ff fe2c 	bl	800271c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023c00 	.word	0x40023c00

08002ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_InitTick+0x54>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_InitTick+0x58>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f967 	bl	8002dc2 <HAL_SYSTICK_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00e      	b.n	8002b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b0f      	cmp	r3, #15
 8002b02:	d80a      	bhi.n	8002b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b04:	2200      	movs	r2, #0
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b0c:	f000 f92f 	bl	8002d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b10:	4a06      	ldr	r2, [pc, #24]	; (8002b2c <HAL_InitTick+0x5c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000008 	.word	0x20000008
 8002b2c:	20000004 	.word	0x20000004

08002b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_IncTick+0x20>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_IncTick+0x24>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <HAL_IncTick+0x24>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000008 	.word	0x20000008
 8002b54:	20000198 	.word	0x20000198

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000198 	.word	0x20000198

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_Delay+0x44>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b96:	bf00      	nop
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000008 	.word	0x20000008

08002bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bea:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <__NVIC_GetPriorityGrouping+0x18>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 0307 	and.w	r3, r3, #7
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	db0b      	blt.n	8002c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	4907      	ldr	r1, [pc, #28]	; (8002c54 <__NVIC_EnableIRQ+0x38>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db0a      	blt.n	8002c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	490c      	ldr	r1, [pc, #48]	; (8002ca4 <__NVIC_SetPriority+0x4c>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c80:	e00a      	b.n	8002c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4908      	ldr	r1, [pc, #32]	; (8002ca8 <__NVIC_SetPriority+0x50>)
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	3b04      	subs	r3, #4
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	440b      	add	r3, r1
 8002c96:	761a      	strb	r2, [r3, #24]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000e100 	.word	0xe000e100
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f1c3 0307 	rsb	r3, r3, #7
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	bf28      	it	cs
 8002cca:	2304      	movcs	r3, #4
 8002ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d902      	bls.n	8002cdc <NVIC_EncodePriority+0x30>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3b03      	subs	r3, #3
 8002cda:	e000      	b.n	8002cde <NVIC_EncodePriority+0x32>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	401a      	ands	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	43d9      	mvns	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	4313      	orrs	r3, r2
         );
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3724      	adds	r7, #36	; 0x24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d24:	d301      	bcc.n	8002d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00f      	b.n	8002d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <SysTick_Config+0x40>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d32:	210f      	movs	r1, #15
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d38:	f7ff ff8e 	bl	8002c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <SysTick_Config+0x40>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <SysTick_Config+0x40>)
 8002d44:	2207      	movs	r2, #7
 8002d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	e000e010 	.word	0xe000e010

08002d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ff29 	bl	8002bb8 <__NVIC_SetPriorityGrouping>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d80:	f7ff ff3e 	bl	8002c00 <__NVIC_GetPriorityGrouping>
 8002d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f7ff ff8e 	bl	8002cac <NVIC_EncodePriority>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff5d 	bl	8002c58 <__NVIC_SetPriority>
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff31 	bl	8002c1c <__NVIC_EnableIRQ>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ffa2 	bl	8002d14 <SysTick_Config>
 8002dd0:	4603      	mov	r3, r0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff feb6 	bl	8002b58 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e099      	b.n	8002f2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e18:	e00f      	b.n	8002e3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e1a:	f7ff fe9d 	bl	8002b58 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d908      	bls.n	8002e3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e078      	b.n	8002f2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e8      	bne.n	8002e1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4b38      	ldr	r3, [pc, #224]	; (8002f34 <HAL_DMA_Init+0x158>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d107      	bne.n	8002ea4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0307 	bic.w	r3, r3, #7
 8002eba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d117      	bne.n	8002efe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00e      	beq.n	8002efe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fb01 	bl	80034e8 <DMA_CheckFifoParam>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002efa:	2301      	movs	r3, #1
 8002efc:	e016      	b.n	8002f2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fab8 	bl	800347c <DMA_CalcBaseAndBitshift>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	223f      	movs	r2, #63	; 0x3f
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	f010803f 	.word	0xf010803f

08002f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_DMA_Start_IT+0x26>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e040      	b.n	8002fe0 <HAL_DMA_Start_IT+0xa8>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d12f      	bne.n	8002fd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2202      	movs	r2, #2
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fa4a 	bl	8003420 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	223f      	movs	r2, #63	; 0x3f
 8002f92:	409a      	lsls	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0216 	orr.w	r2, r2, #22
 8002fa6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e005      	b.n	8002fde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ff6:	f7ff fdaf 	bl	8002b58 <HAL_GetTick>
 8002ffa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d008      	beq.n	800301a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e052      	b.n	80030c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0216 	bic.w	r2, r2, #22
 8003028:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003038:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <HAL_DMA_Abort+0x62>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0208 	bic.w	r2, r2, #8
 8003058:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306a:	e013      	b.n	8003094 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800306c:	f7ff fd74 	bl	8002b58 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b05      	cmp	r3, #5
 8003078:	d90c      	bls.n	8003094 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2203      	movs	r2, #3
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e015      	b.n	80030c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e4      	bne.n	800306c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	223f      	movs	r2, #63	; 0x3f
 80030a8:	409a      	lsls	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d004      	beq.n	80030e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00c      	b.n	8003100 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2205      	movs	r2, #5
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003118:	4b8e      	ldr	r3, [pc, #568]	; (8003354 <HAL_DMA_IRQHandler+0x248>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a8e      	ldr	r2, [pc, #568]	; (8003358 <HAL_DMA_IRQHandler+0x24c>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	0a9b      	lsrs	r3, r3, #10
 8003124:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	2208      	movs	r2, #8
 8003138:	409a      	lsls	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01a      	beq.n	8003178 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0204 	bic.w	r2, r2, #4
 800315e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	2208      	movs	r2, #8
 8003166:	409a      	lsls	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	f043 0201 	orr.w	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	2201      	movs	r2, #1
 800317e:	409a      	lsls	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	2201      	movs	r2, #1
 800319c:	409a      	lsls	r2, r3
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	f043 0202 	orr.w	r2, r3, #2
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	2204      	movs	r2, #4
 80031b4:	409a      	lsls	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d012      	beq.n	80031e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00b      	beq.n	80031e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	2204      	movs	r2, #4
 80031d2:	409a      	lsls	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	f043 0204 	orr.w	r2, r3, #4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	2210      	movs	r2, #16
 80031ea:	409a      	lsls	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d043      	beq.n	800327c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d03c      	beq.n	800327c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	2210      	movs	r2, #16
 8003208:	409a      	lsls	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d018      	beq.n	800324e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d108      	bne.n	800323c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d024      	beq.n	800327c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
 800323a:	e01f      	b.n	800327c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01b      	beq.n	800327c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
 800324c:	e016      	b.n	800327c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d107      	bne.n	800326c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0208 	bic.w	r2, r2, #8
 800326a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	2220      	movs	r2, #32
 8003282:	409a      	lsls	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 808f 	beq.w	80033ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8087 	beq.w	80033ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	2220      	movs	r2, #32
 80032a4:	409a      	lsls	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b05      	cmp	r3, #5
 80032b4:	d136      	bne.n	8003324 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0216 	bic.w	r2, r2, #22
 80032c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d103      	bne.n	80032e6 <HAL_DMA_IRQHandler+0x1da>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d007      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0208 	bic.w	r2, r2, #8
 80032f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	223f      	movs	r2, #63	; 0x3f
 80032fc:	409a      	lsls	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003316:	2b00      	cmp	r3, #0
 8003318:	d07e      	beq.n	8003418 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
        }
        return;
 8003322:	e079      	b.n	8003418 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01d      	beq.n	800336e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10d      	bne.n	800335c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	2b00      	cmp	r3, #0
 8003346:	d031      	beq.n	80033ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
 8003350:	e02c      	b.n	80033ac <HAL_DMA_IRQHandler+0x2a0>
 8003352:	bf00      	nop
 8003354:	20000000 	.word	0x20000000
 8003358:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d023      	beq.n	80033ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
 800336c:	e01e      	b.n	80033ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10f      	bne.n	800339c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0210 	bic.w	r2, r2, #16
 800338a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d032      	beq.n	800341a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d022      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2205      	movs	r2, #5
 80033c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	3301      	adds	r3, #1
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d307      	bcc.n	80033f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f2      	bne.n	80033d8 <HAL_DMA_IRQHandler+0x2cc>
 80033f2:	e000      	b.n	80033f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d005      	beq.n	800341a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4798      	blx	r3
 8003416:	e000      	b.n	800341a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003418:	bf00      	nop
    }
  }
}
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800343c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d108      	bne.n	8003460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800345e:	e007      	b.n	8003470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	60da      	str	r2, [r3, #12]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	3b10      	subs	r3, #16
 800348c:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <DMA_CalcBaseAndBitshift+0x64>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003496:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d909      	bls.n	80034be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034b2:	f023 0303 	bic.w	r3, r3, #3
 80034b6:	1d1a      	adds	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	659a      	str	r2, [r3, #88]	; 0x58
 80034bc:	e007      	b.n	80034ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034c6:	f023 0303 	bic.w	r3, r3, #3
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	aaaaaaab 	.word	0xaaaaaaab
 80034e4:	08005fc8 	.word	0x08005fc8

080034e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11f      	bne.n	8003542 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d856      	bhi.n	80035b6 <DMA_CheckFifoParam+0xce>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <DMA_CheckFifoParam+0x28>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003521 	.word	0x08003521
 8003514:	08003533 	.word	0x08003533
 8003518:	08003521 	.word	0x08003521
 800351c:	080035b7 	.word	0x080035b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d046      	beq.n	80035ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003530:	e043      	b.n	80035ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800353a:	d140      	bne.n	80035be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003540:	e03d      	b.n	80035be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354a:	d121      	bne.n	8003590 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d837      	bhi.n	80035c2 <DMA_CheckFifoParam+0xda>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <DMA_CheckFifoParam+0x70>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	08003569 	.word	0x08003569
 800355c:	0800356f 	.word	0x0800356f
 8003560:	08003569 	.word	0x08003569
 8003564:	08003581 	.word	0x08003581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
      break;
 800356c:	e030      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d025      	beq.n	80035c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800357e:	e022      	b.n	80035c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003588:	d11f      	bne.n	80035ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800358e:	e01c      	b.n	80035ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d903      	bls.n	800359e <DMA_CheckFifoParam+0xb6>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d003      	beq.n	80035a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800359c:	e018      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
      break;
 80035a2:	e015      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e00b      	b.n	80035ce <DMA_CheckFifoParam+0xe6>
      break;
 80035b6:	bf00      	nop
 80035b8:	e00a      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ba:	bf00      	nop
 80035bc:	e008      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035be:	bf00      	nop
 80035c0:	e006      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035c2:	bf00      	nop
 80035c4:	e004      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035c6:	bf00      	nop
 80035c8:	e002      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ce:	bf00      	nop
    }
  } 
  
  return status; 
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop

080035e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e165      	b.n	80038c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	f040 8154 	bne.w	80038c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d005      	beq.n	8003632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800362e:	2b02      	cmp	r3, #2
 8003630:	d130      	bne.n	8003694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 0201 	and.w	r2, r3, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b03      	cmp	r3, #3
 800369e:	d017      	beq.n	80036d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d123      	bne.n	8003724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	08da      	lsrs	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3208      	adds	r2, #8
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0203 	and.w	r2, r3, #3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80ae 	beq.w	80038c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b5d      	ldr	r3, [pc, #372]	; (80038e0 <HAL_GPIO_Init+0x300>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a5c      	ldr	r2, [pc, #368]	; (80038e0 <HAL_GPIO_Init+0x300>)
 8003770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b5a      	ldr	r3, [pc, #360]	; (80038e0 <HAL_GPIO_Init+0x300>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003782:	4a58      	ldr	r2, [pc, #352]	; (80038e4 <HAL_GPIO_Init+0x304>)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	3302      	adds	r3, #2
 800378a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	220f      	movs	r2, #15
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4013      	ands	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4f      	ldr	r2, [pc, #316]	; (80038e8 <HAL_GPIO_Init+0x308>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d025      	beq.n	80037fa <HAL_GPIO_Init+0x21a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4e      	ldr	r2, [pc, #312]	; (80038ec <HAL_GPIO_Init+0x30c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01f      	beq.n	80037f6 <HAL_GPIO_Init+0x216>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a4d      	ldr	r2, [pc, #308]	; (80038f0 <HAL_GPIO_Init+0x310>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d019      	beq.n	80037f2 <HAL_GPIO_Init+0x212>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a4c      	ldr	r2, [pc, #304]	; (80038f4 <HAL_GPIO_Init+0x314>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <HAL_GPIO_Init+0x20e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a4b      	ldr	r2, [pc, #300]	; (80038f8 <HAL_GPIO_Init+0x318>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00d      	beq.n	80037ea <HAL_GPIO_Init+0x20a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a4a      	ldr	r2, [pc, #296]	; (80038fc <HAL_GPIO_Init+0x31c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <HAL_GPIO_Init+0x206>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a49      	ldr	r2, [pc, #292]	; (8003900 <HAL_GPIO_Init+0x320>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_GPIO_Init+0x202>
 80037de:	2306      	movs	r3, #6
 80037e0:	e00c      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037e2:	2307      	movs	r3, #7
 80037e4:	e00a      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037e6:	2305      	movs	r3, #5
 80037e8:	e008      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037ea:	2304      	movs	r3, #4
 80037ec:	e006      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037ee:	2303      	movs	r3, #3
 80037f0:	e004      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e002      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_GPIO_Init+0x21c>
 80037fa:	2300      	movs	r3, #0
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	f002 0203 	and.w	r2, r2, #3
 8003802:	0092      	lsls	r2, r2, #2
 8003804:	4093      	lsls	r3, r2
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800380c:	4935      	ldr	r1, [pc, #212]	; (80038e4 <HAL_GPIO_Init+0x304>)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	3302      	adds	r3, #2
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800381a:	4b3a      	ldr	r3, [pc, #232]	; (8003904 <HAL_GPIO_Init+0x324>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800383e:	4a31      	ldr	r2, [pc, #196]	; (8003904 <HAL_GPIO_Init+0x324>)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003844:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <HAL_GPIO_Init+0x324>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003868:	4a26      	ldr	r2, [pc, #152]	; (8003904 <HAL_GPIO_Init+0x324>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800386e:	4b25      	ldr	r3, [pc, #148]	; (8003904 <HAL_GPIO_Init+0x324>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003892:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <HAL_GPIO_Init+0x324>)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003898:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HAL_GPIO_Init+0x324>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038bc:	4a11      	ldr	r2, [pc, #68]	; (8003904 <HAL_GPIO_Init+0x324>)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3301      	adds	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	f67f ae96 	bls.w	80035fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3724      	adds	r7, #36	; 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40013800 	.word	0x40013800
 80038e8:	40020000 	.word	0x40020000
 80038ec:	40020400 	.word	0x40020400
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40020c00 	.word	0x40020c00
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40021400 	.word	0x40021400
 8003900:	40021800 	.word	0x40021800
 8003904:	40013c00 	.word	0x40013c00

08003908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	807b      	strh	r3, [r7, #2]
 8003914:	4613      	mov	r3, r2
 8003916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003918:	787b      	ldrb	r3, [r7, #1]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800391e:	887a      	ldrh	r2, [r7, #2]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003924:	e003      	b.n	800392e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	041a      	lsls	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	619a      	str	r2, [r3, #24]
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800394c:	887a      	ldrh	r2, [r7, #2]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4013      	ands	r3, r2
 8003952:	041a      	lsls	r2, r3, #16
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	43d9      	mvns	r1, r3
 8003958:	887b      	ldrh	r3, [r7, #2]
 800395a:	400b      	ands	r3, r1
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	619a      	str	r2, [r3, #24]
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0cc      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003984:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d90c      	bls.n	80039ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0b8      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c4:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a58      	ldr	r2, [pc, #352]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a52      	ldr	r2, [pc, #328]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	494d      	ldr	r1, [pc, #308]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d044      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d119      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e07f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d003      	beq.n	8003a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2e:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e06f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e067      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f023 0203 	bic.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4934      	ldr	r1, [pc, #208]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a60:	f7ff f87a 	bl	8002b58 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a68:	f7ff f876 	bl	8002b58 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e04f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 020c 	and.w	r2, r3, #12
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1eb      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d20c      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e032      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4916      	ldr	r1, [pc, #88]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	490e      	ldr	r1, [pc, #56]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003af6:	f000 f855 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	490a      	ldr	r1, [pc, #40]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	5ccb      	ldrb	r3, [r1, r3]
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe ffda 	bl	8002ad0 <HAL_InitTick>

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40023c00 	.word	0x40023c00
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	08005fb0 	.word	0x08005fb0
 8003b34:	20000000 	.word	0x20000000
 8003b38:	20000004 	.word	0x20000004

08003b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000000 	.word	0x20000000

08003b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b58:	f7ff fff0 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	0a9b      	lsrs	r3, r3, #10
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	4903      	ldr	r1, [pc, #12]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6a:	5ccb      	ldrb	r3, [r1, r3]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40023800 	.word	0x40023800
 8003b78:	08005fc0 	.word	0x08005fc0

08003b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b80:	f7ff ffdc 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0b5b      	lsrs	r3, r3, #13
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08005fc0 	.word	0x08005fc0

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba8:	b0ae      	sub	sp, #184	; 0xb8
 8003baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bca:	4bcb      	ldr	r3, [pc, #812]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	f200 8206 	bhi.w	8003fe4 <HAL_RCC_GetSysClockFreq+0x440>
 8003bd8:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003c15 	.word	0x08003c15
 8003be4:	08003fe5 	.word	0x08003fe5
 8003be8:	08003fe5 	.word	0x08003fe5
 8003bec:	08003fe5 	.word	0x08003fe5
 8003bf0:	08003c1d 	.word	0x08003c1d
 8003bf4:	08003fe5 	.word	0x08003fe5
 8003bf8:	08003fe5 	.word	0x08003fe5
 8003bfc:	08003fe5 	.word	0x08003fe5
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003fe5 	.word	0x08003fe5
 8003c08:	08003fe5 	.word	0x08003fe5
 8003c0c:	08003fe5 	.word	0x08003fe5
 8003c10:	08003e15 	.word	0x08003e15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4bb9      	ldr	r3, [pc, #740]	; (8003efc <HAL_RCC_GetSysClockFreq+0x358>)
 8003c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c1a:	e1e7      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c1c:	4bb8      	ldr	r3, [pc, #736]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c22:	e1e3      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c24:	4bb4      	ldr	r3, [pc, #720]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c30:	4bb1      	ldr	r3, [pc, #708]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d071      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3c:	4bae      	ldr	r3, [pc, #696]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c48:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c62:	4622      	mov	r2, r4
 8003c64:	462b      	mov	r3, r5
 8003c66:	f04f 0000 	mov.w	r0, #0
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	0159      	lsls	r1, r3, #5
 8003c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c74:	0150      	lsls	r0, r2, #5
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	1a51      	subs	r1, r2, r1
 8003c7e:	6439      	str	r1, [r7, #64]	; 0x40
 8003c80:	4629      	mov	r1, r5
 8003c82:	eb63 0301 	sbc.w	r3, r3, r1
 8003c86:	647b      	str	r3, [r7, #68]	; 0x44
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003c94:	4649      	mov	r1, r9
 8003c96:	018b      	lsls	r3, r1, #6
 8003c98:	4641      	mov	r1, r8
 8003c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	018a      	lsls	r2, r1, #6
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	1a51      	subs	r1, r2, r1
 8003ca6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ca8:	4649      	mov	r1, r9
 8003caa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	00cb      	lsls	r3, r1, #3
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	00ca      	lsls	r2, r1, #3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd6:	462b      	mov	r3, r5
 8003cd8:	460a      	mov	r2, r1
 8003cda:	eb42 0303 	adc.w	r3, r2, r3
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cec:	4629      	mov	r1, r5
 8003cee:	024b      	lsls	r3, r1, #9
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	024a      	lsls	r2, r1, #9
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d10:	f7fc fa8a 	bl	8000228 <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4613      	mov	r3, r2
 8003d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d1e:	e067      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d20:	4b75      	ldr	r3, [pc, #468]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	099b      	lsrs	r3, r3, #6
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d2c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d38:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d42:	4622      	mov	r2, r4
 8003d44:	462b      	mov	r3, r5
 8003d46:	f04f 0000 	mov.w	r0, #0
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	0159      	lsls	r1, r3, #5
 8003d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d54:	0150      	lsls	r0, r2, #5
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	1a51      	subs	r1, r2, r1
 8003d5e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d60:	4629      	mov	r1, r5
 8003d62:	eb63 0301 	sbc.w	r3, r3, r1
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003d74:	4649      	mov	r1, r9
 8003d76:	018b      	lsls	r3, r1, #6
 8003d78:	4641      	mov	r1, r8
 8003d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d7e:	4641      	mov	r1, r8
 8003d80:	018a      	lsls	r2, r1, #6
 8003d82:	4641      	mov	r1, r8
 8003d84:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d88:	4649      	mov	r1, r9
 8003d8a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da2:	4692      	mov	sl, r2
 8003da4:	469b      	mov	fp, r3
 8003da6:	4623      	mov	r3, r4
 8003da8:	eb1a 0303 	adds.w	r3, sl, r3
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	462b      	mov	r3, r5
 8003db0:	eb4b 0303 	adc.w	r3, fp, r3
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	028b      	lsls	r3, r1, #10
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dcc:	4621      	mov	r1, r4
 8003dce:	028a      	lsls	r2, r1, #10
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dd8:	2200      	movs	r2, #0
 8003dda:	673b      	str	r3, [r7, #112]	; 0x70
 8003ddc:	677a      	str	r2, [r7, #116]	; 0x74
 8003dde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003de2:	f7fc fa21 	bl	8000228 <__aeabi_uldivmod>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4613      	mov	r3, r2
 8003dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003df0:	4b41      	ldr	r3, [pc, #260]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e12:	e0eb      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e14:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e20:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d06b      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2c:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	2200      	movs	r2, #0
 8003e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e40:	2300      	movs	r3, #0
 8003e42:	667b      	str	r3, [r7, #100]	; 0x64
 8003e44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003e48:	4622      	mov	r2, r4
 8003e4a:	462b      	mov	r3, r5
 8003e4c:	f04f 0000 	mov.w	r0, #0
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	0159      	lsls	r1, r3, #5
 8003e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e5a:	0150      	lsls	r0, r2, #5
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4621      	mov	r1, r4
 8003e62:	1a51      	subs	r1, r2, r1
 8003e64:	61b9      	str	r1, [r7, #24]
 8003e66:	4629      	mov	r1, r5
 8003e68:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e7a:	4659      	mov	r1, fp
 8003e7c:	018b      	lsls	r3, r1, #6
 8003e7e:	4651      	mov	r1, sl
 8003e80:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e84:	4651      	mov	r1, sl
 8003e86:	018a      	lsls	r2, r1, #6
 8003e88:	4651      	mov	r1, sl
 8003e8a:	ebb2 0801 	subs.w	r8, r2, r1
 8003e8e:	4659      	mov	r1, fp
 8003e90:	eb63 0901 	sbc.w	r9, r3, r1
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ea0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ea4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea8:	4690      	mov	r8, r2
 8003eaa:	4699      	mov	r9, r3
 8003eac:	4623      	mov	r3, r4
 8003eae:	eb18 0303 	adds.w	r3, r8, r3
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	eb49 0303 	adc.w	r3, r9, r3
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ec8:	4629      	mov	r1, r5
 8003eca:	024b      	lsls	r3, r1, #9
 8003ecc:	4621      	mov	r1, r4
 8003ece:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	024a      	lsls	r2, r1, #9
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ede:	2200      	movs	r2, #0
 8003ee0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ee2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ee4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ee8:	f7fc f99e 	bl	8000228 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ef6:	e065      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x420>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f04:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x458>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	099b      	lsrs	r3, r3, #6
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	4611      	mov	r1, r2
 8003f10:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f14:	653b      	str	r3, [r7, #80]	; 0x50
 8003f16:	2300      	movs	r3, #0
 8003f18:	657b      	str	r3, [r7, #84]	; 0x54
 8003f1a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f1e:	4642      	mov	r2, r8
 8003f20:	464b      	mov	r3, r9
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	0159      	lsls	r1, r3, #5
 8003f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f30:	0150      	lsls	r0, r2, #5
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4641      	mov	r1, r8
 8003f38:	1a51      	subs	r1, r2, r1
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f50:	4659      	mov	r1, fp
 8003f52:	018b      	lsls	r3, r1, #6
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	018a      	lsls	r2, r1, #6
 8003f5e:	4651      	mov	r1, sl
 8003f60:	1a54      	subs	r4, r2, r1
 8003f62:	4659      	mov	r1, fp
 8003f64:	eb63 0501 	sbc.w	r5, r3, r1
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	00eb      	lsls	r3, r5, #3
 8003f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f76:	00e2      	lsls	r2, r4, #3
 8003f78:	4614      	mov	r4, r2
 8003f7a:	461d      	mov	r5, r3
 8003f7c:	4643      	mov	r3, r8
 8003f7e:	18e3      	adds	r3, r4, r3
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	464b      	mov	r3, r9
 8003f84:	eb45 0303 	adc.w	r3, r5, r3
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f96:	4629      	mov	r1, r5
 8003f98:	028b      	lsls	r3, r1, #10
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	028a      	lsls	r2, r1, #10
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fac:	2200      	movs	r2, #0
 8003fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fb0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003fb2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fb6:	f7fc f937 	bl	8000228 <__aeabi_uldivmod>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x458>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	0f1b      	lsrs	r3, r3, #28
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fe2:	e003      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	37b8      	adds	r7, #184	; 0xb8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023800 	.word	0x40023800
 8004000:	00f42400 	.word	0x00f42400

08004004 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e28d      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8083 	beq.w	800412a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004024:	4b94      	ldr	r3, [pc, #592]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b04      	cmp	r3, #4
 800402e:	d019      	beq.n	8004064 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004030:	4b91      	ldr	r3, [pc, #580]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004038:	2b08      	cmp	r3, #8
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800403c:	4b8e      	ldr	r3, [pc, #568]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004048:	d00c      	beq.n	8004064 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	4b8b      	ldr	r3, [pc, #556]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d112      	bne.n	800407c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004056:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004062:	d10b      	bne.n	800407c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	4b84      	ldr	r3, [pc, #528]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d05b      	beq.n	8004128 <HAL_RCC_OscConfig+0x124>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d157      	bne.n	8004128 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e25a      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004084:	d106      	bne.n	8004094 <HAL_RCC_OscConfig+0x90>
 8004086:	4b7c      	ldr	r3, [pc, #496]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7b      	ldr	r2, [pc, #492]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e01d      	b.n	80040d0 <HAL_RCC_OscConfig+0xcc>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0xb4>
 800409e:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a75      	ldr	r2, [pc, #468]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b73      	ldr	r3, [pc, #460]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a72      	ldr	r2, [pc, #456]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0xcc>
 80040b8:	4b6f      	ldr	r3, [pc, #444]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a6e      	ldr	r2, [pc, #440]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b6c      	ldr	r3, [pc, #432]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6b      	ldr	r2, [pc, #428]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d013      	beq.n	8004100 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe fd3e 	bl	8002b58 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fe fd3a 	bl	8002b58 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e21f      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	4b61      	ldr	r3, [pc, #388]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0xdc>
 80040fe:	e014      	b.n	800412a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe fd2a 	bl	8002b58 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7fe fd26 	bl	8002b58 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e20b      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	4b57      	ldr	r3, [pc, #348]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x104>
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d06f      	beq.n	8004216 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004136:	4b50      	ldr	r3, [pc, #320]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b00      	cmp	r3, #0
 8004140:	d017      	beq.n	8004172 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004142:	4b4d      	ldr	r3, [pc, #308]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800414a:	2b08      	cmp	r3, #8
 800414c:	d105      	bne.n	800415a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800414e:	4b4a      	ldr	r3, [pc, #296]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d11c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004166:	4b44      	ldr	r3, [pc, #272]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d116      	bne.n	80041a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x186>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e1d3      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418a:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4937      	ldr	r1, [pc, #220]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419e:	e03a      	b.n	8004216 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a8:	4b34      	ldr	r3, [pc, #208]	; (800427c <HAL_RCC_OscConfig+0x278>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fe fcd3 	bl	8002b58 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b6:	f7fe fccf 	bl	8002b58 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e1b4      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b28      	ldr	r3, [pc, #160]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4925      	ldr	r1, [pc, #148]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]
 80041e8:	e015      	b.n	8004216 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ea:	4b24      	ldr	r3, [pc, #144]	; (800427c <HAL_RCC_OscConfig+0x278>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fe fcb2 	bl	8002b58 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f8:	f7fe fcae 	bl	8002b58 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e193      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d036      	beq.n	8004290 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_RCC_OscConfig+0x27c>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fe fc92 	bl	8002b58 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004238:	f7fe fc8e 	bl	8002b58 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e173      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCC_OscConfig+0x274>)
 800424c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x234>
 8004256:	e01b      	b.n	8004290 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_OscConfig+0x27c>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425e:	f7fe fc7b 	bl	8002b58 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	e00e      	b.n	8004284 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004266:	f7fe fc77 	bl	8002b58 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d907      	bls.n	8004284 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e15c      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
 8004278:	40023800 	.word	0x40023800
 800427c:	42470000 	.word	0x42470000
 8004280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	4b8a      	ldr	r3, [pc, #552]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ea      	bne.n	8004266 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8097 	beq.w	80043cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a2:	4b83      	ldr	r3, [pc, #524]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	4b7f      	ldr	r3, [pc, #508]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4a7e      	ldr	r2, [pc, #504]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
 80042be:	4b7c      	ldr	r3, [pc, #496]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ce:	4b79      	ldr	r3, [pc, #484]	; (80044b4 <HAL_RCC_OscConfig+0x4b0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d118      	bne.n	800430c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042da:	4b76      	ldr	r3, [pc, #472]	; (80044b4 <HAL_RCC_OscConfig+0x4b0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a75      	ldr	r2, [pc, #468]	; (80044b4 <HAL_RCC_OscConfig+0x4b0>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e6:	f7fe fc37 	bl	8002b58 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ee:	f7fe fc33 	bl	8002b58 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e118      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004300:	4b6c      	ldr	r3, [pc, #432]	; (80044b4 <HAL_RCC_OscConfig+0x4b0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d106      	bne.n	8004322 <HAL_RCC_OscConfig+0x31e>
 8004314:	4b66      	ldr	r3, [pc, #408]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a65      	ldr	r2, [pc, #404]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	e01c      	b.n	800435c <HAL_RCC_OscConfig+0x358>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d10c      	bne.n	8004344 <HAL_RCC_OscConfig+0x340>
 800432a:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a60      	ldr	r2, [pc, #384]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	6713      	str	r3, [r2, #112]	; 0x70
 8004336:	4b5e      	ldr	r3, [pc, #376]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	4a5d      	ldr	r2, [pc, #372]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6713      	str	r3, [r2, #112]	; 0x70
 8004342:	e00b      	b.n	800435c <HAL_RCC_OscConfig+0x358>
 8004344:	4b5a      	ldr	r3, [pc, #360]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a59      	ldr	r2, [pc, #356]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
 8004350:	4b57      	ldr	r3, [pc, #348]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	4a56      	ldr	r2, [pc, #344]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004356:	f023 0304 	bic.w	r3, r3, #4
 800435a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d015      	beq.n	8004390 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fe fbf8 	bl	8002b58 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fe fbf4 	bl	8002b58 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	; 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e0d7      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004382:	4b4b      	ldr	r3, [pc, #300]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ee      	beq.n	800436c <HAL_RCC_OscConfig+0x368>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fe fbe2 	bl	8002b58 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fe fbde 	bl	8002b58 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0c1      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ae:	4b40      	ldr	r3, [pc, #256]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1ee      	bne.n	8004398 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c0:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	4a3a      	ldr	r2, [pc, #232]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80ad 	beq.w	8004530 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d060      	beq.n	80044a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d145      	bne.n	8004476 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ea:	4b33      	ldr	r3, [pc, #204]	; (80044b8 <HAL_RCC_OscConfig+0x4b4>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe fbb2 	bl	8002b58 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fe fbae 	bl	8002b58 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e093      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	3b01      	subs	r3, #1
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	071b      	lsls	r3, r3, #28
 8004442:	491b      	ldr	r1, [pc, #108]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCC_OscConfig+0x4b4>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fe fb83 	bl	8002b58 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004456:	f7fe fb7f 	bl	8002b58 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e064      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x452>
 8004474:	e05c      	b.n	8004530 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004476:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <HAL_RCC_OscConfig+0x4b4>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fe fb6c 	bl	8002b58 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004484:	f7fe fb68 	bl	8002b58 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e04d      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_RCC_OscConfig+0x4ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x480>
 80044a2:	e045      	b.n	8004530 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e040      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40007000 	.word	0x40007000
 80044b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044bc:	4b1f      	ldr	r3, [pc, #124]	; (800453c <HAL_RCC_OscConfig+0x538>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d030      	beq.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d129      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d122      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d119      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	3b01      	subs	r3, #1
 8004506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d10f      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800

08004540 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e03f      	b.n	80045d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fe f900 	bl	800276c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004582:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 ff43 	bl	8005410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08c      	sub	sp, #48	; 0x30
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d165      	bne.n	80046c2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_UART_Transmit_DMA+0x26>
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e05e      	b.n	80046c4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_UART_Transmit_DMA+0x38>
 8004610:	2302      	movs	r3, #2
 8004612:	e057      	b.n	80046c4 <HAL_UART_Transmit_DMA+0xe8>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	88fa      	ldrh	r2, [r7, #6]
 800462c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2221      	movs	r2, #33	; 0x21
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	4a22      	ldr	r2, [pc, #136]	; (80046cc <HAL_UART_Transmit_DMA+0xf0>)
 8004642:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004648:	4a21      	ldr	r2, [pc, #132]	; (80046d0 <HAL_UART_Transmit_DMA+0xf4>)
 800464a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004650:	4a20      	ldr	r2, [pc, #128]	; (80046d4 <HAL_UART_Transmit_DMA+0xf8>)
 8004652:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	2200      	movs	r2, #0
 800465a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800465c:	f107 0308 	add.w	r3, r7, #8
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3304      	adds	r3, #4
 8004670:	461a      	mov	r2, r3
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	f7fe fc60 	bl	8002f38 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004680:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3314      	adds	r3, #20
 8004690:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	617b      	str	r3, [r7, #20]
   return(result);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3314      	adds	r3, #20
 80046a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046aa:	627a      	str	r2, [r7, #36]	; 0x24
 80046ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6a39      	ldr	r1, [r7, #32]
 80046b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e5      	bne.n	800468a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3730      	adds	r7, #48	; 0x30
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	08004ca9 	.word	0x08004ca9
 80046d0:	08004d43 	.word	0x08004d43
 80046d4:	08004ebb 	.word	0x08004ebb

080046d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d11d      	bne.n	800472e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_UART_Receive_DMA+0x26>
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e016      	b.n	8004730 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_UART_Receive_DMA+0x38>
 800470c:	2302      	movs	r3, #2
 800470e:	e00f      	b.n	8004730 <HAL_UART_Receive_DMA+0x58>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	461a      	mov	r2, r3
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fc13 	bl	8004f50 <UART_Start_Receive_DMA>
 800472a:	4603      	mov	r3, r0
 800472c:	e000      	b.n	8004730 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b0ba      	sub	sp, #232	; 0xe8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800475e:	2300      	movs	r3, #0
 8004760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004764:	2300      	movs	r3, #0
 8004766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10f      	bne.n	800479e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <HAL_UART_IRQHandler+0x66>
 800478a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fd7f 	bl	800529a <UART_Receive_IT>
      return;
 800479c:	e256      	b.n	8004c4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800479e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80de 	beq.w	8004964 <HAL_UART_IRQHandler+0x22c>
 80047a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80d1 	beq.w	8004964 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_UART_IRQHandler+0xae>
 80047ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_UART_IRQHandler+0xd2>
 80047f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f043 0202 	orr.w	r2, r3, #2
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_UART_IRQHandler+0xf6>
 8004816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f043 0204 	orr.w	r2, r3, #4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d011      	beq.n	800485e <HAL_UART_IRQHandler+0x126>
 800483a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d105      	bne.n	8004852 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f043 0208 	orr.w	r2, r3, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 81ed 	beq.w	8004c42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_UART_IRQHandler+0x14e>
 8004874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fd0a 	bl	800529a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <HAL_UART_IRQHandler+0x17a>
 80048aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d04f      	beq.n	8004952 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fc12 	bl	80050dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c2:	2b40      	cmp	r3, #64	; 0x40
 80048c4:	d141      	bne.n	800494a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800490a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1d9      	bne.n	80048c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	2b00      	cmp	r3, #0
 8004918:	d013      	beq.n	8004942 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	4a7d      	ldr	r2, [pc, #500]	; (8004b14 <HAL_UART_IRQHandler+0x3dc>)
 8004920:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe fbce 	bl	80030c8 <HAL_DMA_Abort_IT>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d016      	beq.n	8004960 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800493c:	4610      	mov	r0, r2
 800493e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	e00e      	b.n	8004960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f99a 	bl	8004c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004948:	e00a      	b.n	8004960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f996 	bl	8004c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	e006      	b.n	8004960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f992 	bl	8004c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800495e:	e170      	b.n	8004c42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004960:	bf00      	nop
    return;
 8004962:	e16e      	b.n	8004c42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	2b01      	cmp	r3, #1
 800496a:	f040 814a 	bne.w	8004c02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800496e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8143 	beq.w	8004c02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800497c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 813c 	beq.w	8004c02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	f040 80b4 	bne.w	8004b18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8140 	beq.w	8004c46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ce:	429a      	cmp	r2, r3
 80049d0:	f080 8139 	bcs.w	8004c46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e6:	f000 8088 	beq.w	8004afa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1d9      	bne.n	80049ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3314      	adds	r3, #20
 8004a3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a48:	f023 0301 	bic.w	r3, r3, #1
 8004a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3314      	adds	r3, #20
 8004a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e1      	bne.n	8004a36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3314      	adds	r3, #20
 8004a78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3314      	adds	r3, #20
 8004a92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e3      	bne.n	8004a72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aca:	f023 0310 	bic.w	r3, r3, #16
 8004ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004adc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ade:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e3      	bne.n	8004ab8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe fa77 	bl	8002fe8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	4619      	mov	r1, r3
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f8c0 	bl	8004c90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b10:	e099      	b.n	8004c46 <HAL_UART_IRQHandler+0x50e>
 8004b12:	bf00      	nop
 8004b14:	080051a3 	.word	0x080051a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 808b 	beq.w	8004c4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8086 	beq.w	8004c4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b62:	647a      	str	r2, [r7, #68]	; 0x44
 8004b64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e3      	bne.n	8004b3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3314      	adds	r3, #20
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	623b      	str	r3, [r7, #32]
   return(result);
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3314      	adds	r3, #20
 8004b96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b9a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e3      	bne.n	8004b76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0310 	bic.w	r3, r3, #16
 8004bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	330c      	adds	r3, #12
 8004bdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004be0:	61fa      	str	r2, [r7, #28]
 8004be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	69b9      	ldr	r1, [r7, #24]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	617b      	str	r3, [r7, #20]
   return(result);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e3      	bne.n	8004bbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f848 	bl	8004c90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c00:	e023      	b.n	8004c4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_UART_IRQHandler+0x4ea>
 8004c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fad5 	bl	80051ca <UART_Transmit_IT>
    return;
 8004c20:	e014      	b.n	8004c4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00e      	beq.n	8004c4c <HAL_UART_IRQHandler+0x514>
 8004c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb15 	bl	800526a <UART_EndTransmit_IT>
    return;
 8004c40:	e004      	b.n	8004c4c <HAL_UART_IRQHandler+0x514>
    return;
 8004c42:	bf00      	nop
 8004c44:	e002      	b.n	8004c4c <HAL_UART_IRQHandler+0x514>
      return;
 8004c46:	bf00      	nop
 8004c48:	e000      	b.n	8004c4c <HAL_UART_IRQHandler+0x514>
      return;
 8004c4a:	bf00      	nop
  }
}
 8004c4c:	37e8      	adds	r7, #232	; 0xe8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop

08004c54 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b090      	sub	sp, #64	; 0x40
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d137      	bne.n	8004d34 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3314      	adds	r3, #20
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3314      	adds	r3, #20
 8004ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cea:	633a      	str	r2, [r7, #48]	; 0x30
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e5      	bne.n	8004cca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	330c      	adds	r3, #12
 8004d04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d1e:	61fa      	str	r2, [r7, #28]
 8004d20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	69b9      	ldr	r1, [r7, #24]
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e5      	bne.n	8004cfe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d32:	e002      	b.n	8004d3a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004d34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d36:	f7fb ffcd 	bl	8000cd4 <HAL_UART_TxCpltCallback>
}
 8004d3a:	bf00      	nop
 8004d3c:	3740      	adds	r7, #64	; 0x40
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff ff7f 	bl	8004c54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b09c      	sub	sp, #112	; 0x70
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d172      	bne.n	8004e60 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004da0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004da2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	667b      	str	r3, [r7, #100]	; 0x64
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004dd4:	647a      	str	r2, [r7, #68]	; 0x44
 8004dd6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3314      	adds	r3, #20
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	623b      	str	r3, [r7, #32]
   return(result);
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8004e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3314      	adds	r3, #20
 8004e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e08:	633a      	str	r2, [r7, #48]	; 0x30
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e5      	bne.n	8004de8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d119      	bne.n	8004e60 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0310 	bic.w	r3, r3, #16
 8004e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e4c:	61fa      	str	r2, [r7, #28]
 8004e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69b9      	ldr	r1, [r7, #24]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d106      	bne.n	8004e76 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e70:	f7ff ff0e 	bl	8004c90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e74:	e002      	b.n	8004e7c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004e76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e78:	f7fb ff98 	bl	8000dac <HAL_UART_RxCpltCallback>
}
 8004e7c:	bf00      	nop
 8004e7e:	3770      	adds	r7, #112	; 0x70
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d108      	bne.n	8004eac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff fef3 	bl	8004c90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004eaa:	e002      	b.n	8004eb2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff fedb 	bl	8004c68 <HAL_UART_RxHalfCpltCallback>
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	bf0c      	ite	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2300      	movne	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b21      	cmp	r3, #33	; 0x21
 8004eec:	d108      	bne.n	8004f00 <UART_DMAError+0x46>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004efa:	68b8      	ldr	r0, [r7, #8]
 8004efc:	f000 f8c6 	bl	800508c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b22      	cmp	r3, #34	; 0x22
 8004f20:	d108      	bne.n	8004f34 <UART_DMAError+0x7a>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f2e:	68b8      	ldr	r0, [r7, #8]
 8004f30:	f000 f8d4 	bl	80050dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f043 0210 	orr.w	r2, r3, #16
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f40:	68b8      	ldr	r0, [r7, #8]
 8004f42:	f7ff fe9b 	bl	8004c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b098      	sub	sp, #96	; 0x60
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2222      	movs	r2, #34	; 0x22
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	4a40      	ldr	r2, [pc, #256]	; (8005080 <UART_Start_Receive_DMA+0x130>)
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	4a3f      	ldr	r2, [pc, #252]	; (8005084 <UART_Start_Receive_DMA+0x134>)
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	4a3e      	ldr	r2, [pc, #248]	; (8005088 <UART_Start_Receive_DMA+0x138>)
 8004f8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	2200      	movs	r2, #0
 8004f96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004f98:	f107 0308 	add.w	r3, r7, #8
 8004f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	f7fd ffc2 	bl	8002f38 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d019      	beq.n	800500e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ffa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ffc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e5      	bne.n	8004fda <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3314      	adds	r3, #20
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	657b      	str	r3, [r7, #84]	; 0x54
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3314      	adds	r3, #20
 800502c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800502e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e5      	bne.n	800500e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	617b      	str	r3, [r7, #20]
   return(result);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005058:	653b      	str	r3, [r7, #80]	; 0x50
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3314      	adds	r3, #20
 8005060:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005062:	627a      	str	r2, [r7, #36]	; 0x24
 8005064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6a39      	ldr	r1, [r7, #32]
 8005068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e5      	bne.n	8005042 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3760      	adds	r7, #96	; 0x60
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	08004d5f 	.word	0x08004d5f
 8005084:	08004e85 	.word	0x08004e85
 8005088:	08004ebb 	.word	0x08004ebb

0800508c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800508c:	b480      	push	{r7}
 800508e:	b089      	sub	sp, #36	; 0x24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	61ba      	str	r2, [r7, #24]
 80050b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	613b      	str	r3, [r7, #16]
   return(result);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80050d0:	bf00      	nop
 80050d2:	3724      	adds	r7, #36	; 0x24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b095      	sub	sp, #84	; 0x54
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005104:	643a      	str	r2, [r7, #64]	; 0x40
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800510a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	61fb      	str	r3, [r7, #28]
   return(result);
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800513e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e5      	bne.n	8005118 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	2b01      	cmp	r3, #1
 8005152:	d119      	bne.n	8005188 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60bb      	str	r3, [r7, #8]
   return(result);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f023 0310 	bic.w	r3, r3, #16
 800516a:	647b      	str	r3, [r7, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005174:	61ba      	str	r2, [r7, #24]
 8005176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	613b      	str	r3, [r7, #16]
   return(result);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005196:	bf00      	nop
 8005198:	3754      	adds	r7, #84	; 0x54
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fd5d 	bl	8004c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b21      	cmp	r3, #33	; 0x21
 80051dc:	d13e      	bne.n	800525c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	d114      	bne.n	8005212 <UART_Transmit_IT+0x48>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d110      	bne.n	8005212 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005204:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	1c9a      	adds	r2, r3, #2
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	621a      	str	r2, [r3, #32]
 8005210:	e008      	b.n	8005224 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6211      	str	r1, [r2, #32]
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29b      	uxth	r3, r3
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4619      	mov	r1, r3
 8005232:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10f      	bne.n	8005258 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005246:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005256:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	e000      	b.n	800525e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
  }
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005280:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fb fd22 	bl	8000cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b08c      	sub	sp, #48	; 0x30
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b22      	cmp	r3, #34	; 0x22
 80052ac:	f040 80ab 	bne.w	8005406 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b8:	d117      	bne.n	80052ea <UART_Receive_IT+0x50>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d113      	bne.n	80052ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d8:	b29a      	uxth	r2, r3
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	1c9a      	adds	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28
 80052e8:	e026      	b.n	8005338 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fc:	d007      	beq.n	800530e <UART_Receive_IT+0x74>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <UART_Receive_IT+0x82>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	b2da      	uxtb	r2, r3
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e008      	b.n	800532e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005328:	b2da      	uxtb	r2, r3
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29b      	uxth	r3, r3
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4619      	mov	r1, r3
 8005346:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005348:	2b00      	cmp	r3, #0
 800534a:	d15a      	bne.n	8005402 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0220 	bic.w	r2, r2, #32
 800535a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800536a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695a      	ldr	r2, [r3, #20]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	2b01      	cmp	r3, #1
 800538a:	d135      	bne.n	80053f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	613b      	str	r3, [r7, #16]
   return(result);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	623a      	str	r2, [r7, #32]
 80053b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	69f9      	ldr	r1, [r7, #28]
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	61bb      	str	r3, [r7, #24]
   return(result);
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d10a      	bne.n	80053ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fc4d 	bl	8004c90 <HAL_UARTEx_RxEventCallback>
 80053f6:	e002      	b.n	80053fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fb fcd7 	bl	8000dac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	e002      	b.n	8005408 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	e000      	b.n	8005408 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005406:	2302      	movs	r3, #2
  }
}
 8005408:	4618      	mov	r0, r3
 800540a:	3730      	adds	r7, #48	; 0x30
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005414:	b0c0      	sub	sp, #256	; 0x100
 8005416:	af00      	add	r7, sp, #0
 8005418:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542c:	68d9      	ldr	r1, [r3, #12]
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	ea40 0301 	orr.w	r3, r0, r1
 8005438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	431a      	orrs	r2, r3
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	431a      	orrs	r2, r3
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005468:	f021 010c 	bic.w	r1, r1, #12
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005476:	430b      	orrs	r3, r1
 8005478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548a:	6999      	ldr	r1, [r3, #24]
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	ea40 0301 	orr.w	r3, r0, r1
 8005496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b8f      	ldr	r3, [pc, #572]	; (80056dc <UART_SetConfig+0x2cc>)
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d005      	beq.n	80054b0 <UART_SetConfig+0xa0>
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b8d      	ldr	r3, [pc, #564]	; (80056e0 <UART_SetConfig+0x2d0>)
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d104      	bne.n	80054ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054b0:	f7fe fb64 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 80054b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054b8:	e003      	b.n	80054c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ba:	f7fe fb4b 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 80054be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054cc:	f040 810c 	bne.w	80056e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054e2:	4622      	mov	r2, r4
 80054e4:	462b      	mov	r3, r5
 80054e6:	1891      	adds	r1, r2, r2
 80054e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80054ea:	415b      	adcs	r3, r3
 80054ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054f2:	4621      	mov	r1, r4
 80054f4:	eb12 0801 	adds.w	r8, r2, r1
 80054f8:	4629      	mov	r1, r5
 80054fa:	eb43 0901 	adc.w	r9, r3, r1
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800550a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800550e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005512:	4690      	mov	r8, r2
 8005514:	4699      	mov	r9, r3
 8005516:	4623      	mov	r3, r4
 8005518:	eb18 0303 	adds.w	r3, r8, r3
 800551c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005520:	462b      	mov	r3, r5
 8005522:	eb49 0303 	adc.w	r3, r9, r3
 8005526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005536:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800553a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800553e:	460b      	mov	r3, r1
 8005540:	18db      	adds	r3, r3, r3
 8005542:	653b      	str	r3, [r7, #80]	; 0x50
 8005544:	4613      	mov	r3, r2
 8005546:	eb42 0303 	adc.w	r3, r2, r3
 800554a:	657b      	str	r3, [r7, #84]	; 0x54
 800554c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005554:	f7fa fe68 	bl	8000228 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4b61      	ldr	r3, [pc, #388]	; (80056e4 <UART_SetConfig+0x2d4>)
 800555e:	fba3 2302 	umull	r2, r3, r3, r2
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	011c      	lsls	r4, r3, #4
 8005566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556a:	2200      	movs	r2, #0
 800556c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005570:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	1891      	adds	r1, r2, r2
 800557e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005580:	415b      	adcs	r3, r3
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005588:	4641      	mov	r1, r8
 800558a:	eb12 0a01 	adds.w	sl, r2, r1
 800558e:	4649      	mov	r1, r9
 8005590:	eb43 0b01 	adc.w	fp, r3, r1
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a8:	4692      	mov	sl, r2
 80055aa:	469b      	mov	fp, r3
 80055ac:	4643      	mov	r3, r8
 80055ae:	eb1a 0303 	adds.w	r3, sl, r3
 80055b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055b6:	464b      	mov	r3, r9
 80055b8:	eb4b 0303 	adc.w	r3, fp, r3
 80055bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055d4:	460b      	mov	r3, r1
 80055d6:	18db      	adds	r3, r3, r3
 80055d8:	643b      	str	r3, [r7, #64]	; 0x40
 80055da:	4613      	mov	r3, r2
 80055dc:	eb42 0303 	adc.w	r3, r2, r3
 80055e0:	647b      	str	r3, [r7, #68]	; 0x44
 80055e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055ea:	f7fa fe1d 	bl	8000228 <__aeabi_uldivmod>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <UART_SetConfig+0x2d4>)
 80055f6:	fba3 2301 	umull	r2, r3, r3, r1
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2264      	movs	r2, #100	; 0x64
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	1acb      	subs	r3, r1, r3
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800560a:	4b36      	ldr	r3, [pc, #216]	; (80056e4 <UART_SetConfig+0x2d4>)
 800560c:	fba3 2302 	umull	r2, r3, r3, r2
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005618:	441c      	add	r4, r3
 800561a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561e:	2200      	movs	r2, #0
 8005620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005624:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800562c:	4642      	mov	r2, r8
 800562e:	464b      	mov	r3, r9
 8005630:	1891      	adds	r1, r2, r2
 8005632:	63b9      	str	r1, [r7, #56]	; 0x38
 8005634:	415b      	adcs	r3, r3
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800563c:	4641      	mov	r1, r8
 800563e:	1851      	adds	r1, r2, r1
 8005640:	6339      	str	r1, [r7, #48]	; 0x30
 8005642:	4649      	mov	r1, r9
 8005644:	414b      	adcs	r3, r1
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005654:	4659      	mov	r1, fp
 8005656:	00cb      	lsls	r3, r1, #3
 8005658:	4651      	mov	r1, sl
 800565a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800565e:	4651      	mov	r1, sl
 8005660:	00ca      	lsls	r2, r1, #3
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	4603      	mov	r3, r0
 8005668:	4642      	mov	r2, r8
 800566a:	189b      	adds	r3, r3, r2
 800566c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005670:	464b      	mov	r3, r9
 8005672:	460a      	mov	r2, r1
 8005674:	eb42 0303 	adc.w	r3, r2, r3
 8005678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005688:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800568c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005690:	460b      	mov	r3, r1
 8005692:	18db      	adds	r3, r3, r3
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
 8005696:	4613      	mov	r3, r2
 8005698:	eb42 0303 	adc.w	r3, r2, r3
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800569e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056a6:	f7fa fdbf 	bl	8000228 <__aeabi_uldivmod>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <UART_SetConfig+0x2d4>)
 80056b0:	fba3 1302 	umull	r1, r3, r3, r2
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	2164      	movs	r1, #100	; 0x64
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	3332      	adds	r3, #50	; 0x32
 80056c2:	4a08      	ldr	r2, [pc, #32]	; (80056e4 <UART_SetConfig+0x2d4>)
 80056c4:	fba2 2303 	umull	r2, r3, r2, r3
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	f003 0207 	and.w	r2, r3, #7
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4422      	add	r2, r4
 80056d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056d8:	e106      	b.n	80058e8 <UART_SetConfig+0x4d8>
 80056da:	bf00      	nop
 80056dc:	40011000 	.word	0x40011000
 80056e0:	40011400 	.word	0x40011400
 80056e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ec:	2200      	movs	r2, #0
 80056ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056fa:	4642      	mov	r2, r8
 80056fc:	464b      	mov	r3, r9
 80056fe:	1891      	adds	r1, r2, r2
 8005700:	6239      	str	r1, [r7, #32]
 8005702:	415b      	adcs	r3, r3
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800570a:	4641      	mov	r1, r8
 800570c:	1854      	adds	r4, r2, r1
 800570e:	4649      	mov	r1, r9
 8005710:	eb43 0501 	adc.w	r5, r3, r1
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	00eb      	lsls	r3, r5, #3
 800571e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005722:	00e2      	lsls	r2, r4, #3
 8005724:	4614      	mov	r4, r2
 8005726:	461d      	mov	r5, r3
 8005728:	4643      	mov	r3, r8
 800572a:	18e3      	adds	r3, r4, r3
 800572c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005730:	464b      	mov	r3, r9
 8005732:	eb45 0303 	adc.w	r3, r5, r3
 8005736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005746:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005756:	4629      	mov	r1, r5
 8005758:	008b      	lsls	r3, r1, #2
 800575a:	4621      	mov	r1, r4
 800575c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005760:	4621      	mov	r1, r4
 8005762:	008a      	lsls	r2, r1, #2
 8005764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005768:	f7fa fd5e 	bl	8000228 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4b60      	ldr	r3, [pc, #384]	; (80058f4 <UART_SetConfig+0x4e4>)
 8005772:	fba3 2302 	umull	r2, r3, r3, r2
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	011c      	lsls	r4, r3, #4
 800577a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800577e:	2200      	movs	r2, #0
 8005780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005784:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	1891      	adds	r1, r2, r2
 8005792:	61b9      	str	r1, [r7, #24]
 8005794:	415b      	adcs	r3, r3
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800579c:	4641      	mov	r1, r8
 800579e:	1851      	adds	r1, r2, r1
 80057a0:	6139      	str	r1, [r7, #16]
 80057a2:	4649      	mov	r1, r9
 80057a4:	414b      	adcs	r3, r1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057b4:	4659      	mov	r1, fp
 80057b6:	00cb      	lsls	r3, r1, #3
 80057b8:	4651      	mov	r1, sl
 80057ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057be:	4651      	mov	r1, sl
 80057c0:	00ca      	lsls	r2, r1, #3
 80057c2:	4610      	mov	r0, r2
 80057c4:	4619      	mov	r1, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	4642      	mov	r2, r8
 80057ca:	189b      	adds	r3, r3, r2
 80057cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057d0:	464b      	mov	r3, r9
 80057d2:	460a      	mov	r2, r1
 80057d4:	eb42 0303 	adc.w	r3, r2, r3
 80057d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80057e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057f4:	4649      	mov	r1, r9
 80057f6:	008b      	lsls	r3, r1, #2
 80057f8:	4641      	mov	r1, r8
 80057fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057fe:	4641      	mov	r1, r8
 8005800:	008a      	lsls	r2, r1, #2
 8005802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005806:	f7fa fd0f 	bl	8000228 <__aeabi_uldivmod>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4611      	mov	r1, r2
 8005810:	4b38      	ldr	r3, [pc, #224]	; (80058f4 <UART_SetConfig+0x4e4>)
 8005812:	fba3 2301 	umull	r2, r3, r3, r1
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	2264      	movs	r2, #100	; 0x64
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	1acb      	subs	r3, r1, r3
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	3332      	adds	r3, #50	; 0x32
 8005824:	4a33      	ldr	r2, [pc, #204]	; (80058f4 <UART_SetConfig+0x4e4>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005830:	441c      	add	r4, r3
 8005832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005836:	2200      	movs	r2, #0
 8005838:	673b      	str	r3, [r7, #112]	; 0x70
 800583a:	677a      	str	r2, [r7, #116]	; 0x74
 800583c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005840:	4642      	mov	r2, r8
 8005842:	464b      	mov	r3, r9
 8005844:	1891      	adds	r1, r2, r2
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	415b      	adcs	r3, r3
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005850:	4641      	mov	r1, r8
 8005852:	1851      	adds	r1, r2, r1
 8005854:	6039      	str	r1, [r7, #0]
 8005856:	4649      	mov	r1, r9
 8005858:	414b      	adcs	r3, r1
 800585a:	607b      	str	r3, [r7, #4]
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005868:	4659      	mov	r1, fp
 800586a:	00cb      	lsls	r3, r1, #3
 800586c:	4651      	mov	r1, sl
 800586e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005872:	4651      	mov	r1, sl
 8005874:	00ca      	lsls	r2, r1, #3
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	4603      	mov	r3, r0
 800587c:	4642      	mov	r2, r8
 800587e:	189b      	adds	r3, r3, r2
 8005880:	66bb      	str	r3, [r7, #104]	; 0x68
 8005882:	464b      	mov	r3, r9
 8005884:	460a      	mov	r2, r1
 8005886:	eb42 0303 	adc.w	r3, r2, r3
 800588a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	663b      	str	r3, [r7, #96]	; 0x60
 8005896:	667a      	str	r2, [r7, #100]	; 0x64
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058a4:	4649      	mov	r1, r9
 80058a6:	008b      	lsls	r3, r1, #2
 80058a8:	4641      	mov	r1, r8
 80058aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ae:	4641      	mov	r1, r8
 80058b0:	008a      	lsls	r2, r1, #2
 80058b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058b6:	f7fa fcb7 	bl	8000228 <__aeabi_uldivmod>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <UART_SetConfig+0x4e4>)
 80058c0:	fba3 1302 	umull	r1, r3, r3, r2
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	2164      	movs	r1, #100	; 0x64
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	3332      	adds	r3, #50	; 0x32
 80058d2:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <UART_SetConfig+0x4e4>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	f003 020f 	and.w	r2, r3, #15
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4422      	add	r2, r4
 80058e6:	609a      	str	r2, [r3, #8]
}
 80058e8:	bf00      	nop
 80058ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058ee:	46bd      	mov	sp, r7
 80058f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058f4:	51eb851f 	.word	0x51eb851f

080058f8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80058f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80058fa:	2400      	movs	r4, #0
 80058fc:	2310      	movs	r3, #16
 80058fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005902:	6803      	ldr	r3, [r0, #0]
 8005904:	4615      	mov	r5, r2
 8005906:	699e      	ldr	r6, [r3, #24]
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	466b      	mov	r3, sp
 800590c:	e9cd 4400 	strd	r4, r4, [sp]
 8005910:	47b0      	blx	r6
 8005912:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005916:	f003 0306 	and.w	r3, r3, #6
 800591a:	2b06      	cmp	r3, #6
 800591c:	bf03      	ittte	eq
 800591e:	9b00      	ldreq	r3, [sp, #0]
 8005920:	602b      	streq	r3, [r5, #0]
 8005922:	2001      	moveq	r0, #1
 8005924:	4620      	movne	r0, r4
 8005926:	b004      	add	sp, #16
 8005928:	bd70      	pop	{r4, r5, r6, pc}

0800592a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800592a:	9800      	ldr	r0, [sp, #0]
 800592c:	4290      	cmp	r0, r2
 800592e:	bf14      	ite	ne
 8005930:	2001      	movne	r0, #1
 8005932:	2006      	moveq	r0, #6
 8005934:	4770      	bx	lr
	...

08005938 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8005938:	b510      	push	{r4, lr}
 800593a:	4b03      	ldr	r3, [pc, #12]	; (8005948 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800593c:	6003      	str	r3, [r0, #0]
 800593e:	4604      	mov	r4, r0
 8005940:	f000 f8e5 	bl	8005b0e <_ZNSt9type_infoD1Ev>
 8005944:	4620      	mov	r0, r4
 8005946:	bd10      	pop	{r4, pc}
 8005948:	08006008 	.word	0x08006008

0800594c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800594c:	b510      	push	{r4, lr}
 800594e:	4604      	mov	r4, r0
 8005950:	f7ff fff2 	bl	8005938 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005954:	4620      	mov	r0, r4
 8005956:	2108      	movs	r1, #8
 8005958:	f000 f842 	bl	80059e0 <_ZdlPvj>
 800595c:	4620      	mov	r0, r4
 800595e:	bd10      	pop	{r4, pc}

08005960 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005964:	461f      	mov	r7, r3
 8005966:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800596a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800596e:	4598      	cmp	r8, r3
 8005970:	4606      	mov	r6, r0
 8005972:	4615      	mov	r5, r2
 8005974:	d107      	bne.n	8005986 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005976:	9907      	ldr	r1, [sp, #28]
 8005978:	f000 f8cc 	bl	8005b14 <_ZNKSt9type_infoeqERKS_>
 800597c:	b118      	cbz	r0, 8005986 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800597e:	7165      	strb	r5, [r4, #5]
 8005980:	2000      	movs	r0, #0
 8005982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005986:	4639      	mov	r1, r7
 8005988:	4630      	mov	r0, r6
 800598a:	f000 f8c3 	bl	8005b14 <_ZNKSt9type_infoeqERKS_>
 800598e:	2800      	cmp	r0, #0
 8005990:	d0f6      	beq.n	8005980 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8005992:	2301      	movs	r3, #1
 8005994:	f8c4 8000 	str.w	r8, [r4]
 8005998:	7125      	strb	r5, [r4, #4]
 800599a:	71a3      	strb	r3, [r4, #6]
 800599c:	e7f0      	b.n	8005980 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800599e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800599e:	b538      	push	{r3, r4, r5, lr}
 80059a0:	4615      	mov	r5, r2
 80059a2:	461c      	mov	r4, r3
 80059a4:	f000 f8b6 	bl	8005b14 <_ZNKSt9type_infoeqERKS_>
 80059a8:	b120      	cbz	r0, 80059b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80059aa:	2308      	movs	r3, #8
 80059ac:	60e3      	str	r3, [r4, #12]
 80059ae:	2306      	movs	r3, #6
 80059b0:	6025      	str	r5, [r4, #0]
 80059b2:	7123      	strb	r3, [r4, #4]
 80059b4:	bd38      	pop	{r3, r4, r5, pc}

080059b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80059b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059b8:	4605      	mov	r5, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	9201      	str	r2, [sp, #4]
 80059be:	461e      	mov	r6, r3
 80059c0:	f000 f8a8 	bl	8005b14 <_ZNKSt9type_infoeqERKS_>
 80059c4:	b950      	cbnz	r0, 80059dc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80059c6:	2e03      	cmp	r6, #3
 80059c8:	d808      	bhi.n	80059dc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	9a01      	ldr	r2, [sp, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	4629      	mov	r1, r5
 80059d2:	4620      	mov	r0, r4
 80059d4:	b002      	add	sp, #8
 80059d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059da:	4718      	bx	r3
 80059dc:	b002      	add	sp, #8
 80059de:	bd70      	pop	{r4, r5, r6, pc}

080059e0 <_ZdlPvj>:
 80059e0:	f000 b8c0 	b.w	8005b64 <_ZdlPv>

080059e4 <_ZdaPv>:
 80059e4:	f000 b8be 	b.w	8005b64 <_ZdlPv>

080059e8 <_Znwj>:
 80059e8:	2801      	cmp	r0, #1
 80059ea:	bf38      	it	cc
 80059ec:	2001      	movcc	r0, #1
 80059ee:	b510      	push	{r4, lr}
 80059f0:	4604      	mov	r4, r0
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 f8c8 	bl	8005b88 <malloc>
 80059f8:	b100      	cbz	r0, 80059fc <_Znwj+0x14>
 80059fa:	bd10      	pop	{r4, pc}
 80059fc:	f000 f8b4 	bl	8005b68 <_ZSt15get_new_handlerv>
 8005a00:	b908      	cbnz	r0, 8005a06 <_Znwj+0x1e>
 8005a02:	f000 f8b9 	bl	8005b78 <abort>
 8005a06:	4780      	blx	r0
 8005a08:	e7f3      	b.n	80059f2 <_Znwj+0xa>

08005a0a <_Znaj>:
 8005a0a:	f7ff bfed 	b.w	80059e8 <_Znwj>
	...

08005a10 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005a10:	b510      	push	{r4, lr}
 8005a12:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005a14:	6003      	str	r3, [r0, #0]
 8005a16:	4604      	mov	r4, r0
 8005a18:	f7ff ff8e 	bl	8005938 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	bd10      	pop	{r4, pc}
 8005a20:	08006068 	.word	0x08006068

08005a24 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4604      	mov	r4, r0
 8005a28:	f7ff fff2 	bl	8005a10 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	210c      	movs	r1, #12
 8005a30:	f7ff ffd6 	bl	80059e0 <_ZdlPvj>
 8005a34:	4620      	mov	r0, r4
 8005a36:	bd10      	pop	{r4, pc}

08005a38 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a3a:	9f08      	ldr	r7, [sp, #32]
 8005a3c:	4297      	cmp	r7, r2
 8005a3e:	4605      	mov	r5, r0
 8005a40:	460e      	mov	r6, r1
 8005a42:	4614      	mov	r4, r2
 8005a44:	d00a      	beq.n	8005a5c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8005a46:	68a8      	ldr	r0, [r5, #8]
 8005a48:	6802      	ldr	r2, [r0, #0]
 8005a4a:	9708      	str	r7, [sp, #32]
 8005a4c:	6a15      	ldr	r5, [r2, #32]
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4622      	mov	r2, r4
 8005a52:	46ac      	mov	ip, r5
 8005a54:	b003      	add	sp, #12
 8005a56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005a5a:	4760      	bx	ip
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	9301      	str	r3, [sp, #4]
 8005a60:	f000 f858 	bl	8005b14 <_ZNKSt9type_infoeqERKS_>
 8005a64:	9b01      	ldr	r3, [sp, #4]
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d0ed      	beq.n	8005a46 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8005a6a:	2006      	movs	r0, #6
 8005a6c:	b003      	add	sp, #12
 8005a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005a70:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	460d      	mov	r5, r1
 8005a76:	4619      	mov	r1, r3
 8005a78:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8005a7c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8005a80:	4681      	mov	r9, r0
 8005a82:	4617      	mov	r7, r2
 8005a84:	4698      	mov	r8, r3
 8005a86:	f000 f845 	bl	8005b14 <_ZNKSt9type_infoeqERKS_>
 8005a8a:	b190      	cbz	r0, 8005ab2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8005a8c:	2d00      	cmp	r5, #0
 8005a8e:	6034      	str	r4, [r6, #0]
 8005a90:	7137      	strb	r7, [r6, #4]
 8005a92:	db09      	blt.n	8005aa8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8005a94:	1961      	adds	r1, r4, r5
 8005a96:	458a      	cmp	sl, r1
 8005a98:	bf0c      	ite	eq
 8005a9a:	2106      	moveq	r1, #6
 8005a9c:	2101      	movne	r1, #1
 8005a9e:	71b1      	strb	r1, [r6, #6]
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	b001      	add	sp, #4
 8005aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa8:	3502      	adds	r5, #2
 8005aaa:	d1f9      	bne.n	8005aa0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005aac:	2301      	movs	r3, #1
 8005aae:	71b3      	strb	r3, [r6, #6]
 8005ab0:	e7f6      	b.n	8005aa0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005ab2:	4554      	cmp	r4, sl
 8005ab4:	d106      	bne.n	8005ac4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005ab6:	4659      	mov	r1, fp
 8005ab8:	4648      	mov	r0, r9
 8005aba:	f000 f82b 	bl	8005b14 <_ZNKSt9type_infoeqERKS_>
 8005abe:	b108      	cbz	r0, 8005ac4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005ac0:	7177      	strb	r7, [r6, #5]
 8005ac2:	e7ed      	b.n	8005aa0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005ac4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8005ac8:	6803      	ldr	r3, [r0, #0]
 8005aca:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8005ace:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8005ad2:	69dc      	ldr	r4, [r3, #28]
 8005ad4:	463a      	mov	r2, r7
 8005ad6:	4643      	mov	r3, r8
 8005ad8:	4629      	mov	r1, r5
 8005ada:	46a4      	mov	ip, r4
 8005adc:	b001      	add	sp, #4
 8005ade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae2:	4760      	bx	ip

08005ae4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae8:	4607      	mov	r7, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	4615      	mov	r5, r2
 8005aee:	461e      	mov	r6, r3
 8005af0:	f7ff ff55 	bl	800599e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005af4:	b948      	cbnz	r0, 8005b0a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005af6:	68b8      	ldr	r0, [r7, #8]
 8005af8:	6803      	ldr	r3, [r0, #0]
 8005afa:	699f      	ldr	r7, [r3, #24]
 8005afc:	462a      	mov	r2, r5
 8005afe:	4633      	mov	r3, r6
 8005b00:	4621      	mov	r1, r4
 8005b02:	46bc      	mov	ip, r7
 8005b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b08:	4760      	bx	ip
 8005b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b0e <_ZNSt9type_infoD1Ev>:
 8005b0e:	4770      	bx	lr

08005b10 <_ZNKSt9type_info14__is_pointer_pEv>:
 8005b10:	2000      	movs	r0, #0
 8005b12:	4770      	bx	lr

08005b14 <_ZNKSt9type_infoeqERKS_>:
 8005b14:	4281      	cmp	r1, r0
 8005b16:	b508      	push	{r3, lr}
 8005b18:	d00e      	beq.n	8005b38 <_ZNKSt9type_infoeqERKS_+0x24>
 8005b1a:	6840      	ldr	r0, [r0, #4]
 8005b1c:	7803      	ldrb	r3, [r0, #0]
 8005b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b20:	d00c      	beq.n	8005b3c <_ZNKSt9type_infoeqERKS_+0x28>
 8005b22:	6849      	ldr	r1, [r1, #4]
 8005b24:	780b      	ldrb	r3, [r1, #0]
 8005b26:	2b2a      	cmp	r3, #42	; 0x2a
 8005b28:	bf08      	it	eq
 8005b2a:	3101      	addeq	r1, #1
 8005b2c:	f7fa fb6a 	bl	8000204 <strcmp>
 8005b30:	fab0 f080 	clz	r0, r0
 8005b34:	0940      	lsrs	r0, r0, #5
 8005b36:	bd08      	pop	{r3, pc}
 8005b38:	2001      	movs	r0, #1
 8005b3a:	e7fc      	b.n	8005b36 <_ZNKSt9type_infoeqERKS_+0x22>
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	e7fa      	b.n	8005b36 <_ZNKSt9type_infoeqERKS_+0x22>

08005b40 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8005b40:	684b      	ldr	r3, [r1, #4]
 8005b42:	6043      	str	r3, [r0, #4]
 8005b44:	684b      	ldr	r3, [r1, #4]
 8005b46:	6001      	str	r1, [r0, #0]
 8005b48:	6018      	str	r0, [r3, #0]
 8005b4a:	6048      	str	r0, [r1, #4]
 8005b4c:	4770      	bx	lr

08005b4e <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8005b4e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	4770      	bx	lr

08005b58 <_ZSt17__throw_bad_allocv>:
 8005b58:	b508      	push	{r3, lr}
 8005b5a:	f000 f80d 	bl	8005b78 <abort>

08005b5e <_ZSt28__throw_bad_array_new_lengthv>:
 8005b5e:	b508      	push	{r3, lr}
 8005b60:	f000 f80a 	bl	8005b78 <abort>

08005b64 <_ZdlPv>:
 8005b64:	f000 b818 	b.w	8005b98 <free>

08005b68 <_ZSt15get_new_handlerv>:
 8005b68:	4b02      	ldr	r3, [pc, #8]	; (8005b74 <_ZSt15get_new_handlerv+0xc>)
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	f3bf 8f5b 	dmb	ish
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	2000019c 	.word	0x2000019c

08005b78 <abort>:
 8005b78:	b508      	push	{r3, lr}
 8005b7a:	2006      	movs	r0, #6
 8005b7c:	f000 f8f0 	bl	8005d60 <raise>
 8005b80:	2001      	movs	r0, #1
 8005b82:	f7fc ff07 	bl	8002994 <_exit>
	...

08005b88 <malloc>:
 8005b88:	4b02      	ldr	r3, [pc, #8]	; (8005b94 <malloc+0xc>)
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	f000 b82b 	b.w	8005be8 <_malloc_r>
 8005b92:	bf00      	nop
 8005b94:	20000058 	.word	0x20000058

08005b98 <free>:
 8005b98:	4b02      	ldr	r3, [pc, #8]	; (8005ba4 <free+0xc>)
 8005b9a:	4601      	mov	r1, r0
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	f000 b937 	b.w	8005e10 <_free_r>
 8005ba2:	bf00      	nop
 8005ba4:	20000058 	.word	0x20000058

08005ba8 <sbrk_aligned>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	4e0e      	ldr	r6, [pc, #56]	; (8005be4 <sbrk_aligned+0x3c>)
 8005bac:	460c      	mov	r4, r1
 8005bae:	6831      	ldr	r1, [r6, #0]
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	b911      	cbnz	r1, 8005bba <sbrk_aligned+0x12>
 8005bb4:	f000 f8f0 	bl	8005d98 <_sbrk_r>
 8005bb8:	6030      	str	r0, [r6, #0]
 8005bba:	4621      	mov	r1, r4
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 f8eb 	bl	8005d98 <_sbrk_r>
 8005bc2:	1c43      	adds	r3, r0, #1
 8005bc4:	d00a      	beq.n	8005bdc <sbrk_aligned+0x34>
 8005bc6:	1cc4      	adds	r4, r0, #3
 8005bc8:	f024 0403 	bic.w	r4, r4, #3
 8005bcc:	42a0      	cmp	r0, r4
 8005bce:	d007      	beq.n	8005be0 <sbrk_aligned+0x38>
 8005bd0:	1a21      	subs	r1, r4, r0
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 f8e0 	bl	8005d98 <_sbrk_r>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d101      	bne.n	8005be0 <sbrk_aligned+0x38>
 8005bdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005be0:	4620      	mov	r0, r4
 8005be2:	bd70      	pop	{r4, r5, r6, pc}
 8005be4:	200001a4 	.word	0x200001a4

08005be8 <_malloc_r>:
 8005be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bec:	1ccd      	adds	r5, r1, #3
 8005bee:	f025 0503 	bic.w	r5, r5, #3
 8005bf2:	3508      	adds	r5, #8
 8005bf4:	2d0c      	cmp	r5, #12
 8005bf6:	bf38      	it	cc
 8005bf8:	250c      	movcc	r5, #12
 8005bfa:	2d00      	cmp	r5, #0
 8005bfc:	4607      	mov	r7, r0
 8005bfe:	db01      	blt.n	8005c04 <_malloc_r+0x1c>
 8005c00:	42a9      	cmp	r1, r5
 8005c02:	d905      	bls.n	8005c10 <_malloc_r+0x28>
 8005c04:	230c      	movs	r3, #12
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	2600      	movs	r6, #0
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ce4 <_malloc_r+0xfc>
 8005c14:	f000 f868 	bl	8005ce8 <__malloc_lock>
 8005c18:	f8d8 3000 	ldr.w	r3, [r8]
 8005c1c:	461c      	mov	r4, r3
 8005c1e:	bb5c      	cbnz	r4, 8005c78 <_malloc_r+0x90>
 8005c20:	4629      	mov	r1, r5
 8005c22:	4638      	mov	r0, r7
 8005c24:	f7ff ffc0 	bl	8005ba8 <sbrk_aligned>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	d155      	bne.n	8005cda <_malloc_r+0xf2>
 8005c2e:	f8d8 4000 	ldr.w	r4, [r8]
 8005c32:	4626      	mov	r6, r4
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	d145      	bne.n	8005cc4 <_malloc_r+0xdc>
 8005c38:	2c00      	cmp	r4, #0
 8005c3a:	d048      	beq.n	8005cce <_malloc_r+0xe6>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4638      	mov	r0, r7
 8005c42:	eb04 0903 	add.w	r9, r4, r3
 8005c46:	f000 f8a7 	bl	8005d98 <_sbrk_r>
 8005c4a:	4581      	cmp	r9, r0
 8005c4c:	d13f      	bne.n	8005cce <_malloc_r+0xe6>
 8005c4e:	6821      	ldr	r1, [r4, #0]
 8005c50:	1a6d      	subs	r5, r5, r1
 8005c52:	4629      	mov	r1, r5
 8005c54:	4638      	mov	r0, r7
 8005c56:	f7ff ffa7 	bl	8005ba8 <sbrk_aligned>
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d037      	beq.n	8005cce <_malloc_r+0xe6>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	442b      	add	r3, r5
 8005c62:	6023      	str	r3, [r4, #0]
 8005c64:	f8d8 3000 	ldr.w	r3, [r8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d038      	beq.n	8005cde <_malloc_r+0xf6>
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	42a2      	cmp	r2, r4
 8005c70:	d12b      	bne.n	8005cca <_malloc_r+0xe2>
 8005c72:	2200      	movs	r2, #0
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	e00f      	b.n	8005c98 <_malloc_r+0xb0>
 8005c78:	6822      	ldr	r2, [r4, #0]
 8005c7a:	1b52      	subs	r2, r2, r5
 8005c7c:	d41f      	bmi.n	8005cbe <_malloc_r+0xd6>
 8005c7e:	2a0b      	cmp	r2, #11
 8005c80:	d917      	bls.n	8005cb2 <_malloc_r+0xca>
 8005c82:	1961      	adds	r1, r4, r5
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	6025      	str	r5, [r4, #0]
 8005c88:	bf18      	it	ne
 8005c8a:	6059      	strne	r1, [r3, #4]
 8005c8c:	6863      	ldr	r3, [r4, #4]
 8005c8e:	bf08      	it	eq
 8005c90:	f8c8 1000 	streq.w	r1, [r8]
 8005c94:	5162      	str	r2, [r4, r5]
 8005c96:	604b      	str	r3, [r1, #4]
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f104 060b 	add.w	r6, r4, #11
 8005c9e:	f000 f829 	bl	8005cf4 <__malloc_unlock>
 8005ca2:	f026 0607 	bic.w	r6, r6, #7
 8005ca6:	1d23      	adds	r3, r4, #4
 8005ca8:	1af2      	subs	r2, r6, r3
 8005caa:	d0ae      	beq.n	8005c0a <_malloc_r+0x22>
 8005cac:	1b9b      	subs	r3, r3, r6
 8005cae:	50a3      	str	r3, [r4, r2]
 8005cb0:	e7ab      	b.n	8005c0a <_malloc_r+0x22>
 8005cb2:	42a3      	cmp	r3, r4
 8005cb4:	6862      	ldr	r2, [r4, #4]
 8005cb6:	d1dd      	bne.n	8005c74 <_malloc_r+0x8c>
 8005cb8:	f8c8 2000 	str.w	r2, [r8]
 8005cbc:	e7ec      	b.n	8005c98 <_malloc_r+0xb0>
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	6864      	ldr	r4, [r4, #4]
 8005cc2:	e7ac      	b.n	8005c1e <_malloc_r+0x36>
 8005cc4:	4634      	mov	r4, r6
 8005cc6:	6876      	ldr	r6, [r6, #4]
 8005cc8:	e7b4      	b.n	8005c34 <_malloc_r+0x4c>
 8005cca:	4613      	mov	r3, r2
 8005ccc:	e7cc      	b.n	8005c68 <_malloc_r+0x80>
 8005cce:	230c      	movs	r3, #12
 8005cd0:	603b      	str	r3, [r7, #0]
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f000 f80e 	bl	8005cf4 <__malloc_unlock>
 8005cd8:	e797      	b.n	8005c0a <_malloc_r+0x22>
 8005cda:	6025      	str	r5, [r4, #0]
 8005cdc:	e7dc      	b.n	8005c98 <_malloc_r+0xb0>
 8005cde:	605b      	str	r3, [r3, #4]
 8005ce0:	deff      	udf	#255	; 0xff
 8005ce2:	bf00      	nop
 8005ce4:	200001a0 	.word	0x200001a0

08005ce8 <__malloc_lock>:
 8005ce8:	4801      	ldr	r0, [pc, #4]	; (8005cf0 <__malloc_lock+0x8>)
 8005cea:	f000 b88f 	b.w	8005e0c <__retarget_lock_acquire_recursive>
 8005cee:	bf00      	nop
 8005cf0:	200002e4 	.word	0x200002e4

08005cf4 <__malloc_unlock>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	; (8005cfc <__malloc_unlock+0x8>)
 8005cf6:	f000 b88a 	b.w	8005e0e <__retarget_lock_release_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	200002e4 	.word	0x200002e4

08005d00 <memset>:
 8005d00:	4402      	add	r2, r0
 8005d02:	4603      	mov	r3, r0
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d100      	bne.n	8005d0a <memset+0xa>
 8005d08:	4770      	bx	lr
 8005d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d0e:	e7f9      	b.n	8005d04 <memset+0x4>

08005d10 <_raise_r>:
 8005d10:	291f      	cmp	r1, #31
 8005d12:	b538      	push	{r3, r4, r5, lr}
 8005d14:	4604      	mov	r4, r0
 8005d16:	460d      	mov	r5, r1
 8005d18:	d904      	bls.n	8005d24 <_raise_r+0x14>
 8005d1a:	2316      	movs	r3, #22
 8005d1c:	6003      	str	r3, [r0, #0]
 8005d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005d26:	b112      	cbz	r2, 8005d2e <_raise_r+0x1e>
 8005d28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d2c:	b94b      	cbnz	r3, 8005d42 <_raise_r+0x32>
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f000 f830 	bl	8005d94 <_getpid_r>
 8005d34:	462a      	mov	r2, r5
 8005d36:	4601      	mov	r1, r0
 8005d38:	4620      	mov	r0, r4
 8005d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d3e:	f000 b817 	b.w	8005d70 <_kill_r>
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d00a      	beq.n	8005d5c <_raise_r+0x4c>
 8005d46:	1c59      	adds	r1, r3, #1
 8005d48:	d103      	bne.n	8005d52 <_raise_r+0x42>
 8005d4a:	2316      	movs	r3, #22
 8005d4c:	6003      	str	r3, [r0, #0]
 8005d4e:	2001      	movs	r0, #1
 8005d50:	e7e7      	b.n	8005d22 <_raise_r+0x12>
 8005d52:	2400      	movs	r4, #0
 8005d54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d58:	4628      	mov	r0, r5
 8005d5a:	4798      	blx	r3
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	e7e0      	b.n	8005d22 <_raise_r+0x12>

08005d60 <raise>:
 8005d60:	4b02      	ldr	r3, [pc, #8]	; (8005d6c <raise+0xc>)
 8005d62:	4601      	mov	r1, r0
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	f7ff bfd3 	b.w	8005d10 <_raise_r>
 8005d6a:	bf00      	nop
 8005d6c:	20000058 	.word	0x20000058

08005d70 <_kill_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d07      	ldr	r5, [pc, #28]	; (8005d90 <_kill_r+0x20>)
 8005d74:	2300      	movs	r3, #0
 8005d76:	4604      	mov	r4, r0
 8005d78:	4608      	mov	r0, r1
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	602b      	str	r3, [r5, #0]
 8005d7e:	f7fc fdf9 	bl	8002974 <_kill>
 8005d82:	1c43      	adds	r3, r0, #1
 8005d84:	d102      	bne.n	8005d8c <_kill_r+0x1c>
 8005d86:	682b      	ldr	r3, [r5, #0]
 8005d88:	b103      	cbz	r3, 8005d8c <_kill_r+0x1c>
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	bd38      	pop	{r3, r4, r5, pc}
 8005d8e:	bf00      	nop
 8005d90:	200002e0 	.word	0x200002e0

08005d94 <_getpid_r>:
 8005d94:	f7fc bde6 	b.w	8002964 <_getpid>

08005d98 <_sbrk_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d06      	ldr	r5, [pc, #24]	; (8005db4 <_sbrk_r+0x1c>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fc fe00 	bl	80029a8 <_sbrk>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_sbrk_r+0x1a>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_sbrk_r+0x1a>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	200002e0 	.word	0x200002e0

08005db8 <__errno>:
 8005db8:	4b01      	ldr	r3, [pc, #4]	; (8005dc0 <__errno+0x8>)
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20000058 	.word	0x20000058

08005dc4 <__libc_init_array>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	4d0d      	ldr	r5, [pc, #52]	; (8005dfc <__libc_init_array+0x38>)
 8005dc8:	4c0d      	ldr	r4, [pc, #52]	; (8005e00 <__libc_init_array+0x3c>)
 8005dca:	1b64      	subs	r4, r4, r5
 8005dcc:	10a4      	asrs	r4, r4, #2
 8005dce:	2600      	movs	r6, #0
 8005dd0:	42a6      	cmp	r6, r4
 8005dd2:	d109      	bne.n	8005de8 <__libc_init_array+0x24>
 8005dd4:	4d0b      	ldr	r5, [pc, #44]	; (8005e04 <__libc_init_array+0x40>)
 8005dd6:	4c0c      	ldr	r4, [pc, #48]	; (8005e08 <__libc_init_array+0x44>)
 8005dd8:	f000 f866 	bl	8005ea8 <_init>
 8005ddc:	1b64      	subs	r4, r4, r5
 8005dde:	10a4      	asrs	r4, r4, #2
 8005de0:	2600      	movs	r6, #0
 8005de2:	42a6      	cmp	r6, r4
 8005de4:	d105      	bne.n	8005df2 <__libc_init_array+0x2e>
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dec:	4798      	blx	r3
 8005dee:	3601      	adds	r6, #1
 8005df0:	e7ee      	b.n	8005dd0 <__libc_init_array+0xc>
 8005df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df6:	4798      	blx	r3
 8005df8:	3601      	adds	r6, #1
 8005dfa:	e7f2      	b.n	8005de2 <__libc_init_array+0x1e>
 8005dfc:	080060ac 	.word	0x080060ac
 8005e00:	080060ac 	.word	0x080060ac
 8005e04:	080060ac 	.word	0x080060ac
 8005e08:	080060b4 	.word	0x080060b4

08005e0c <__retarget_lock_acquire_recursive>:
 8005e0c:	4770      	bx	lr

08005e0e <__retarget_lock_release_recursive>:
 8005e0e:	4770      	bx	lr

08005e10 <_free_r>:
 8005e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e12:	2900      	cmp	r1, #0
 8005e14:	d044      	beq.n	8005ea0 <_free_r+0x90>
 8005e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e1a:	9001      	str	r0, [sp, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e22:	bfb8      	it	lt
 8005e24:	18e4      	addlt	r4, r4, r3
 8005e26:	f7ff ff5f 	bl	8005ce8 <__malloc_lock>
 8005e2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <_free_r+0x94>)
 8005e2c:	9801      	ldr	r0, [sp, #4]
 8005e2e:	6813      	ldr	r3, [r2, #0]
 8005e30:	b933      	cbnz	r3, 8005e40 <_free_r+0x30>
 8005e32:	6063      	str	r3, [r4, #4]
 8005e34:	6014      	str	r4, [r2, #0]
 8005e36:	b003      	add	sp, #12
 8005e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e3c:	f7ff bf5a 	b.w	8005cf4 <__malloc_unlock>
 8005e40:	42a3      	cmp	r3, r4
 8005e42:	d908      	bls.n	8005e56 <_free_r+0x46>
 8005e44:	6825      	ldr	r5, [r4, #0]
 8005e46:	1961      	adds	r1, r4, r5
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	bf01      	itttt	eq
 8005e4c:	6819      	ldreq	r1, [r3, #0]
 8005e4e:	685b      	ldreq	r3, [r3, #4]
 8005e50:	1949      	addeq	r1, r1, r5
 8005e52:	6021      	streq	r1, [r4, #0]
 8005e54:	e7ed      	b.n	8005e32 <_free_r+0x22>
 8005e56:	461a      	mov	r2, r3
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	b10b      	cbz	r3, 8005e60 <_free_r+0x50>
 8005e5c:	42a3      	cmp	r3, r4
 8005e5e:	d9fa      	bls.n	8005e56 <_free_r+0x46>
 8005e60:	6811      	ldr	r1, [r2, #0]
 8005e62:	1855      	adds	r5, r2, r1
 8005e64:	42a5      	cmp	r5, r4
 8005e66:	d10b      	bne.n	8005e80 <_free_r+0x70>
 8005e68:	6824      	ldr	r4, [r4, #0]
 8005e6a:	4421      	add	r1, r4
 8005e6c:	1854      	adds	r4, r2, r1
 8005e6e:	42a3      	cmp	r3, r4
 8005e70:	6011      	str	r1, [r2, #0]
 8005e72:	d1e0      	bne.n	8005e36 <_free_r+0x26>
 8005e74:	681c      	ldr	r4, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	6053      	str	r3, [r2, #4]
 8005e7a:	440c      	add	r4, r1
 8005e7c:	6014      	str	r4, [r2, #0]
 8005e7e:	e7da      	b.n	8005e36 <_free_r+0x26>
 8005e80:	d902      	bls.n	8005e88 <_free_r+0x78>
 8005e82:	230c      	movs	r3, #12
 8005e84:	6003      	str	r3, [r0, #0]
 8005e86:	e7d6      	b.n	8005e36 <_free_r+0x26>
 8005e88:	6825      	ldr	r5, [r4, #0]
 8005e8a:	1961      	adds	r1, r4, r5
 8005e8c:	428b      	cmp	r3, r1
 8005e8e:	bf04      	itt	eq
 8005e90:	6819      	ldreq	r1, [r3, #0]
 8005e92:	685b      	ldreq	r3, [r3, #4]
 8005e94:	6063      	str	r3, [r4, #4]
 8005e96:	bf04      	itt	eq
 8005e98:	1949      	addeq	r1, r1, r5
 8005e9a:	6021      	streq	r1, [r4, #0]
 8005e9c:	6054      	str	r4, [r2, #4]
 8005e9e:	e7ca      	b.n	8005e36 <_free_r+0x26>
 8005ea0:	b003      	add	sp, #12
 8005ea2:	bd30      	pop	{r4, r5, pc}
 8005ea4:	200001a0 	.word	0x200001a0

08005ea8 <_init>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr

08005eb4 <_fini>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr
